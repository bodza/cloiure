(ns #_cloiure.slang cloiure.kernel
    (:refer-clojure :exclude [when when-not]))

(defmacro ยง [& _])
(defmacro ร [& _])

(defmacro def-
    ([s] `(def ~(vary-meta s assoc :private true)))
    ([s i] `(def ~(vary-meta s assoc :private true) ~i)))

(defmacro any
    ([f x y] `(~f ~x ~y))
    ([f x y & z] `(let [f# ~f x# ~x _# (any f# x# ~y)] (if _# _# (any f# x# ~@z)))))
(defn =?
    ([x y] (if (sequential? x) (if (seq x) (or (=? (first x) y) (recur (rest x) y)) false) (if (sequential? y) (recur y x) (= x y))))
    ([x y & z] (=? x (cons y z))))

(letfn [(w' [w] (if (= '=> (first w)) (rest w) (cons nil w)))]
    (defmacro     when       [y & w] (let [[_ & w] (w' w)]            `(if     ~y (do ~@w) ~_)))
    (defmacro     when-not   [y & w] (let [[_ & w] (w' w)]            `(if-not ~y (do ~@w) ~_)))
    (defmacro let-when     [x y & w] (let [[_ & w] (w' w)] `(let [~@x] (if     ~y (do ~@w) ~_))))
    (defmacro let-when-not [x y & w] (let [[_ & w] (w' w)] `(let [~@x] (if-not ~y (do ~@w) ~_)))))

(letfn [(z' [z] (cond (vector? z) `((recur ~@z)) (some? z) `((recur ~z))))
        (w' [w] (if (= '=> (first w)) (rest w) (cons nil w)))
        (l' [x y z w] (let [x (cond (vector? x) x (symbol? x) [x x] :else [`_# x]) z (z' z) [_ & w] (w' w)] `(loop [~@x] (if ~y (do ~@w ~@z) ~_))))]
    (defmacro loop-when [x y & w] (l' x y nil w))
    (defmacro loop-when-recur [x y z & w] (l' x y z w)))

(letfn [(z' [z] (cond (vector? z) `(recur ~@z) (some? z) `(recur ~z)))
        (w' [w] (if (= '=> (first w)) (second w)))]
    (defmacro recur-if [y z & w] (let [z (z' z) _ (w' w)] `(if ~y ~z ~_))))

(def % rem)
(def & bit-and)
(def | bit-or)
(def << bit-shift-left)
(def >> bit-shift-right)
(def >>> unsigned-bit-shift-right)

(defmacro cast' [_ x] #_(ensure symbol? _) `(do ~x))

(defmacro java-ns [name & _] #_(ensure symbol? name) `(do ~@_))
(defmacro class-ns [name & _] #_(ensure symbol? name) `(do ~@_))

#_(ns cloiure.kernel
    (:refer-clojure :exclude [when when-not])
    (:use [cloiure slang]))

(import
    [java.io File FileInputStream FileNotFoundException FileOutputStream InputStreamReader IOException LineNumberReader OutputStreamWriter PrintWriter PushbackReader Reader StringReader StringWriter Writer]
  #_[java.lang Character Class Exception IllegalArgumentException IllegalStateException Integer Number NumberFormatException Object RuntimeException String StringBuilder Throwable UnsupportedOperationException]
    [java.lang.ref Reference ReferenceQueue SoftReference WeakReference]
    [java.lang.reflect Array Constructor Field InvocationHandler #_Method Modifier]
    [java.math BigDecimal BigInteger MathContext]
    [java.net JarURLConnection MalformedURLException URL URLClassLoader URLConnection]
    [java.nio ByteBuffer]
    [java.nio.charset Charset]
    [java.security AccessController PrivilegedAction]
    [java.util ArrayList Arrays Collection Comparator Enumeration HashMap HashSet Iterator LinkedList List Map Map$Entry NoSuchElementException Queue RandomAccess Set Stack TreeMap]
    [java.util.concurrent Callable ConcurrentHashMap ConcurrentMap CountDownLatch Executor ExecutorService Executors ThreadFactory TimeUnit]
    [java.util.concurrent.atomic AtomicBoolean AtomicInteger AtomicLong AtomicReference]
    [java.util.concurrent.locks ReentrantReadWriteLock]
    [java.util.regex Matcher Pattern]
    [cloiure.asm Attribute ByteVector ClassVisitor ClassWriter FieldVisitor Label MethodVisitor Opcodes Type]
    [cloiure.asm.commons GeneratorAdapter Method]
)

(declare AFn'new AFunction'new AMapEntry'new APersistentMap'new APersistentVector'new AReference'new ASeq'new ATransientMap'new AbortException'new AbstractMap'new ArgReader'new AssignParser'new Attribute'new BigDecimalOps'new BigIntOps'new BodyParser'new CaseParser'new ConditionalReader'new ConstantParser'new CtorReader'new DefParser'new DefaultComparator'new DeftypeParser'new DoubleOps'new EdnCharacterReader'new EdnCommentReader'new EdnDiscardReader'new EdnDispatchReader'new EdnListReader'new EdnMapReader'new EdnMetaReader'new EdnNamespaceMapReader'new EdnSetReader'new EdnStringReader'new EdnSymbolicValueReader'new EdnUnmatchedDelimiterReader'new EdnUnreadableReader'new EdnVectorReader'new EmptyBuffer'new EnumerationSeqState'new Error'new EvalReader'new Exception'new FieldExpr'new FnReader'new HostExpr'new HostParser'new IfParser'new IllegalArgumentException'new ImportParser'new IteratorSeqState'new LetFnParser'new LetParser'new LispCharacterReader'new LispCommentReader'new LispDiscardReader'new LispDispatchReader'new LispListReader'new LispMapReader'new LispMetaReader'new LispNamespaceMapReader'new LispSetReader'new LispStringReader'new LispSymbolicValueReader'new LispUnmatchedDelimiterReader'new LispUnreadableReader'new LispVectorReader'new LiteralExpr'new LockingTransaction'new LongOps'new MethodExpr'new MonitorEnterParser'new MonitorExitParser'new NewParser'new NilExpr'new Number'new Obj'new OpsP'new Primordial'new PushbackReader'new RatioOps'new RecurParser'new RegexReader'new ReifyParser'new RestFn'new RetryEx'new RuntimeException'new SyntaxQuoteReader'new TaggedReader'new TheVarParser'new ThrowParser'new TryParser'new URLClassLoader'new UnquoteReader'new UntypedExpr'new VarReader'new)
(declare AFn'applyToHelper)
(declare ActionQueue'EMPTY ActionQueue'new)
(declare AgentAction'new AgentAction'doRun)
(declare Agent'CONTINUE Agent'FAIL Agent'sendThreadPoolCounter Agent'sendOffThreadPoolCounter Agent'createThreadFactory Agent'pooledExecutor Agent'soloExecutor Agent'nested Agent'shutdown Agent'new-1 Agent'new-2 Agent'dispatchAction Agent'releasePendingSends)
(declare KeySeq'create KeySeq'createFromMap KeySeq'new-2 KeySeq'new-3)
(declare ValSeq'create ValSeq'createFromMap ValSeq'new-2 ValSeq'new-3)
(declare APersistentMap'mapEquals APersistentMap'mapHash APersistentMap'mapHasheq APersistentMap'MAKE_ENTRY APersistentMap'MAKE_KEY APersistentMap'MAKE_VAL)
(declare APersistentSet'new APersistentSet'setEquals)
(declare VSeq'new-2 VSeq'new-3)
(declare RSeq'new-2 RSeq'new-3)
(declare SubVector'new)
(declare APersistentVector'doEquals APersistentVector'doEquiv)
(declare ARef'new-0 ARef'new-1)
(declare AReference'new-0 AReference'new-1)
(declare ArityException'new-2 ArityException'new-3)
(declare ArrayChunk'new-1 ArrayChunk'new-2 ArrayChunk'new-3)
(declare ArrayIter_int'new ArrayIter_float'new ArrayIter_double'new ArrayIter_long'new ArrayIter_byte'new ArrayIter_char'new ArrayIter_short'new ArrayIter_boolean'new ArrayIter'EMPTY_ITERATOR ArrayIter'create-0 ArrayIter'create-1 ArrayIter'createFromObject ArrayIter'new)
(declare ArraySeq_int'new ArraySeq_float'new ArraySeq_double'new ArraySeq_long'new ArraySeq_byte'new ArraySeq_char'new ArraySeq_short'new ArraySeq_boolean'new ArraySeq'create-0 ArraySeq'create-1 ArraySeq'createFromObject ArraySeq'new-2 ArraySeq'new-3)
(declare ASeq'new-1 ASeq'new-0)
(declare Atom'new-1 Atom'new-2)
(declare ATransientMap'NOT_FOUND)
(declare ATransientSet'new)
(declare BigInt'ZERO BigInt'ONE BigInt'new BigInt'fromBigInteger BigInt'fromLong BigInt'valueOf)
(declare Binding'new-1 Binding'new-2)
(declare Box'new)
(declare ChunkBuffer'new)
(declare ChunkedCons'new-3 ChunkedCons'new-2)
(declare Compile'PATH_PROP Compile'REFLECTION_WARNING_PROP Compile'UNCHECKED_MATH_PROP Compile'compile_path Compile'compile Compile'warn_on_reflection Compile'unchecked_math Compile'main)
(declare DefExpr'bindRootMethod DefExpr'setTagMethod DefExpr'setMetaMethod DefExpr'setDynamicMethod DefExpr'symintern DefExpr'internVar DefExpr'new)
(declare AssignExpr'new)
(declare VarExpr'getMethod VarExpr'setMethod VarExpr'new)
(declare TheVarExpr'new)
(declare KeywordExpr'new)
(declare ImportExpr'forNameMethod ImportExpr'importClassMethod ImportExpr'derefMethod ImportExpr'new)
(declare HostExpr'BOOLEAN_TYPE HostExpr'CHAR_TYPE HostExpr'INTEGER_TYPE HostExpr'LONG_TYPE HostExpr'FLOAT_TYPE HostExpr'DOUBLE_TYPE HostExpr'SHORT_TYPE HostExpr'BYTE_TYPE HostExpr'NUMBER_TYPE HostExpr'charValueMethod HostExpr'booleanValueMethod HostExpr'charValueOfMethod HostExpr'intValueOfMethod HostExpr'longValueOfMethod HostExpr'floatValueOfMethod HostExpr'doubleValueOfMethod HostExpr'shortValueOfMethod HostExpr'byteValueOfMethod HostExpr'intValueMethod HostExpr'longValueMethod HostExpr'floatValueMethod HostExpr'doubleValueMethod HostExpr'byteValueMethod HostExpr'shortValueMethod HostExpr'fromIntMethod HostExpr'fromLongMethod HostExpr'fromDoubleMethod HostExpr'emitBoxReturn HostExpr'emitUnboxArg HostExpr'maybeClass HostExpr'maybeSpecialTag HostExpr'tagToClass)
(declare InstanceFieldExpr'invokeNoArgInstanceMember InstanceFieldExpr'setInstanceFieldMethod InstanceFieldExpr'new)
(declare StaticFieldExpr'new)
(declare MethodExpr'emitArgsAsArray MethodExpr'emitTypedArgs)
(declare InstanceMethodExpr'invokeInstanceMethodMethod InstanceMethodExpr'new)
(declare StaticMethodExpr'forNameMethod StaticMethodExpr'invokeStaticMethodMethod StaticMethodExpr'warnOnBoxedKeyword StaticMethodExpr'new StaticMethodExpr'isBoxedMath)
(declare UnresolvedVarExpr'new)
(declare NumberExpr'new NumberExpr'parse)
(declare ConstantParser'formKey)
(declare ConstantExpr'new)
(declare BooleanExpr'new)
(declare StringExpr'new)
(declare MonitorEnterExpr'new)
(declare MonitorExitExpr'new)
(declare CatchClause'new)
(declare TryExpr'new)
(declare ThrowExpr'new)
(declare NewExpr'invokeConstructorMethod NewExpr'forNameMethod NewExpr'new)
(declare MetaExpr'IOBJ_TYPE MetaExpr'withMetaMethod MetaExpr'new)
(declare IfExpr'new)
(declare EmptyExpr'HASHMAP_TYPE EmptyExpr'HASHSET_TYPE EmptyExpr'VECTOR_TYPE EmptyExpr'IVECTOR_TYPE EmptyExpr'TUPLE_TYPE EmptyExpr'LIST_TYPE EmptyExpr'EMPTY_LIST_TYPE EmptyExpr'new)
(declare ListExpr'arrayToListMethod ListExpr'new)
(declare MapExpr'mapMethod MapExpr'mapUniqueKeysMethod MapExpr'new MapExpr'parse)
(declare SetExpr'setMethod SetExpr'new SetExpr'parse)
(declare VectorExpr'vectorMethod VectorExpr'new VectorExpr'parse)
(declare KeywordInvokeExpr'ILOOKUP_TYPE KeywordInvokeExpr'new)
(declare InstanceOfExpr'new)
(declare StaticInvokeExpr'new StaticInvokeExpr'parse)
(declare InvokeExpr'onKey InvokeExpr'methodMapKey InvokeExpr'sigTag InvokeExpr'new InvokeExpr'parse)
(declare SourceDebugExtensionAttribute'new)
(declare FnExpr'aFnType FnExpr'restFnType FnExpr'new FnExpr'parse)
(declare ObjExpr'CONST_PREFIX ObjExpr'voidctor ObjExpr'kwintern ObjExpr'symintern ObjExpr'varintern ObjExpr'DYNAMIC_CLASSLOADER_TYPE ObjExpr'getClassMethod ObjExpr'getClassLoaderMethod ObjExpr'getConstantsMethod ObjExpr'readStringMethod ObjExpr'ILOOKUP_SITE_TYPE ObjExpr'ILOOKUP_THUNK_TYPE ObjExpr'KEYWORD_LOOKUPSITE_TYPE ObjExpr'new ObjExpr'trimGenID ObjExpr'varGetMethod ObjExpr'varGetRawMethod)
(declare PathNode'new)
(declare FnMethod'new FnMethod'classChar FnMethod'primInterface FnMethod'parse)
(declare ObjMethod'new ObjMethod'emitBody)
(declare LocalBinding'new)
(declare LocalBindingExpr'new)
(declare BodyExpr'new)
(declare BindingInit'new)
(declare LetFnExpr'new)
(declare LetExpr'new)
(declare RecurExpr'new)
(declare CompilerException'new)
(declare NewInstanceExpr'new NewInstanceExpr'build NewInstanceExpr'compileStub NewInstanceExpr'interfaceNames NewInstanceExpr'slashname NewInstanceExpr'msig NewInstanceExpr'considerMethod NewInstanceExpr'gatherMethods-2m NewInstanceExpr'gatherMethods-2s)
(declare NewInstanceMethod'dummyThis NewInstanceMethod'new NewInstanceMethod'msig NewInstanceMethod'parse NewInstanceMethod'findMethodsWithNameAndArity NewInstanceMethod'findMethodsWithName)
(declare MethodParamExpr'new)
(declare CaseExpr'NUMBER_TYPE CaseExpr'intValueMethod CaseExpr'hashMethod CaseExpr'hashCodeMethod CaseExpr'equivMethod CaseExpr'compactKey CaseExpr'sparseKey CaseExpr'hashIdentityKey CaseExpr'hashEquivKey CaseExpr'intKey CaseExpr'new CaseExpr'emitExpr)
(declare Compiler'DEF Compiler'LOOP Compiler'RECUR Compiler'IF Compiler'LET Compiler'LETFN Compiler'DO Compiler'FN Compiler'FNONCE Compiler'QUOTE Compiler'THE_VAR Compiler'DOT Compiler'ASSIGN Compiler'TRY Compiler'CATCH Compiler'FINALLY Compiler'THROW Compiler'MONITOR_ENTER Compiler'MONITOR_EXIT Compiler'IMPORT Compiler'DEFTYPE Compiler'CASE Compiler'CLASS Compiler'NEW Compiler'THIS Compiler'REIFY Compiler'LIST Compiler'HASHMAP Compiler'VECTOR Compiler'IDENTITY Compiler'_AMP_ Compiler'ISEQ Compiler'loadNs Compiler'inlineKey Compiler'inlineAritiesKey Compiler'staticKey Compiler'arglistsKey Compiler'INVOKE_STATIC Compiler'volatileKey Compiler'implementsKey Compiler'COMPILE_STUB_PREFIX Compiler'protocolKey Compiler'onKey Compiler'dynamicKey Compiler'redefKey Compiler'NS Compiler'IN_NS Compiler'specials Compiler'MAX_POSITIONAL_ARITY Compiler'OBJECT_TYPE Compiler'KEYWORD_TYPE Compiler'VAR_TYPE Compiler'SYMBOL_TYPE Compiler'IFN_TYPE Compiler'AFUNCTION_TYPE Compiler'RT_TYPE Compiler'NUMBERS_TYPE Compiler'CLASS_TYPE Compiler'NS_TYPE Compiler'UTIL_TYPE Compiler'REFLECTOR_TYPE Compiler'THROWABLE_TYPE Compiler'BOOLEAN_OBJECT_TYPE Compiler'IPERSISTENTMAP_TYPE Compiler'IOBJ_TYPE Compiler'TUPLE_TYPE Compiler'createTupleMethods Compiler'ARG_TYPES Compiler'EXCEPTION_TYPES Compiler'LOCAL_ENV Compiler'LOOP_LOCALS Compiler'LOOP_LABEL Compiler'CONSTANTS Compiler'CONSTANT_IDS Compiler'KEYWORD_CALLSITES Compiler'PROTOCOL_CALLSITES Compiler'VAR_CALLSITES Compiler'KEYWORDS Compiler'VARS Compiler'METHOD Compiler'IN_CATCH_FINALLY Compiler'METHOD_RETURN_CONTEXT Compiler'NO_RECUR Compiler'LOADER Compiler'SOURCE Compiler'SOURCE_PATH Compiler'COMPILE_PATH Compiler'COMPILE_FILES Compiler'INSTANCE Compiler'ADD_ANNOTATIONS Compiler'disableLocalsClearingKey Compiler'directLinkingKey Compiler'elideMetaKey Compiler'COMPILER_OPTIONS Compiler'getCompilerOption Compiler'elideMeta Compiler'LINE Compiler'COLUMN Compiler'lineDeref Compiler'columnDeref Compiler'LINE_BEFORE Compiler'COLUMN_BEFORE Compiler'LINE_AFTER Compiler'COLUMN_AFTER Compiler'NEXT_LOCAL_NUM Compiler'RET_LOCAL_NUM Compiler'COMPILE_STUB_SYM Compiler'COMPILE_STUB_CLASS Compiler'CLEAR_PATH Compiler'CLEAR_ROOT Compiler'CLEAR_SITES Compiler'RECUR_CLASS Compiler'isSpecial Compiler'inTailCall Compiler'resolveSymbol Compiler'maybePrimitiveType Compiler'maybeJavaClass Compiler'NIL_EXPR Compiler'TRUE_EXPR Compiler'FALSE_EXPR Compiler'subsumes Compiler'getTypeStringForArgs Compiler'getMatchingParams Compiler'CHAR_MAP Compiler'DEMUNGE_MAP Compiler'DEMUNGE_PATTERN Compiler'munge Compiler'demunge Compiler'clearPathRoot Compiler'registerLocal Compiler'getAndIncLocalNum Compiler'analyze-2 Compiler'analyze-3 Compiler'isMacro Compiler'isInline Compiler'namesStaticMember Compiler'preserveTag Compiler'MACRO_CHECK Compiler'MACRO_CHECK_LOADING Compiler'MACRO_CHECK_LOCK Compiler'ensureMacroCheck Compiler'checkSpecs Compiler'macroexpand1 Compiler'macroexpand Compiler'analyzeSeq Compiler'errorMsg Compiler'eval-1 Compiler'eval-2 Compiler'registerConstant Compiler'registerKeyword Compiler'registerKeywordCallsite Compiler'registerProtocolCallsite Compiler'registerVarCallsite Compiler'fwdPath Compiler'commonPath Compiler'addAnnotation Compiler'addParameterAnnotation Compiler'analyzeSymbol Compiler'destubClassName Compiler'getType Compiler'resolve-2 Compiler'resolve-1 Compiler'namespaceFor-1 Compiler'namespaceFor-2 Compiler'resolveIn Compiler'maybeResolveIn Compiler'lookupVar-3 Compiler'lookupVar-2 Compiler'registerVar Compiler'currentNS Compiler'closeOver Compiler'referenceLocal Compiler'tagOf Compiler'loadFile Compiler'load-1 Compiler'consumeWhitespaces Compiler'OPTS_COND_ALLOWED Compiler'readerOpts Compiler'load-3 Compiler'writeClassFile Compiler'pushNS Compiler'pushNSandLoader Compiler'getLookupThunk Compiler'compile1 Compiler'compile Compiler'inty Compiler'retType Compiler'primClass-1s Compiler'tagClass Compiler'primClass-1c Compiler'boxClass Compiler'emptyVarCallSites)
(declare Cons'new-2 Cons'new-3)
(declare Cycle'new-3 Cycle'new-5 Cycle'create)
(declare Delay'new Delay'force)
(declare DynamicClassLoader'classCache DynamicClassLoader'EMPTY_URLS DynamicClassLoader'RQ DynamicClassLoader'new-0 DynamicClassLoader'new-1 DynamicClassLoader'findInMemoryClass)
(declare EdnReaderException'new)
(declare EdnSymbolicValueReader'specials)
(declare TaggedReader'READERS TaggedReader'DEFAULT)
(declare EdnReader'macros EdnReader'dispatchMacros EdnReader'symbolPat EdnReader'intPat EdnReader'ratioPat EdnReader'floatPat EdnReader'taggedReader EdnReader'nonConstituent EdnReader'readString EdnReader'isWhitespace EdnReader'unread EdnReader'read1 EdnReader'EOF EdnReader'read-2 EdnReader'read-5 EdnReader'readToken EdnReader'readNumber EdnReader'readUnicodeChar-4 EdnReader'readUnicodeChar-5 EdnReader'interpretToken EdnReader'matchSymbol EdnReader'matchNumber EdnReader'getMacro EdnReader'isMacro EdnReader'isTerminatingMacro EdnReader'readDelimitedList)
(declare EnumerationSeq'create EnumerationSeq'new-1 EnumerationSeq'new-3)
(declare ExceptionInfo'new-2 ExceptionInfo'new-3)
(declare FnLoaderThunk'new)
(declare Intrinsics'oa Intrinsics'ops Intrinsics'preds)
(declare Iterate'UNREALIZED_SEED Iterate'new-3 Iterate'new-5 Iterate'create)
(declare IteratorSeq'create IteratorSeq'new-1 IteratorSeq'new-3)
(declare Keyword'TABLE Keyword'RQ Keyword'intern Keyword'intern-2 Keyword'intern-1 Keyword'new Keyword'find Keyword'find-2 Keyword'find-1)
(declare KeywordLookupSite'new)
(declare LazilyPersistentVector'createOwning LazilyPersistentVector'fcount LazilyPersistentVector'create)
(declare LazySeq'new-1 LazySeq'new-2)
(declare LineNumberingPushbackReader'newline LineNumberingPushbackReader'new-1 LineNumberingPushbackReader'new-2)
(declare LispReaderException'new)
(declare RegexReader'stringrdr)
(declare LispSymbolicValueReader'specials)
(declare WrappingReader'new)
(declare DeprecatedWrappingReader'new)
(declare SyntaxQuoteReader'syntaxQuote SyntaxQuoteReader'sqExpandList SyntaxQuoteReader'flattenMap)
(declare ConditionalReader'READ_STARTED ConditionalReader'DEFAULT_FEATURE ConditionalReader'RESERVED_FEATURES ConditionalReader'hasFeature ConditionalReader'readCondDelimited ConditionalReader'checkConditionalAllowed)
(declare LispReader'QUOTE LispReader'THE_VAR LispReader'UNQUOTE LispReader'UNQUOTE_SPLICING LispReader'CONCAT LispReader'SEQ LispReader'LIST LispReader'APPLY LispReader'HASHMAP LispReader'HASHSET LispReader'VECTOR LispReader'WITH_META LispReader'META LispReader'DEREF LispReader'READ_COND LispReader'READ_COND_SPLICING LispReader'UNKNOWN LispReader'macros LispReader'dispatchMacros LispReader'symbolPat LispReader'intPat LispReader'ratioPat LispReader'floatPat LispReader'GENSYM_ENV LispReader'ARG_ENV LispReader'ctorReader LispReader'READ_COND_ENV LispReader'isWhitespace LispReader'unread LispReader'read1 LispReader'OPT_EOF LispReader'OPT_FEATURES LispReader'OPT_READ_COND LispReader'EOFTHROW LispReader'PLATFORM_KEY LispReader'PLATFORM_FEATURES LispReader'COND_ALLOW LispReader'COND_PRESERVE LispReader'read-2 LispReader'read-4 LispReader'read-5 LispReader'read-6 LispReader'ensurePending LispReader'installPlatformFeature LispReader'read-9 LispReader'readToken LispReader'readNumber LispReader'readUnicodeChar-4 LispReader'readUnicodeChar-5 LispReader'interpretToken LispReader'matchSymbol LispReader'matchNumber LispReader'getMacro LispReader'isMacro LispReader'isTerminatingMacro LispReader'garg LispReader'registerArg LispReader'isUnquoteSplicing LispReader'isUnquote LispReader'READ_EOF LispReader'READ_FINISHED LispReader'readDelimitedList LispReader'isPreserveReadCond)
(declare LockingTransactionInfo'new)
(declare CFn'new)
(declare Notify'new)
(declare LockingTransaction'RETRY_LIMIT LockingTransaction'LOCK_WAIT_MSECS LockingTransaction'BARGE_WAIT_NANOS LockingTransaction'RUNNING LockingTransaction'COMMITTING LockingTransaction'RETRY LockingTransaction'KILLED LockingTransaction'COMMITTED LockingTransaction'transaction LockingTransaction'lastPoint LockingTransaction'getEx LockingTransaction'isRunning LockingTransaction'getRunning LockingTransaction'runInTransaction)
(declare LongRangeIterator'new)
(declare LongChunk'new)
(declare LongRange'CHUNK_SIZE LongRange'positiveStep LongRange'negativeStep LongRange'new-4 LongRange'new-6 LongRange'new-7 LongRange'create-1 LongRange'create-2 LongRange'create-3)
(declare MapEntry'create MapEntry'new)
(declare Entry'new)
(declare MethodImplCache'new-2 MethodImplCache'new-5 MethodImplCache'new-3)
(declare MultiFn'assoc MultiFn'dissoc MultiFn'isa MultiFn'parents MultiFn'new)
(declare Murmur3'seed Murmur3'C1 Murmur3'C2 Murmur3'hashInt Murmur3'hashLong Murmur3'hashUnencodedChars Murmur3'mixCollHash Murmur3'hashOrdered Murmur3'hashUnordered Murmur3'mixK1 Murmur3'mixH1 Murmur3'fmix)
(declare Namespace'namespaces Namespace'new Namespace'all Namespace'areDifferentInstancesOfSameClassName Namespace'findOrCreate Namespace'remove Namespace'find)
(declare LongOps'gcd)
(declare RatioOps'normalizeRet)
(declare BigDecimalOps'MATH_CONTEXT)
(declare Numbers'isZero-1o Numbers'isPos-1o Numbers'isNeg-1o Numbers'minus-1o Numbers'minusP-1o Numbers'inc-1o Numbers'incP-1o Numbers'dec-1o Numbers'decP-1o Numbers'add-2oo Numbers'addP-2oo Numbers'minus-2oo Numbers'minusP-2oo Numbers'multiply-2oo Numbers'multiplyP-2oo Numbers'divide-2oo Numbers'quotient-2oo Numbers'remainder-2oo Numbers'quotient-2dd Numbers'remainder-2dd Numbers'equiv-2oo Numbers'equiv-2nn Numbers'equal Numbers'lt-2oo Numbers'lte-2oo Numbers'gt-2oo Numbers'gte-2oo Numbers'compare Numbers'toBigInt Numbers'toBigInteger Numbers'toBigDecimal Numbers'toRatio Numbers'rationalize Numbers'reduceBigInt Numbers'divide-2ii Numbers'shiftLeftInt Numbers'shiftLeft-2oo Numbers'shiftLeft-2ol Numbers'shiftLeft-2lo Numbers'shiftLeft-2ll Numbers'shiftRightInt Numbers'shiftRight-2oo Numbers'shiftRight-2ol Numbers'shiftRight-2lo Numbers'shiftRight-2ll Numbers'unsignedShiftRightInt Numbers'unsignedShiftRight-2oo Numbers'unsignedShiftRight-2ol Numbers'unsignedShiftRight-2lo Numbers'unsignedShiftRight-2ll Numbers'LONG_OPS Numbers'DOUBLE_OPS Numbers'RATIO_OPS Numbers'BIGINT_OPS Numbers'BIGDECIMAL_OPS Numbers'ops Numbers'hasheqFrom Numbers'hasheq Numbers'category Numbers'bitOpsCast Numbers'float_array-2 Numbers'float_array-1 Numbers'double_array-2 Numbers'double_array-1 Numbers'int_array-2 Numbers'int_array-1 Numbers'long_array-2 Numbers'long_array-1 Numbers'short_array-2 Numbers'short_array-1 Numbers'char_array-2 Numbers'char_array-1 Numbers'byte_array-2 Numbers'byte_array-1 Numbers'boolean_array-2 Numbers'boolean_array-1 Numbers'booleans Numbers'bytes Numbers'chars Numbers'shorts Numbers'floats Numbers'doubles Numbers'ints Numbers'longs Numbers'num-1o Numbers'num-1f Numbers'num-1d Numbers'add-2dd Numbers'addP-2dd Numbers'minus-2dd Numbers'minusP-2dd Numbers'minus-1d Numbers'minusP-1d Numbers'inc-1d Numbers'incP-1d Numbers'dec-1d Numbers'decP-1d Numbers'multiply-2dd Numbers'multiplyP-2dd Numbers'divide-2dd Numbers'equiv-2dd Numbers'lt-2dd Numbers'lte-2dd Numbers'gt-2dd Numbers'gte-2dd Numbers'isPos-1d Numbers'isNeg-1d Numbers'isZero-1d Numbers'throwIntOverflow Numbers'unchecked_int_add Numbers'unchecked_int_subtract Numbers'unchecked_int_negate Numbers'unchecked_int_inc Numbers'unchecked_int_dec Numbers'unchecked_int_multiply Numbers'not-1o Numbers'not-1l Numbers'and-2oo Numbers'and-2ol Numbers'and-2lo Numbers'and-2ll Numbers'or-2oo Numbers'or-2ol Numbers'or-2lo Numbers'or-2ll Numbers'xor-2oo Numbers'xor-2ol Numbers'xor-2lo Numbers'xor-2ll Numbers'andNot-2oo Numbers'andNot-2ol Numbers'andNot-2lo Numbers'andNot-2ll Numbers'clearBit-2oo Numbers'clearBit-2ol Numbers'clearBit-2lo Numbers'clearBit-2ll Numbers'setBit-2oo Numbers'setBit-2ol Numbers'setBit-2lo Numbers'setBit-2ll Numbers'flipBit-2oo Numbers'flipBit-2ol Numbers'flipBit-2lo Numbers'flipBit-2ll Numbers'testBit-2oo Numbers'testBit-2ol Numbers'testBit-2lo Numbers'testBit-2ll Numbers'unchecked_int_divide Numbers'unchecked_int_remainder Numbers'num-1l Numbers'unchecked_add-2ll Numbers'unchecked_minus-2ll Numbers'unchecked_multiply-2ll Numbers'unchecked_minus-1l Numbers'unchecked_inc-1l Numbers'unchecked_dec-1l Numbers'unchecked_add-2oo Numbers'unchecked_minus-2oo Numbers'unchecked_multiply-2oo Numbers'unchecked_minus-1o Numbers'unchecked_inc-1o Numbers'unchecked_dec-1o Numbers'unchecked_add-2dd Numbers'unchecked_minus-2dd Numbers'unchecked_multiply-2dd Numbers'unchecked_minus-1d Numbers'unchecked_inc-1d Numbers'unchecked_dec-1d Numbers'unchecked_add-2do Numbers'unchecked_minus-2do Numbers'unchecked_multiply-2do Numbers'unchecked_add-2od Numbers'unchecked_minus-2od Numbers'unchecked_multiply-2od Numbers'unchecked_add-2dl Numbers'unchecked_minus-2dl Numbers'unchecked_multiply-2dl Numbers'unchecked_add-2ld Numbers'unchecked_minus-2ld Numbers'unchecked_multiply-2ld Numbers'unchecked_add-2lo Numbers'unchecked_minus-2lo Numbers'unchecked_multiply-2lo Numbers'unchecked_add-2ol Numbers'unchecked_minus-2ol Numbers'unchecked_multiply-2ol Numbers'quotient-2do Numbers'quotient-2od Numbers'quotient-2lo Numbers'quotient-2ol Numbers'quotient-2dl Numbers'quotient-2ld Numbers'remainder-2do Numbers'remainder-2od Numbers'remainder-2lo Numbers'remainder-2ol Numbers'remainder-2dl Numbers'remainder-2ld Numbers'add-2ll Numbers'addP-2ll Numbers'minus-2ll Numbers'minusP-2ll Numbers'minus-1l Numbers'minusP-1l Numbers'inc-1l Numbers'incP-1l Numbers'dec-1l Numbers'decP-1l Numbers'multiply-2ll Numbers'multiplyP-2ll Numbers'quotient-2ll Numbers'remainder-2ll Numbers'equiv-2ll Numbers'lt-2ll Numbers'lte-2ll Numbers'gt-2ll Numbers'gte-2ll Numbers'isPos-1l Numbers'isNeg-1l Numbers'isZero-1l Numbers'add-2lo Numbers'add-2ol Numbers'addP-2lo Numbers'addP-2ol Numbers'add-2do Numbers'add-2od Numbers'add-2dl Numbers'add-2ld Numbers'addP-2do Numbers'addP-2od Numbers'addP-2dl Numbers'addP-2ld Numbers'minus-2lo Numbers'minus-2ol Numbers'minusP-2lo Numbers'minusP-2ol Numbers'minus-2do Numbers'minus-2od Numbers'minus-2dl Numbers'minus-2ld Numbers'minusP-2do Numbers'minusP-2od Numbers'minusP-2dl Numbers'minusP-2ld Numbers'multiply-2lo Numbers'multiply-2ol Numbers'multiplyP-2lo Numbers'multiplyP-2ol Numbers'multiply-2do Numbers'multiply-2od Numbers'multiply-2dl Numbers'multiply-2ld Numbers'multiplyP-2do Numbers'multiplyP-2od Numbers'multiplyP-2dl Numbers'multiplyP-2ld Numbers'divide-2lo Numbers'divide-2ol Numbers'divide-2do Numbers'divide-2od Numbers'divide-2dl Numbers'divide-2ld Numbers'divide-2ll Numbers'lt-2lo Numbers'lt-2ol Numbers'lt-2do Numbers'lt-2od Numbers'lt-2dl Numbers'lt-2ld Numbers'lte-2lo Numbers'lte-2ol Numbers'lte-2do Numbers'lte-2od Numbers'lte-2dl Numbers'lte-2ld Numbers'gt-2lo Numbers'gt-2ol Numbers'gt-2do Numbers'gt-2od Numbers'gt-2dl Numbers'gt-2ld Numbers'gte-2lo Numbers'gte-2ol Numbers'gte-2do Numbers'gte-2od Numbers'gte-2dl Numbers'gte-2ld Numbers'equiv-2lo Numbers'equiv-2ol Numbers'equiv-2do Numbers'equiv-2od Numbers'equiv-2dl Numbers'equiv-2ld Numbers'isNaN Numbers'max-2dd Numbers'max-2dl Numbers'max-2do Numbers'max-2ld Numbers'max-2ll Numbers'max-2lo Numbers'max-2ol Numbers'max-2od Numbers'max-2oo Numbers'min-2dd Numbers'min-2dl Numbers'min-2do Numbers'min-2ld Numbers'min-2ll Numbers'min-2lo Numbers'min-2ol Numbers'min-2od Numbers'min-2oo)
(declare Obj'new-1 Obj'new-0)
(declare MSeq'new-2 MSeq'new-3)
(declare MIter'new-2 MIter'new-3)
(declare TransientArrayMap'new)
(declare PersistentArrayMap'EMPTY PersistentArrayMap'HASHTABLE_THRESHOLD PersistentArrayMap'create PersistentArrayMap'new-0 PersistentArrayMap'createWithCheck PersistentArrayMap'createAsIfByAssoc PersistentArrayMap'new-1 PersistentArrayMap'new-2 PersistentArrayMap'equalKey)
(declare TransientHashMap'new-1 TransientHashMap'new-5)
(declare HSeq'create-1 HSeq'create-4 HSeq'new)
(declare HIter'new)
(declare ArrayNode'new ArrayNode'foldTasks)
(declare BitmapIndexedNode'EMPTY BitmapIndexedNode'new)
(declare HashCollisionNode'new)
(declare NodeIter'NULL NodeIter'new)
(declare NodeSeq'new-2 NodeSeq'create-1 NodeSeq'kvreduce NodeSeq'create-3 NodeSeq'new-4)
(declare PersistentHashMap'EMPTY PersistentHashMap'NOT_FOUND PersistentHashMap'create-1m PersistentHashMap'create-1a PersistentHashMap'createWithCheck-1a PersistentHashMap'create-1s PersistentHashMap'createWithCheck-1s PersistentHashMap'create-2 PersistentHashMap'new-4 PersistentHashMap'new-5 PersistentHashMap'hash PersistentHashMap'EMPTY_ITER PersistentHashMap'mask PersistentHashMap'cloneAndSet-3 PersistentHashMap'cloneAndSet-5 PersistentHashMap'removePair PersistentHashMap'createNode-6 PersistentHashMap'createNode-7 PersistentHashMap'bitpos)
(declare TransientHashSet'new)
(declare PersistentHashSet'EMPTY PersistentHashSet'create-1a PersistentHashSet'create-1l PersistentHashSet'create-1s PersistentHashSet'createWithCheck-1a PersistentHashSet'createWithCheck-1l PersistentHashSet'createWithCheck-1s PersistentHashSet'new)
(declare Primordial'invokeStatic)
(declare EmptyList'HASHEQ EmptyList'new EmptyList'hasheq)
(declare PersistentList'creator PersistentList'EMPTY PersistentList'new-1 PersistentList'new-4 PersistentList'create)
(declare QSeq'new-2 QSeq'new-3)
(declare PersistentQueue'EMPTY PersistentQueue'new)
(declare TNode'new)
(declare Black'new)
(declare BlackVal'new)
(declare BlackBranch'new)
(declare BlackBranchVal'new)
(declare Red'new)
(declare RedVal'new)
(declare RedBranch'new)
(declare RedBranchVal'new)
(declare TSeq'new-2 TSeq'new-3 TSeq'new-4 TSeq'create TSeq'push)
(declare NodeIterator'new)
(declare KeyIterator'new)
(declare ValIterator'new)
(declare PersistentTreeMap'EMPTY PersistentTreeMap'create-1m PersistentTreeMap'new-0 PersistentTreeMap'new-1 PersistentTreeMap'new-2 PersistentTreeMap'new-4m PersistentTreeMap'create-1s PersistentTreeMap'create-2 PersistentTreeMap'append PersistentTreeMap'balanceLeftDel PersistentTreeMap'balanceRightDel PersistentTreeMap'leftBalance PersistentTreeMap'rightBalance PersistentTreeMap'new-4c PersistentTreeMap'red PersistentTreeMap'black)
(declare PersistentTreeSet'EMPTY PersistentTreeSet'create-1 PersistentTreeSet'create-2 PersistentTreeSet'new)
(declare VNode'new-2 VNode'new-1)
(declare ChunkedSeq'new-3 ChunkedSeq'new-5 ChunkedSeq'new-4)
(declare TransientVector'new-4 TransientVector'new-1 TransientVector'editableRoot TransientVector'editableTail TransientVector'NOT_FOUND)
(declare PersistentVector'NOEDIT PersistentVector'EMPTY_NODE PersistentVector'EMPTY PersistentVector'TRANSIENT_VECTOR_CONJ PersistentVector'adopt PersistentVector'create-1r PersistentVector'create-1s PersistentVector'create-1l PersistentVector'create-1i PersistentVector'create-1a PersistentVector'new-4 PersistentVector'new-5 PersistentVector'doAssoc PersistentVector'newPath)
(declare ProxyHandler'new)
(declare RangeIterator'new)
(declare Range'CHUNK_SIZE Range'positiveStep Range'negativeStep Range'new-4 Range'new-6 Range'new-7 Range'create-1 Range'create-2 Range'create-3)
(declare Ratio'new)
(declare ReaderConditional'FORM_KW ReaderConditional'SPLICING_KW ReaderConditional'create ReaderConditional'new)
(declare RecordIterator'new)
(declare Reduced'new)
(declare RefTVal'new-3 RefTVal'new-2)
(declare Ref'ids Ref'new-1 Ref'new-2)
(declare Reflector'invokeInstanceMethod Reflector'getCauseOrElse Reflector'throwCauseOrElseException Reflector'noMethodReport Reflector'invokeMatchingMethod Reflector'getAsMethodOfPublicBase Reflector'isMatch Reflector'invokeConstructor Reflector'invokeStaticMethodVariadic Reflector'invokeStaticMethod-3s Reflector'invokeStaticMethod-3c Reflector'getStaticField-2s Reflector'getStaticField-2c Reflector'setStaticField-3s Reflector'setStaticField-3c Reflector'getInstanceField Reflector'setInstanceField Reflector'invokeNoArgInstanceMember-2 Reflector'invokeNoArgInstanceMember-3 Reflector'invokeInstanceMember-2 Reflector'invokeInstanceMember-3o Reflector'invokeInstanceMember-3a Reflector'getField Reflector'getMethods Reflector'boxArg Reflector'boxArgs Reflector'paramArgTypeMatch Reflector'isCongruent Reflector'prepRet)
(declare Repeat'INFINITE Repeat'new-2 Repeat'new-3 Repeat'create-1 Repeat'create-2)
(declare RestFn'ontoArrayPrepend RestFn'findKey)
(declare RT'T RT'F RT'LOADER_SUFFIX RT'DEFAULT_IMPORTS RT'UTF8 RT'readTrueFalseUnknown RT'CLOIURE_NS RT'OUT RT'IN RT'ERR RT'TAG_KEY RT'CONST_KEY RT'AGENT RT'readeval RT'READEVAL RT'DATA_READERS RT'DEFAULT_DATA_READER_FN RT'DEFAULT_DATA_READERS RT'SUPPRESS_READ RT'ASSERT RT'MATH_CONTEXT RT'LINE_KEY RT'COLUMN_KEY RT'FILE_KEY RT'DECLARED_KEY RT'DOC_KEY RT'USE_CONTEXT_CLASSLOADER RT'UNCHECKED_MATH RT'LOAD_FILE RT'IN_NAMESPACE RT'NAMESPACE RT'IDENTICAL RT'CMD_LINE_ARGS RT'CURRENT_NS RT'FLUSH_ON_NEWLINE RT'PRINT_META RT'PRINT_READABLY RT'PRINT_DUP RT'WARN_ON_REFLECTION RT'ALLOW_UNRESOLVED_VARS RT'READER_RESOLVER RT'IN_NS_VAR RT'NS_VAR RT'FN_LOADER_VAR RT'PRINT_INITIALIZED RT'PR_ON RT'inNamespace RT'bootNamespace RT'processCommandLine RT'errPrintWriter RT'EMPTY_ARRAY RT'DEFAULT_COMPARATOR RT'ID RT'addURL RT'CHECK_SPEC_ASSERTS RT'INSTRUMENT_MACROS RT'CHECK_SPECS RT'keyword RT'var-2 RT'var-3 RT'loadResourceScript-1 RT'maybeLoadResourceScript RT'loadResourceScript-2s RT'loadResourceScript-2c RT'loadResourceScript-3 RT'lastModified RT'compile RT'load-1 RT'load-2 RT'doInit RT'nextID RT'loadLibrary RT'CHUNK_SIZE RT'chunkIteratorSeq RT'seq RT'seqFrom RT'canSeq RT'iter RT'seqOrElse RT'keys RT'vals RT'meta RT'count RT'countFrom RT'conj RT'cons RT'first RT'second RT'third RT'fourth RT'next RT'more RT'peek RT'pop RT'get-2 RT'getFrom-2 RT'get-3 RT'getFrom-3 RT'assoc RT'contains RT'find RT'findKey RT'dissoc RT'nth-2 RT'nthFrom-2 RT'nth-3 RT'nthFrom-3 RT'assocN RT'hasTag RT'box-1o RT'box-1c RT'box-1z RT'box-1Z RT'box-1b RT'box-1s RT'box-1i RT'box-1l RT'box-1f RT'box-1d RT'charCast-1o RT'charCast-1b RT'charCast-1s RT'charCast-1c RT'charCast-1i RT'charCast-1l RT'charCast-1f RT'charCast-1d RT'booleanCast-1o RT'booleanCast-1b RT'byteCast-1o RT'byteCast-1b RT'byteCast-1s RT'byteCast-1i RT'byteCast-1l RT'byteCast-1f RT'byteCast-1d RT'shortCast-1o RT'shortCast-1b RT'shortCast-1s RT'shortCast-1i RT'shortCast-1l RT'shortCast-1f RT'shortCast-1d RT'intCast-1o RT'intCast-1c RT'intCast-1b RT'intCast-1s RT'intCast-1i RT'intCast-1f RT'intCast-1l RT'intCast-1d RT'longCast-1o RT'longCast-1b RT'longCast-1s RT'longCast-1i RT'longCast-1f RT'longCast-1l RT'longCast-1d RT'floatCast-1o RT'floatCast-1b RT'floatCast-1s RT'floatCast-1i RT'floatCast-1f RT'floatCast-1l RT'floatCast-1d RT'doubleCast-1o RT'doubleCast-1b RT'doubleCast-1s RT'doubleCast-1i RT'doubleCast-1f RT'doubleCast-1l RT'doubleCast-1d RT'uncheckedByteCast-1o RT'uncheckedByteCast-1b RT'uncheckedByteCast-1s RT'uncheckedByteCast-1i RT'uncheckedByteCast-1l RT'uncheckedByteCast-1f RT'uncheckedByteCast-1d RT'uncheckedShortCast-1o RT'uncheckedShortCast-1b RT'uncheckedShortCast-1s RT'uncheckedShortCast-1i RT'uncheckedShortCast-1l RT'uncheckedShortCast-1f RT'uncheckedShortCast-1d RT'uncheckedCharCast-1o RT'uncheckedCharCast-1b RT'uncheckedCharCast-1s RT'uncheckedCharCast-1c RT'uncheckedCharCast-1i RT'uncheckedCharCast-1l RT'uncheckedCharCast-1f RT'uncheckedCharCast-1d RT'uncheckedIntCast-1o RT'uncheckedIntCast-1b RT'uncheckedIntCast-1s RT'uncheckedIntCast-1c RT'uncheckedIntCast-1i RT'uncheckedIntCast-1l RT'uncheckedIntCast-1f RT'uncheckedIntCast-1d RT'uncheckedLongCast-1o RT'uncheckedLongCast-1b RT'uncheckedLongCast-1s RT'uncheckedLongCast-1i RT'uncheckedLongCast-1l RT'uncheckedLongCast-1f RT'uncheckedLongCast-1d RT'uncheckedFloatCast-1o RT'uncheckedFloatCast-1b RT'uncheckedFloatCast-1s RT'uncheckedFloatCast-1i RT'uncheckedFloatCast-1l RT'uncheckedFloatCast-1f RT'uncheckedFloatCast-1d RT'uncheckedDoubleCast-1o RT'uncheckedDoubleCast-1b RT'uncheckedDoubleCast-1s RT'uncheckedDoubleCast-1i RT'uncheckedDoubleCast-1l RT'uncheckedDoubleCast-1f RT'uncheckedDoubleCast-1d RT'map RT'mapUniqueKeys RT'set RT'vector RT'subvec RT'list-0 RT'list-1 RT'list-2 RT'list-3 RT'list-4 RT'list-5 RT'listStar-2 RT'listStar-3 RT'listStar-4 RT'listStar-5 RT'listStar-6 RT'arrayToList RT'object_array RT'toArray RT'seqToArray RT'seqToPassedArray RT'seqToTypedArray-1 RT'seqToTypedArray-2 RT'length RT'boundedLength RT'readRet RT'readChar RT'peekChar RT'getLineNumber RT'getColumnNumber RT'getLineNumberingReader RT'isLineNumberingReader RT'isReduced RT'resolveClassNameInContext RT'suppressRead RT'printString RT'readString-1 RT'readString-2 RT'print RT'printInnerSeq RT'formatAesthetic RT'formatStandard RT'format RT'doFormat RT'setValues RT'makeClassLoader RT'baseLoader RT'resourceAsStream RT'getResource RT'classForName-3 RT'classForName-1 RT'classForNameNonLoading RT'loadClassForName RT'aget-2f RT'aset-3f RT'alength-1f RT'aclone-1f RT'aget-2d RT'aset-3d RT'alength-1d RT'aclone-1d RT'aget-2i RT'aset-3i RT'alength-1i RT'aclone-1i RT'aget-2l RT'aset-3l RT'alength-1l RT'aclone-1l RT'aget-2c RT'aset-3c RT'alength-1c RT'aclone-1c RT'aget-2b RT'aset-3b RT'alength-1b RT'aclone-1b RT'aget-2s RT'aset-3s RT'alength-1s RT'aclone-1s RT'aget-2z RT'aset-3z RT'alength-1z RT'aclone-1z RT'aget-2o RT'aset-3o RT'alength-1o RT'aclone-1o)
(declare SeqEnumeration'new)
(declare SeqIterator'START SeqIterator'new)
(declare StringSeq'create StringSeq'new)
(declare Symbol'create-2 Symbol'create-1 Symbol'intern-2 Symbol'intern-1 Symbol'new-2 Symbol'new-3)
(declare TaggedLiteral'TAG_KW TaggedLiteral'FORM_KW TaggedLiteral'create TaggedLiteral'new)
(declare TransactionalHashMap'new-0 TransactionalHashMap'new-1i TransactionalHashMap'new-1m)
(declare SingleBuffer'new)
(declare ManyBuffer'new)
(declare MultiIterator'new)
(declare TransformerIterator'EMPTY TransformerIterator'NONE TransformerIterator'new TransformerIterator'create TransformerIterator'createMulti)
(declare Tuple'MAX_SIZE Tuple'create-0 Tuple'create-1 Tuple'create-2 Tuple'create-3 Tuple'create-4 Tuple'create-5 Tuple'create-6)
(declare Util'equiv-2oo Util'equivNull Util'equivEquals Util'equivNumber Util'equivColl Util'equivPred Util'equiv-2ll Util'equiv-2ol Util'equiv-2lo Util'equiv-2dd Util'equiv-2od Util'equiv-2do Util'equiv-2bb Util'equiv-2ob Util'equiv-2bo Util'equiv-2cc Util'pcequiv Util'equals Util'identical Util'classOf Util'compare Util'hash Util'hasheq Util'dohasheq Util'hashCombine Util'isPrimitive Util'isInteger Util'ret1 Util'clearCache Util'runtimeException-1 Util'runtimeException-2 Util'sneakyThrow Util'sneakyThrow0 Util'loadWithClass)
(declare TBox'new)
(declare Unbound'new)
(declare Frame'TOP Frame'new)
(declare Var'dvals Var'rev Var'privateKey Var'privateMeta Var'macroKey Var'nameKey Var'nsKey Var'getThreadBindingFrame Var'cloneThreadBindingFrame Var'resetThreadBindingFrame Var'intern-3 Var'intern-4 Var'find Var'intern-2s Var'internPrivate Var'intern-2n Var'create-0 Var'create-1 Var'new-2 Var'new-3 Var'pushThreadBindings Var'popThreadBindings Var'getThreadBindings Var'assoc Var'dissoc)
(declare Volatile'new)
(declare main'CLOIURE_MAIN main'REQUIRE main'MAIN)

(java-ns cloiure.lang.AFn

#_stateless
#_abstract
(class-ns AFn (ยง implements IFn)
    #_protected
    (defn #_"AFn" AFn'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Object" (ยง method call) [#_"AFn" this]
        (.invoke this)
    )

    #_method
    (ยง defn #_"void" (ยง method run) [#_"AFn" this]
        (.invoke this)
        nil
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this]
        (.throwArity this, 0)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1]
        (.throwArity this, 1)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2]
        (.throwArity this, 2)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3]
        (.throwArity this, 3)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4]
        (.throwArity this, 4)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5]
        (.throwArity this, 5)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6]
        (.throwArity this, 6)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7]
        (.throwArity this, 7)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8]
        (.throwArity this, 8)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9]
        (.throwArity this, 9)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10]
        (.throwArity this, 10)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11]
        (.throwArity this, 11)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12]
        (.throwArity this, 12)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13]
        (.throwArity this, 13)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14]
        (.throwArity this, 14)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15]
        (.throwArity this, 15)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16]
        (.throwArity this, 16)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17]
        (.throwArity this, 17)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18]
        (.throwArity this, 18)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19]
        (.throwArity this, 19)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___arg20]
        (.throwArity this, 20)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___arg20, #_"Object..." ___args]
        (.throwArity this, 21)
    )

    #_method
    (ยง defn #_"Object" (ยง method applyTo) [#_"AFn" this, #_"ISeq" ___arglist]
        (ร AFn'applyToHelper(this, Util'ret1(___arglist, (ยง ass ___arglist nil))))
    )

    (defn #_"Object" AFn'applyToHelper [#_"IFn" ___ifn, #_"ISeq" ___arglist]
        (ยง switch (RT'boundedLength ___arglist, 20)
            (ยง case 0)
            (do
                (ยง ass ___arglist nil)
                (.invoke ___ifn)
            )
            (ยง case 1)
            (do
                (ร ___ifn.invoke(Util'ret1((first ___arglist), (ยง ass ___arglist nil))))
            )
            (ยง case 2)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 3)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 4)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 5)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 6)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 7)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 8)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 9)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 10)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 11)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 12)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 13)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 14)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 15)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 16)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 17)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 18)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 19)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง case 20)
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        Util'ret1((ยง ass ___arglist (next ___arglist)).first(), (ยง ass ___arglist nil))))
            )
            (ยง default )
            (do
                (ร ___ifn.invoke((first ___arglist),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        (ยง ass ___arglist (next ___arglist)).first(),
                        RT'seqToArray(Util'ret1((next ___arglist), (ยง ass ___arglist nil)))))
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method throwArity) [#_"AFn" this, #_"int" ___n]
        (let [#_"String" ___name (ร getClass().getSimpleName())]
            (throw (ร ArityException'new-2(___n, Compiler'demunge(___name))))
        )
    )
)
)

(java-ns cloiure.lang.AFunction

(ยง import java.util.Comparator)

#_abstract
(class-ns AFunction (ยง extends AFn) (ยง implements IObj, Comparator, Fn)
    (defn- #_"AFunction" AFunction'init []
        (hash-map
            #_volatile
            #_"MethodImplCache" :__methodImplCache nil
        )
    )

    #_protected
    (defn #_"AFunction" AFunction'new []
        (merge (AFn'new) (AFunction'init))
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method meta) [#_"AFunction" this]
        nil
    )

    #_method
    (ยง defn #_"IObj" (ยง method withMeta) [#_"AFunction" this, #_"IPersistentMap" ___meta]
        (ยง reify RestFn()
            #_protected
            #_method
            (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___args]
                (.applyTo (ยง this AFunction), (cast' ISeq ___args))
            )

            #_method
            (ยง defn #_"IPersistentMap" (ยง method meta) [#_"RestFn" this]
                ___meta
            )

            #_method
            (ยง defn #_"IObj" (ยง method withMeta) [#_"RestFn" this, #_"IPersistentMap" ___meta]
                (.withMeta (ยง this AFunction), ___meta)
            )

            #_method
            (ยง defn #_"int" (ยง method getRequiredArity) [#_"RestFn" this]
                0
            )
        )
    )

    #_method
    (ยง defn #_"int" (ยง method compare) [#_"AFunction" this, #_"Object" ___o1, #_"Object" ___o2]
        (let [#_"Object" ___o (.invoke this, ___o1, ___o2)]
            (when (instance? Boolean ___o)
                (when (RT'booleanCast-1o ___o)
                    (ยง return -1)
                )
                (ยง return (if (RT'booleanCast-1o (.invoke this, ___o2, ___o1)) 1 0))
            )

            (let [#_"Number" ___n (cast Number ___o)]
                (.intValue ___n)
            )
        )
    )
)
)

(java-ns cloiure.lang.Agent

(ยง import java.util.concurrent.Executor)
(ยง import java.util.concurrent.ExecutorService)
(ยง import java.util.concurrent.Executors)
(ยง import java.util.concurrent.ThreadFactory)
(ยง import java.util.concurrent.atomic.AtomicLong)
(ยง import java.util.concurrent.atomic.AtomicReference)

(class-ns ActionQueue
    (ยง def #_"ActionQueue" ActionQueue'EMPTY (ActionQueue'new PersistentQueue'EMPTY, nil))

    (defn- #_"ActionQueue" ActionQueue'init []
        (hash-map
            #_"IPersistentStack" :q nil
            #_"Throwable" :error nil ;; non-null indicates fail state
        )
    )

    (defn #_"ActionQueue" ActionQueue'new [#_"IPersistentStack" ___q, #_"Throwable" ___error]
        (let [this (ActionQueue'init)]
            (ยง ass (:q this) ___q)
            (ยง ass (:error this) ___error)
            this
        )
    )
)

(class-ns AgentAction (ยง implements Runnable)
    (defn- #_"AgentAction" AgentAction'init []
        (hash-map
            #_"Agent" :agent nil
            #_"IFn" :fn nil
            #_"ISeq" :args nil
            #_"Executor" :exec nil
        )
    )

    (defn #_"AgentAction" AgentAction'new [#_"Agent" ___agent, #_"IFn" ___fn, #_"ISeq" ___args, #_"Executor" ___exec]
        (let [this (AgentAction'init)]
            (ยง ass (:agent this) ___agent)
            (ยง ass (:args this) ___args)
            (ยง ass (:fn this) ___fn)
            (ยง ass (:exec this) ___exec)
            this
        )
    )

    #_method
    (ยง defn #_"void" (ยง method execute) [#_"AgentAction" this]
        (try
            (.execute (:exec this), this)
            (catch Throwable ___error
                (when (some? (:errorHandler (:agent this)))
                    (try
                        (ร (:errorHandler (:agent this)).invoke((:agent this), ___error))
                        (catch Throwable ___e
                            ;; ignore errorHandler errors
                        )
                    )
                )
            )
        )
        nil
    )

    (defn #_"void" AgentAction'doRun [#_"AgentAction" ___action]
        (try
            (.set Agent'nested, PersistentVector'EMPTY)

            (let [#_"Throwable" ___error nil]
                (try
                    (let [#_"Object" ___oldval (:state (:agent ___action))]
                        (let [#_"Object" ___newval (ร (:fn ___action).applyTo(RT'cons((:state (:agent ___action)), (:args ___action))))]
                            (.setState (:agent ___action), ___newval)
                            (.notifyWatches (:agent ___action), ___oldval, ___newval)
                        )
                    )
                    (catch Throwable ___e
                        (ยง ass ___error ___e)
                    )
                )

                (if (nil? ___error)
                    (do
                        (Agent'releasePendingSends)
                    )
                    (do
                        (.set Agent'nested, nil) ;; allow errorHandler to send
                        (when (some? (:errorHandler (:agent ___action)))
                            (try
                                (ร (:errorHandler (:agent ___action)).invoke((:agent ___action), ___error))
                                (catch Throwable ___e
                                    ;; ignore errorHandler errors
                                )
                            )
                        )
                        (when (ร (:errorMode (:agent ___action)) == Agent'CONTINUE)
                            (ยง ass ___error nil)
                        )
                    )
                )

                (let [#_"boolean" ___popped false]
                    (let [#_"ActionQueue" ___next nil]
                        (while (not ___popped)
                            (let [#_"ActionQueue" ___prior (.get (:aq (:agent ___action)))]
                                (ยง ass ___next (ร ActionQueue'new((:q ___prior).pop(), ___error)))
                                (ยง ass ___popped (ร (:aq (:agent ___action)).compareAndSet(___prior, ___next)))
                            )
                        )

                        (when (and (nil? ___error) (pos? (.count (:q ___next))))
                            (.execute (cast' AgentAction (.peek (:q ___next))))
                        )
                    )
                )
            )
            (finally
                (.set Agent'nested, nil)
            )
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method run) [#_"AgentAction" this]
        (AgentAction'doRun this)
        nil
    )
)

(class-ns Agent (ยง extends ARef)
    (ยง def #_"Keyword" Agent'CONTINUE (Keyword'intern-2 nil, "continue"))
    (ยง def #_"Keyword" Agent'FAIL (Keyword'intern-2 nil, "fail"))

    (def- #_"AtomicLong" Agent'sendThreadPoolCounter (AtomicLong. 0))
    (def- #_"AtomicLong" Agent'sendOffThreadPoolCounter (AtomicLong. 0))

    (defn- #_"ThreadFactory" Agent'createThreadFactory [#_"String" ___format, #_"AtomicLong" ___threadPoolCounter]
        (ยง reify ThreadFactory()
            #_method
            (ยง defn #_"Thread" (ยง method newThread) [#_"ThreadFactory" this, #_"Runnable" ___runnable]
                (let [#_"Thread" ___thread (Thread. ___runnable)]
                    (ร ___thread.setName(String/format(___format, (object-array [ (.getAndIncrement ___threadPoolCounter) ]))))
                    ___thread
                )
            )
        )
    )

    #_volatile
    (def #_"ExecutorService" Agent'pooledExecutor (ร Executors/newFixedThreadPool(2 + Runtime/getRuntime().availableProcessors(), createThreadFactory("cloiure-agent-send-pool-%d", sendThreadPoolCounter))))

    #_volatile
    (def #_"ExecutorService" Agent'soloExecutor (ร Executors/newCachedThreadPool(createThreadFactory("cloiure-agent-send-off-pool-%d", sendOffThreadPoolCounter))))

    (def #_"ThreadLocal<IPersistentVector>" Agent'nested (ThreadLocal.))

    (defn #_"void" Agent'shutdown []
        (.shutdown Agent'soloExecutor)
        (.shutdown Agent'pooledExecutor)
        nil
    )

    (defn- #_"Agent" Agent'init []
        (hash-map
            #_volatile
            #_"Object" :state nil
            #_"AtomicReference<ActionQueue>" :aq (AtomicReference. ActionQueue'EMPTY)

            #_volatile
            #_"Keyword" :errorMode Agent'CONTINUE
            #_volatile
            #_"IFn" :errorHandler nil
        )
    )

    (defn #_"Agent" Agent'new-1 [#_"Object" ___state]
        (Agent'new-2 ___state, nil)
    )

    (defn #_"Agent" Agent'new-2 [#_"Object" ___state, #_"IPersistentMap" ___meta]
        (let [this (merge (ARef'new-1 ___meta) (Agent'init))]
            (.setState this, ___state)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method setState) [#_"Agent" this, #_"Object" ___newState]
        (.validate this, ___newState)
        (let [#_"boolean" ___ret (ร (:state this) != ___newState)]
            (ยง ass (:state this) ___newState)
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method deref) [#_"Agent" this]
        (:state this)
    )

    #_method
    (ยง defn #_"Throwable" (ยง method getError) [#_"Agent" this]
        (:error (.get (:aq this)))
    )

    #_method
    (ยง defn #_"void" (ยง method setErrorMode) [#_"Agent" this, #_"Keyword" ___k]
        (ยง ass (:errorMode this) ___k)
        nil
    )

    #_method
    (ยง defn #_"Keyword" (ยง method getErrorMode) [#_"Agent" this]
        (:errorMode this)
    )

    #_method
    (ยง defn #_"void" (ยง method setErrorHandler) [#_"Agent" this, #_"IFn" ___f]
        (ยง ass (:errorHandler this) ___f)
        nil
    )

    #_method
    (ยง defn #_"IFn" (ยง method getErrorHandler) [#_"Agent" this]
        (:errorHandler this)
    )

    #_method
    (ยง defn #_"Object" (ยง method restart) [#_"Agent" this, #_"Object" ___newState, #_"boolean" ___clearActions]
        (ยง sync this
            (when (nil? (.getError this))
                (throw (Util'runtimeException-1 "Agent does not need a restart"))
            )
            (.validate this, ___newState)
            (ยง ass (:state this) ___newState)

            (if ___clearActions
                (do
                    (.set (:aq this), ActionQueue'EMPTY)
                )
                (do
                    (let [#_"boolean" ___restarted false]
                        (let [#_"ActionQueue" ___prior nil]
                            (while (not ___restarted)
                                (ยง ass ___prior (.get (:aq this)))
                                (ยง ass ___restarted (ร (:aq this).compareAndSet(___prior, ActionQueue'new((:q ___prior), nil))))
                            )

                            (when (pos? (.count (:q ___prior)))
                                (.execute (cast' AgentAction (.peek (:q ___prior))))
                            )
                        )
                    )
                )
            )

            ___newState
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method dispatch) [#_"Agent" this, #_"IFn" ___fn, #_"ISeq" ___args, #_"Executor" ___exec]
        (let [#_"Throwable" ___error (.getError this)]
            (when (some? ___error)
                (throw (Util'runtimeException-2 "Agent is failed, needs restart", ___error))
            )
            (let [#_"AgentAction" ___action (AgentAction'new this, ___fn, ___args, ___exec)]
                (dispatchAction ___action)

                this
            )
        )
    )

    (defn #_"void" Agent'dispatchAction [#_"AgentAction" ___action]
        (let [#_"LockingTransaction" ___trans (LockingTransaction'getRunning)]
            (cond (some? ___trans)
                (do
                    (.enqueue ___trans, ___action)
                )
                (some? (.get Agent'nested))
                (do
                    (ร Agent'nested.set((.get Agent'nested).cons(___action)))
                )
                :else
                (do
                    (.enqueue (:agent ___action), ___action)
                )
            )
            nil
        )
    )

    #_method
    (ยง defn #_"void" (ยง method enqueue) [#_"Agent" this, #_"AgentAction" ___action]
        (let [#_"boolean" ___queued false]
            (let [#_"ActionQueue" ___prior nil]
                (while (not ___queued)
                    (ยง ass ___prior (.get (:aq this)))
                    (ยง ass ___queued (ร (:aq this).compareAndSet(___prior, ActionQueue'new((cast' IPersistentStack (.cons (:q ___prior), ___action)), (:error ___prior)))))
                )

                (when (and (zero? (.count (:q ___prior))) (nil? (:error ___prior)))
                    (.execute ___action)
                )
                nil
            )
        )
    )

    #_method
    (ยง defn #_"int" (ยง method getQueueCount) [#_"Agent" this]
        (.count (:q (.get (:aq this))))
    )

    (defn #_"int" Agent'releasePendingSends []
        (let [#_"IPersistentVector" ___sends (.get Agent'nested)]
            (when (nil? ___sends)
                (ยง return 0)
            )
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___sends)) [(inc ___i)]
                (let [#_"AgentAction" ___a (cast' AgentAction (.valAt ___sends, ___i))]
                    (.enqueue (:agent ___a), ___a)
                )
            )
            (.set Agent'nested, PersistentVector'EMPTY)
            (count ___sends)
        )
    )
)
)

(java-ns cloiure.lang.AMapEntry

(ยง import java.io.StringWriter)

#_stateless
#_abstract
(class-ns AMapEntry (ยง extends APersistentVector) (ยง implements IMapEntry)
    #_protected
    (defn #_"AMapEntry" AMapEntry'new []
        (APersistentVector'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method nth) [#_"AMapEntry" this, #_"int" ___i]
        (cond (zero? ___i)
            (do
                (.key this)
            )
            (= ___i 1)
            (do
                (.val this)
            )
            :else
            (do
                (throw (IndexOutOfBoundsException.))
            )
        )
    )

    #_method
    (ยง defn- #_"IPersistentVector" (ยง method asVector) [#_"AMapEntry" this]
        (LazilyPersistentVector'createOwning (.key this), (.val this))
    )

    #_method
    (ยง defn #_"IPersistentVector" (ยง method assocN) [#_"AMapEntry" this, #_"int" ___i, #_"Object" ___val]
        (ร (.asVector this).assocN(___i, ___val))
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"AMapEntry" this]
        2
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seq) [#_"AMapEntry" this]
        (.seq (.asVector this))
    )

    #_method
    (ยง defn #_"IPersistentVector" (ยง method cons) [#_"AMapEntry" this, #_"Object" ___o]
        (ร (.asVector this).cons(___o))
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method empty) [#_"AMapEntry" this]
        nil
    )

    #_method
    (ยง defn #_"IPersistentStack" (ยง method pop) [#_"AMapEntry" this]
        (LazilyPersistentVector'createOwning (.key this))
    )

    #_method
    (ยง defn #_"Object" (ยง method setValue) [#_"AMapEntry" this, #_"Object" ___value]
        (throw (UnsupportedOperationException.))
    )
)
)

(java-ns cloiure.lang.APersistentMap

(ยง import java.util.*)

(class-ns KeySeq (ยง extends ASeq)
    (defn #_"KeySeq" KeySeq'create [#_"ISeq" ___seq]
        (when (nil? ___seq)
            (ยง return nil)
        )
        (KeySeq'new-2 ___seq, nil)
    )

    (defn #_"KeySeq" KeySeq'createFromMap [#_"IPersistentMap" ___map]
        (when (nil? ___map)
            (ยง return nil)
        )
        (let [#_"ISeq" ___seq (.seq ___map)]
            (when (nil? ___seq)
                (ยง return nil)
            )
            (KeySeq'new-2 ___seq, ___map)
        )
    )

    (defn- #_"KeySeq" KeySeq'init []
        (hash-map
            #_"ISeq" :seq nil
            #_"Iterable" :iterable nil
        )
    )

    (defn- #_"KeySeq" KeySeq'new-2 [#_"ISeq" ___seq, #_"Iterable" ___iterable]
        (let [this (merge (ASeq'new) (KeySeq'init))]
            (ยง ass (:seq this) ___seq)
            (ยง ass (:iterable this) ___iterable)
            this
        )
    )

    (defn- #_"KeySeq" KeySeq'new-3 [#_"IPersistentMap" ___meta, #_"ISeq" ___seq, #_"Iterable" ___iterable]
        (let [this (merge (ASeq'new ___meta) (KeySeq'init))]
            (ยง ass (:seq this) ___seq)
            (ยง ass (:iterable this) ___iterable)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"KeySeq" this]
        (.getKey (cast Map$Entry (.first (:seq this))))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"KeySeq" this]
        (ร this.create((:seq this).next()))
    )

    #_method
    (ยง defn #_"KeySeq" (ยง method withMeta) [#_"KeySeq" this, #_"IPersistentMap" ___meta]
        (KeySeq'new-3 ___meta, (:seq this), (:iterable this))
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"KeySeq" this]
        (when (nil? (:iterable this))
            (ยง return (.iterator super))
        )

        (when (ยง instance? IMapIterable (:iterable this))
            (ยง return (.keyIterator (cast' IMapIterable (:iterable this))))
        )

        (let [#_"Iterator" ___mapIter (.iterator (:iterable this))]
            (ยง reify Iterator()
                #_method
                (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                    (.hasNext ___mapIter)
                )

                #_method
                (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                    (.getKey (cast Map$Entry (.next ___mapIter)))
                )

                #_method
                (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                    (throw (UnsupportedOperationException.))
                )
            )
        )
    )
)

(class-ns ValSeq (ยง extends ASeq)
    (defn #_"ValSeq" ValSeq'create [#_"ISeq" ___seq]
        (when (nil? ___seq)
            (ยง return nil)
        )
        (ValSeq'new-2 ___seq, nil)
    )

    (defn #_"ValSeq" ValSeq'createFromMap [#_"IPersistentMap" ___map]
        (when (nil? ___map)
            (ยง return nil)
        )
        (let [#_"ISeq" ___seq (.seq ___map)]
            (when (nil? ___seq)
                (ยง return nil)
            )
            (ValSeq'new-2 ___seq, ___map)
        )
    )

    (defn- #_"ValSeq" ValSeq'init []
        (hash-map
            #_"ISeq" :seq nil
            #_"Iterable" :iterable nil
        )
    )

    (defn- #_"ValSeq" ValSeq'new-2 [#_"ISeq" ___seq, #_"Iterable" ___iterable]
        (let [this (merge (ASeq'new) (ValSeq'init))]
            (ยง ass (:seq this) ___seq)
            (ยง ass (:iterable this) ___iterable)
            this
        )
    )

    (defn- #_"ValSeq" ValSeq'new-3 [#_"IPersistentMap" ___meta, #_"ISeq" ___seq, #_"Iterable" ___iterable]
        (let [this (merge (ASeq'new ___meta) (ValSeq'init))]
            (ยง ass (:seq this) ___seq)
            (ยง ass (:iterable this) ___iterable)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"ValSeq" this]
        (.getValue (cast Map$Entry (.first (:seq this))))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"ValSeq" this]
        (ร this.create((:seq this).next()))
    )

    #_method
    (ยง defn #_"ValSeq" (ยง method withMeta) [#_"ValSeq" this, #_"IPersistentMap" ___meta]
        (ValSeq'new-3 ___meta, (:seq this), (:iterable this))
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"ValSeq" this]
        (when (nil? (:iterable this))
            (ยง return (.iterator super))
        )

        (when (ยง instance? IMapIterable (:iterable this))
            (ยง return (.valIterator (cast' IMapIterable (:iterable this))))
        )

        (let [#_"Iterator" ___mapIter (.iterator (:iterable this))]
            (ยง reify Iterator()
                #_method
                (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                    (.hasNext ___mapIter)
                )

                #_method
                (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                    (.getValue (cast Map$Entry (.next ___mapIter)))
                )

                #_method
                (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                    (throw (UnsupportedOperationException.))
                )
            )
        )
    )
)

#_abstract
(class-ns APersistentMap (ยง extends AFn) (ยง implements IPersistentMap, Map, Iterable, MapEquivalence, IHashEq)
    (defn- #_"APersistentMap" APersistentMap'init []
        (hash-map
            #_"int" :_hash 0
            #_"int" :_hasheq 0
        )
    )

    #_protected
    (defn #_"APersistentMap" APersistentMap'new []
        (merge (AFn'new) (APersistentMap'init))
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"APersistentMap" this]
        (RT'printString this)
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method cons) [#_"APersistentMap" this, #_"Object" ___o]
        (cond (instance? Map$Entry ___o)
            (do
                (let [#_"Map$Entry" ___e (cast Map$Entry ___o)]
                    (ยง return (ร this.assoc((.getKey ___e), (.getValue ___e))))
                )
            )
            (ยง instance? IPersistentVector ___o)
            (do
                (let [#_"IPersistentVector" ___v (cast' IPersistentVector ___o)]
                    (when (ร (count ___v) != 2)
                        (throw (IllegalArgumentException. "Vector arg to map conj must be a pair"))
                    )
                    (ยง return (ร this.assoc(___v.nth(0), ___v.nth(1))))
                )
            )
        )

        (let [#_"IPersistentMap" ___ret this]
            (loop-when-recur [#_"ISeq" ___es (RT'seq ___o)] (some? ___es) [(next ___es)]
                (let [#_"Map$Entry" ___e (cast Map$Entry (first ___es))]
                    (ยง ass ___ret (.assoc ___ret, (.getKey ___e), (.getValue ___e)))
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"APersistentMap" this, #_"Object" ___obj]
        (mapEquals this, ___obj)
    )

    (defn #_"boolean" APersistentMap'mapEquals [#_"IPersistentMap" ___m1, #_"Object" ___obj]
        (when (= ___m1 ___obj)
            (ยง return true)
        )
        (when (not (instance? Map ___obj))
            (ยง return false)
        )
        (let [#_"Map" ___m (cast Map ___obj)]
            (when (ร (.size ___m) != (count ___m1))
                (ยง return false)
            )

            (loop-when-recur [#_"ISeq" ___s (.seq ___m1)] (some? ___s) [(next ___s)]
                (let [#_"Map$Entry" ___e (cast Map$Entry (first ___s))]
                    (let [#_"boolean" ___found (.containsKey ___m, (.getKey ___e))]
                        (when (or (not ___found) (not (Util'equals (.getValue ___e), (.get ___m, (.getKey ___e)))))
                            (ยง return false)
                        )
                    )
                )
            )

            true
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"APersistentMap" this, #_"Object" ___obj]
        (when (not (instance? Map ___obj))
            (ยง return false)
        )
        (when (and (ยง instance? IPersistentMap ___obj) (not (ยง instance? MapEquivalence ___obj)))
            (ยง return false)
        )

        (let [#_"Map" ___m (cast Map ___obj)]
            (when (ร (.size ___m) != (.size this))
                (ยง return false)
            )

            (loop-when-recur [#_"ISeq" ___s (.seq this)] (some? ___s) [(next ___s)]
                (let [#_"Map$Entry" ___e (cast Map$Entry (first ___s))]
                    (let [#_"boolean" ___found (.containsKey ___m, (.getKey ___e))]
                        (when (or (not ___found) (not (Util'equiv-2oo (.getValue ___e), (.get ___m, (.getKey ___e)))))
                            (ยง return false)
                        )
                    )
                )
            )

            true
        )
    )

    #_method
    (ยง defn #_"int" (ยง method hashCode) [#_"APersistentMap" this]
        (let [#_"int" ___cached (:_hash this)]
            (when (zero? ___cached)
                (ยง ass (:_hash this) (ยง ass ___cached (mapHash this)))
            )
            ___cached
        )
    )

    (defn #_"int" APersistentMap'mapHash [#_"IPersistentMap" ___m]
        (let [#_"int" ___hash 0]
            (loop-when-recur [#_"ISeq" ___s (.seq ___m)] (some? ___s) [(next ___s)]
                (let [#_"Map$Entry" ___e (cast Map$Entry (first ___s))]
                    (ยง ass ___hash (+ ___hash (ร (if (nil? (.getKey ___e)) 0 (.hashCode (.getKey ___e))) :xor (if (nil? (.getValue ___e)) 0 (.hashCode (.getValue ___e))))))
                )
            )
            ___hash
        )
    )

    #_method
    (ยง defn #_"int" (ยง method hasheq) [#_"APersistentMap" this]
        (let [#_"int" ___cached (:_hasheq this)]
            (when (zero? ___cached)
                (ยง ass (:_hasheq this) (ยง ass ___cached (Murmur3'hashUnordered this)))
            )
            ___cached
        )
    )

    (defn #_"int" APersistentMap'mapHasheq [#_"IPersistentMap" ___m]
        (Murmur3'hashUnordered ___m)
    )

    (def #_"IFn" APersistentMap'MAKE_ENTRY
        (ยง reify AFn()
            #_method
            (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___key, #_"Object" ___val]
                (MapEntry'create ___key, ___val)
            )
        )
    )

    (def #_"IFn" APersistentMap'MAKE_KEY
        (ยง reify AFn()
            #_method
            (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___key, #_"Object" ___val]
                ___key
            )
        )
    )

    (def #_"IFn" APersistentMap'MAKE_VAL
        (ยง reify AFn()
            #_method
            (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___key, #_"Object" ___val]
                ___val
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"APersistentMap" this, #_"Object" ___arg1]
        (.valAt this, ___arg1)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"APersistentMap" this, #_"Object" ___arg1, #_"Object" ___notFound]
        (.valAt this, ___arg1, ___notFound)
    )

    #_method
    (ยง defn #_"void" (ยง method clear) [#_"APersistentMap" this]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method containsValue) [#_"APersistentMap" this, #_"Object" ___value]
        (ร (.values this).contains(___value))
    )

    #_method
    (ยง defn #_"Set" (ยง method entrySet) [#_"APersistentMap" this]
        (ยง reify AbstractSet()
            #_method
            (ยง defn #_"Iterator" (ยง method iterator) [#_"AbstractSet" this]
                (.iterator (ยง this APersistentMap))
            )

            #_method
            (ยง defn #_"int" (ยง method size) [#_"AbstractSet" this]
                (count this)
            )

            #_method
            (ยง defn #_"int" (ยง method hashCode) [#_"AbstractSet" this]
                (.hashCode (ยง this APersistentMap))
            )

            #_method
            (ยง defn #_"boolean" (ยง method contains) [#_"AbstractSet" this, #_"Object" ___o]
                (when (ยง instance? Entry ___o)
                    (let [#_"Entry" ___e (cast' Entry ___o)]
                        (let [#_"Entry" ___found (.entryAt this, (.getKey ___e))]
                            (when (and (some? ___found) (Util'equals (.getValue ___found), (.getValue ___e)))
                                (ยง return true)
                            )
                        )
                    )
                )
                false
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method get) [#_"APersistentMap" this, #_"Object" ___key]
        (.valAt this, ___key)
    )

    #_method
    (ยง defn #_"boolean" (ยง method isEmpty) [#_"APersistentMap" this]
        (zero? (count this))
    )

    #_method
    (ยง defn #_"Set" (ยง method keySet) [#_"APersistentMap" this]
        (ยง reify AbstractSet()
            #_method
            (ยง defn #_"Iterator" (ยง method iterator) [#_"AbstractSet" this]
                (let [#_"Iterator" ___mi (.iterator (ยง this APersistentMap))]
                    (ยง reify Iterator()
                        #_method
                        (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                            (.hasNext ___mi)
                        )

                        #_method
                        (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                            (let [#_"Entry" ___e (cast' Entry (next ___mi))]
                                (.getKey ___e)
                            )
                        )

                        #_method
                        (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                            (throw (UnsupportedOperationException.))
                        )
                    )
                )
            )

            #_method
            (ยง defn #_"int" (ยง method size) [#_"AbstractSet" this]
                (count this)
            )

            #_method
            (ยง defn #_"boolean" (ยง method contains) [#_"AbstractSet" this, #_"Object" ___o]
                (.containsKey (ยง this APersistentMap), ___o)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method put) [#_"APersistentMap" this, #_"Object" ___key, #_"Object" ___value]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"void" (ยง method putAll) [#_"APersistentMap" this, #_"Map" ___t]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"Object" (ยง method remove) [#_"APersistentMap" this, #_"Object" ___key]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"int" (ยง method size) [#_"APersistentMap" this]
        (count this)
    )

    #_method
    (ยง defn #_"Collection" (ยง method values) [#_"APersistentMap" this]
        (ยง reify AbstractCollection()
            #_method
            (ยง defn #_"Iterator" (ยง method iterator) [#_"AbstractCollection" this]
                (let [#_"Iterator" ___mi (.iterator (ยง this APersistentMap))]
                    (ยง reify Iterator()
                        #_method
                        (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                            (.hasNext ___mi)
                        )

                        #_method
                        (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                            (let [#_"Entry" ___e (cast' Entry (next ___mi))]
                                (.getValue ___e)
                            )
                        )

                        #_method
                        (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                            (throw (UnsupportedOperationException.))
                        )
                    )
                )
            )

            #_method
            (ยง defn #_"int" (ยง method size) [#_"AbstractCollection" this]
                (count this)
            )
        )
    )
)
)

(java-ns cloiure.lang.APersistentSet

(ยง import java.util.Collection)
(ยง import java.util.Iterator)
(ยง import java.util.Set)

#_abstract
(class-ns APersistentSet (ยง extends AFn) (ยง implements IPersistentSet, Collection, Set, IHashEq)
    (defn- #_"APersistentSet" APersistentSet'init []
        (hash-map
            #_"int" :_hash 0
            #_"int" :_hasheq 0
            #_"IPersistentMap" :impl nil
        )
    )

    #_protected
    (defn #_"APersistentSet" APersistentSet'new [#_"IPersistentMap" ___impl]
        (let [this (merge (AFn'new) (APersistentSet'init))]
            (ยง ass (:impl this) ___impl)
            this
        )
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"APersistentSet" this]
        (RT'printString this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method contains) [#_"APersistentSet" this, #_"Object" ___key]
        (.containsKey (:impl this), ___key)
    )

    #_method
    (ยง defn #_"Object" (ยง method get) [#_"APersistentSet" this, #_"Object" ___key]
        (.valAt (:impl this), ___key)
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"APersistentSet" this]
        (count (:impl this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seq) [#_"APersistentSet" this]
        (RT'keys (:impl this))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"APersistentSet" this, #_"Object" ___arg1]
        (.get this, ___arg1)
    )

    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"APersistentSet" this, #_"Object" ___obj]
        (APersistentSet'setEquals this, ___obj)
    )

    (defn #_"boolean" APersistentSet'setEquals [#_"IPersistentSet" ___s1, #_"Object" ___obj]
        (when (= ___s1 ___obj)
            (ยง return true)
        )
        (when (not (instance? Set ___obj))
            (ยง return false)
        )
        (let [#_"Set" ___m (cast Set ___obj)]
            (when (ร (.size ___m) != (count ___s1))
                (ยง return false)
            )

            (doseq [#_"Object" ___aM ___m]
                (when (not (.contains ___s1, ___aM))
                    (ยง return false)
                )
            )

            true
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"APersistentSet" this, #_"Object" ___obj]
        (when (not (instance? Set ___obj))
            (ยง return false)
        )

        (let [#_"Set" ___m (cast Set ___obj)]
            (when (ร (.size ___m) != (.size this))
                (ยง return false)
            )

            (doseq [#_"Object" ___aM ___m]
                (when (not (.contains this, ___aM))
                    (ยง return false)
                )
            )

            true
        )
    )

    #_method
    (ยง defn #_"int" (ยง method hashCode) [#_"APersistentSet" this]
        (let [#_"int" ___hash (:_hash this)]
            (when (zero? ___hash)
                (loop-when-recur [#_"ISeq" ___s (.seq this)] (some? ___s) [(next ___s)]
                    (let [#_"Object" ___e (first ___s)]
                        (ยง ass ___hash (ร ___hash + Util'hash(___e)))
                    )
                )
                (ยง ass (:_hash this) ___hash)
            )
            ___hash
        )
    )

    #_method
    (ยง defn #_"int" (ยง method hasheq) [#_"APersistentSet" this]
        (let [#_"int" ___cached (:_hasheq this)]
            (when (zero? ___cached)
                (ยง ass (:_hasheq this) (ยง ass ___cached (Murmur3'hashUnordered this)))
            )
            ___cached
        )
    )

    #_method
    (ยง defn #_"Object[]" (ยง method toArray) [#_"APersistentSet" this]
        (RT'seqToArray (.seq this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method add) [#_"APersistentSet" this, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method remove) [#_"APersistentSet" this, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method addAll) [#_"APersistentSet" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"void" (ยง method clear) [#_"APersistentSet" this]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method retainAll) [#_"APersistentSet" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method removeAll) [#_"APersistentSet" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method containsAll) [#_"APersistentSet" this, #_"Collection" ___c]
        (doseq [#_"Object" ___o ___c]
            (when (not (.contains this, ___o))
                (ยง return false)
            )
        )
        true
    )

    #_method
    (ยง defn #_"Object[]" (ยง method toArray) [#_"APersistentSet" this, #_"Object[]" ___a]
        (ร RT'seqToPassedArray((.seq this), ___a))
    )

    #_method
    (ยง defn #_"int" (ยง method size) [#_"APersistentSet" this]
        (count this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method isEmpty) [#_"APersistentSet" this]
        (zero? (count this))
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"APersistentSet" this]
        (if (ยง instance? IMapIterable (:impl this))
            (do
                (.keyIterator (cast' IMapIterable (:impl this)))
            )
            (do
                (ยง reify Iterator()
                    (ยง init
                        (hash-map
                            #_"Iterator" :iter (.iterator (:impl this))
                        )
                    )

                    #_method
                    (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                        (.hasNext (:iter this))
                    )

                    #_method
                    (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                        (.key (cast' IMapEntry (.next (:iter this))))
                    )

                    #_method
                    (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                        (throw (UnsupportedOperationException.))
                    )
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.APersistentVector

(ยง import java.util.*)

(class-ns VSeq (ยง extends ASeq) (ยง implements IndexedSeq, IReduce)
    (defn- #_"VSeq" VSeq'init []
        (hash-map
            ;; todo - something more efficient
            #_"IPersistentVector" :v nil
            #_"int" :i 0
        )
    )

    (defn #_"VSeq" VSeq'new-2 [#_"IPersistentVector" ___v, #_"int" ___i]
        (let [this (merge (ASeq'new) (VSeq'init))]
            (ยง ass (:v this) ___v)
            (ยง ass (:i this) ___i)
            this
        )
    )

    (defn #_"VSeq" VSeq'new-3 [#_"IPersistentMap" ___meta, #_"IPersistentVector" ___v, #_"int" ___i]
        (let [this (merge (ASeq'new ___meta) (VSeq'init))]
            (ยง ass (:v this) ___v)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"VSeq" this]
        (.nth (:v this), (:i this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"VSeq" this]
        (when (ร (:i this) + 1 < (:v this).count())
            (ยง return (ร VSeq'new-2((:v this), (:i this) + 1)))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method index) [#_"VSeq" this]
        (:i this)
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"VSeq" this]
        (ร (:v this).count() - (:i this))
    )

    #_method
    (ยง defn #_"VSeq" (ยง method withMeta) [#_"VSeq" this, #_"IPersistentMap" ___meta]
        (VSeq'new-3 ___meta, (:v this), (:i this))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"VSeq" this, #_"IFn" ___f]
        (let [#_"Object" ___ret (.nth (:v this), (:i this))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (:v this).count()) [(inc ___x)]
                (ยง ass ___ret (ร ___f.invoke(___ret, (:v this).nth(___x))))
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"VSeq" this, #_"IFn" ___f, #_"Object" ___start]
        (let [#_"Object" ___ret (ร ___f.invoke(___start, (:v this).nth((:i this))))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (:v this).count()) [(inc ___x)]
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
                (ยง ass ___ret (ร ___f.invoke(___ret, (:v this).nth(___x))))
            )
            (when (RT'isReduced ___ret)
                (ยง return (.deref (cast' IDeref ___ret)))
            )
            ___ret
        )
    )
)

(class-ns RSeq (ยง extends ASeq) (ยง implements IndexedSeq, Counted)
    (defn- #_"RSeq" RSeq'init []
        (hash-map
            #_"IPersistentVector" :v nil
            #_"int" :i 0
        )
    )

    (defn #_"RSeq" RSeq'new-2 [#_"IPersistentVector" ___vector, #_"int" ___i]
        (let [this (merge (ASeq'new) (RSeq'init))]
            (ยง ass (:v this) ___vector)
            (ยง ass (:i this) ___i)
            this
        )
    )

    (defn #_"RSeq" RSeq'new-3 [#_"IPersistentMap" ___meta, #_"IPersistentVector" ___v, #_"int" ___i]
        (let [this (merge (ASeq'new ___meta) (RSeq'init))]
            (ยง ass (:v this) ___v)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"RSeq" this]
        (.nth (:v this), (:i this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"RSeq" this]
        (when (> (:i this) 0)
            (ยง return (ร RSeq'new-2((:v this), (:i this) - 1)))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method index) [#_"RSeq" this]
        (:i this)
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"RSeq" this]
        (+ (:i this) 1)
    )

    #_method
    (ยง defn #_"RSeq" (ยง method withMeta) [#_"RSeq" this, #_"IPersistentMap" ___meta]
        (RSeq'new-3 ___meta, (:v this), (:i this))
    )
)

(class-ns SubVector (ยง extends APersistentVector) (ยง implements IObj)
    (defn- #_"SubVector" SubVector'init []
        (hash-map
            #_"IPersistentVector" :v nil
            #_"int" :start 0
            #_"int" :end 0
            #_"IPersistentMap" :_meta nil
        )
    )

    (defn #_"SubVector" SubVector'new [#_"IPersistentMap" ___meta, #_"IPersistentVector" ___v, #_"int" ___start, #_"int" ___end]
        (let [this (merge (APersistentVector'new) (SubVector'init))]
            (ยง ass (:_meta this) ___meta)

            (when (ยง instance? SubVector ___v)
                (let [#_"SubVector" ___sv (cast' SubVector ___v)]
                    (ยง ass ___start (ร ___start + (:start ___sv)))
                    (ยง ass ___end (ร ___end + (:start ___sv)))
                    (ยง ass ___v (:v ___sv))
                )
            )
            (ยง ass (:v this) ___v)
            (ยง ass (:start this) ___start)
            (ยง ass (:end this) ___end)
            this
        )
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"SubVector" this]
        (when (ยง instance? APersistentVector (:v this))
            (ยง return (ร (cast' APersistentVector (:v this)).rangedIterator((:start this), (:end this))))
        )
        (.iterator super)
    )

    #_method
    (ยง defn #_"Object" (ยง method nth) [#_"SubVector" this, #_"int" ___i]
        (when (or (neg? ___i) (<= (:end this) (+ (:start this) ___i)))
            (throw (IndexOutOfBoundsException.))
        )
        (ร (:v this).nth((:start this) + ___i))
    )

    #_method
    (ยง defn #_"IPersistentVector" (ยง method assocN) [#_"SubVector" this, #_"int" ___i, #_"Object" ___val]
        (cond (ร (:start this) + ___i > (:end this))
            (do
                (throw (IndexOutOfBoundsException.))
            )
            (ร (:start this) + ___i == (:end this))
            (do
                (ยง return (.cons this, ___val))
            )
        )
        (ร SubVector'new((:_meta this), (:v this).assocN((:start this) + ___i, ___val), (:start this), (:end this)))
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"SubVector" this]
        (- (:end this) (:start this))
    )

    #_method
    (ยง defn #_"IPersistentVector" (ยง method cons) [#_"SubVector" this, #_"Object" ___o]
        (ร SubVector'new((:_meta this), (:v this).assocN((:end this), ___o), (:start this), (:end this) + 1))
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method empty) [#_"SubVector" this]
        (.withMeta PersistentVector'EMPTY, (.meta this))
    )

    #_method
    (ยง defn #_"IPersistentStack" (ยง method pop) [#_"SubVector" this]
        (when (ร (:end this) - 1 == (:start this))
            (ยง return PersistentVector'EMPTY)
        )
        (ร SubVector'new((:_meta this), (:v this), (:start this), (:end this) - 1))
    )

    #_method
    (ยง defn #_"SubVector" (ยง method withMeta) [#_"SubVector" this, #_"IPersistentMap" ___meta]
        (when (ร ___meta == (:_meta this))
            (ยง return this)
        )
        (SubVector'new ___meta, (:v this), (:start this), (:end this))
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method meta) [#_"SubVector" this]
        (:_meta this)
    )
)

#_abstract
(class-ns APersistentVector (ยง extends AFn) (ยง implements IPersistentVector, Iterable, List, RandomAccess, Comparable, IHashEq)
    (defn- #_"APersistentVector" APersistentVector'init []
        (hash-map
            #_"int" :_hash 0
            #_"int" :_hasheq 0
        )
    )

    #_protected
    (defn #_"APersistentVector" APersistentVector'new []
        (merge (AFn'new) (APersistentVector'init))
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"APersistentVector" this]
        (RT'printString this)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seq) [#_"APersistentVector" this]
        (when (pos? (count this))
            (ยง return (VSeq'new-2 this, 0))
        )
        nil
    )

    #_method
    (ยง defn #_"ISeq" (ยง method rseq) [#_"APersistentVector" this]
        (when (pos? (count this))
            (ยง return (ร RSeq'new-2(this, (count this) - 1)))
        )
        nil
    )

    (defn #_"boolean" APersistentVector'doEquals [#_"IPersistentVector" ___v, #_"Object" ___obj]
        (cond (ยง instance? IPersistentVector ___obj)
            (do
                (let [#_"IPersistentVector" ___ov (cast' IPersistentVector ___obj)]
                    (when (ร (count ___ov) != (count ___v))
                        (ยง return false)
                    )
                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___v)) [(inc ___i)]
                        (when (not (ร Util'equals(___v.nth(___i), ___ov.nth(___i))))
                            (ยง return false)
                        )
                    )
                    (ยง return true)
                )
            )
            (instance? List ___obj)
            (do
                (let [#_"Collection" ___ma (cast Collection ___obj)]
                    (when (or (ร (.size ___ma) != (count ___v)) (ร (.hashCode ___ma) != (.hashCode ___v)))
                        (ยง return false)
                    )
                    (loop-when-recur [#_"Iterator" ___i1 (.iterator (cast List ___v)) #_"Iterator" ___i2 (.iterator ___ma)] (.hasNext ___i1) [___i1 ___i2]
                        (when (not (Util'equals (next ___i1), (next ___i2)))
                            (ยง return false)
                        )
                    )
                    (ยง return true)
                )
            )
            :else
            (do
                (when (not (ยง instance? Sequential ___obj))
                    (ยง return false)
                )
                (let [#_"ISeq" ___ms (RT'seq ___obj)]
                    (loop-when-recur [#_"int" ___i 0 ___ms ___ms] (ร ___i < (count ___v)) [(inc ___i) (next ___ms)]
                        (when (or (nil? ___ms) (not (ร Util'equals(___v.nth(___i), (first ___ms)))))
                            (ยง return false)
                        )
                    )
                    (when (some? ___ms)
                        (ยง return false)
                    )
                )
            )
        )

        true
    )

    (defn #_"boolean" APersistentVector'doEquiv [#_"IPersistentVector" ___v, #_"Object" ___obj]
        (cond (ยง instance? IPersistentVector ___obj)
            (do
                (let [#_"IPersistentVector" ___ov (cast' IPersistentVector ___obj)]
                    (when (ร (count ___ov) != (count ___v))
                        (ยง return false)
                    )
                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___v)) [(inc ___i)]
                        (when (not (ร Util'equiv-2oo(___v.nth(___i), ___ov.nth(___i))))
                            (ยง return false)
                        )
                    )
                    (ยง return true)
                )
            )
            (instance? List ___obj)
            (do
                (let [#_"Collection" ___ma (cast Collection ___obj)]
                    (when (ร (.size ___ma) != (count ___v))
                        (ยง return false)
                    )
                    (loop-when-recur [#_"Iterator" ___i1 (.iterator (cast List ___v)) #_"Iterator" ___i2 (.iterator ___ma)] (.hasNext ___i1) [___i1 ___i2]
                        (when (not (Util'equiv-2oo (next ___i1), (next ___i2)))
                            (ยง return false)
                        )
                    )
                    (ยง return true)
                )
            )
            :else
            (do
                (when (not (ยง instance? Sequential ___obj))
                    (ยง return false)
                )
                (let [#_"ISeq" ___ms (RT'seq ___obj)]
                    (loop-when-recur [#_"int" ___i 0 ___ms ___ms] (ร ___i < (count ___v)) [(inc ___i) (next ___ms)]
                        (when (or (nil? ___ms) (not (ร Util'equiv-2oo(___v.nth(___i), (first ___ms)))))
                            (ยง return false)
                        )
                    )
                    (when (some? ___ms)
                        (ยง return false)
                    )
                )
            )
        )

        true
    )

    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"APersistentVector" this, #_"Object" ___obj]
        (when (= ___obj this)
            (ยง return true)
        )
        (doEquals this, ___obj)
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"APersistentVector" this, #_"Object" ___obj]
        (when (= ___obj this)
            (ยง return true)
        )
        (APersistentVector'doEquiv this, ___obj)
    )

    #_method
    (ยง defn #_"int" (ยง method hashCode) [#_"APersistentVector" this]
        (let [#_"int" ___hash (:_hash this)]
            (when (zero? ___hash)
                (ยง ass ___hash 1)
                (loop-when-recur [#_"int" ___i 0] (ร ___i < (count this)) [(inc ___i)]
                    (let [#_"Object" ___obj (.nth this, ___i)]
                        (ยง ass ___hash (+ (* 31 ___hash) (if (nil? ___obj) 0 (.hashCode ___obj))))
                    )
                )
                (ยง ass (:_hash this) ___hash)
            )
            ___hash
        )
    )

    #_method
    (ยง defn #_"int" (ยง method hasheq) [#_"APersistentVector" this]
        (let [#_"int" ___hash (:_hasheq this)]
            (when (zero? ___hash)
                (ยง let [#_"int" ___n]
                    (ยง ass ___hash 1)

                    (loop-when-recur [___n 0] (ร ___n < (count this)) [(inc ___n)]
                        (ยง ass ___hash (ร 31 * ___hash + Util'hasheq(this.nth(___n))))
                    )

                    (ยง ass (:_hasheq this) (ยง ass ___hash (Murmur3'mixCollHash ___hash, ___n)))
                )
            )
            ___hash
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method get) [#_"APersistentVector" this, #_"int" ___index]
        (.nth this, ___index)
    )

    #_method
    (ยง defn #_"Object" (ยง method nth) [#_"APersistentVector" this, #_"int" ___i, #_"Object" ___notFound]
        (when (and (<= 0 ___i) (< ___i (count this)))
            (ยง return (.nth this, ___i))
        )
        ___notFound
    )

    #_method
    (ยง defn #_"Object" (ยง method remove) [#_"APersistentVector" this, #_"int" ___i]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"int" (ยง method indexOf) [#_"APersistentVector" this, #_"Object" ___o]
        (loop-when-recur [#_"int" ___i 0] (ร ___i < (count this)) [(inc ___i)]
            (when (ร Util'equiv-2oo(this.nth(___i), ___o))
                (ยง return ___i)
            )
        )
        -1
    )

    #_method
    (ยง defn #_"int" (ยง method lastIndexOf) [#_"APersistentVector" this, #_"Object" ___o]
        (loop-when-recur [#_"int" ___i (ร (count this) - 1)] (>= ___i 0) [(dec ___i)]
            (when (ร Util'equiv-2oo(this.nth(___i), ___o))
                (ยง return ___i)
            )
        )
        -1
    )

    #_method
    (ยง defn #_"ListIterator" (ยง method listIterator) [#_"APersistentVector" this]
        (.listIterator this, 0)
    )

    #_method
    (ยง defn #_"ListIterator" (ยง method listIterator) [#_"APersistentVector" this, #_"int" ___index]
        (ยง reify ListIterator()
            (let [#_"int" ___nexti ___index]
                #_method
                (ยง defn #_"boolean" (ยง method hasNext) [#_"ListIterator" this]
                    (ร (___nexti < (count this)))
                )

                #_method
                (ยง defn #_"Object" (ยง method next) [#_"ListIterator" this]
                    (if (ร ___nexti < (count this))
                        (let [_ (.nth this, ___nexti)]
                            (ยง ass ___nexti (inc ___nexti))
                            _
                        )
                        (do
                            (throw (NoSuchElementException.))
                        )
                    )
                )

                #_method
                (ยง defn #_"boolean" (ยง method hasPrevious) [#_"ListIterator" this]
                    (> ___nexti 0)
                )

                #_method
                (ยง defn #_"Object" (ยง method previous) [#_"ListIterator" this]
                    (if (> ___nexti 0)
                        (do
                            (ยง ass ___nexti (dec ___nexti))
                            (.nth this, ___nexti)
                        )
                        (do
                            (throw (NoSuchElementException.))
                        )
                    )
                )

                #_method
                (ยง defn #_"int" (ยง method nextIndex) [#_"ListIterator" this]
                    ___nexti
                )

                #_method
                (ยง defn #_"int" (ยง method previousIndex) [#_"ListIterator" this]
                    (dec ___nexti)
                )

                #_method
                (ยง defn #_"void" (ยง method remove) [#_"ListIterator" this]
                    (throw (UnsupportedOperationException.))
                )

                #_method
                (ยง defn #_"void" (ยง method set) [#_"ListIterator" this, #_"Object" ___o]
                    (throw (UnsupportedOperationException.))
                )

                #_method
                (ยง defn #_"void" (ยง method add) [#_"ListIterator" this, #_"Object" ___o]
                    (throw (UnsupportedOperationException.))
                )
            )
        )
    )

    #_method
    (ยง defn #_"Iterator" (ยง method rangedIterator) [#_"APersistentVector" this, #_"int" ___start, #_"int" ___end]
        (ยง reify Iterator()
            (let [#_"int" ___i ___start]
                #_method
                (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                    (< ___i ___end)
                )

                #_method
                (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                    (if (< ___i ___end)
                        (let [_ (.nth this, ___i)]
                            (ยง ass ___i (inc ___i))
                            _
                        )
                        (do
                            (throw (NoSuchElementException.))
                        )
                    )
                )

                #_method
                (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                    (throw (UnsupportedOperationException.))
                )
            )
        )
    )

    #_method
    (ยง defn #_"List" (ยง method subList) [#_"APersistentVector" this, #_"int" ___fromIndex, #_"int" ___toIndex]
        (cast List (RT'subvec this, ___fromIndex, ___toIndex))
    )

    #_method
    (ยง defn #_"Object" (ยง method set) [#_"APersistentVector" this, #_"int" ___i, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"void" (ยง method add) [#_"APersistentVector" this, #_"int" ___i, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method addAll) [#_"APersistentVector" this, #_"int" ___i, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"APersistentVector" this, #_"Object" ___arg1]
        (when (Util'isInteger ___arg1)
            (ยง return (ร this.nth((cast Number ___arg1).intValue())))
        )
        (throw (IllegalArgumentException. "Key must be integer"))
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"APersistentVector" this]
        ;; todo - something more efficient
        (ยง reify Iterator()
            (let [#_"int" ___i 0]
                #_method
                (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                    (ร (___i < (count this)))
                )

                #_method
                (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                    (if (ร ___i < (count this))
                        (let [_ (.nth this, ___i)]
                            (ยง ass ___i (inc ___i))
                            _
                        )
                        (do
                            (throw (NoSuchElementException.))
                        )
                    )
                )

                #_method
                (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                    (throw (UnsupportedOperationException.))
                )
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method peek) [#_"APersistentVector" this]
        (when (pos? (count this))
            (ยง return (ร this.nth((count this) - 1)))
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method containsKey) [#_"APersistentVector" this, #_"Object" ___key]
        (when (not (Util'isInteger ___key))
            (ยง return false)
        )
        (let [#_"int" ___i (.intValue (cast Number ___key))]
            (and (<= 0 ___i) (< ___i (count this)))
        )
    )

    #_method
    (ยง defn #_"IMapEntry" (ยง method entryAt) [#_"APersistentVector" this, #_"Object" ___key]
        (when (Util'isInteger ___key)
            (let [#_"int" ___i (.intValue (cast Number ___key))]
                (when (and (<= 0 ___i) (< ___i (count this)))
                    (ยง return (cast' IMapEntry (ร MapEntry'create(___key, this.nth(___i)))))
                )
            )
        )
        nil
    )

    #_method
    (ยง defn #_"IPersistentVector" (ยง method assoc) [#_"APersistentVector" this, #_"Object" ___key, #_"Object" ___val]
        (when (Util'isInteger ___key)
            (let [#_"int" ___i (.intValue (cast Number ___key))]
                (ยง return (.assocN this, ___i, ___val))
            )
        )
        (throw (IllegalArgumentException. "Key must be integer"))
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"APersistentVector" this, #_"Object" ___key, #_"Object" ___notFound]
        (when (Util'isInteger ___key)
            (let [#_"int" ___i (.intValue (cast Number ___key))]
                (when (and (<= 0 ___i) (< ___i (count this)))
                    (ยง return (.nth this, ___i))
                )
            )
        )
        ___notFound
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"APersistentVector" this, #_"Object" ___key]
        (.valAt this, ___key, nil)
    )

    #_method
    (ยง defn #_"Object[]" (ยง method toArray) [#_"APersistentVector" this]
        (let [#_"Object[]" ___ret (make-array Object (count this))]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (count this)) [(inc ___i)]
                (ยง ass (ยง aget ___ret ___i) (.nth this, ___i))
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method add) [#_"APersistentVector" this, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method remove) [#_"APersistentVector" this, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method addAll) [#_"APersistentVector" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"void" (ยง method clear) [#_"APersistentVector" this]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method retainAll) [#_"APersistentVector" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method removeAll) [#_"APersistentVector" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method containsAll) [#_"APersistentVector" this, #_"Collection" ___c]
        (doseq [#_"Object" ___o ___c]
            (when (not (.contains this, ___o))
                (ยง return false)
            )
        )
        true
    )

    #_method
    (ยง defn #_"Object[]" (ยง method toArray) [#_"APersistentVector" this, #_"Object[]" ___a]
        (ร RT'seqToPassedArray((.seq this), ___a))
    )

    #_method
    (ยง defn #_"int" (ยง method size) [#_"APersistentVector" this]
        (count this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method isEmpty) [#_"APersistentVector" this]
        (zero? (count this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method contains) [#_"APersistentVector" this, #_"Object" ___o]
        (loop-when-recur [#_"ISeq" ___s (.seq this)] (some? ___s) [(next ___s)]
            (when (ร Util'equiv-2oo((first ___s), ___o))
                (ยง return true)
            )
        )
        false
    )

    #_method
    (ยง defn #_"int" (ยง method length) [#_"APersistentVector" this]
        (count this)
    )

    #_method
    (ยง defn #_"int" (ยง method compareTo) [#_"APersistentVector" this, #_"Object" ___o]
        (let [#_"IPersistentVector" ___v (cast' IPersistentVector ___o)]
            (cond (ร (count this) < (count ___v))
                (do
                    (ยง return -1)
                )
                (ร (count this) > (count ___v))
                (do
                    (ยง return 1)
                )
            )
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (count this)) [(inc ___i)]
                (let [#_"int" ___c (ร Util'compare(this.nth(___i), ___v.nth(___i)))]
                    (when (not= ___c 0)
                        (ยง return ___c)
                    )
                )
            )
            0
        )
    )
)
)

(java-ns cloiure.lang.ARef

(ยง import java.util.Map)

#_abstract
(class-ns ARef (ยง extends AReference) (ยง implements IRef)
    (defn- #_"ARef" ARef'init []
        (hash-map
            #_protected
            #_volatile
            #_"IFn" :validator nil
            #_volatile
            #_"IPersistentMap" :watches PersistentHashMap'EMPTY
        )
    )

    (defn #_"ARef" ARef'new-0 []
        (merge (AReference'new) (ARef'init))
    )

    (defn #_"ARef" ARef'new-1 [#_"IPersistentMap" ___meta]
        (merge (AReference'new ___meta) (ARef'init))
    )

    #_method
    (ยง defn #_"void" (ยง method validate) [#_"ARef" this, #_"IFn" ___vf, #_"Object" ___val]
        (try
            (when (and (some? ___vf) (not (RT'booleanCast-1o (.invoke ___vf, ___val))))
                (throw (IllegalStateException. "Invalid reference state"))
            )
            (catch RuntimeException ___re
                (throw ___re)
            )
            (catch Exception ___e
                (throw (IllegalStateException. "Invalid reference state", ___e))
            )
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method validate) [#_"ARef" this, #_"Object" ___val]
        (.validate this, (:validator this), ___val)
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method setValidator) [#_"ARef" this, #_"IFn" ___vf]
        (ร this.validate(___vf, (.deref this)))
        (ยง ass (:validator this) ___vf)
        nil
    )

    #_method
    (ยง defn #_"IFn" (ยง method getValidator) [#_"ARef" this]
        (:validator this)
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method getWatches) [#_"ARef" this]
        (:watches this)
    )

    #_method
    (ยง defn #_"IRef" (ยง method addWatch) [#_"ARef" this, #_"Object" ___key, #_"IFn" ___callback]
        (ยง sync this
            (ยง ass (:watches this) (.assoc (:watches this), ___key, ___callback))
            this
        )
    )

    #_method
    (ยง defn #_"IRef" (ยง method removeWatch) [#_"ARef" this, #_"Object" ___key]
        (ยง sync this
            (ยง ass (:watches this) (.without (:watches this), ___key))
            this
        )
    )

    #_method
    (ยง defn #_"void" (ยง method notifyWatches) [#_"ARef" this, #_"Object" ___oldval, #_"Object" ___newval]
        (let [#_"IPersistentMap" ___ws (:watches this)]
            (when (pos? (count ___ws))
                (loop-when-recur [#_"ISeq" ___s (.seq ___ws)] (some? ___s) [(next ___s)]
                    (let [#_"Map$Entry" ___e (cast Map$Entry (first ___s))]
                        (let [#_"IFn" ___fn (cast' IFn (.getValue ___e))]
                            (when (some? ___fn)
                                (ร ___fn.invoke((.getKey ___e), this, ___oldval, ___newval))
                            )
                        )
                    )
                )
            )
            nil
        )
    )
)
)

(java-ns cloiure.lang.AReference

(class-ns AReference (ยง implements IReference)
    (defn- #_"AReference" AReference'init []
        (hash-map
            #_"IPersistentMap" :_meta nil
        )
    )

    (defn #_"AReference" AReference'new-0 []
        (AReference'new-1 nil)
    )

    (defn #_"AReference" AReference'new-1 [#_"IPersistentMap" ___meta]
        (let [this (AReference'init)]
            (ยง ass (:_meta this) ___meta)
            this
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method meta) [#_"AReference" this]
        (ยง sync this
            (:_meta this)
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method alterMeta) [#_"AReference" this, #_"IFn" ___alter, #_"ISeq" ___args]
        (ยง sync this
            (ยง ass (:_meta this) (cast' IPersistentMap (ร ___alter.applyTo(Cons'new-2((:_meta this), ___args)))))
            (:_meta this)
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method resetMeta) [#_"AReference" this, #_"IPersistentMap" ___m]
        (ยง sync this
            (ยง ass (:_meta this) ___m)
            ___m
        )
    )
)
)

(java-ns cloiure.lang.ArityException

(class-ns ArityException (ยง extends IllegalArgumentException)
    (defn- #_"ArityException" ArityException'init []
        (hash-map
            #_"int" :actual 0
            #_"String" :name nil
        )
    )

    (defn #_"ArityException" ArityException'new-2 [#_"int" ___actual, #_"String" ___name]
        (ArityException'new-3 ___actual, ___name, nil)
    )

    (defn #_"ArityException" ArityException'new-3 [#_"int" ___actual, #_"String" ___name, #_"Throwable" ___cause]
        (let [this (merge (ยง foreign IllegalArgumentException'new (str "Wrong number of args (" ___actual ") passed to: " ___name), ___cause) (ArityException'init))]
            (ยง ass (:actual this) ___actual)
            (ยง ass (:name this) ___name)
            this
        )
    )
)
)

(java-ns cloiure.lang.ArrayChunk

(class-ns ArrayChunk (ยง implements IChunk)
    (defn- #_"ArrayChunk" ArrayChunk'init []
        (hash-map
            #_"Object[]" :array nil
            #_"int" :off 0
            #_"int" :end 0
        )
    )

    (defn #_"ArrayChunk" ArrayChunk'new-1 [#_"Object[]" ___array]
        (ArrayChunk'new-3 ___array, 0, (ยง alength ___array))
    )

    (defn #_"ArrayChunk" ArrayChunk'new-2 [#_"Object[]" ___array, #_"int" ___off]
        (ArrayChunk'new-3 ___array, ___off, (ยง alength ___array))
    )

    (defn #_"ArrayChunk" ArrayChunk'new-3 [#_"Object[]" ___array, #_"int" ___off, #_"int" ___end]
        (let [this (ArrayChunk'init)]
            (ยง ass (:array this) ___array)
            (ยง ass (:off this) ___off)
            (ยง ass (:end this) ___end)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method nth) [#_"ArrayChunk" this, #_"int" ___i]
        (ยง aget (:array this) (ร (:off this) + ___i))
    )

    #_method
    (ยง defn #_"Object" (ยง method nth) [#_"ArrayChunk" this, #_"int" ___i, #_"Object" ___notFound]
        (when (and (<= 0 ___i) (< ___i (count this)))
            (ยง return (.nth this, ___i))
        )
        ___notFound
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ArrayChunk" this]
        (- (:end this) (:off this))
    )

    #_method
    (ยง defn #_"IChunk" (ยง method dropFirst) [#_"ArrayChunk" this]
        (when (ร (:off this) == (:end this))
            (throw (IllegalStateException. "dropFirst of empty chunk"))
        )
        (ร ArrayChunk'new-3((:array this), (:off this) + 1, (:end this)))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArrayChunk" this, #_"IFn" ___f, #_"Object" ___start]
        (let [#_"Object" ___ret (ร ___f.invoke(___start, (:array this)[(:off this)]))]
            (when (RT'isReduced ___ret)
                (ยง return ___ret)
            )
            (loop-when-recur [#_"int" ___x (+ (:off this) 1)] (< ___x (:end this)) [(inc ___x)]
                (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
                (when (RT'isReduced ___ret)
                    (ยง return ___ret)
                )
            )
            ___ret
        )
    )
)
)

(java-ns cloiure.lang.ArrayIter

(ยง import java.lang.reflect.Array)
(ยง import java.util.Iterator)

(class-ns ArrayIter_int (ยง implements Iterator<Long>)
    (defn- #_"ArrayIter_int" ArrayIter_int'init []
        (hash-map
            #_"int[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArrayIter_int" ArrayIter_int'new [#_"int[]" ___array, #_"int" ___i]
        (let [this (ArrayIter_int'init)]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"ArrayIter_int" this]
        (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
    )

    #_method
    (ยง defn #_"Long" (ยง method next) [#_"ArrayIter_int" this]
        (when (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
            (let [_ (ร Long/valueOf((:array this)[(:i this)]))]
                (ยง ass (:i this) (+ (:i this) 1))
                (ยง return _)
            )
        )
        (throw (java.util.NoSuchElementException.))
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"ArrayIter_int" this]
        (throw (UnsupportedOperationException. "remove() not supported"))
    )
)

(class-ns ArrayIter_float (ยง implements Iterator<Double>)
    (defn- #_"ArrayIter_float" ArrayIter_float'init []
        (hash-map
            #_"float[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArrayIter_float" ArrayIter_float'new [#_"float[]" ___array, #_"int" ___i]
        (let [this (ArrayIter_float'init)]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"ArrayIter_float" this]
        (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
    )

    #_method
    (ยง defn #_"Double" (ยง method next) [#_"ArrayIter_float" this]
        (when (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
            (let [_ (ร Double/valueOf((:array this)[(:i this)]))]
                (ยง ass (:i this) (+ (:i this) 1))
                (ยง return _)
            )
        )
        (throw (java.util.NoSuchElementException.))
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"ArrayIter_float" this]
        (throw (UnsupportedOperationException. "remove() not supported"))
    )
)

(class-ns ArrayIter_double (ยง implements Iterator<Double>)
    (defn- #_"ArrayIter_double" ArrayIter_double'init []
        (hash-map
            #_"double[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArrayIter_double" ArrayIter_double'new [#_"double[]" ___array, #_"int" ___i]
        (let [this (ArrayIter_double'init)]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"ArrayIter_double" this]
        (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
    )

    #_method
    (ยง defn #_"Double" (ยง method next) [#_"ArrayIter_double" this]
        (when (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
            (let [_ (ยง aget (:array this) (:i this))]
                (ยง ass (:i this) (+ (:i this) 1))
                (ยง return _)
            )
        )
        (throw (java.util.NoSuchElementException.))
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"ArrayIter_double" this]
        (throw (UnsupportedOperationException. "remove() not supported"))
    )
)

(class-ns ArrayIter_long (ยง implements Iterator<Long>)
    (defn- #_"ArrayIter_long" ArrayIter_long'init []
        (hash-map
            #_"long[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArrayIter_long" ArrayIter_long'new [#_"long[]" ___array, #_"int" ___i]
        (let [this (ArrayIter_long'init)]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"ArrayIter_long" this]
        (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
    )

    #_method
    (ยง defn #_"Long" (ยง method next) [#_"ArrayIter_long" this]
        (when (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
            (let [_ (ร Long/valueOf((:array this)[(:i this)]))]
                (ยง ass (:i this) (+ (:i this) 1))
                (ยง return _)
            )
        )
        (throw (java.util.NoSuchElementException.))
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"ArrayIter_long" this]
        (throw (UnsupportedOperationException. "remove() not supported"))
    )
)

(class-ns ArrayIter_byte (ยง implements Iterator<Byte>)
    (defn- #_"ArrayIter_byte" ArrayIter_byte'init []
        (hash-map
            #_"byte[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArrayIter_byte" ArrayIter_byte'new [#_"byte[]" ___array, #_"int" ___i]
        (let [this (ArrayIter_byte'init)]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"ArrayIter_byte" this]
        (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
    )

    #_method
    (ยง defn #_"Byte" (ยง method next) [#_"ArrayIter_byte" this]
        (when (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
            (let [_ (ยง aget (:array this) (:i this))]
                (ยง ass (:i this) (+ (:i this) 1))
                (ยง return _)
            )
        )
        (throw (java.util.NoSuchElementException.))
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"ArrayIter_byte" this]
        (throw (UnsupportedOperationException. "remove() not supported"))
    )
)

(class-ns ArrayIter_char (ยง implements Iterator<Character>)
    (defn- #_"ArrayIter_char" ArrayIter_char'init []
        (hash-map
            #_"char[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArrayIter_char" ArrayIter_char'new [#_"char[]" ___array, #_"int" ___i]
        (let [this (ArrayIter_char'init)]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"ArrayIter_char" this]
        (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
    )

    #_method
    (ยง defn #_"Character" (ยง method next) [#_"ArrayIter_char" this]
        (when (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
            (let [_ (ยง aget (:array this) (:i this))]
                (ยง ass (:i this) (+ (:i this) 1))
                (ยง return _)
            )
        )
        (throw (java.util.NoSuchElementException.))
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"ArrayIter_char" this]
        (throw (UnsupportedOperationException. "remove() not supported"))
    )
)

(class-ns ArrayIter_short (ยง implements Iterator<Long>)
    (defn- #_"ArrayIter_short" ArrayIter_short'init []
        (hash-map
            #_"short[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArrayIter_short" ArrayIter_short'new [#_"short[]" ___array, #_"int" ___i]
        (let [this (ArrayIter_short'init)]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"ArrayIter_short" this]
        (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
    )

    #_method
    (ยง defn #_"Long" (ยง method next) [#_"ArrayIter_short" this]
        (when (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
            (let [_ (ร Long/valueOf((:array this)[(:i this)]))]
                (ยง ass (:i this) (+ (:i this) 1))
                (ยง return _)
            )
        )
        (throw (java.util.NoSuchElementException.))
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"ArrayIter_short" this]
        (throw (UnsupportedOperationException. "remove() not supported"))
    )
)

(class-ns ArrayIter_boolean (ยง implements Iterator<Boolean>)
    (defn- #_"ArrayIter_boolean" ArrayIter_boolean'init []
        (hash-map
            #_"boolean[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArrayIter_boolean" ArrayIter_boolean'new [#_"boolean[]" ___array, #_"int" ___i]
        (let [this (ArrayIter_boolean'init)]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"ArrayIter_boolean" this]
        (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
    )

    #_method
    (ยง defn #_"Boolean" (ยง method next) [#_"ArrayIter_boolean" this]
        (when (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
            (let [_ (ร Boolean/valueOf((:array this)[(:i this)]))]
                (ยง ass (:i this) (+ (:i this) 1))
                (ยง return _)
            )
        )
        (throw (java.util.NoSuchElementException.))
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"ArrayIter_boolean" this]
        (throw (UnsupportedOperationException. "remove() not supported"))
    )
)

(class-ns ArrayIter (ยง implements Iterator)
    (def #_"Iterator" ArrayIter'EMPTY_ITERATOR
        (ยง reify Iterator()
            #_method
            (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                false
            )

            #_method
            (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                (throw (java.util.NoSuchElementException.))
            )

            #_method
            (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                (throw (UnsupportedOperationException. "remove() not supported"))
            )
        )
    )

    (defn #_"Iterator" ArrayIter'create-0 []
        ArrayIter'EMPTY_ITERATOR
    )

    (defn #_"Iterator" ArrayIter'create-1 [#_"Object..." ___array]
        (when (or (nil? ___array) (zero? (ยง alength ___array)))
            (ยง return ArrayIter'EMPTY_ITERATOR)
        )
        (ArrayIter'new ___array, 0)
    )

    (defn #_"Iterator" ArrayIter'createFromObject [#_"Object" ___array]
        (when (or (nil? ___array) (zero? (Array/getLength ___array)))
            (ยง return ArrayIter'EMPTY_ITERATOR)
        )
        (let [#_"Class" ___aclass (.getClass ___array)]
            (when (ร ___aclass == (ยง class int[]))
                (ยง return (ร ArrayIter_int'new((int[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class float[]))
                (ยง return (ร ArrayIter_float'new((float[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class double[]))
                (ยง return (ร ArrayIter_double'new((double[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class long[]))
                (ยง return (ร ArrayIter_long'new((long[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class byte[]))
                (ยง return (ร ArrayIter_byte'new((byte[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class char[]))
                (ยง return (ร ArrayIter_char'new((char[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class short[]))
                (ยง return (ร ArrayIter_short'new((short[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class boolean[]))
                (ยง return (ร ArrayIter_boolean'new((boolean[]) ___array, 0)))
            )
            (ArrayIter'new ___array, 0)
        )
    )

    (defn- #_"ArrayIter" ArrayIter'init []
        (hash-map
            #_"Object[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArrayIter" ArrayIter'new [#_"Object" ___array, #_"int" ___i]
        (let [this (ArrayIter'init)]
            (ยง ass (:i this) ___i)
            (ยง ass (:array this) (ร (Object[]) ___array))
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"ArrayIter" this]
        (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
    )

    #_method
    (ยง defn #_"Object" (ยง method next) [#_"ArrayIter" this]
        (when (and (some? (:array this)) (< (:i this) (ยง alength (:array this))))
            (let [_ (ยง aget (:array this) (:i this))]
                (ยง ass (:i this) (+ (:i this) 1))
                (ยง return _)
            )
        )
        (throw (java.util.NoSuchElementException.))
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"ArrayIter" this]
        (throw (UnsupportedOperationException. "remove() not supported"))
    )
)
)

(java-ns cloiure.lang.ArraySeq

(ยง import java.lang.reflect.Array)

(class-ns ArraySeq_int (ยง extends ASeq) (ยง implements IndexedSeq, IReduce)
    (defn- #_"ArraySeq_int" ArraySeq_int'init []
        (hash-map
            #_"int[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArraySeq_int" ArraySeq_int'new [#_"IPersistentMap" ___meta, #_"int[]" ___array, #_"int" ___i]
        (let [this (merge (ASeq'new ___meta) (ArraySeq_int'init))]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"ArraySeq_int" this]
        (ยง aget (:array this) (:i this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"ArraySeq_int" this]
        (when (ร (:i this) + 1 < (ยง alength (:array this)))
            (ยง return (ร ArraySeq_int'new((.meta this), (:array this), (:i this) + 1)))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ArraySeq_int" this]
        (ร (ยง alength (:array this)) - (:i this))
    )

    #_method
    (ยง defn #_"int" (ยง method index) [#_"ArraySeq_int" this]
        (:i this)
    )

    #_method
    (ยง defn #_"ArraySeq_int" (ยง method withMeta) [#_"ArraySeq_int" this, #_"IPersistentMap" ___meta]
        (ArraySeq_int'new ___meta, (:array this), (:i this))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_int" this, #_"IFn" ___f]
        (let [#_"Object" ___ret (ยง aget (:array this) (:i this))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_int" this, #_"IFn" ___f, #_"Object" ___start]
        (let [#_"Object" ___ret (ร ___f.invoke(___start, (:array this)[(:i this)]))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
                (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
            )
            (when (RT'isReduced ___ret)
                (ยง return (.deref (cast' IDeref ___ret)))
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"int" (ยง method indexOf) [#_"ArraySeq_int" this, #_"Object" ___o]
        (when (instance? Number ___o)
            (let [#_"int" ___k (.intValue (cast Number ___o))]
                (loop-when-recur [#_"int" ___j (:i this)] (ร ___j < (ยง alength (:array this))) [(inc ___j)]
                    (when (ร ___k == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )

        -1
    )

    #_method
    (ยง defn #_"int" (ยง method lastIndexOf) [#_"ArraySeq_int" this, #_"Object" ___o]
        (when (instance? Number ___o)
            (let [#_"int" ___k (.intValue (cast Number ___o))]
                (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
                    (when (ร ___k == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )

        -1
    )
)

(class-ns ArraySeq_float (ยง extends ASeq) (ยง implements IndexedSeq, IReduce)
    (defn- #_"ArraySeq_float" ArraySeq_float'init []
        (hash-map
            #_"float[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArraySeq_float" ArraySeq_float'new [#_"IPersistentMap" ___meta, #_"float[]" ___array, #_"int" ___i]
        (let [this (merge (ASeq'new ___meta) (ArraySeq_float'init))]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"ArraySeq_float" this]
        (ร Numbers'num-1f((:array this)[(:i this)]))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"ArraySeq_float" this]
        (when (ร (:i this) + 1 < (ยง alength (:array this)))
            (ยง return (ร ArraySeq_float'new((.meta this), (:array this), (:i this) + 1)))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ArraySeq_float" this]
        (ร (ยง alength (:array this)) - (:i this))
    )

    #_method
    (ยง defn #_"int" (ยง method index) [#_"ArraySeq_float" this]
        (:i this)
    )

    #_method
    (ยง defn #_"ArraySeq_float" (ยง method withMeta) [#_"ArraySeq_float" this, #_"IPersistentMap" ___meta]
        (ArraySeq_float'new ___meta, (:array this), (:i this))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_float" this, #_"IFn" ___f]
        (let [#_"Object" ___ret (ร Numbers'num-1f((:array this)[(:i this)]))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (ยง ass ___ret (ร ___f.invoke(___ret, Numbers'num-1f((:array this)[___x]))))
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_float" this, #_"IFn" ___f, #_"Object" ___start]
        (let [#_"Object" ___ret (ร ___f.invoke(___start, Numbers'num-1f((:array this)[(:i this)])))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
                (ยง ass ___ret (ร ___f.invoke(___ret, Numbers'num-1f((:array this)[___x]))))
            )
            (when (RT'isReduced ___ret)
                (ยง return (.deref (cast' IDeref ___ret)))
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"int" (ยง method indexOf) [#_"ArraySeq_float" this, #_"Object" ___o]
        (when (instance? Number ___o)
            (let [#_"float" ___f (.floatValue (cast Number ___o))]
                (loop-when-recur [#_"int" ___j (:i this)] (ร ___j < (ยง alength (:array this))) [(inc ___j)]
                    (when (ร ___f == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )
        -1
    )

    #_method
    (ยง defn #_"int" (ยง method lastIndexOf) [#_"ArraySeq_float" this, #_"Object" ___o]
        (when (instance? Number ___o)
            (let [#_"float" ___f (.floatValue (cast Number ___o))]
                (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
                    (when (ร ___f == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )
        -1
    )
)

(class-ns ArraySeq_double (ยง extends ASeq) (ยง implements IndexedSeq, IReduce)
    (defn- #_"ArraySeq_double" ArraySeq_double'init []
        (hash-map
            #_"double[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArraySeq_double" ArraySeq_double'new [#_"IPersistentMap" ___meta, #_"double[]" ___array, #_"int" ___i]
        (let [this (merge (ASeq'new ___meta) (ArraySeq_double'init))]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"ArraySeq_double" this]
        (ยง aget (:array this) (:i this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"ArraySeq_double" this]
        (when (ร (:i this) + 1 < (ยง alength (:array this)))
            (ยง return (ร ArraySeq_double'new((.meta this), (:array this), (:i this) + 1)))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ArraySeq_double" this]
        (ร (ยง alength (:array this)) - (:i this))
    )

    #_method
    (ยง defn #_"int" (ยง method index) [#_"ArraySeq_double" this]
        (:i this)
    )

    #_method
    (ยง defn #_"ArraySeq_double" (ยง method withMeta) [#_"ArraySeq_double" this, #_"IPersistentMap" ___meta]
        (ArraySeq_double'new ___meta, (:array this), (:i this))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_double" this, #_"IFn" ___f]
        (let [#_"Object" ___ret (ยง aget (:array this) (:i this))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_double" this, #_"IFn" ___f, #_"Object" ___start]
        (let [#_"Object" ___ret (ร ___f.invoke(___start, (:array this)[(:i this)]))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
                (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
            )
            (when (RT'isReduced ___ret)
                (ยง return (.deref (cast' IDeref ___ret)))
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"int" (ยง method indexOf) [#_"ArraySeq_double" this, #_"Object" ___o]
        (when (instance? Number ___o)
            (let [#_"double" ___d (.doubleValue (cast Number ___o))]
                (loop-when-recur [#_"int" ___j (:i this)] (ร ___j < (ยง alength (:array this))) [(inc ___j)]
                    (when (ร ___d == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )

        -1
    )

    #_method
    (ยง defn #_"int" (ยง method lastIndexOf) [#_"ArraySeq_double" this, #_"Object" ___o]
        (when (instance? Number ___o)
            (let [#_"double" ___d (.doubleValue (cast Number ___o))]
                (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
                    (when (ร ___d == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )

        -1
    )
)

(class-ns ArraySeq_long (ยง extends ASeq) (ยง implements IndexedSeq, IReduce)
    (defn- #_"ArraySeq_long" ArraySeq_long'init []
        (hash-map
            #_"long[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArraySeq_long" ArraySeq_long'new [#_"IPersistentMap" ___meta, #_"long[]" ___array, #_"int" ___i]
        (let [this (merge (ASeq'new ___meta) (ArraySeq_long'init))]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"ArraySeq_long" this]
        (ร Numbers'num-1l((:array this)[(:i this)]))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"ArraySeq_long" this]
        (when (ร (:i this) + 1 < (ยง alength (:array this)))
            (ยง return (ร ArraySeq_long'new((.meta this), (:array this), (:i this) + 1)))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ArraySeq_long" this]
        (ร (ยง alength (:array this)) - (:i this))
    )

    #_method
    (ยง defn #_"int" (ยง method index) [#_"ArraySeq_long" this]
        (:i this)
    )

    #_method
    (ยง defn #_"ArraySeq_long" (ยง method withMeta) [#_"ArraySeq_long" this, #_"IPersistentMap" ___meta]
        (ArraySeq_long'new ___meta, (:array this), (:i this))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_long" this, #_"IFn" ___f]
        (let [#_"Object" ___ret (ร Numbers'num-1l((:array this)[(:i this)]))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (ยง ass ___ret (ร ___f.invoke(___ret, Numbers'num-1l((:array this)[___x]))))
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_long" this, #_"IFn" ___f, #_"Object" ___start]
        (let [#_"Object" ___ret (ร ___f.invoke(___start, Numbers'num-1l((:array this)[(:i this)])))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
                (ยง ass ___ret (ร ___f.invoke(___ret, Numbers'num-1l((:array this)[___x]))))
            )
            (when (RT'isReduced ___ret)
                (ยง return (.deref (cast' IDeref ___ret)))
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"int" (ยง method indexOf) [#_"ArraySeq_long" this, #_"Object" ___o]
        (when (instance? Number ___o)
            (let [#_"long" ___l (.longValue (cast Number ___o))]
                (loop-when-recur [#_"int" ___j (:i this)] (ร ___j < (ยง alength (:array this))) [(inc ___j)]
                    (when (ร ___l == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )

        -1
    )

    #_method
    (ยง defn #_"int" (ยง method lastIndexOf) [#_"ArraySeq_long" this, #_"Object" ___o]
        (when (instance? Number ___o)
            (let [#_"long" ___l (.longValue (cast Number ___o))]
                (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
                    (when (ร ___l == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )

        -1
    )
)

(class-ns ArraySeq_byte (ยง extends ASeq) (ยง implements IndexedSeq, IReduce)
    (defn- #_"ArraySeq_byte" ArraySeq_byte'init []
        (hash-map
            #_"byte[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArraySeq_byte" ArraySeq_byte'new [#_"IPersistentMap" ___meta, #_"byte[]" ___array, #_"int" ___i]
        (let [this (merge (ASeq'new ___meta) (ArraySeq_byte'init))]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"ArraySeq_byte" this]
        (ยง aget (:array this) (:i this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"ArraySeq_byte" this]
        (when (ร (:i this) + 1 < (ยง alength (:array this)))
            (ยง return (ร ArraySeq_byte'new((.meta this), (:array this), (:i this) + 1)))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ArraySeq_byte" this]
        (ร (ยง alength (:array this)) - (:i this))
    )

    #_method
    (ยง defn #_"int" (ยง method index) [#_"ArraySeq_byte" this]
        (:i this)
    )

    #_method
    (ยง defn #_"ArraySeq_byte" (ยง method withMeta) [#_"ArraySeq_byte" this, #_"IPersistentMap" ___meta]
        (ArraySeq_byte'new ___meta, (:array this), (:i this))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_byte" this, #_"IFn" ___f]
        (let [#_"Object" ___ret (ยง aget (:array this) (:i this))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_byte" this, #_"IFn" ___f, #_"Object" ___start]
        (let [#_"Object" ___ret (ร ___f.invoke(___start, (:array this)[(:i this)]))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
                (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
            )
            (when (RT'isReduced ___ret)
                (ยง return (.deref (cast' IDeref ___ret)))
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"int" (ยง method indexOf) [#_"ArraySeq_byte" this, #_"Object" ___o]
        (when (instance? Byte ___o)
            (let [#_"byte" ___b (.byteValue (cast Byte ___o))]
                (loop-when-recur [#_"int" ___j (:i this)] (ร ___j < (ยง alength (:array this))) [(inc ___j)]
                    (when (ร ___b == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )
        (when (nil? ___o)
            (ยง return -1)
        )
        (loop-when-recur [#_"int" ___j (:i this)] (ร ___j < (ยง alength (:array this))) [(inc ___j)]
            (when (ร ___o.equals((:array this)[___j]))
                (ยง return (- ___j (:i this)))
            )
        )
        -1
    )

    #_method
    (ยง defn #_"int" (ยง method lastIndexOf) [#_"ArraySeq_byte" this, #_"Object" ___o]
        (when (instance? Byte ___o)
            (let [#_"byte" ___b (.byteValue (cast Byte ___o))]
                (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
                    (when (ร ___b == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )
        (when (nil? ___o)
            (ยง return -1)
        )
        (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
            (when (ร ___o.equals((:array this)[___j]))
                (ยง return (- ___j (:i this)))
            )
        )
        -1
    )
)

(class-ns ArraySeq_char (ยง extends ASeq) (ยง implements IndexedSeq, IReduce)
    (defn- #_"ArraySeq_char" ArraySeq_char'init []
        (hash-map
            #_"char[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArraySeq_char" ArraySeq_char'new [#_"IPersistentMap" ___meta, #_"char[]" ___array, #_"int" ___i]
        (let [this (merge (ASeq'new ___meta) (ArraySeq_char'init))]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"ArraySeq_char" this]
        (ยง aget (:array this) (:i this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"ArraySeq_char" this]
        (when (ร (:i this) + 1 < (ยง alength (:array this)))
            (ยง return (ร ArraySeq_char'new((.meta this), (:array this), (:i this) + 1)))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ArraySeq_char" this]
        (ร (ยง alength (:array this)) - (:i this))
    )

    #_method
    (ยง defn #_"int" (ยง method index) [#_"ArraySeq_char" this]
        (:i this)
    )

    #_method
    (ยง defn #_"ArraySeq_char" (ยง method withMeta) [#_"ArraySeq_char" this, #_"IPersistentMap" ___meta]
        (ArraySeq_char'new ___meta, (:array this), (:i this))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_char" this, #_"IFn" ___f]
        (let [#_"Object" ___ret (ยง aget (:array this) (:i this))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_char" this, #_"IFn" ___f, #_"Object" ___start]
        (let [#_"Object" ___ret (ร ___f.invoke(___start, (:array this)[(:i this)]))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
                (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
            )
            (when (RT'isReduced ___ret)
                (ยง return (.deref (cast' IDeref ___ret)))
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"int" (ยง method indexOf) [#_"ArraySeq_char" this, #_"Object" ___o]
        (when (instance? Character ___o)
            (let [#_"char" ___c (.charValue (cast Character ___o))]
                (loop-when-recur [#_"int" ___j (:i this)] (ร ___j < (ยง alength (:array this))) [(inc ___j)]
                    (when (ร ___c == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )
        (when (nil? ___o)
            (ยง return -1)
        )
        (loop-when-recur [#_"int" ___j (:i this)] (ร ___j < (ยง alength (:array this))) [(inc ___j)]
            (when (ร ___o.equals((:array this)[___j]))
                (ยง return (- ___j (:i this)))
            )
        )
        -1
    )

    #_method
    (ยง defn #_"int" (ยง method lastIndexOf) [#_"ArraySeq_char" this, #_"Object" ___o]
        (when (instance? Character ___o)
            (let [#_"char" ___c (.charValue (cast Character ___o))]
                (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
                    (when (ร ___c == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )
        (when (nil? ___o)
            (ยง return -1)
        )
        (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
            (when (ร ___o.equals((:array this)[___j]))
                (ยง return (- ___j (:i this)))
            )
        )
        -1
    )
)

(class-ns ArraySeq_short (ยง extends ASeq) (ยง implements IndexedSeq, IReduce)
    (defn- #_"ArraySeq_short" ArraySeq_short'init []
        (hash-map
            #_"short[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArraySeq_short" ArraySeq_short'new [#_"IPersistentMap" ___meta, #_"short[]" ___array, #_"int" ___i]
        (let [this (merge (ASeq'new ___meta) (ArraySeq_short'init))]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"ArraySeq_short" this]
        (ยง aget (:array this) (:i this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"ArraySeq_short" this]
        (when (ร (:i this) + 1 < (ยง alength (:array this)))
            (ยง return (ร ArraySeq_short'new((.meta this), (:array this), (:i this) + 1)))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ArraySeq_short" this]
        (ร (ยง alength (:array this)) - (:i this))
    )

    #_method
    (ยง defn #_"int" (ยง method index) [#_"ArraySeq_short" this]
        (:i this)
    )

    #_method
    (ยง defn #_"ArraySeq_short" (ยง method withMeta) [#_"ArraySeq_short" this, #_"IPersistentMap" ___meta]
        (ArraySeq_short'new ___meta, (:array this), (:i this))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_short" this, #_"IFn" ___f]
        (let [#_"Object" ___ret (ยง aget (:array this) (:i this))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_short" this, #_"IFn" ___f, #_"Object" ___start]
        (let [#_"Object" ___ret (ร ___f.invoke(___start, (:array this)[(:i this)]))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
                (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
            )
            (when (RT'isReduced ___ret)
                (ยง return (.deref (cast' IDeref ___ret)))
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"int" (ยง method indexOf) [#_"ArraySeq_short" this, #_"Object" ___o]
        (when (instance? Short ___o)
            (let [#_"short" ___s (.shortValue (cast Short ___o))]
                (loop-when-recur [#_"int" ___j (:i this)] (ร ___j < (ยง alength (:array this))) [(inc ___j)]
                    (when (ร ___s == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )
        (when (nil? ___o)
            (ยง return -1)
        )
        (loop-when-recur [#_"int" ___j (:i this)] (ร ___j < (ยง alength (:array this))) [(inc ___j)]
            (when (ร ___o.equals((:array this)[___j]))
                (ยง return (- ___j (:i this)))
            )
        )
        -1
    )

    #_method
    (ยง defn #_"int" (ยง method lastIndexOf) [#_"ArraySeq_short" this, #_"Object" ___o]
        (when (instance? Short ___o)
            (let [#_"short" ___s (.shortValue (cast Short ___o))]
                (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
                    (when (ร ___s == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )
        (when (nil? ___o)
            (ยง return -1)
        )
        (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
            (when (ร ___o.equals((:array this)[___j]))
                (ยง return (- ___j (:i this)))
            )
        )
        -1
    )
)

(class-ns ArraySeq_boolean (ยง extends ASeq) (ยง implements IndexedSeq, IReduce)
    (defn- #_"ArraySeq_boolean" ArraySeq_boolean'init []
        (hash-map
            #_"boolean[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArraySeq_boolean" ArraySeq_boolean'new [#_"IPersistentMap" ___meta, #_"boolean[]" ___array, #_"int" ___i]
        (let [this (merge (ASeq'new ___meta) (ArraySeq_boolean'init))]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"ArraySeq_boolean" this]
        (ยง aget (:array this) (:i this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"ArraySeq_boolean" this]
        (when (ร (:i this) + 1 < (ยง alength (:array this)))
            (ยง return (ร ArraySeq_boolean'new((.meta this), (:array this), (:i this) + 1)))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ArraySeq_boolean" this]
        (ร (ยง alength (:array this)) - (:i this))
    )

    #_method
    (ยง defn #_"int" (ยง method index) [#_"ArraySeq_boolean" this]
        (:i this)
    )

    #_method
    (ยง defn #_"ArraySeq_boolean" (ยง method withMeta) [#_"ArraySeq_boolean" this, #_"IPersistentMap" ___meta]
        (ArraySeq_boolean'new ___meta, (:array this), (:i this))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_boolean" this, #_"IFn" ___f]
        (let [#_"Object" ___ret (ยง aget (:array this) (:i this))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq_boolean" this, #_"IFn" ___f, #_"Object" ___start]
        (let [#_"Object" ___ret (ร ___f.invoke(___start, (:array this)[(:i this)]))]
            (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
                (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
            )
            (when (RT'isReduced ___ret)
                (ยง return (.deref (cast' IDeref ___ret)))
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"int" (ยง method indexOf) [#_"ArraySeq_boolean" this, #_"Object" ___o]
        (when (instance? Boolean ___o)
            (let [#_"boolean" ___b (.booleanValue (cast Boolean ___o))]
                (loop-when-recur [#_"int" ___j (:i this)] (ร ___j < (ยง alength (:array this))) [(inc ___j)]
                    (when (ร ___b == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )
        (when (nil? ___o)
            (ยง return -1)
        )
        (loop-when-recur [#_"int" ___j (:i this)] (ร ___j < (ยง alength (:array this))) [(inc ___j)]
            (when (ร ___o.equals((:array this)[___j]))
                (ยง return (- ___j (:i this)))
            )
        )
        -1
    )

    #_method
    (ยง defn #_"int" (ยง method lastIndexOf) [#_"ArraySeq_boolean" this, #_"Object" ___o]
        (when (instance? Boolean ___o)
            (let [#_"boolean" ___b (.booleanValue (cast Boolean ___o))]
                (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
                    (when (ร ___b == (:array this)[___j])
                        (ยง return (- ___j (:i this)))
                    )
                )
            )
        )
        (when (nil? ___o)
            (ยง return -1)
        )
        (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
            (when (ร ___o.equals((:array this)[___j]))
                (ยง return (- ___j (:i this)))
            )
        )
        -1
    )
)

(class-ns ArraySeq (ยง extends ASeq) (ยง implements IndexedSeq, IReduce)
    (defn #_"ArraySeq" ArraySeq'create-0 []
        nil
    )

    (defn #_"ArraySeq" ArraySeq'create-1 [#_"Object..." ___array]
        (when (or (nil? ___array) (zero? (ยง alength ___array)))
            (ยง return nil)
        )
        (ArraySeq'new-2 ___array, 0)
    )

    (defn #_"ISeq" ArraySeq'createFromObject [#_"Object" ___array]
        (when (or (nil? ___array) (zero? (Array/getLength ___array)))
            (ยง return nil)
        )
        (let [#_"Class" ___aclass (.getClass ___array)]
            (when (ร ___aclass == (ยง class int[]))
                (ยง return (ร ArraySeq_int'new(nil, (int[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class float[]))
                (ยง return (ร ArraySeq_float'new(nil, (float[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class double[]))
                (ยง return (ร ArraySeq_double'new(nil, (double[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class long[]))
                (ยง return (ร ArraySeq_long'new(nil, (long[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class byte[]))
                (ยง return (ร ArraySeq_byte'new(nil, (byte[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class char[]))
                (ยง return (ร ArraySeq_char'new(nil, (char[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class short[]))
                (ยง return (ร ArraySeq_short'new(nil, (short[]) ___array, 0)))
            )
            (when (ร ___aclass == (ยง class boolean[]))
                (ยง return (ร ArraySeq_boolean'new(nil, (boolean[]) ___array, 0)))
            )
            (ArraySeq'new-2 ___array, 0)
        )
    )

    (defn- #_"ArraySeq" ArraySeq'init []
        (hash-map
            #_"Object[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"ArraySeq" ArraySeq'new-2 [#_"Object" ___array, #_"int" ___i]
        (let [this (merge (ASeq'new) (ArraySeq'init))]
            (ยง ass (:i this) ___i)
            (ยง ass (:array this) (ร (Object[]) ___array))
            this
        )
    )

    (defn #_"ArraySeq" ArraySeq'new-3 [#_"IPersistentMap" ___meta, #_"Object" ___array, #_"int" ___i]
        (let [this (merge (ASeq'new ___meta) (ArraySeq'init))]
            (ยง ass (:i this) ___i)
            (ยง ass (:array this) (ร (Object[]) ___array))
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"ArraySeq" this]
        (when (some? (:array this))
            (ยง return (ยง aget (:array this) (:i this)))
        )
        nil
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"ArraySeq" this]
        (when (and (some? (:array this)) (< (inc (:i this)) (ยง alength (:array this))))
            (ยง return (ArraySeq'new-2 (:array this), (inc (:i this))))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ArraySeq" this]
        (when (some? (:array this))
            (ยง return (- (ยง alength (:array this)) (:i this)))
        )
        0
    )

    #_method
    (ยง defn #_"int" (ยง method index) [#_"ArraySeq" this]
        (:i this)
    )

    #_method
    (ยง defn #_"ArraySeq" (ยง method withMeta) [#_"ArraySeq" this, #_"IPersistentMap" ___meta]
        (ArraySeq'new-3 ___meta, (:array this), (:i this))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq" this, #_"IFn" ___f]
        (when (some? (:array this))
            (let [#_"Object" ___ret (ยง aget (:array this) (:i this))]
                (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                    (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
                    (when (RT'isReduced ___ret)
                        (ยง return (.deref (cast' IDeref ___ret)))
                    )
                )
                (ยง return ___ret)
            )
        )
        nil
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"ArraySeq" this, #_"IFn" ___f, #_"Object" ___start]
        (when (some? (:array this))
            (let [#_"Object" ___ret (ร ___f.invoke(___start, (:array this)[(:i this)]))]
                (loop-when-recur [#_"int" ___x (+ (:i this) 1)] (ร ___x < (ยง alength (:array this))) [(inc ___x)]
                    (when (RT'isReduced ___ret)
                        (ยง return (.deref (cast' IDeref ___ret)))
                    )
                    (ยง ass ___ret (ร ___f.invoke(___ret, (:array this)[___x])))
                )
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
                (ยง return ___ret)
            )
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method indexOf) [#_"ArraySeq" this, #_"Object" ___o]
        (when (some? (:array this))
            (loop-when-recur [#_"int" ___j (:i this)] (ร ___j < (ยง alength (:array this))) [(inc ___j)]
                (when (ร Util'equals(___o, (:array this)[___j]))
                    (ยง return (- ___j (:i this)))
                )
            )
        )
        -1
    )

    #_method
    (ยง defn #_"int" (ยง method lastIndexOf) [#_"ArraySeq" this, #_"Object" ___o]
        (when (some? (:array this))
            (if (nil? ___o)
                (do
                    (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
                        (when (nil? (ยง aget (:array this) ___j))
                            (ยง return (- ___j (:i this)))
                        )
                    )
                )
                (do
                    (loop-when-recur [#_"int" ___j (ร (ยง alength (:array this)) - 1)] (ร ___j >= (:i this)) [(dec ___j)]
                        (when (ร ___o.equals((:array this)[___j]))
                            (ยง return (- ___j (:i this)))
                        )
                    )
                )
            )
        )
        -1
    )
)
)

(java-ns cloiure.lang.ASeq

(ยง import java.util.*)

#_abstract
(class-ns ASeq (ยง extends Obj) (ยง implements ISeq, Sequential, List, IHashEq)
    (defn- #_"ASeq" ASeq'init []
        (hash-map
            #_transient
            #_"int" :_hash 0
            #_transient
            #_"int" :_hasheq 0
        )
    )

    #_protected
    (defn #_"ASeq" ASeq'new-1 [#_"IPersistentMap" ___meta]
        (merge (Obj'new ___meta) (ASeq'init))
    )

    #_protected
    (defn #_"ASeq" ASeq'new-0 []
        (merge (Obj'new) (ASeq'init))
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"ASeq" this]
        (RT'printString this)
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method empty) [#_"ASeq" this]
        PersistentList'EMPTY
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"ASeq" this, #_"Object" ___obj]
        (when (not (or (ยง instance? Sequential ___obj) (instance? List ___obj)))
            (ยง return false)
        )
        (let [#_"ISeq" ___ms (RT'seq ___obj)]
            (loop-when-recur [#_"ISeq" ___s (.seq this) ___ms ___ms] (some? ___s) [(next ___s) (next ___ms)]
                (when (or (nil? ___ms) (not (Util'equiv-2oo (first ___s), (first ___ms))))
                    (ยง return false)
                )
            )
            (nil? ___ms)
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"ASeq" this, #_"Object" ___obj]
        (when (= this ___obj)
            (ยง return true)
        )
        (when (not (or (ยง instance? Sequential ___obj) (instance? List ___obj)))
            (ยง return false)
        )
        (let [#_"ISeq" ___ms (RT'seq ___obj)]
            (loop-when-recur [#_"ISeq" ___s (.seq this) ___ms ___ms] (some? ___s) [(next ___s) (next ___ms)]
                (when (or (nil? ___ms) (not (Util'equals (first ___s), (first ___ms))))
                    (ยง return false)
                )
            )
            (nil? ___ms)
        )
    )

    #_method
    (ยง defn #_"int" (ยง method hashCode) [#_"ASeq" this]
        (when (zero? (:_hash this))
            (let [#_"int" ___hash 1]
                (loop-when-recur [#_"ISeq" ___s (.seq this)] (some? ___s) [(next ___s)]
                    (ยง ass ___hash (+ (* 31 ___hash) (if (nil? (first ___s)) 0 (.hashCode (first ___s)))))
                )
                (ยง ass (:_hash this) ___hash)
            )
        )
        (:_hash this)
    )

    #_method
    (ยง defn #_"int" (ยง method hasheq) [#_"ASeq" this]
        (when (zero? (:_hasheq this))
            (ยง ass (:_hasheq this) (Murmur3'hashOrdered this))
        )
        (:_hasheq this)
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ASeq" this]
        (let [#_"int" ___i 1]
            (loop-when-recur [#_"ISeq" ___s (next this) ___i ___i] (some? ___s) [(next ___s) (inc ___i)]
                (when (ยง instance? Counted ___s)
                    (ยง return (ร ___i + (count ___s)))
                )
            )
            ___i
        )
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seq) [#_"ASeq" this]
        this
    )

    #_method
    (ยง defn #_"ISeq" (ยง method cons) [#_"ASeq" this, #_"Object" ___o]
        (Cons'new-2 ___o, this)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method more) [#_"ASeq" this]
        (let [#_"ISeq" ___s (next this)]
            (when (nil? ___s)
                (ยง return PersistentList'EMPTY)
            )
            ___s
        )
    )

    #_method
    (ยง defn #_"Object[]" (ยง method toArray) [#_"ASeq" this]
        (RT'seqToArray (.seq this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method add) [#_"ASeq" this, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method remove) [#_"ASeq" this, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method addAll) [#_"ASeq" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"void" (ยง method clear) [#_"ASeq" this]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method retainAll) [#_"ASeq" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method removeAll) [#_"ASeq" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method containsAll) [#_"ASeq" this, #_"Collection" ___c]
        (doseq [#_"Object" ___o ___c]
            (when (not (.contains this, ___o))
                (ยง return false)
            )
        )
        true
    )

    #_method
    (ยง defn #_"Object[]" (ยง method toArray) [#_"ASeq" this, #_"Object[]" ___a]
        (ร RT'seqToPassedArray((.seq this), ___a))
    )

    #_method
    (ยง defn #_"int" (ยง method size) [#_"ASeq" this]
        (count this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method isEmpty) [#_"ASeq" this]
        (nil? (.seq this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method contains) [#_"ASeq" this, #_"Object" ___o]
        (loop-when-recur [#_"ISeq" ___s (.seq this)] (some? ___s) [(next ___s)]
            (when (ร Util'equiv-2oo((first ___s), ___o))
                (ยง return true)
            )
        )
        false
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"ASeq" this]
        (SeqIterator'new this)
    )

    #_method
    (ยง defn- #_"List" (ยง method reify) [#_"ASeq" this]
        (Collections/unmodifiableList (ArrayList. this))
    )

    #_method
    (ยง defn #_"List" (ยง method subList) [#_"ASeq" this, #_"int" ___fromIndex, #_"int" ___toIndex]
        (ร (.reify this).subList(___fromIndex, ___toIndex))
    )

    #_method
    (ยง defn #_"Object" (ยง method set) [#_"ASeq" this, #_"int" ___index, #_"Object" ___element]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"Object" (ยง method remove) [#_"ASeq" this, #_"int" ___index]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"int" (ยง method indexOf) [#_"ASeq" this, #_"Object" ___o]
        (loop-when-recur [#_"ISeq" ___s (.seq this) #_"int" ___i 0] (some? ___s) [(next ___s) (inc ___i)]
            (when (ร Util'equiv-2oo((first ___s), ___o))
                (ยง return ___i)
            )
        )
        -1
    )

    #_method
    (ยง defn #_"int" (ยง method lastIndexOf) [#_"ASeq" this, #_"Object" ___o]
        (ร (.reify this).lastIndexOf(___o))
    )

    #_method
    (ยง defn #_"ListIterator" (ยง method listIterator) [#_"ASeq" this]
        (.listIterator (.reify this))
    )

    #_method
    (ยง defn #_"ListIterator" (ยง method listIterator) [#_"ASeq" this, #_"int" ___index]
        (ร (.reify this).listIterator(___index))
    )

    #_method
    (ยง defn #_"Object" (ยง method get) [#_"ASeq" this, #_"int" ___index]
        (RT'nth-2 this, ___index)
    )

    #_method
    (ยง defn #_"void" (ยง method add) [#_"ASeq" this, #_"int" ___index, #_"Object" ___element]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method addAll) [#_"ASeq" this, #_"int" ___index, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )
)
)

(java-ns cloiure.lang.Associative

(ยง defprotocol Associative #_(ยง extends IPersistentCollection, ILookup)
    #_abstract
    (#_"boolean" Associative'''(ยง method containsKey) [#_"Associative" this, #_"Object" ___key])
    #_abstract
    (#_"IMapEntry" Associative'''(ยง method entryAt) [#_"Associative" this, #_"Object" ___key])
    #_abstract
    (#_"Associative" Associative'''(ยง method assoc) [#_"Associative" this, #_"Object" ___key, #_"Object" ___val])
)
)

(java-ns cloiure.lang.Atom

(ยง import java.util.concurrent.atomic.AtomicReference)

(class-ns Atom (ยง extends ARef) (ยง implements IAtom2)
    (defn- #_"Atom" Atom'init []
        (hash-map
            #_"AtomicReference" :state nil
        )
    )

    (defn #_"Atom" Atom'new-1 [#_"Object" ___state]
        (let [this (merge (ARef'new-0) (Atom'init))]
            (ยง ass (:state this) (AtomicReference. ___state))
            this
        )
    )

    (defn #_"Atom" Atom'new-2 [#_"Object" ___state, #_"IPersistentMap" ___meta]
        (let [this (merge (ARef'new-1 ___meta) (Atom'init))]
            (ยง ass (:state this) (AtomicReference. ___state))
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method deref) [#_"Atom" this]
        (.get (:state this))
    )

    #_method
    (ยง defn #_"Object" (ยง method swap) [#_"Atom" this, #_"IFn" ___f]
        (while true
            (let [#_"Object" ___v (.deref this)]
                (let [#_"Object" ___newv (.invoke ___f, ___v)]
                    (.validate this, ___newv)
                    (when (.compareAndSet (:state this), ___v, ___newv)
                        (.notifyWatches this, ___v, ___newv)
                        (ยง return ___newv)
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method swap) [#_"Atom" this, #_"IFn" ___f, #_"Object" ___arg]
        (while true
            (let [#_"Object" ___v (.deref this)]
                (let [#_"Object" ___newv (.invoke ___f, ___v, ___arg)]
                    (.validate this, ___newv)
                    (when (.compareAndSet (:state this), ___v, ___newv)
                        (.notifyWatches this, ___v, ___newv)
                        (ยง return ___newv)
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method swap) [#_"Atom" this, #_"IFn" ___f, #_"Object" ___arg1, #_"Object" ___arg2]
        (while true
            (let [#_"Object" ___v (.deref this)]
                (let [#_"Object" ___newv (.invoke ___f, ___v, ___arg1, ___arg2)]
                    (.validate this, ___newv)
                    (when (.compareAndSet (:state this), ___v, ___newv)
                        (.notifyWatches this, ___v, ___newv)
                        (ยง return ___newv)
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method swap) [#_"Atom" this, #_"IFn" ___f, #_"Object" ___x, #_"Object" ___y, #_"ISeq" ___args]
        (while true
            (let [#_"Object" ___v (.deref this)]
                (let [#_"Object" ___newv (ร ___f.applyTo(RT'listStar-4(___v, ___x, ___y, ___args)))]
                    (.validate this, ___newv)
                    (when (.compareAndSet (:state this), ___v, ___newv)
                        (.notifyWatches this, ___v, ___newv)
                        (ยง return ___newv)
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"IPersistentVector" (ยง method swapVals) [#_"Atom" this, #_"IFn" ___f]
        (while true
            (let [#_"Object" ___oldv (.deref this)]
                (let [#_"Object" ___newv (.invoke ___f, ___oldv)]
                    (.validate this, ___newv)
                    (when (.compareAndSet (:state this), ___oldv, ___newv)
                        (.notifyWatches this, ___oldv, ___newv)
                        (ยง return (LazilyPersistentVector'createOwning ___oldv, ___newv))
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"IPersistentVector" (ยง method swapVals) [#_"Atom" this, #_"IFn" ___f, #_"Object" ___arg]
        (while true
            (let [#_"Object" ___oldv (.deref this)]
                (let [#_"Object" ___newv (.invoke ___f, ___oldv, ___arg)]
                    (.validate this, ___newv)
                    (when (.compareAndSet (:state this), ___oldv, ___newv)
                        (.notifyWatches this, ___oldv, ___newv)
                        (ยง return (LazilyPersistentVector'createOwning ___oldv, ___newv))
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"IPersistentVector" (ยง method swapVals) [#_"Atom" this, #_"IFn" ___f, #_"Object" ___arg1, #_"Object" ___arg2]
        (while true
            (let [#_"Object" ___oldv (.deref this)]
                (let [#_"Object" ___newv (.invoke ___f, ___oldv, ___arg1, ___arg2)]
                    (.validate this, ___newv)
                    (when (.compareAndSet (:state this), ___oldv, ___newv)
                        (.notifyWatches this, ___oldv, ___newv)
                        (ยง return (LazilyPersistentVector'createOwning ___oldv, ___newv))
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"IPersistentVector" (ยง method swapVals) [#_"Atom" this, #_"IFn" ___f, #_"Object" ___x, #_"Object" ___y, #_"ISeq" ___args]
        (while true
            (let [#_"Object" ___oldv (.deref this)]
                (let [#_"Object" ___newv (ร ___f.applyTo(RT'listStar-4(___oldv, ___x, ___y, ___args)))]
                    (.validate this, ___newv)
                    (when (.compareAndSet (:state this), ___oldv, ___newv)
                        (.notifyWatches this, ___oldv, ___newv)
                        (ยง return (LazilyPersistentVector'createOwning ___oldv, ___newv))
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method compareAndSet) [#_"Atom" this, #_"Object" ___oldv, #_"Object" ___newv]
        (.validate this, ___newv)
        (let [#_"boolean" ___ret (.compareAndSet (:state this), ___oldv, ___newv)]
            (when ___ret
                (.notifyWatches this, ___oldv, ___newv)
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reset) [#_"Atom" this, #_"Object" ___newval]
        (let [#_"Object" ___oldval (.get (:state this))]
            (.validate this, ___newval)
            (.set (:state this), ___newval)
            (.notifyWatches this, ___oldval, ___newval)
            ___newval
        )
    )

    #_method
    (ยง defn #_"IPersistentVector" (ยง method resetVals) [#_"Atom" this, #_"Object" ___newv]
        (.validate this, ___newv)
        (while true
            (let [#_"Object" ___oldv (.deref this)]
                (when (.compareAndSet (:state this), ___oldv, ___newv)
                    (.notifyWatches this, ___oldv, ___newv)
                    (ยง return (LazilyPersistentVector'createOwning ___oldv, ___newv))
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.ATransientMap

(ยง import java.util.Map)

#_stateless
#_abstract
(class-ns ATransientMap (ยง extends AFn) (ยง implements ITransientMap, ITransientAssociative2)
    #_protected
    (defn #_"ATransientMap" ATransientMap'new []
        (AFn'new)
    )

    #_abstract
    (ยง defn #_"void" (ยง method ensureEditable) [#_"ATransientMap" this])
    #_abstract
    (ยง defn #_"ITransientMap" (ยง method doAssoc) [#_"ATransientMap" this, #_"Object" ___key, #_"Object" ___val])
    #_abstract
    (ยง defn #_"ITransientMap" (ยง method doWithout) [#_"ATransientMap" this, #_"Object" ___key])
    #_abstract
    (ยง defn #_"Object" (ยง method doValAt) [#_"ATransientMap" this, #_"Object" ___key, #_"Object" ___notFound])
    #_abstract
    (ยง defn #_"int" (ยง method doCount) [#_"ATransientMap" this])
    #_abstract
    (ยง defn #_"IPersistentMap" (ยง method doPersistent) [#_"ATransientMap" this])

    #_method
    (ยง defn #_"ITransientMap" (ยง method conj) [#_"ATransientMap" this, #_"Object" ___o]
        (.ensureEditable this)
        (cond (instance? Map$Entry ___o)
            (do
                (let [#_"Map$Entry" ___e (cast Map$Entry ___o)]
                    (ยง return (ร this.assoc((.getKey ___e), (.getValue ___e))))
                )
            )
            (ยง instance? IPersistentVector ___o)
            (do
                (let [#_"IPersistentVector" ___v (cast' IPersistentVector ___o)]
                    (when (ร (count ___v) != 2)
                        (throw (IllegalArgumentException. "Vector arg to map conj must be a pair"))
                    )
                    (ยง return (ร this.assoc(___v.nth(0), ___v.nth(1))))
                )
            )
        )

        (let [#_"ITransientMap" ___ret this]
            (loop-when-recur [#_"ISeq" ___es (RT'seq ___o)] (some? ___es) [(next ___es)]
                (let [#_"Map$Entry" ___e (cast Map$Entry (first ___es))]
                    (ยง ass ___ret (ร ___ret.assoc((.getKey ___e), (.getValue ___e))))
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"ATransientMap" this, #_"Object" ___arg1]
        (.valAt this, ___arg1)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"ATransientMap" this, #_"Object" ___arg1, #_"Object" ___notFound]
        (.valAt this, ___arg1, ___notFound)
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"ATransientMap" this, #_"Object" ___key]
        (.valAt this, ___key, nil)
    )

    #_method
    (ยง defn #_"ITransientMap" (ยง method assoc) [#_"ATransientMap" this, #_"Object" ___key, #_"Object" ___val]
        (.ensureEditable this)
        (.doAssoc this, ___key, ___val)
    )

    #_method
    (ยง defn #_"ITransientMap" (ยง method without) [#_"ATransientMap" this, #_"Object" ___key]
        (.ensureEditable this)
        (.doWithout this, ___key)
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method persistent) [#_"ATransientMap" this]
        (.ensureEditable this)
        (.doPersistent this)
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"ATransientMap" this, #_"Object" ___key, #_"Object" ___notFound]
        (.ensureEditable this)
        (.doValAt this, ___key, ___notFound)
    )

    (def- #_"Object" ATransientMap'NOT_FOUND (Object.))

    #_method
    (ยง defn #_"boolean" (ยง method containsKey) [#_"ATransientMap" this, #_"Object" ___key]
        (ร this.valAt(___key, ATransientMap'NOT_FOUND) != ATransientMap'NOT_FOUND)
    )

    #_method
    (ยง defn #_"IMapEntry" (ยง method entryAt) [#_"ATransientMap" this, #_"Object" ___key]
        (let [#_"Object" ___v (.valAt this, ___key, ATransientMap'NOT_FOUND)]
            (when (not= ___v ATransientMap'NOT_FOUND)
                (ยง return (MapEntry'create ___key, ___v))
            )
            nil
        )
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ATransientMap" this]
        (.ensureEditable this)
        (.doCount this)
    )
)
)

(java-ns cloiure.lang.ATransientSet

#_abstract
(class-ns ATransientSet (ยง extends AFn) (ยง implements ITransientSet)
    (defn- #_"ATransientSet" ATransientSet'init []
        (hash-map
            #_volatile
            #_"ITransientMap" :impl nil
        )
    )

    (defn #_"ATransientSet" ATransientSet'new [#_"ITransientMap" ___impl]
        (let [this (merge (AFn'new) (ATransientSet'init))]
            (ยง ass (:impl this) ___impl)
            this
        )
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ATransientSet" this]
        (count (:impl this))
    )

    #_method
    (ยง defn #_"ITransientSet" (ยง method conj) [#_"ATransientSet" this, #_"Object" ___val]
        (let [#_"ITransientMap" ___m (.assoc (:impl this), ___val, ___val)]
            (when (ร ___m != (:impl this))
                (ยง ass (:impl this) ___m)
            )
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method contains) [#_"ATransientSet" this, #_"Object" ___key]
        (ร (.this != (:impl this).valAt(___key, this)))
    )

    #_method
    (ยง defn #_"ITransientSet" (ยง method disjoin) [#_"ATransientSet" this, #_"Object" ___key]
        (let [#_"ITransientMap" ___m (.without (:impl this), ___key)]
            (when (ร ___m != (:impl this))
                (ยง ass (:impl this) ___m)
            )
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method get) [#_"ATransientSet" this, #_"Object" ___key]
        (.valAt (:impl this), ___key)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"ATransientSet" this, #_"Object" ___key, #_"Object" ___notFound]
        (.valAt (:impl this), ___key, ___notFound)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"ATransientSet" this, #_"Object" ___key]
        (.valAt (:impl this), ___key)
    )
)
)

(java-ns cloiure.lang.BigInt

(ยง import java.math.BigInteger)
(ยง import java.math.BigDecimal)

(class-ns BigInt (ยง extends Number) (ยง implements IHashEq)
    (ยง def #_"BigInt" BigInt'ZERO (BigInt'new 0, nil))
    (ยง def #_"BigInt" BigInt'ONE (BigInt'new 1, nil))

    (defn- #_"BigInt" BigInt'init []
        (hash-map
            #_"long" :lpart 0
            #_"BigInteger" :bipart nil
        )
    )

    (defn- #_"BigInt" BigInt'new [#_"long" ___lpart, #_"BigInteger" ___bipart]
        (let [this (merge (Number'new) (BigInt'init))]
            (ยง ass (:lpart this) ___lpart)
            (ยง ass (:bipart this) ___bipart)
            this
        )
    )

    ;; must follow Long
    #_method
    (ยง defn #_"int" (ยง method hashCode) [#_"BigInt" this]
        (when (nil? (:bipart this))
            (ยง return (ร (int) ((:lpart this) :xor ((:lpart this) >>> 32))))
        )
        (.hashCode (:bipart this))
    )

    #_method
    (ยง defn #_"int" (ยง method hasheq) [#_"BigInt" this]
        (when (nil? (:bipart this))
            (ยง return (Murmur3'hashLong (:lpart this)))
        )
        (.hashCode (:bipart this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"BigInt" this, #_"Object" ___obj]
        (when (= this ___obj)
            (ยง return true)
        )
        (when (ยง instance? BigInt ___obj)
            (let [#_"BigInt" ___o (cast' BigInt ___obj)]
                (when (nil? (:bipart this))
                    (ยง return (and (nil? (:bipart ___o)) (ร (:lpart this) == (:lpart ___o))))
                )
                (ยง return (and (some? (:bipart ___o)) (.equals (:bipart this), (:bipart ___o))))
            )
        )
        false
    )

    (defn #_"BigInt" BigInt'fromBigInteger [#_"BigInteger" ___val]
        (if (ร (.bitLength ___val) < 64)
            (do
                (ร BigInt'new((.longValue ___val), nil))
            )
            (do
                (BigInt'new 0, ___val)
            )
        )
    )

    (defn #_"BigInt" BigInt'fromLong [#_"long" ___val]
        (BigInt'new ___val, nil)
    )

    #_method
    (ยง defn #_"BigInteger" (ยง method toBigInteger) [#_"BigInt" this]
        (if (nil? (:bipart this))
            (do
                (BigInteger/valueOf (:lpart this))
            )
            (do
                (:bipart this)
            )
        )
    )

    #_method
    (ยง defn #_"BigDecimal" (ยง method toBigDecimal) [#_"BigInt" this]
        (if (nil? (:bipart this))
            (do
                (BigDecimal/valueOf (:lpart this))
            )
            (do
                (BigDecimal. (:bipart this))
            )
        )
    )

    #_method
    (ยง defn #_"int" (ยง method intValue) [#_"BigInt" this]
        (if (nil? (:bipart this))
            (do
                (ร (int) (:lpart this))
            )
            (do
                (.intValue (:bipart this))
            )
        )
    )

    #_method
    (ยง defn #_"long" (ยง method longValue) [#_"BigInt" this]
        (if (nil? (:bipart this))
            (do
                (:lpart this)
            )
            (do
                (.longValue (:bipart this))
            )
        )
    )

    #_method
    (ยง defn #_"float" (ยง method floatValue) [#_"BigInt" this]
        (if (nil? (:bipart this))
            (do
                (:lpart this)
            )
            (do
                (.floatValue (:bipart this))
            )
        )
    )

    #_method
    (ยง defn #_"double" (ยง method doubleValue) [#_"BigInt" this]
        (if (nil? (:bipart this))
            (do
                (:lpart this)
            )
            (do
                (.doubleValue (:bipart this))
            )
        )
    )

    #_method
    (ยง defn #_"byte" (ยง method byteValue) [#_"BigInt" this]
        (if (nil? (:bipart this))
            (do
                (ร (byte) (:lpart this))
            )
            (do
                (.byteValue (:bipart this))
            )
        )
    )

    #_method
    (ยง defn #_"short" (ยง method shortValue) [#_"BigInt" this]
        (if (nil? (:bipart this))
            (do
                (ร (short) (:lpart this))
            )
            (do
                (.shortValue (:bipart this))
            )
        )
    )

    (defn #_"BigInt" BigInt'valueOf [#_"long" ___val]
        (BigInt'new ___val, nil)
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"BigInt" this]
        (when (nil? (:bipart this))
            (ยง return (String/valueOf (:lpart this)))
        )
        (.toString (:bipart this))
    )

    #_method
    (ยง defn #_"int" (ยง method bitLength) [#_"BigInt" this]
        (.bitLength (.toBigInteger this))
    )

    #_method
    (ยง defn #_"BigInt" (ยง method add) [#_"BigInt" this, #_"BigInt" ___y]
        (when (and (nil? (:bipart this)) (nil? (:bipart ___y)))
            (let [#_"long" ___ret (ร (:lpart this) + (:lpart ___y))]
                (when (or (ร (___ret :xor (:lpart this)) >= 0) (ร (___ret :xor (:lpart ___y)) >= 0))
                    (ยง return (BigInt'valueOf ___ret))
                )
            )
        )
        (ร BigInt'fromBigInteger((.toBigInteger this).add((.toBigInteger ___y))))
    )

    #_method
    (ยง defn #_"BigInt" (ยง method multiply) [#_"BigInt" this, #_"BigInt" ___y]
        (when (and (nil? (:bipart this)) (nil? (:bipart ___y)))
            (let [#_"long" ___ret (ร (:lpart this) * (:lpart ___y))]
                (when (or (zero? (:lpart ___y)) (and (ร (ร ___ret / (:lpart ___y)) == (:lpart this)) (ร (:lpart this) != Long/MIN_VALUE)))
                    (ยง return (BigInt'valueOf ___ret))
                )
            )
        )
        (ร BigInt'fromBigInteger((.toBigInteger this).multiply((.toBigInteger ___y))))
    )

    #_method
    (ยง defn #_"BigInt" (ยง method quotient) [#_"BigInt" this, #_"BigInt" ___y]
        (when (and (nil? (:bipart this)) (nil? (:bipart ___y)))
            (when (and (ร (:lpart this) == Long/MIN_VALUE) (ร (:lpart ___y) == -1))
                (ยง return (ร BigInt'fromBigInteger((.toBigInteger this).negate())))
            )
            (ยง return (ร BigInt'valueOf((:lpart this) / (:lpart ___y))))
        )
        (ร BigInt'fromBigInteger((.toBigInteger this).divide((.toBigInteger ___y))))
    )

    #_method
    (ยง defn #_"BigInt" (ยง method remainder) [#_"BigInt" this, #_"BigInt" ___y]
        (when (and (nil? (:bipart this)) (nil? (:bipart ___y)))
            (ยง return (ร BigInt'valueOf((:lpart this) % (:lpart ___y))))
        )
        (ร BigInt'fromBigInteger((.toBigInteger this).remainder((.toBigInteger ___y))))
    )

    #_method
    (ยง defn #_"boolean" (ยง method lt) [#_"BigInt" this, #_"BigInt" ___y]
        (when (and (nil? (:bipart this)) (nil? (:bipart ___y)))
            (ยง return (ร ((:lpart this) < (:lpart ___y))))
        )
        (neg? (.compareTo (.toBigInteger this), (.toBigInteger ___y)))
    )
)
)

(java-ns cloiure.lang.Binding

(class-ns Binding #_"<T>"
    (defn- #_"Binding" Binding'init []
        (hash-map
            #_"T" :val nil
            #_"Binding" :rest nil
        )
    )

    (defn #_"Binding" Binding'new-1 [#_"T" ___val]
        (let [this (Binding'init)]
            (ยง ass (:val this) ___val)
            (ยง ass (:rest this) nil)
            this
        )
    )

    (defn #_"Binding" Binding'new-2 [#_"T" ___val, #_"Binding" ___rest]
        (let [this (Binding'init)]
            (ยง ass (:val this) ___val)
            (ยง ass (:rest this) ___rest)
            this
        )
    )
)
)

(java-ns cloiure.lang.Box

(class-ns Box
    (defn- #_"Box" Box'init []
        (hash-map
            #_"Object" :val nil
        )
    )

    (defn #_"Box" Box'new [#_"Object" ___val]
        (let [this (Box'init)]
            (ยง ass (:val this) ___val)
            this
        )
    )
)
)

(java-ns cloiure.lang.ChunkBuffer

(class-ns ChunkBuffer (ยง implements Counted)
    (defn- #_"ChunkBuffer" ChunkBuffer'init []
        (hash-map
            #_"Object[]" :buffer nil
            #_"int" :end 0
        )
    )

    (defn #_"ChunkBuffer" ChunkBuffer'new [#_"int" ___capacity]
        (let [this (ChunkBuffer'init)]
            (ยง ass (:buffer this) (make-array Object ___capacity))
            (ยง ass (:end this) 0)
            this
        )
    )

    #_method
    (ยง defn #_"void" (ยง method add) [#_"ChunkBuffer" this, #_"Object" ___o]
        (ยง ass (ยง aget (:buffer this) (:end this)) ___o)
        (ยง ass (:end this) (+ (:end this) 1))
        nil
    )

    #_method
    (ยง defn #_"IChunk" (ยง method chunk) [#_"ChunkBuffer" this]
        (let [#_"ArrayChunk" ___ret (ArrayChunk'new-3 (:buffer this), 0, (:end this))]
            (ยง ass (:buffer this) nil)
            ___ret
        )
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ChunkBuffer" this]
        (:end this)
    )
)
)

(java-ns cloiure.lang.ChunkedCons

(class-ns ChunkedCons (ยง extends ASeq) (ยง implements IChunkedSeq)
    (defn- #_"ChunkedCons" ChunkedCons'init []
        (hash-map
            #_"IChunk" :chunk nil
            #_"ISeq" :_more nil
        )
    )

    (defn #_"ChunkedCons" ChunkedCons'new-3 [#_"IPersistentMap" ___meta, #_"IChunk" ___chunk, #_"ISeq" ___more]
        (let [this (merge (ASeq'new ___meta) (ChunkedCons'init))]
            (ยง ass (:chunk this) ___chunk)
            (ยง ass (:_more this) ___more)
            this
        )
    )

    (defn #_"ChunkedCons" ChunkedCons'new-2 [#_"IChunk" ___chunk, #_"ISeq" ___more]
        (ChunkedCons'new-3 nil, ___chunk, ___more)
    )

    #_method
    (ยง defn #_"Obj" (ยง method withMeta) [#_"ChunkedCons" this, #_"IPersistentMap" ___meta]
        (when (ร ___meta != (:_meta this))
            (ยง return (ChunkedCons'new-3 ___meta, (:chunk this), (:_more this)))
        )
        this
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"ChunkedCons" this]
        (.nth (:chunk this), 0)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"ChunkedCons" this]
        (when (ร (:chunk this).count() > 1)
            (ยง return (ร ChunkedCons'new-2((:chunk this).dropFirst(), (:_more this))))
        )
        (.chunkedNext this)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method more) [#_"ChunkedCons" this]
        (when (ร (:chunk this).count() > 1)
            (ยง return (ร ChunkedCons'new-2((:chunk this).dropFirst(), (:_more this))))
        )
        (when (nil? (:_more this))
            (ยง return PersistentList'EMPTY)
        )
        (:_more this)
    )

    #_method
    (ยง defn #_"IChunk" (ยง method chunkedFirst) [#_"ChunkedCons" this]
        (:chunk this)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method chunkedNext) [#_"ChunkedCons" this]
        (.seq (.chunkedMore this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method chunkedMore) [#_"ChunkedCons" this]
        (when (nil? (:_more this))
            (ยง return PersistentList'EMPTY)
        )
        (:_more this)
    )
)
)

(java-ns cloiure.lang.Compile

(ยง import java.io.OutputStreamWriter)
(ยง import java.io.PrintWriter)
(ยง import java.io.IOException)

;; Compiles libs and generates class files stored within the directory
;; named by the Java System property "cloiure.compile.path". Arguments are
;; strings naming the libs to be compiled. The libs and compile-path must
;; all be within CLASSPATH.

#_stateless
(class-ns Compile
    (def- #_"String" Compile'PATH_PROP "cloiure.compile.path")
    (def- #_"String" Compile'REFLECTION_WARNING_PROP "cloiure.compile.warn-on-reflection")
    (def- #_"String" Compile'UNCHECKED_MATH_PROP "cloiure.compile.unchecked-math")

    (ยง def- #_"Var" Compile'compile_path (RT'var-2 "cloiure.core", "*compile-path*"))
    (ยง def- #_"Var" Compile'compile (RT'var-2 "cloiure.core", "compile"))
    (ยง def- #_"Var" Compile'warn_on_reflection (RT'var-2 "cloiure.core", "*warn-on-reflection*"))
    (ยง def- #_"Var" Compile'unchecked_math (RT'var-2 "cloiure.core", "*unchecked-math*"))

    (defn #_"void" Compile'main [#_"String[]" ___args] #_(ยง throws IOException, ClassNotFoundException)
        (let [#_"OutputStreamWriter" ___out (cast OutputStreamWriter (.deref RT'OUT))]
            (let [#_"PrintWriter" ___err (RT'errPrintWriter)]
                (let [#_"String" ___path (System/getProperty Compile'PATH_PROP)]
                    (let [#_"int" ___count (ยง alength ___args)]
                        (when (nil? ___path)
                            (.println ___err, (str "ERROR: Must set system property " Compile'PATH_PROP "\nto the location for compiled .class files." "\nThis directory must also be on your CLASSPATH."))
                            (System/exit 1)
                        )

                        (let [#_"boolean" ___warnOnReflection (ร System/getProperty(Compile'REFLECTION_WARNING_PROP, "false").equals("true"))]
                            (let [#_"String" ___uncheckedMathProp (System/getProperty Compile'UNCHECKED_MATH_PROP)]
                                (let [#_"Object" ___uncheckedMath Boolean/FALSE]
                                    (cond (ร "true".equals(___uncheckedMathProp))
                                        (do
                                            (ยง ass ___uncheckedMath Boolean/TRUE)
                                        )
                                        (ร "warn-on-boxed".equals(___uncheckedMathProp))
                                        (do
                                            (ยง ass ___uncheckedMath (Keyword'intern-1 "warn-on-boxed"))
                                        )
                                    )

                                    ;; force load to avoid transitive compilation during lazy load
                                    (RT'load-1 "cloiure/core/specs/alpha")

                                    (try
                                        (ร Var'pushThreadBindings(RT'map(
                                            (object-array [
                                                compile_path       ___path
                                                warn_on_reflection ___warnOnReflection
                                                unchecked_math     ___uncheckedMath
                                            ])
                                        )))

                                        (doseq [#_"String" ___lib ___args]
                                            (.write ___out, (str "Compiling " ___lib " to " ___path "\n"))
                                            (.flush ___out)
                                            (.invoke Compile'compile, (Symbol'intern-1 ___lib))
                                        )
                                        (finally
                                            (Var'popThreadBindings)
                                            (try
                                                (.flush ___out)
                                                (catch IOException ___e
                                                    (.printStackTrace ___e, ___err)
                                                )
                                            )
                                        )
                                    )
                                    nil
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.Compiler

(ยง import cloiure.asm.*)
(ยง import cloiure.asm.commons.GeneratorAdapter)
(ยง import cloiure.asm.commons.Method)

(ยง import java.io.*)
(ยง import java.lang.reflect.Constructor)
(ยง import java.lang.reflect.Modifier)
(ยง import java.util.*)
(ยง import java.util.regex.Pattern)
(ยง import java.util.regex.Matcher)

(def Context'enum-set
    (hash-set
        :Context'STATEMENT ;; value ignored
        :Context'EXPRESSION ;; value required
        :Context'RETURN ;; tail position relative to enclosing recur frame
        :Context'EVAL
    )
)

#_private
#_stateless
(class-ns Recur
)

(ยง defprotocol Expr
    #_abstract
    (#_"Object" Expr'''(ยง method eval) [#_"Expr" this])
    #_abstract
    (#_"void" Expr'''(ยง method emit) [#_"Expr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen])
    #_abstract
    (#_"boolean" Expr'''(ยง method hasJavaClass) [#_"Expr" this])
    #_abstract
    (#_"Class" Expr'''(ยง method getJavaClass) [#_"Expr" this])
)

#_stateless
#_abstract
(class-ns UntypedExpr (ยง implements Expr)
    #_protected
    (defn #_"UntypedExpr" UntypedExpr'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"UntypedExpr" this]
        (throw (IllegalArgumentException. "Has no Java class"))
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"UntypedExpr" this]
        false
    )
)

(ยง defprotocol IParser
    #_abstract
    (#_"Expr" IParser'''(ยง method parse) [#_"IParser" this, #_"Context" ___context, #_"Object" ___form])
)

#_closure
(class-ns DefParser (ยง implements IParser)
    (defn #_"DefParser" DefParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"DefParser" this, #_"Context" ___context, #_"Object" ___form]
        ;; (def x) or (def x initexpr) or (def x "docstring" initexpr)
        (let [#_"String" ___docstring nil]
            (when (and (ร (RT'count ___form) == 4) (instance? String (RT'third ___form)))
                (ยง ass ___docstring (cast String (RT'third ___form)))
                (ยง ass ___form (ร RT'list-3(RT'first(___form), RT'second(___form), RT'fourth(___form))))
            )
            (cond (ร RT'count(___form) > 3)
                (do
                    (throw (Util'runtimeException-1 "Too many arguments to def"))
                )
                (ร RT'count(___form) < 2)
                (do
                    (throw (Util'runtimeException-1 "Too few arguments to def"))
                )
                (not (ยง instance? Symbol (RT'second ___form)))
                (do
                    (throw (Util'runtimeException-1 "First argument to def must be a Symbol"))
                )
            )
            (let [#_"Symbol" ___sym (cast' Symbol (RT'second ___form))]
                (let [#_"Var" ___v (Compiler'lookupVar-2 ___sym, true)]
                    (when (nil? ___v)
                        (throw (Util'runtimeException-1 "Can't refer to qualified var that doesn't exist"))
                    )
                    (let [#_"boolean" ___shadowsCoreMapping false]
                        (when (not (.equals (:ns ___v), (.currentNS this)))
                            (if (ร (nil? (:ns ___sym)))
                                (do
                                    (ยง ass ___v (.intern (.currentNS this), ___sym))
                                    (ยง ass ___shadowsCoreMapping true)
                                    (Compiler'registerVar ___v)
                                )
                                (do
                                    (throw (Util'runtimeException-1 "Can't create defs outside of current ns"))
                                )
                            )
                        )
                        (let [#_"IPersistentMap" ___mm (.meta ___sym)]
                            (let [#_"boolean" ___isDynamic (ร RT'booleanCast-1o(RT'get-2(___mm, Compiler'dynamicKey)))]
                                (when ___isDynamic
                                    (.setDynamic ___v)
                                )
                                (when (and (not ___isDynamic) (.startsWith (:name ___sym), "*") (.endsWith (:name ___sym), "*") (< 2 (.length (:name ___sym))))
                                    (.format (RT'errPrintWriter), "Warning: %1$s not declared dynamic and thus is not dynamically rebindable, but its name suggests otherwise. Please either indicate ^:dynamic %1$s or change the name. (%2$s:%3$d)\n", (object-array [ ___sym, (.get Compiler'SOURCE_PATH), (.get Compiler'LINE) ]))
                                )
                                (when (RT'booleanCast-1o (RT'get-2 ___mm, Compiler'arglistsKey))
                                    (let [#_"IPersistentMap" ___vm (.meta ___v)]
                                        ;; drop quote
                                        (ยง ass ___vm (cast' IPersistentMap (ร RT'assoc(___vm, Compiler'arglistsKey, RT'second(___mm.valAt(Compiler'arglistsKey))))))
                                        (.setMeta ___v, ___vm)
                                    )
                                )
                                (let [#_"Object" ___source_path (or (.get Compiler'SOURCE_PATH) "NO_SOURCE_FILE")]
                                    (ยง ass ___mm (cast' IPersistentMap (ร RT'assoc(___mm, RT'LINE_KEY, Compiler'LINE.get()).assoc(RT'COLUMN_KEY, Compiler'COLUMN.get()).assoc(RT'FILE_KEY, ___source_path))))
                                    (when (some? ___docstring)
                                        (ยง ass ___mm (cast' IPersistentMap (RT'assoc ___mm, RT'DOC_KEY, ___docstring)))
                                    )
                                    (ยง ass ___mm (cast' IPersistentMap (Compiler'elideMeta ___mm)))
                                    (let [#_"Expr" ___meta (if (zero? (count ___mm)) nil (Compiler'analyze-2 (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), ___mm))]
                                        (DefExpr'new (cast String (.deref Compiler'SOURCE)), (Compiler'lineDeref), (Compiler'columnDeref), ___v, (Compiler'analyze-3 (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), (RT'third ___form), (:name (:sym ___v))), ___meta, (ร RT'count(___form) == 3), ___isDynamic, ___shadowsCoreMapping)
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns DefExpr (ยง implements Expr)
    (def #_"Method" DefExpr'bindRootMethod (Method/getMethod "void bindRoot(Object)"))
    (def #_"Method" DefExpr'setTagMethod (Method/getMethod "void setTag(cloiure.lang.Symbol)"))
    (def #_"Method" DefExpr'setMetaMethod (Method/getMethod "void setMeta(cloiure.lang.IPersistentMap)"))
    (def #_"Method" DefExpr'setDynamicMethod (Method/getMethod "cloiure.lang.Var setDynamic(boolean)"))
    (def #_"Method" DefExpr'symintern (Method/getMethod "cloiure.lang.Symbol intern(String, String)"))
    (def #_"Method" DefExpr'internVar (Method/getMethod "cloiure.lang.Var refer(cloiure.lang.Symbol, cloiure.lang.Var)"))

    (defn- #_"DefExpr" DefExpr'init []
        (hash-map
            #_"Var" :var nil
            #_"Expr" :init nil
            #_"Expr" :meta nil
            #_"boolean" :initProvided false
            #_"boolean" :isDynamic false
            #_"boolean" :shadowsCoreMapping false
            #_"String" :source nil
            #_"int" :line 0
            #_"int" :column 0
        )
    )

    (defn #_"DefExpr" DefExpr'new [#_"String" ___source, #_"int" ___line, #_"int" ___column, #_"Var" ___var, #_"Expr" ___init, #_"Expr" ___meta, #_"boolean" ___initProvided, #_"boolean" ___isDynamic, #_"boolean" ___shadowsCoreMapping]
        (let [this (DefExpr'init)]
            (ยง ass (:source this) ___source)
            (ยง ass (:line this) ___line)
            (ยง ass (:column this) ___column)
            (ยง ass (:var this) ___var)
            (ยง ass (:init this) ___init)
            (ยง ass (:meta this) ___meta)
            (ยง ass (:isDynamic this) ___isDynamic)
            (ยง ass (:shadowsCoreMapping this) ___shadowsCoreMapping)
            (ยง ass (:initProvided this) ___initProvided)
            this
        )
    )

    #_method
    (ยง defn- #_"boolean" (ยง method includesExplicitMetadata) [#_"DefExpr" this, #_"MapExpr" ___expr]
        (loop-when-recur [#_"int" ___i 0] (ร ___i < (:keyvals ___expr).count()) [(+ ___i 2)]
            (let [#_"Keyword" ___k (:k (cast' KeywordExpr (.nth (:keyvals ___expr), ___i)))]
                (when (and (ร ___k != RT'FILE_KEY) (ร ___k != RT'DECLARED_KEY) (ร ___k != RT'LINE_KEY) (ร ___k != RT'COLUMN_KEY))
                    (ยง return true)
                )
            )
        )
        false
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"DefExpr" this]
        (try
            (when (:initProvided this)
                (ร (:var this).bindRoot((:init this).eval()))
            )
            (when (some? (:meta this))
                (let [#_"IPersistentMap" ___metaMap (cast' IPersistentMap (.eval (:meta this)))]
                    (when (or (:initProvided this) true) ;; includesExplicitMetadata((MapExpr) meta)
                        (.setMeta (:var this), ___metaMap)
                    )
                )
            )
            (.setDynamic (:var this), (:isDynamic this))
            (catch Throwable ___e
                (if (not (ยง instance? CompilerException ___e))
                    (do
                        (throw (CompilerException'new (:source this), (:line this), (:column this), ___e))
                    )
                    (do
                        (throw (cast' CompilerException ___e))
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"DefExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.emitVar ___objx, ___gen, (:var this))

        (when (:shadowsCoreMapping this)
            (.dup ___gen)
            (.getField ___gen, Compiler'VAR_TYPE, "ns", Compiler'NS_TYPE)
            (.swap ___gen)
            (.dup ___gen)
            (.getField ___gen, Compiler'VAR_TYPE, "sym", Compiler'SYMBOL_TYPE)
            (.swap ___gen)
            (.invokeVirtual ___gen, Compiler'NS_TYPE, DefExpr'internVar)
        )

        (when (:isDynamic this)
            (.push ___gen, (:isDynamic this))
            (.invokeVirtual ___gen, Compiler'VAR_TYPE, setDynamicMethod)
        )
        (when (some? (:meta this))
            (when (or (:initProvided this) true) ;; includesExplicitMetadata((MapExpr) meta)
                (.dup ___gen)
                (ร (:meta this).emit(:Context'EXPRESSION, ___objx, ___gen))
                (.checkCast ___gen, Compiler'IPERSISTENTMAP_TYPE)
                (.invokeVirtual ___gen, Compiler'VAR_TYPE, setMetaMethod)
            )
        )
        (when (:initProvided this)
            (.dup ___gen)
            (if (ยง instance? FnExpr (:init this))
                (do
                    (ร (cast' FnExpr (:init this)).emitForDefn(___objx, ___gen))
                )
                (do
                    (ร (:init this).emit(:Context'EXPRESSION, ___objx, ___gen))
                )
            )
            (.invokeVirtual ___gen, Compiler'VAR_TYPE, bindRootMethod)
        )

        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"DefExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"DefExpr" this]
        (ยง class Var)
    )
)

#_closure
(class-ns AssignParser (ยง implements IParser)
    (defn #_"AssignParser" AssignParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"AssignParser" this, #_"Context" ___context, #_"Object" ___frm]
        (let [#_"ISeq" ___form (cast' ISeq ___frm)]
            (when (ร RT'length(___form) != 3)
                (throw (IllegalArgumentException. "Malformed assignment, expecting (set! target val)"))
            )
            (let [#_"Expr" ___target (ร Compiler'analyze-2(:Context'EXPRESSION, RT'second(___form)))]
                (when (not (ยง instance? AssignableExpr ___target))
                    (throw (IllegalArgumentException. "Invalid assignment target"))
                )
                (ร AssignExpr'new((cast' AssignableExpr ___target), Compiler'analyze-2(:Context'EXPRESSION, RT'third(___form))))
            )
        )
    )
)

(class-ns AssignExpr (ยง implements Expr)
    (defn- #_"AssignExpr" AssignExpr'init []
        (hash-map
            #_"AssignableExpr" :target nil
            #_"Expr" :val nil
        )
    )

    (defn #_"AssignExpr" AssignExpr'new [#_"AssignableExpr" ___target, #_"Expr" ___val]
        (let [this (AssignExpr'init)]
            (ยง ass (:target this) ___target)
            (ยง ass (:val this) ___val)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"AssignExpr" this]
        (.evalAssign (:target this), (:val this))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"AssignExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (ร (:target this).emitAssign(___context, ___objx, ___gen, (:val this)))
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"AssignExpr" this]
        (.hasJavaClass (:val this))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"AssignExpr" this]
        (.getJavaClass (:val this))
    )
)

(class-ns VarExpr (ยง implements Expr, AssignableExpr)
    (def #_"Method" VarExpr'getMethod (Method/getMethod "Object get()"))
    (def #_"Method" VarExpr'setMethod (Method/getMethod "Object set(Object)"))

    (defn- #_"VarExpr" VarExpr'init []
        (hash-map
            #_"Var" :var nil
            #_"Object" :tag nil

            #_"Class" :jc nil
        )
    )

    (defn #_"VarExpr" VarExpr'new [#_"Var" ___var, #_"Symbol" ___tag]
        (let [this (VarExpr'init)]
            (ยง ass (:var this) ___var)
            (ยง ass (:tag this) (or ___tag (.getTag ___var)))
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"VarExpr" this]
        (.deref (:var this))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"VarExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.emitVarValue ___objx, ___gen, (:var this))
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"VarExpr" this]
        (some? (:tag this))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"VarExpr" this]
        (when (nil? (:jc this))
            (ยง ass (:jc this) (HostExpr'tagToClass (:tag this)))
        )
        (:jc this)
    )

    #_method
    (ยง defn #_"Object" (ยง method evalAssign) [#_"VarExpr" this, #_"Expr" ___val]
        (.set (:var this), (.eval ___val))
    )

    #_method
    (ยง defn #_"void" (ยง method emitAssign) [#_"VarExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Expr" ___val]
        (.emitVar ___objx, ___gen, (:var this))
        (ร ___val.emit(:Context'EXPRESSION, ___objx, ___gen))
        (.invokeVirtual ___gen, Compiler'VAR_TYPE, VarExpr'setMethod)
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )
)

#_closure
(class-ns TheVarParser (ยง implements IParser)
    (defn #_"TheVarParser" TheVarParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"TheVarParser" this, #_"Context" ___context, #_"Object" ___form]
        (let [#_"Symbol" ___sym (cast' Symbol (RT'second ___form))]
            (let [#_"Var" ___v (Compiler'lookupVar-2 ___sym, false)]
                (when (some? ___v)
                    (ยง return (TheVarExpr'new ___v))
                )
                (throw (Util'runtimeException-1 (str "Unable to resolve var: " ___sym " in this context")))
            )
        )
    )
)

(class-ns TheVarExpr (ยง implements Expr)
    (defn- #_"TheVarExpr" TheVarExpr'init []
        (hash-map
            #_"Var" :var nil
        )
    )

    (defn #_"TheVarExpr" TheVarExpr'new [#_"Var" ___var]
        (let [this (TheVarExpr'init)]
            (ยง ass (:var this) ___var)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"TheVarExpr" this]
        (:var this)
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"TheVarExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.emitVar ___objx, ___gen, (:var this))
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"TheVarExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"TheVarExpr" this]
        (ยง class Var)
    )
)

(class-ns KeywordExpr (ยง extends LiteralExpr)
    (defn- #_"KeywordExpr" KeywordExpr'init []
        (hash-map
            #_"Keyword" :k nil
        )
    )

    (defn #_"KeywordExpr" KeywordExpr'new [#_"Keyword" ___k]
        (let [this (merge (LiteralExpr'new) (KeywordExpr'init))]
            (ยง ass (:k this) ___k)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method val) [#_"KeywordExpr" this]
        (:k this)
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"KeywordExpr" this]
        (:k this)
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"KeywordExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.emitKeyword ___objx, ___gen, (:k this))
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"KeywordExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"KeywordExpr" this]
        (ยง class Keyword)
    )
)

#_closure
(class-ns ImportParser (ยง implements IParser)
    (defn #_"ImportParser" ImportParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"ImportParser" this, #_"Context" ___context, #_"Object" ___form]
        (ร ImportExpr'new((cast String (RT'second ___form))))
    )
)

(class-ns ImportExpr (ยง implements Expr)
    (def #_"Method" ImportExpr'forNameMethod (Method/getMethod "Class classForNameNonLoading(String)"))
    (def #_"Method" ImportExpr'importClassMethod (Method/getMethod "Class importClass(Class)"))
    (def #_"Method" ImportExpr'derefMethod (Method/getMethod "Object deref()"))

    (defn- #_"ImportExpr" ImportExpr'init []
        (hash-map
            #_"String" :c nil
        )
    )

    (defn #_"ImportExpr" ImportExpr'new [#_"String" ___c]
        (let [this (ImportExpr'init)]
            (ยง ass (:c this) ___c)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"ImportExpr" this]
        (let [#_"Namespace" ___ns (cast' Namespace (.deref RT'CURRENT_NS))]
            (ร ___ns.importClass(RT'classForNameNonLoading((:c this))))
            nil
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"ImportExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.getStatic ___gen, Compiler'RT_TYPE, "CURRENT_NS", Compiler'VAR_TYPE)
        (.invokeVirtual ___gen, Compiler'VAR_TYPE, ImportExpr'derefMethod)
        (.checkCast ___gen, Compiler'NS_TYPE)
        (.push ___gen, (:c this))
        (.invokeStatic ___gen, Compiler'RT_TYPE, ImportExpr'forNameMethod)
        (.invokeVirtual ___gen, Compiler'NS_TYPE, importClassMethod)
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"ImportExpr" this]
        false
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"ImportExpr" this]
        (throw (IllegalArgumentException. "ImportExpr has no Java class"))
    )
)

#_stateless
#_abstract
(class-ns LiteralExpr (ยง implements Expr)
    #_protected
    (defn #_"LiteralExpr" LiteralExpr'new []
        (hash-map)
    )

    #_abstract
    (ยง defn #_"Object" (ยง method val) [#_"LiteralExpr" this])

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"LiteralExpr" this]
        (.val this)
    )
)

(ยง defprotocol AssignableExpr
    #_abstract
    (#_"Object" AssignableExpr'''(ยง method evalAssign) [#_"AssignableExpr" this, #_"Expr" ___val])
    #_abstract
    (#_"void" AssignableExpr'''(ยง method emitAssign) [#_"AssignableExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Expr" ___val])
)

(ยง defprotocol MaybePrimitiveExpr #_(ยง extends Expr)
    #_abstract
    (#_"boolean" MaybePrimitiveExpr'''(ยง method canEmitPrimitive) [#_"MaybePrimitiveExpr" this])
    #_abstract
    (#_"void" MaybePrimitiveExpr'''(ยง method emitUnboxed) [#_"MaybePrimitiveExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen])
)

#_closure
(class-ns HostParser (ยง implements IParser)
    (defn #_"HostParser" HostParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"HostParser" this, #_"Context" ___context, #_"Object" ___frm]
        (let [#_"ISeq" ___form (cast' ISeq ___frm)]
            ;; (. x fieldname-sym) or
            ;; (. x 0-ary-method)
            ;; (. x methodname-sym args+)
            ;; (. x (methodname-sym args?))
            (when (ร RT'length(___form) < 3)
                (throw (IllegalArgumentException. "Malformed member expression, expecting (. target member ...)"))
            )
            ;; determine static or instance
            ;; static target must be symbol, either fully.qualified.Classname or Classname that has been imported
            (let [#_"int" ___line (Compiler'lineDeref)]
                (let [#_"int" ___column (Compiler'columnDeref)]
                    (let [#_"String" ___source (cast String (.deref Compiler'SOURCE))]
                        (let [#_"Class" ___c (ร maybeClass(RT'second(___form), false))]
                            ;; at this point c will be non-null if static
                            (let [#_"Expr" ___instance nil]
                                (when (nil? ___c)
                                    (ยง ass ___instance (Compiler'analyze-2 (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), (RT'second ___form)))
                                )

                                (let [#_"boolean" ___maybeField (and (ร RT'length(___form) == 3) (ยง instance? Symbol (RT'third ___form)))]
                                    (when (and ___maybeField (ร (:name (cast' Symbol (RT'third ___form))).charAt(0) != \-))
                                        (let [#_"Symbol" ___sym (cast' Symbol (RT'third ___form))]
                                            (cond (some? ___c)
                                                (do
                                                    (ยง ass ___maybeField (zero? (ร Reflector'getMethods(___c, 0, Compiler'munge((:name ___sym)), true).size())))
                                                )
                                                (and (some? ___instance) (.hasJavaClass ___instance) (some? (.getJavaClass ___instance)))
                                                (do
                                                    (ยง ass ___maybeField (zero? (ร Reflector'getMethods((.getJavaClass ___instance), 0, Compiler'munge((:name ___sym)), false).size())))
                                                )
                                            )
                                        )
                                    )

                                    (if ___maybeField ;; field
                                        (do
                                            (let [#_"Symbol" ___sym (if (ร (:name (cast' Symbol (RT'third ___form))).charAt(0) == \-) (ร Symbol'intern-1((:name (cast' Symbol (RT'third ___form))).substring(1))) (cast' Symbol (RT'third ___form)))]
                                                (let [#_"Symbol" ___tag (Compiler'tagOf ___form)]
                                                    (if (some? ___c)
                                                        (do
                                                            (ร StaticFieldExpr'new(___line, ___column, ___c, Compiler'munge((:name ___sym)), ___tag))
                                                        )
                                                        (do
                                                            (ร InstanceFieldExpr'new(___line, ___column, ___instance, Compiler'munge((:name ___sym)), ___tag, ((:name (cast' Symbol (RT'third ___form))).charAt(0) == \-)))
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        (do
                                            (let [#_"ISeq" ___call (cast' ISeq (if (ยง instance? ISeq (RT'third ___form)) (RT'third ___form) (ร RT'next(RT'next(___form)))))]
                                                (when (not (ยง instance? Symbol (RT'first ___call)))
                                                    (throw (IllegalArgumentException. "Malformed member expression"))
                                                )
                                                (let [#_"Symbol" ___sym (cast' Symbol (RT'first ___call))]
                                                    (let [#_"Symbol" ___tag (Compiler'tagOf ___form)]
                                                        (let [#_"PersistentVector" ___args PersistentVector'EMPTY]
                                                            (let [#_"boolean" ___tailPosition (Compiler'inTailCall ___context)]
                                                                (loop-when-recur [#_"ISeq" ___s (RT'next ___call)] (some? ___s) [(next ___s)]
                                                                    (ยง ass ___args (.cons ___args, (Compiler'analyze-2 (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), (first ___s))))
                                                                )
                                                                (if (some? ___c)
                                                                    (do
                                                                        (ร StaticMethodExpr'new(___source, ___line, ___column, ___tag, ___c, Compiler'munge((:name ___sym)), ___args, ___tailPosition))
                                                                    )
                                                                    (do
                                                                        (ร InstanceMethodExpr'new(___source, ___line, ___column, ___tag, ___instance, Compiler'munge((:name ___sym)), ___args, ___tailPosition))
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

#_stateless
#_abstract
(class-ns HostExpr (ยง implements Expr, MaybePrimitiveExpr)
    #_protected
    (defn #_"HostExpr" HostExpr'new []
        (hash-map)
    )

    (def #_"Type" HostExpr'BOOLEAN_TYPE (Type/getType Boolean))
    (def #_"Type" HostExpr'CHAR_TYPE (Type/getType Character))
    (def #_"Type" HostExpr'INTEGER_TYPE (Type/getType Integer))
    (def #_"Type" HostExpr'LONG_TYPE (Type/getType Long))
    (def #_"Type" HostExpr'FLOAT_TYPE (Type/getType Float))
    (def #_"Type" HostExpr'DOUBLE_TYPE (Type/getType Double))
    (def #_"Type" HostExpr'SHORT_TYPE (Type/getType Short))
    (def #_"Type" HostExpr'BYTE_TYPE (Type/getType Byte))
    (def #_"Type" HostExpr'NUMBER_TYPE (Type/getType Number))

    (def #_"Method" HostExpr'charValueMethod (Method/getMethod "char charValue()"))
    (def #_"Method" HostExpr'booleanValueMethod (Method/getMethod "boolean booleanValue()"))

    (def #_"Method" HostExpr'charValueOfMethod (Method/getMethod "Character valueOf(char)"))
    (def #_"Method" HostExpr'intValueOfMethod (Method/getMethod "Integer valueOf(int)"))
    (def #_"Method" HostExpr'longValueOfMethod (Method/getMethod "Long valueOf(long)"))
    (def #_"Method" HostExpr'floatValueOfMethod (Method/getMethod "Float valueOf(float)"))
    (def #_"Method" HostExpr'doubleValueOfMethod (Method/getMethod "Double valueOf(double)"))
    (def #_"Method" HostExpr'shortValueOfMethod (Method/getMethod "Short valueOf(short)"))
    (def #_"Method" HostExpr'byteValueOfMethod (Method/getMethod "Byte valueOf(byte)"))

    (def #_"Method" HostExpr'intValueMethod (Method/getMethod "int intValue()"))
    (def #_"Method" HostExpr'longValueMethod (Method/getMethod "long longValue()"))
    (def #_"Method" HostExpr'floatValueMethod (Method/getMethod "float floatValue()"))
    (def #_"Method" HostExpr'doubleValueMethod (Method/getMethod "double doubleValue()"))
    (def #_"Method" HostExpr'byteValueMethod (Method/getMethod "byte byteValue()"))
    (def #_"Method" HostExpr'shortValueMethod (Method/getMethod "short shortValue()"))

    (def #_"Method" HostExpr'fromIntMethod (Method/getMethod "cloiure.lang.Num from(int)"))
    (def #_"Method" HostExpr'fromLongMethod (Method/getMethod "cloiure.lang.Num from(long)"))
    (def #_"Method" HostExpr'fromDoubleMethod (Method/getMethod "cloiure.lang.Num from(double)"))

    (defn #_"void" HostExpr'emitBoxReturn [#_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Class" ___returnType]
        (when (.isPrimitive ___returnType)
            (cond (= ___returnType Boolean/TYPE)
                (do
                    (let [#_"Label" ___falseLabel (.newLabel ___gen)]
                        (let [#_"Label" ___endLabel (.newLabel ___gen)]
                            (.ifZCmp ___gen, GeneratorAdapter/EQ, ___falseLabel)
                            (.getStatic ___gen, Compiler'BOOLEAN_OBJECT_TYPE, "TRUE", Compiler'BOOLEAN_OBJECT_TYPE)
                            (.goTo ___gen, ___endLabel)
                            (.mark ___gen, ___falseLabel)
                            (.getStatic ___gen, Compiler'BOOLEAN_OBJECT_TYPE, "FALSE", Compiler'BOOLEAN_OBJECT_TYPE)
                            (.mark ___gen, ___endLabel)
                        )
                    )
                )
                (= ___returnType Void/TYPE)
                (do
                    (ร Compiler'NIL_EXPR.emit(:Context'EXPRESSION, ___objx, ___gen))
                )
                (= ___returnType Character/TYPE)
                (do
                    (.invokeStatic ___gen, HostExpr'CHAR_TYPE, HostExpr'charValueOfMethod)
                )
                :else
                (do
                    (cond (= ___returnType Integer/TYPE)
                        (do
                            (.invokeStatic ___gen, HostExpr'INTEGER_TYPE, HostExpr'intValueOfMethod)
                        )
                        (= ___returnType Float/TYPE)
                        (do
                            (.invokeStatic ___gen, HostExpr'FLOAT_TYPE, HostExpr'floatValueOfMethod)
                        )
                        (= ___returnType Double/TYPE)
                        (do
                            (.invokeStatic ___gen, HostExpr'DOUBLE_TYPE, HostExpr'doubleValueOfMethod)
                        )
                        (= ___returnType Long/TYPE)
                        (do
                            (ร ___gen.invokeStatic(Compiler'NUMBERS_TYPE, Method/getMethod("Number num(long)")))
                        )
                        (= ___returnType Byte/TYPE)
                        (do
                            (.invokeStatic ___gen, HostExpr'BYTE_TYPE, HostExpr'byteValueOfMethod)
                        )
                        (= ___returnType Short/TYPE)
                        (do
                            (.invokeStatic ___gen, HostExpr'SHORT_TYPE, HostExpr'shortValueOfMethod)
                        )
                    )
                )
            )
        )
        nil
    )

    (defn #_"void" HostExpr'emitUnboxArg [#_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Class" ___paramType]
        (if (.isPrimitive ___paramType)
            (do
                (cond (= ___paramType Boolean/TYPE)
                    (do
                        (.checkCast ___gen, HostExpr'BOOLEAN_TYPE)
                        (.invokeVirtual ___gen, HostExpr'BOOLEAN_TYPE, HostExpr'booleanValueMethod)
                    )
                    (= ___paramType Character/TYPE)
                    (do
                        (.checkCast ___gen, HostExpr'CHAR_TYPE)
                        (.invokeVirtual ___gen, HostExpr'CHAR_TYPE, HostExpr'charValueMethod)
                    )
                    :else
                    (do
                        (let [#_"Method" ___m nil]
                            (.checkCast ___gen, HostExpr'NUMBER_TYPE)
                            (if (ร RT'booleanCast-1o(RT'UNCHECKED_MATH.deref()))
                                (do
                                    (cond (= ___paramType Integer/TYPE)
                                        (do
                                            (ยง ass ___m (Method/getMethod "int uncheckedIntCast(Object)"))
                                        )
                                        (= ___paramType Float/TYPE)
                                        (do
                                            (ยง ass ___m (Method/getMethod "float uncheckedFloatCast(Object)"))
                                        )
                                        (= ___paramType Double/TYPE)
                                        (do
                                            (ยง ass ___m (Method/getMethod "double uncheckedDoubleCast(Object)"))
                                        )
                                        (= ___paramType Long/TYPE)
                                        (do
                                            (ยง ass ___m (Method/getMethod "long uncheckedLongCast(Object)"))
                                        )
                                        (= ___paramType Byte/TYPE)
                                        (do
                                            (ยง ass ___m (Method/getMethod "byte uncheckedByteCast(Object)"))
                                        )
                                        (= ___paramType Short/TYPE)
                                        (do
                                            (ยง ass ___m (Method/getMethod "short uncheckedShortCast(Object)"))
                                        )
                                    )
                                )
                                (do
                                    (cond (= ___paramType Integer/TYPE)
                                        (do
                                            (ยง ass ___m (Method/getMethod "int intCast(Object)"))
                                        )
                                        (= ___paramType Float/TYPE)
                                        (do
                                            (ยง ass ___m (Method/getMethod "float floatCast(Object)"))
                                        )
                                        (= ___paramType Double/TYPE)
                                        (do
                                            (ยง ass ___m (Method/getMethod "double doubleCast(Object)"))
                                        )
                                        (= ___paramType Long/TYPE)
                                        (do
                                            (ยง ass ___m (Method/getMethod "long longCast(Object)"))
                                        )
                                        (= ___paramType Byte/TYPE)
                                        (do
                                            (ยง ass ___m (Method/getMethod "byte byteCast(Object)"))
                                        )
                                        (= ___paramType Short/TYPE)
                                        (do
                                            (ยง ass ___m (Method/getMethod "short shortCast(Object)"))
                                        )
                                    )
                                )
                            )
                            (.invokeStatic ___gen, Compiler'RT_TYPE, ___m)
                        )
                    )
                )
            )
            (do
                (ร ___gen.checkCast(Type/getType(___paramType)))
            )
        )
        nil
    )

    (defn #_"Class" HostExpr'maybeClass [#_"Object" ___form, #_"boolean" ___stringOk]
        (when (instance? Class ___form)
            (ยง return (cast Class ___form))
        )
        (let [#_"Class" ___c nil]
            (cond (ยง instance? Symbol ___form)
                (do
                    (let [#_"Symbol" ___sym (cast' Symbol ___form)]
                        (when (ร (nil? (:ns ___sym))) ;; if ns-qualified can't be classname
                            (when (ร Util'equals(___sym, Compiler'COMPILE_STUB_SYM.get()))
                                (ยง return (cast Class (.get Compiler'COMPILE_STUB_CLASS)))
                            )
                            (if (or (pos? (.indexOf (:name ___sym), \.)) (ร (:name ___sym).charAt(0) == \[))
                                (do
                                    (ยง ass ___c (RT'classForNameNonLoading (:name ___sym)))
                                )
                                (do
                                    (let [#_"Object" ___o (ร (.currentNS this).getMapping(___sym))]
                                        (cond (instance? Class ___o)
                                            (do
                                                (ยง ass ___c (cast Class ___o))
                                            )
                                            (and (some? (.deref Compiler'LOCAL_ENV)) (.containsKey (cast java.util.Map (.deref Compiler'LOCAL_ENV)), ___form))
                                            (do
                                                (ยง return nil)
                                            )
                                            :else
                                            (do
                                                (try
                                                    (ยง ass ___c (RT'classForNameNonLoading (:name ___sym)))
                                                    (catch Exception ___e
                                                        ;; aargh
                                                        ;; leave c set to nil -> return nil
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
                (and ___stringOk (instance? String ___form))
                (do
                    (ยง ass ___c (RT'classForNameNonLoading (cast String ___form)))
                )
            )
            ___c
        )
    )

    (defn #_"Class" HostExpr'maybeSpecialTag [#_"Symbol" ___sym]
        (let [#_"Class" ___c (Compiler'primClass-1s ___sym)]
            (cond (some? ___c)
                (do
                    (ยง return ___c)
                )
                (.equals (:name ___sym), "objects")
                (do
                    (ยง ass ___c (ยง class Object[]))
                )
                (.equals (:name ___sym), "ints")
                (do
                    (ยง ass ___c (ยง class int[]))
                )
                (.equals (:name ___sym), "longs")
                (do
                    (ยง ass ___c (ยง class long[]))
                )
                (.equals (:name ___sym), "floats")
                (do
                    (ยง ass ___c (ยง class float[]))
                )
                (.equals (:name ___sym), "doubles")
                (do
                    (ยง ass ___c (ยง class double[]))
                )
                (.equals (:name ___sym), "chars")
                (do
                    (ยง ass ___c (ยง class char[]))
                )
                (.equals (:name ___sym), "shorts")
                (do
                    (ยง ass ___c (ยง class short[]))
                )
                (.equals (:name ___sym), "bytes")
                (do
                    (ยง ass ___c (ยง class byte[]))
                )
                (.equals (:name ___sym), "booleans")
                (do
                    (ยง ass ___c (ยง class boolean[]))
                )
            )
            ___c
        )
    )

    (defn #_"Class" HostExpr'tagToClass [#_"Object" ___tag]
        (let [#_"Class" ___c nil]
            (when (ยง instance? Symbol ___tag)
                (let [#_"Symbol" ___sym (cast' Symbol ___tag)]
                    (when (ร (nil? (:ns ___sym))) ;; if ns-qualified can't be classname
                        (ยง ass ___c (maybeSpecialTag ___sym))
                    )
                )
            )
            (when (nil? ___c)
                (ยง ass ___c (maybeClass ___tag, true))
            )
            (when (some? ___c)
                (ยง return ___c)
            )
            (throw (IllegalArgumentException. (str "Unable to resolve classname: " ___tag)))
        )
    )
)

#_stateless
#_abstract
(class-ns FieldExpr (ยง extends HostExpr)
    #_protected
    (defn #_"FieldExpr" FieldExpr'new []
        (HostExpr'new)
    )

)

(class-ns InstanceFieldExpr (ยง extends FieldExpr) (ยง implements AssignableExpr)
    (def #_"Method" InstanceFieldExpr'invokeNoArgInstanceMember (Method/getMethod "Object invokeNoArgInstanceMember(Object, String, boolean)"))
    (def #_"Method" InstanceFieldExpr'setInstanceFieldMethod (Method/getMethod "Object setInstanceField(Object, String, Object)"))

    (defn- #_"InstanceFieldExpr" InstanceFieldExpr'init []
        (hash-map
            #_"Expr" :target nil
            #_"Class" :targetClass nil
            #_"java.lang.reflect.Field" :field nil
            #_"String" :fieldName nil
            #_"int" :line 0
            #_"int" :column 0
            #_"Symbol" :tag nil
            #_"boolean" :requireField false

            #_"Class" :jc nil
        )
    )

    (defn #_"InstanceFieldExpr" InstanceFieldExpr'new [#_"int" ___line, #_"int" ___column, #_"Expr" ___target, #_"String" ___fieldName, #_"Symbol" ___tag, #_"boolean" ___requireField]
        (let [this (merge (FieldExpr'new) (InstanceFieldExpr'init))]
            (ยง ass (:target this) ___target)
            (ยง ass (:targetClass this) (when (.hasJavaClass ___target) (.getJavaClass ___target)))
            (ยง ass (:field this) (when (some? (:targetClass this)) (Reflector'getField (:targetClass this), ___fieldName, false)))
            (ยง ass (:fieldName this) ___fieldName)
            (ยง ass (:line this) ___line)
            (ยง ass (:column this) ___column)
            (ยง ass (:tag this) ___tag)
            (ยง ass (:requireField this) ___requireField)

            (when (and (nil? (:field this)) (RT'booleanCast-1o (.deref RT'WARN_ON_REFLECTION)))
                (if (nil? (:targetClass this))
                    (do
                        (ร RT'errPrintWriter().format("Reflection warning, %s:%d:%d - reference to field %s can't be resolved.\n", (object-array [ (.deref Compiler'SOURCE_PATH), ___line, ___column, ___fieldName ])))
                    )
                    (do
                        (ร RT'errPrintWriter().format("Reflection warning, %s:%d:%d - reference to field %s on %s can't be resolved.\n", (object-array [ (.deref Compiler'SOURCE_PATH), ___line, ___column, ___fieldName, (.getName (:targetClass this)) ])))
                    )
                )
            )
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"InstanceFieldExpr" this]
        (ร Reflector'invokeNoArgInstanceMember-3((:target this).eval(), (:fieldName this), (:requireField this)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"InstanceFieldExpr" this]
        (and (some? (:targetClass this)) (some? (:field this)) (Util'isPrimitive (.getType (:field this))))
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"InstanceFieldExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (if (and (some? (:targetClass this)) (some? (:field this)))
            (do
                (ร (:target this).emit(:Context'EXPRESSION, ___objx, ___gen))
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (ร ___gen.checkCast(Compiler'getType((:targetClass this))))
                (ร ___gen.getField(Compiler'getType((:targetClass this)), (:fieldName this), Type/getType((:field this).getType())))
            )
            (do
                (throw (UnsupportedOperationException. "Unboxed emit of unknown member"))
            )
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"InstanceFieldExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (if (and (some? (:targetClass this)) (some? (:field this)))
            (do
                (ร (:target this).emit(:Context'EXPRESSION, ___objx, ___gen))
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (ร ___gen.checkCast(Compiler'getType((:targetClass this))))
                (ร ___gen.getField(Compiler'getType((:targetClass this)), (:fieldName this), Type/getType((:field this).getType())))
                (ร HostExpr'emitBoxReturn(___objx, ___gen, (:field this).getType()))
                (when (ร ___context == :Context'STATEMENT)
                    (.pop ___gen)
                )
            )
            (do
                (ร (:target this).emit(:Context'EXPRESSION, ___objx, ___gen))
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (.push ___gen, (:fieldName this))
                (.push ___gen, (:requireField this))
                (.invokeStatic ___gen, Compiler'REFLECTOR_TYPE, InstanceFieldExpr'invokeNoArgInstanceMember)
                (when (ร ___context == :Context'STATEMENT)
                    (.pop ___gen)
                )
            )
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"InstanceFieldExpr" this]
        (or (some? (:field this)) (some? (:tag this)))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"InstanceFieldExpr" this]
        (when (nil? (:jc this))
            (ยง ass (:jc this) (if (some? (:tag this)) (HostExpr'tagToClass (:tag this)) (.getType (:field this))))
        )
        (:jc this)
    )

    #_method
    (ยง defn #_"Object" (ยง method evalAssign) [#_"InstanceFieldExpr" this, #_"Expr" ___val]
        (ร Reflector'setInstanceField((:target this).eval(), (:fieldName this), (.eval ___val)))
    )

    #_method
    (ยง defn #_"void" (ยง method emitAssign) [#_"InstanceFieldExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Expr" ___val]
        (if (and (some? (:targetClass this)) (some? (:field this)))
            (do
                (ร (:target this).emit(:Context'EXPRESSION, ___objx, ___gen))
                (ร ___gen.checkCast(Compiler'getType((:targetClass this))))
                (ร ___val.emit(:Context'EXPRESSION, ___objx, ___gen))
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (.dupX1 ___gen)
                (ร HostExpr'emitUnboxArg(___objx, ___gen, (:field this).getType()))
                (ร ___gen.putField(Compiler'getType((:targetClass this)), (:fieldName this), Type/getType((:field this).getType())))
            )
            (do
                (ร (:target this).emit(:Context'EXPRESSION, ___objx, ___gen))
                (.push ___gen, (:fieldName this))
                (ร ___val.emit(:Context'EXPRESSION, ___objx, ___gen))
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (.invokeStatic ___gen, Compiler'REFLECTOR_TYPE, InstanceFieldExpr'setInstanceFieldMethod)
            )
        )
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )
)

(class-ns StaticFieldExpr (ยง extends FieldExpr) (ยง implements AssignableExpr)
    (defn- #_"StaticFieldExpr" StaticFieldExpr'init []
        (hash-map
            #_"String" :fieldName nil
            #_"Class" :c nil
            #_"java.lang.reflect.Field" :field nil
            #_"Symbol" :tag nil

            #_"int" :line 0
            #_"int" :column 0

            #_"Class" :jc nil
        )
    )

    (defn #_"StaticFieldExpr" StaticFieldExpr'new [#_"int" ___line, #_"int" ___column, #_"Class" ___c, #_"String" ___fieldName, #_"Symbol" ___tag]
        (let [this (merge (FieldExpr'new) (StaticFieldExpr'init))]
            (ยง ass (:fieldName this) ___fieldName)
            (ยง ass (:line this) ___line)
            (ยง ass (:column this) ___column)
            (ยง ass (:c this) ___c)
            (try
                (ยง ass (:field this) (.getField ___c, ___fieldName))
                (catch NoSuchFieldException ___e
                    (throw (Util'sneakyThrow ___e))
                )
            )
            (ยง ass (:tag this) ___tag)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"StaticFieldExpr" this]
        (Reflector'getStaticField-2c (:c this), (:fieldName this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"StaticFieldExpr" this]
        (ร Util'isPrimitive((:field this).getType()))
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"StaticFieldExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
        (ร ___gen.getStatic(Type/getType((:c this)), (:fieldName this), Type/getType((:field this).getType())))
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"StaticFieldExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))

        (ร ___gen.getStatic(Type/getType((:c this)), (:fieldName this), Type/getType((:field this).getType())))
        (ร HostExpr'emitBoxReturn(___objx, ___gen, (:field this).getType()))
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"StaticFieldExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"StaticFieldExpr" this]
        (when (nil? (:jc this))
            (ยง ass (:jc this) (if (some? (:tag this)) (HostExpr'tagToClass (:tag this)) (.getType (:field this))))
        )
        (:jc this)
    )

    #_method
    (ยง defn #_"Object" (ยง method evalAssign) [#_"StaticFieldExpr" this, #_"Expr" ___val]
        (ร Reflector'setStaticField-3c((:c this), (:fieldName this), (.eval ___val)))
    )

    #_method
    (ยง defn #_"void" (ยง method emitAssign) [#_"StaticFieldExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Expr" ___val]
        (ร ___val.emit(:Context'EXPRESSION, ___objx, ___gen))
        (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
        (.dup ___gen)
        (ร HostExpr'emitUnboxArg(___objx, ___gen, (:field this).getType()))
        (ร ___gen.putStatic(Type/getType((:c this)), (:fieldName this), Type/getType((:field this).getType())))
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )
)

#_stateless
#_abstract
(class-ns MethodExpr (ยง extends HostExpr)
    #_protected
    (defn #_"MethodExpr" MethodExpr'new []
        (HostExpr'new)
    )

    (defn #_"void" MethodExpr'emitArgsAsArray [#_"IPersistentVector" ___args, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.push ___gen, (count ___args))
        (.newArray ___gen, Compiler'OBJECT_TYPE)
        (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___args)) [(inc ___i)]
            (.dup ___gen)
            (.push ___gen, ___i)
            (ร (cast' Expr (.nth ___args, ___i)).emit(:Context'EXPRESSION, ___objx, ___gen))
            (.arrayStore ___gen, Compiler'OBJECT_TYPE)
        )
        nil
    )

    (defn #_"void" MethodExpr'emitTypedArgs [#_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Class[]" ___parameterTypes, #_"IPersistentVector" ___args]
        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___parameterTypes)) [(inc ___i)]
            (let [#_"Expr" ___e (cast' Expr (.nth ___args, ___i))]
                (try
                    (let [#_"Class" ___primc (Compiler'maybePrimitiveType ___e)]
                        (cond (ร ___primc == ___parameterTypes[___i])
                            (do
                                (let [#_"MaybePrimitiveExpr" ___pe (cast' MaybePrimitiveExpr ___e)]
                                    (ร ___pe.emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                                )
                            )
                            (and (ร ___primc == Integer/TYPE) (ร ___parameterTypes[___i] == Long/TYPE))
                            (do
                                (let [#_"MaybePrimitiveExpr" ___pe (cast' MaybePrimitiveExpr ___e)]
                                    (ร ___pe.emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                                    (.visitInsn ___gen, Opcodes/I2L)
                                )
                            )
                            (and (ร ___primc == Long/TYPE) (ร ___parameterTypes[___i] == Integer/TYPE))
                            (do
                                (let [#_"MaybePrimitiveExpr" ___pe (cast' MaybePrimitiveExpr ___e)]
                                    (ร ___pe.emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                                    (if (ร RT'booleanCast-1o(RT'UNCHECKED_MATH.deref()))
                                        (do
                                            (ร ___gen.invokeStatic(Compiler'RT_TYPE, Method/getMethod("int uncheckedIntCast(long)")))
                                        )
                                        (do
                                            (ร ___gen.invokeStatic(Compiler'RT_TYPE, Method/getMethod("int intCast(long)")))
                                        )
                                    )
                                )
                            )
                            (and (ร ___primc == Float/TYPE) (ร ___parameterTypes[___i] == Double/TYPE))
                            (do
                                (let [#_"MaybePrimitiveExpr" ___pe (cast' MaybePrimitiveExpr ___e)]
                                    (ร ___pe.emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                                    (.visitInsn ___gen, Opcodes/F2D)
                                )
                            )
                            (and (ร ___primc == Double/TYPE) (ร ___parameterTypes[___i] == Float/TYPE))
                            (do
                                (let [#_"MaybePrimitiveExpr" ___pe (cast' MaybePrimitiveExpr ___e)]
                                    (ร ___pe.emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                                    (.visitInsn ___gen, Opcodes/D2F)
                                )
                            )
                            :else
                            (do
                                (ร ___e.emit(:Context'EXPRESSION, ___objx, ___gen))
                                (ร HostExpr'emitUnboxArg(___objx, ___gen, ___parameterTypes[___i]))
                            )
                        )
                    )
                    (catch Exception ___e1
                        (throw (Util'sneakyThrow ___e1))
                    )
                )
            )
        )
        nil
    )
)

(class-ns InstanceMethodExpr (ยง extends MethodExpr)
    (def #_"Method" InstanceMethodExpr'invokeInstanceMethodMethod (Method/getMethod "Object invokeInstanceMethod(Object, String, Object[])"))

    (defn- #_"InstanceMethodExpr" InstanceMethodExpr'init []
        (hash-map
            #_"Expr" :target nil
            #_"String" :methodName nil
            #_"IPersistentVector" :args nil
            #_"String" :source nil
            #_"int" :line 0
            #_"int" :column 0
            #_"Symbol" :tag nil
            #_"boolean" :tailPosition false
            #_"java.lang.reflect.Method" :method nil

            #_"Class" :jc nil
        )
    )

    (defn #_"InstanceMethodExpr" InstanceMethodExpr'new [#_"String" ___source, #_"int" ___line, #_"int" ___column, #_"Symbol" ___tag, #_"Expr" ___target, #_"String" ___methodName, #_"IPersistentVector" ___args, #_"boolean" ___tailPosition]
        (let [this (merge (MethodExpr'new) (InstanceMethodExpr'init))]
            (ยง ass (:source this) ___source)
            (ยง ass (:line this) ___line)
            (ยง ass (:column this) ___column)
            (ยง ass (:args this) ___args)
            (ยง ass (:methodName this) ___methodName)
            (ยง ass (:target this) ___target)
            (ยง ass (:tag this) ___tag)
            (ยง ass (:tailPosition this) ___tailPosition)
            (if (and (.hasJavaClass ___target) (some? (.getJavaClass ___target)))
                (do
                    (let [#_"List" ___methods (ร Reflector'getMethods((.getJavaClass ___target), (count ___args), ___methodName, false))]
                        (if (.isEmpty ___methods)
                            (do
                                (ยง ass (:method this) nil)
                                (when (ร RT'booleanCast-1o(RT'WARN_ON_REFLECTION.deref()))
                                    (ร RT'errPrintWriter().format("Reflection warning, %s:%d:%d - call to method %s on %s can't be resolved (no such method).\n", (object-array [ (.deref Compiler'SOURCE_PATH), ___line, ___column, ___methodName, (.getName (.getJavaClass ___target)) ])))
                                )
                            )
                            (do
                                (let [#_"int" ___methodidx 0]
                                    (when (ร (.size ___methods) > 1)
                                        (let [#_"ArrayList<Class[]>" ___params (ArrayList.)]
                                            (let [#_"ArrayList<Class>" ___rets (ArrayList.)]
                                                (loop-when-recur [#_"int" ___i 0] (ร ___i < (.size ___methods)) [(inc ___i)]
                                                    (let [#_"java.lang.reflect.Method" ___m (ร (java.lang.reflect.Method) ___methods.get(___i))]
                                                        (.add ___params, (.getParameterTypes ___m))
                                                        (.add ___rets, (.getReturnType ___m))
                                                    )
                                                )
                                                (ยง ass ___methodidx (Compiler'getMatchingParams ___methodName, ___params, ___args, ___rets))
                                            )
                                        )
                                    )
                                    (let [#_"java.lang.reflect.Method" ___m (cast java.lang.reflect.Method (when (>= ___methodidx 0) (.get ___methods, ___methodidx)))]
                                        (when (and (some? ___m) (not (Modifier/isPublic (.getModifiers (.getDeclaringClass ___m)))))
                                            ;; public method of non-public class, try to find it in hierarchy
                                            (ยง ass ___m (ร Reflector'getAsMethodOfPublicBase((.getDeclaringClass ___m), ___m)))
                                        )
                                        (ยง ass (:method this) ___m)
                                        (when (and (nil? (:method this)) (RT'booleanCast-1o (.deref RT'WARN_ON_REFLECTION)))
                                            (ร RT'errPrintWriter().format("Reflection warning, %s:%d:%d - call to method %s on %s can't be resolved (argument types: %s).\n", (object-array [ (.deref Compiler'SOURCE_PATH), ___line, ___column, ___methodName, (.getName (.getJavaClass ___target)), (Compiler'getTypeStringForArgs ___args) ])))
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
                (do
                    (ยง ass (:method this) nil)
                    (when (ร RT'booleanCast-1o(RT'WARN_ON_REFLECTION.deref()))
                        (ร RT'errPrintWriter().format("Reflection warning, %s:%d:%d - call to method %s can't be resolved (target class is unknown).\n", (object-array [ (.deref Compiler'SOURCE_PATH), ___line, ___column, ___methodName ])))
                    )
                )
            )
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"InstanceMethodExpr" this]
        (try
            (let [#_"Object" ___targetval (.eval (:target this))]
                (let [#_"Object[]" ___argvals (make-array Object (count (:args this)))]
                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (:args this).count()) [(inc ___i)]
                        (ยง ass (ยง aget ___argvals ___i) (.eval (cast' Expr (.nth (:args this), ___i))))
                    )
                    (when (some? (:method this))
                        (let [#_"LinkedList" ___ms (LinkedList.)]
                            (.add ___ms, (:method this))
                            (ยง return (Reflector'invokeMatchingMethod (:methodName this), ___ms, ___targetval, ___argvals))
                        )
                    )
                    (Reflector'invokeInstanceMethod ___targetval, (:methodName this), ___argvals)
                )
            )
            (catch Throwable ___e
                (if (not (ยง instance? CompilerException ___e))
                    (do
                        (throw (CompilerException'new (:source this), (:line this), (:column this), ___e))
                    )
                    (do
                        (throw (cast' CompilerException ___e))
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"InstanceMethodExpr" this]
        (and (some? (:method this)) (Util'isPrimitive (.getReturnType (:method this))))
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"InstanceMethodExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (if (some? (:method this))
            (do
                (let [#_"Type" ___type (Type/getType (.getDeclaringClass (:method this)))]
                    (ร (:target this).emit(:Context'EXPRESSION, ___objx, ___gen))
                    (.checkCast ___gen, ___type)
                    (ร MethodExpr'emitTypedArgs(___objx, ___gen, (:method this).getParameterTypes(), (:args this)))
                    (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                    (when (and (:tailPosition this) (not (:canBeDirect ___objx)))
                        (let [#_"ObjMethod" ___method (cast' ObjMethod (.deref Compiler'METHOD))]
                            (.emitClearThis ___method, ___gen)
                        )
                    )
                    (let [#_"Method" ___m (Method. (:methodName this), (Type/getReturnType (:method this)), (Type/getArgumentTypes (:method this)))]
                        (if (ร (:method this).getDeclaringClass().isInterface())
                            (do
                                (.invokeInterface ___gen, ___type, ___m)
                            )
                            (do
                                (.invokeVirtual ___gen, ___type, ___m)
                            )
                        )
                    )
                )
            )
            (do
                (throw (UnsupportedOperationException. "Unboxed emit of unknown member"))
            )
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"InstanceMethodExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (if (some? (:method this))
            (do
                (let [#_"Type" ___type (Type/getType (.getDeclaringClass (:method this)))]
                    (ร (:target this).emit(:Context'EXPRESSION, ___objx, ___gen))
                    (.checkCast ___gen, ___type)
                    (ร MethodExpr'emitTypedArgs(___objx, ___gen, (:method this).getParameterTypes(), (:args this)))
                    (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                    (when (ร ___context == :Context'RETURN)
                        (let [#_"ObjMethod" ___method (cast' ObjMethod (.deref Compiler'METHOD))]
                            (.emitClearLocals ___method, ___gen)
                        )
                    )
                    (let [#_"Method" ___m (Method. (:methodName this), (Type/getReturnType (:method this)), (Type/getArgumentTypes (:method this)))]
                        (if (ร (:method this).getDeclaringClass().isInterface())
                            (do
                                (.invokeInterface ___gen, ___type, ___m)
                            )
                            (do
                                (.invokeVirtual ___gen, ___type, ___m)
                            )
                        )
                        (ร HostExpr'emitBoxReturn(___objx, ___gen, (:method this).getReturnType()))
                    )
                )
            )
            (do
                (ร (:target this).emit(:Context'EXPRESSION, ___objx, ___gen))
                (.push ___gen, (:methodName this))
                (ร emitArgsAsArray((:args this), ___objx, ___gen))
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (when (ร ___context == :Context'RETURN)
                    (let [#_"ObjMethod" ___method (cast' ObjMethod (.deref Compiler'METHOD))]
                        (.emitClearLocals ___method, ___gen)
                    )
                )
                (.invokeStatic ___gen, Compiler'REFLECTOR_TYPE, InstanceMethodExpr'invokeInstanceMethodMethod)
            )
        )
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"InstanceMethodExpr" this]
        (or (some? (:method this)) (some? (:tag this)))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"InstanceMethodExpr" this]
        (when (nil? (:jc this))
            (ยง ass (:jc this) (Compiler'retType (when (some? (:tag this)) (HostExpr'tagToClass (:tag this))), (when (some? (:method this)) (.getReturnType (:method this)))))
        )
        (:jc this)
    )
)

(class-ns StaticMethodExpr (ยง extends MethodExpr)
    (def #_"Method" StaticMethodExpr'forNameMethod (Method/getMethod "Class classForName(String)"))
    (def #_"Method" StaticMethodExpr'invokeStaticMethodMethod (Method/getMethod "Object invokeStaticMethod(Class, String, Object[])"))
    (ยง def #_"Keyword" StaticMethodExpr'warnOnBoxedKeyword (Keyword'intern-1 "warn-on-boxed"))

    (defn- #_"StaticMethodExpr" StaticMethodExpr'init []
        (hash-map
            #_"Class" :c nil
            #_"String" :methodName nil
            #_"IPersistentVector" :args nil
            #_"String" :source nil
            #_"int" :line 0
            #_"int" :column 0
            #_"java.lang.reflect.Method" :method nil
            #_"Symbol" :tag nil
            #_"boolean" :tailPosition false

            #_"Class" :jc nil
        )
    )

    (defn #_"StaticMethodExpr" StaticMethodExpr'new [#_"String" ___source, #_"int" ___line, #_"int" ___column, #_"Symbol" ___tag, #_"Class" ___c, #_"String" ___methodName, #_"IPersistentVector" ___args, #_"boolean" ___tailPosition]
        (let [this (merge (MethodExpr'new) (StaticMethodExpr'init))]
            (ยง ass (:c this) ___c)
            (ยง ass (:methodName this) ___methodName)
            (ยง ass (:args this) ___args)
            (ยง ass (:source this) ___source)
            (ยง ass (:line this) ___line)
            (ยง ass (:column this) ___column)
            (ยง ass (:tag this) ___tag)
            (ยง ass (:tailPosition this) ___tailPosition)

            (let [#_"List" ___methods (ร Reflector'getMethods(___c, (count ___args), ___methodName, true))]
                (when (.isEmpty ___methods)
                    (throw (IllegalArgumentException. (str "No matching method: " ___methodName)))
                )

                (let [#_"int" ___methodidx 0]
                    (when (ร (.size ___methods) > 1)
                        (let [#_"ArrayList<Class[]>" ___params (ArrayList.)]
                            (let [#_"ArrayList<Class>" ___rets (ArrayList.)]
                                (loop-when-recur [#_"int" ___i 0] (ร ___i < (.size ___methods)) [(inc ___i)]
                                    (let [#_"java.lang.reflect.Method" ___m (ร (java.lang.reflect.Method) ___methods.get(___i))]
                                        (.add ___params, (.getParameterTypes ___m))
                                        (.add ___rets, (.getReturnType ___m))
                                    )
                                )
                                (ยง ass ___methodidx (Compiler'getMatchingParams ___methodName, ___params, ___args, ___rets))
                            )
                        )
                    )
                    (ยง ass (:method this) (cast java.lang.reflect.Method (when (>= ___methodidx 0) (.get ___methods, ___methodidx))))
                    (when (and (nil? (:method this)) (RT'booleanCast-1o (.deref RT'WARN_ON_REFLECTION)))
                        (ร RT'errPrintWriter().format("Reflection warning, %s:%d:%d - call to static method %s on %s can't be resolved (argument types: %s).\n", (object-array [ (.deref Compiler'SOURCE_PATH), ___line, ___column, ___methodName, (.getName ___c), (Compiler'getTypeStringForArgs ___args) ])))
                    )
                    (when (and (some? (:method this)) (ร warnOnBoxedKeyword.equals(RT'UNCHECKED_MATH.deref())) (StaticMethodExpr'isBoxedMath (:method this)))
                        (ร RT'errPrintWriter().format("Boxed math warning, %s:%d:%d - call: %s.\n", (object-array [ (.deref Compiler'SOURCE_PATH), ___line, ___column, (.toString (:method this)) ])))
                    )
                    this
                )
            )
        )
    )

    (defn #_"boolean" StaticMethodExpr'isBoxedMath [#_"java.lang.reflect.Method" ___m]
        (let [#_"Class" ___c (.getDeclaringClass ___m)]
            (when (.equals ___c, (ยง class Numbers))
                (let [#_"Class[]" ___argTypes (.getParameterTypes ___m)]
                    (doseq [#_"Class" ___argType ___argTypes]
                        (when (or (.equals ___argType, Object) (.equals ___argType, Number))
                            (ยง return true)
                        )
                    )
                )
            )
            false
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"StaticMethodExpr" this]
        (try
            (let [#_"Object[]" ___argvals (make-array Object (count (:args this)))]
                (loop-when-recur [#_"int" ___i 0] (ร ___i < (:args this).count()) [(inc ___i)]
                    (ยง ass (ยง aget ___argvals ___i) (.eval (cast' Expr (.nth (:args this), ___i))))
                )
                (when (some? (:method this))
                    (let [#_"LinkedList" ___ms (LinkedList.)]
                        (.add ___ms, (:method this))
                        (ยง return (Reflector'invokeMatchingMethod (:methodName this), ___ms, nil, ___argvals))
                    )
                )
                (Reflector'invokeStaticMethod-3c (:c this), (:methodName this), ___argvals)
            )
            (catch Throwable ___e
                (if (not (ยง instance? CompilerException ___e))
                    (do
                        (throw (CompilerException'new (:source this), (:line this), (:column this), ___e))
                    )
                    (do
                        (throw (cast' CompilerException ___e))
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"StaticMethodExpr" this]
        (and (some? (:method this)) (Util'isPrimitive (.getReturnType (:method this))))
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitIntrinsicPredicate) [#_"StaticMethodExpr" this]
        (and (some? (:method this)) (some? (RT'get-2 Intrinsics'preds, (.toString (:method this)))))
    )

    #_method
    (ยง defn #_"void" (ยง method emitIntrinsicPredicate) [#_"StaticMethodExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Label" ___falseLabel]
        (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
        (if (some? (:method this))
            (do
                (ร MethodExpr'emitTypedArgs(___objx, ___gen, (:method this).getParameterTypes(), (:args this)))
                (when (ร ___context == :Context'RETURN)
                    (let [#_"ObjMethod" ___method (cast' ObjMethod (.deref Compiler'METHOD))]
                        (.emitClearLocals ___method, ___gen)
                    )
                )
                (let [#_"Object[]" ___predOps (ร (Object[]) RT'get-2(Intrinsics'preds, (:method this).toString()))]
                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength ___predOps) - 1) [(inc ___i)]
                        (ร ___gen.visitInsn((cast Integer (ยง aget ___predOps ___i))))
                    )
                    (ร ___gen.visitJumpInsn((cast Integer (ยง aget ___predOps (ร (ยง alength ___predOps) - 1))), ___falseLabel))
                )
            )
            (do
                (throw (UnsupportedOperationException. "Unboxed emit of unknown member"))
            )
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"StaticMethodExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (if (some? (:method this))
            (do
                (ร MethodExpr'emitTypedArgs(___objx, ___gen, (:method this).getParameterTypes(), (:args this)))
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (when (ร ___context == :Context'RETURN)
                    (let [#_"ObjMethod" ___method (cast' ObjMethod (.deref Compiler'METHOD))]
                        (.emitClearLocals ___method, ___gen)
                    )
                )
                (let [#_"Object" ___ops (ร RT'get-2(Intrinsics'ops, (:method this).toString()))]
                    (if (some? ___ops)
                        (do
                            (if (ยง instance? Object[] ___ops)
                                (do
                                    (doseq [#_"Object" ___op (ร (Object[])___ops)]
                                        (.visitInsn ___gen, (cast Integer ___op))
                                    )
                                )
                                (do
                                    (.visitInsn ___gen, (cast Integer ___ops))
                                )
                            )
                        )
                        (do
                            (let [#_"Type" ___type (Type/getType (:c this))]
                                (let [#_"Method" ___m (Method. (:methodName this), (Type/getReturnType (:method this)), (Type/getArgumentTypes (:method this)))]
                                    (.invokeStatic ___gen, ___type, ___m)
                                )
                            )
                        )
                    )
                )
            )
            (do
                (throw (UnsupportedOperationException. "Unboxed emit of unknown member"))
            )
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"StaticMethodExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (if (some? (:method this))
            (do
                (ร MethodExpr'emitTypedArgs(___objx, ___gen, (:method this).getParameterTypes(), (:args this)))
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (when (and (:tailPosition this) (not (:canBeDirect ___objx)))
                    (let [#_"ObjMethod" ___method (cast' ObjMethod (.deref Compiler'METHOD))]
                        (.emitClearThis ___method, ___gen)
                    )
                )
                (let [#_"Type" ___type (Type/getType (:c this))]
                    (let [#_"Method" ___m (Method. (:methodName this), (Type/getReturnType (:method this)), (Type/getArgumentTypes (:method this)))]
                        (.invokeStatic ___gen, ___type, ___m)
                        (let [#_"Class" ___retClass (.getReturnType (:method this))]
                            (if (ร ___context == :Context'STATEMENT)
                                (do
                                    (cond (or (ร ___retClass == Long/TYPE) (ร ___retClass == Double/TYPE))
                                        (do
                                            (.pop2 ___gen)
                                        )
                                        (not= ___retClass Void/TYPE)
                                        (do
                                            (.pop ___gen)
                                        )
                                    )
                                )
                                (do
                                    (ร HostExpr'emitBoxReturn(___objx, ___gen, (:method this).getReturnType()))
                                )
                            )
                        )
                    )
                )
            )
            (do
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (ร ___gen.push((:c this).getName()))
                (.invokeStatic ___gen, Compiler'RT_TYPE, StaticMethodExpr'forNameMethod)
                (.push ___gen, (:methodName this))
                (ร emitArgsAsArray((:args this), ___objx, ___gen))
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (when (ร ___context == :Context'RETURN)
                    (let [#_"ObjMethod" ___method (cast' ObjMethod (.deref Compiler'METHOD))]
                        (.emitClearLocals ___method, ___gen)
                    )
                )
                (.invokeStatic ___gen, Compiler'REFLECTOR_TYPE, StaticMethodExpr'invokeStaticMethodMethod)
                (when (ร ___context == :Context'STATEMENT)
                    (.pop ___gen)
                )
            )
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"StaticMethodExpr" this]
        (or (some? (:method this)) (some? (:tag this)))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"StaticMethodExpr" this]
        (when (nil? (:jc this))
            (ยง ass (:jc this) (Compiler'retType (when (some? (:tag this)) (HostExpr'tagToClass (:tag this))), (when (some? (:method this)) (.getReturnType (:method this)))))
        )
        (:jc this)
    )
)

(class-ns UnresolvedVarExpr (ยง implements Expr)
    (defn- #_"UnresolvedVarExpr" UnresolvedVarExpr'init []
        (hash-map
            #_"Symbol" :symbol nil
        )
    )

    (defn #_"UnresolvedVarExpr" UnresolvedVarExpr'new [#_"Symbol" ___symbol]
        (let [this (UnresolvedVarExpr'init)]
            (ยง ass (:symbol this) ___symbol)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"UnresolvedVarExpr" this]
        false
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"UnresolvedVarExpr" this]
        (throw (IllegalArgumentException. "UnresolvedVarExpr has no Java class"))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"UnresolvedVarExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        nil
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"UnresolvedVarExpr" this]
        (throw (IllegalArgumentException. "UnresolvedVarExpr cannot be evalled"))
    )
)

(class-ns NumberExpr (ยง extends LiteralExpr) (ยง implements MaybePrimitiveExpr)
    (defn- #_"NumberExpr" NumberExpr'init []
        (hash-map
            #_"Number" :n nil
            #_"int" :id 0
        )
    )

    (defn #_"NumberExpr" NumberExpr'new [#_"Number" ___n]
        (let [this (merge (LiteralExpr'new) (NumberExpr'init))]
            (ยง ass (:n this) ___n)
            (ยง ass (:id this) (Compiler'registerConstant ___n))
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method val) [#_"NumberExpr" this]
        (:n this)
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"NumberExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (when (ร ___context != :Context'STATEMENT)
            (.emitConstant ___objx, ___gen, (:id this))
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"NumberExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"NumberExpr" this]
        (cond (instance? Integer (:n this))
            (do
                Long/TYPE
            )
            (instance? Double (:n this))
            (do
                Double/TYPE
            )
            (instance? Long (:n this))
            (do
                Long/TYPE
            )
            :else
            (do
                (throw (IllegalStateException. (str "Unsupported Number type: " (ร (:n this).getClass().getName()))))
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"NumberExpr" this]
        true
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"NumberExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (cond (instance? Integer (:n this))
            (do
                (ร ___gen.push((:n this).longValue()))
            )
            (instance? Double (:n this))
            (do
                (ร ___gen.push((:n this).doubleValue()))
            )
            (instance? Long (:n this))
            (do
                (ร ___gen.push((:n this).longValue()))
            )
        )
        nil
    )

    (defn #_"Expr" NumberExpr'parse [#_"Number" ___form]
        (if (or (instance? Integer ___form) (instance? Double ___form) (instance? Long ___form))
            (do
                (NumberExpr'new ___form)
            )
            (do
                (ConstantExpr'new ___form)
            )
        )
    )
)

#_closure
(class-ns ConstantParser (ยง implements IParser)
    (ยง def #_"Keyword" ConstantParser'formKey (Keyword'intern-1 "form"))

    (defn #_"ConstantParser" ConstantParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"ConstantParser" this, #_"Context" ___context, #_"Object" ___form]
        (let [#_"int" ___argCount (ร RT'count(___form) - 1)]
            (when (not= ___argCount 1)
                (let [#_"IPersistentMap" ___exData (PersistentArrayMap'new-1 (object-array [ ConstantParser'formKey, ___form ]))]
                    (throw (ExceptionInfo'new-2 (str "Wrong number of args (" ___argCount ") passed to quote"), ___exData))
                )
            )
            (let [#_"Object" ___v (RT'second ___form)]
                (cond (nil? ___v)
                    (do
                        (ยง return Compiler'NIL_EXPR)
                    )
                    (= ___v Boolean/TRUE)
                    (do
                        (ยง return Compiler'TRUE_EXPR)
                    )
                    (= ___v Boolean/FALSE)
                    (do
                        (ยง return Compiler'FALSE_EXPR)
                    )
                )
                (cond (instance? Number ___v)
                    (do
                        (NumberExpr'parse (cast Number ___v))
                    )
                    (instance? String ___v)
                    (do
                        (StringExpr'new (cast String ___v))
                    )
                    (and (ยง instance? IPersistentCollection ___v) (zero? (.count (cast' IPersistentCollection ___v))))
                    (do
                        (EmptyExpr'new ___v)
                    )
                    :else
                    (do
                        (ConstantExpr'new ___v)
                    )
                )
            )
        )
    )
)

(class-ns ConstantExpr (ยง extends LiteralExpr)
    (defn- #_"ConstantExpr" ConstantExpr'init []
        (hash-map
            ;; stuff quoted vals in classloader at compile time, pull out at runtime
            ;; this won't work for static compilation...
            #_"Object" :v nil
            #_"int" :id 0
        )
    )

    (defn #_"ConstantExpr" ConstantExpr'new [#_"Object" ___v]
        (let [this (merge (LiteralExpr'new) (ConstantExpr'init))]
            (ยง ass (:v this) ___v)
            (ยง ass (:id this) (Compiler'registerConstant ___v))
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method val) [#_"ConstantExpr" this]
        (:v this)
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"ConstantExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.emitConstant ___objx, ___gen, (:id this))

        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"ConstantExpr" this]
        (ร Modifier/isPublic((:v this).getClass().getModifiers()))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"ConstantExpr" this]
        (cond (ยง instance? APersistentMap (:v this))
            (do
                (ยง class APersistentMap)
            )
            (ยง instance? APersistentSet (:v this))
            (do
                (ยง class APersistentSet)
            )
            (ยง instance? APersistentVector (:v this))
            (do
                (ยง class APersistentVector)
            )
            :else
            (do
                (.getClass (:v this))
            )
        )
    )
)

(class-ns NilExpr (ยง extends LiteralExpr)
    (defn #_"NilExpr" NilExpr'new []
        (LiteralExpr'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method val) [#_"NilExpr" this]
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"NilExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.visitInsn ___gen, Opcodes/ACONST_NULL)
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"NilExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"NilExpr" this]
        nil
    )
)

(class-ns BooleanExpr (ยง extends LiteralExpr)
    (defn- #_"BooleanExpr" BooleanExpr'init []
        (hash-map
            #_"boolean" :val false
        )
    )

    (defn #_"BooleanExpr" BooleanExpr'new [#_"boolean" ___val]
        (let [this (merge (LiteralExpr'new) (BooleanExpr'init))]
            (ยง ass (:val this) ___val)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method val) [#_"BooleanExpr" this]
        (if (:val this) RT'T RT'F)
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"BooleanExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (if (:val this)
            (do
                (.getStatic ___gen, Compiler'BOOLEAN_OBJECT_TYPE, "TRUE", Compiler'BOOLEAN_OBJECT_TYPE)
            )
            (do
                (.getStatic ___gen, Compiler'BOOLEAN_OBJECT_TYPE, "FALSE", Compiler'BOOLEAN_OBJECT_TYPE)
            )
        )
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"BooleanExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"BooleanExpr" this]
        Boolean
    )
)

(class-ns StringExpr (ยง extends LiteralExpr)
    (defn- #_"StringExpr" StringExpr'init []
        (hash-map
            #_"String" :str nil
        )
    )

    (defn #_"StringExpr" StringExpr'new [#_"String" ___str]
        (let [this (merge (LiteralExpr'new) (StringExpr'init))]
            (ยง ass (:str this) ___str)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method val) [#_"StringExpr" this]
        (:str this)
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"StringExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (when (ร ___context != :Context'STATEMENT)
            (.push ___gen, (:str this))
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"StringExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"StringExpr" this]
        String
    )
)

#_closure
(class-ns MonitorEnterParser (ยง implements IParser)
    (defn #_"MonitorEnterParser" MonitorEnterParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"MonitorEnterParser" this, #_"Context" ___context, #_"Object" ___form]
        (ร MonitorEnterExpr'new(Compiler'analyze-2(:Context'EXPRESSION, RT'second(___form))))
    )
)

(class-ns MonitorEnterExpr (ยง extends UntypedExpr)
    (defn- #_"MonitorEnterExpr" MonitorEnterExpr'init []
        (hash-map
            #_"Expr" :target nil
        )
    )

    (defn #_"MonitorEnterExpr" MonitorEnterExpr'new [#_"Expr" ___target]
        (let [this (merge (UntypedExpr'new) (MonitorEnterExpr'init))]
            (ยง ass (:target this) ___target)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"MonitorEnterExpr" this]
        (throw (UnsupportedOperationException. "Can't eval monitor-enter"))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"MonitorEnterExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (ร (:target this).emit(:Context'EXPRESSION, ___objx, ___gen))
        (.monitorEnter ___gen)
        (.emit Compiler'NIL_EXPR, ___context, ___objx, ___gen)
        nil
    )
)

#_closure
(class-ns MonitorExitParser (ยง implements IParser)
    (defn #_"MonitorExitParser" MonitorExitParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"MonitorExitParser" this, #_"Context" ___context, #_"Object" ___form]
        (ร MonitorExitExpr'new(Compiler'analyze-2(:Context'EXPRESSION, RT'second(___form))))
    )
)

(class-ns MonitorExitExpr (ยง extends UntypedExpr)
    (defn- #_"MonitorExitExpr" MonitorExitExpr'init []
        (hash-map
            #_"Expr" :target nil
        )
    )

    (defn #_"MonitorExitExpr" MonitorExitExpr'new [#_"Expr" ___target]
        (let [this (merge (UntypedExpr'new) (MonitorExitExpr'init))]
            (ยง ass (:target this) ___target)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"MonitorExitExpr" this]
        (throw (UnsupportedOperationException. "Can't eval monitor-exit"))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"MonitorExitExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (ร (:target this).emit(:Context'EXPRESSION, ___objx, ___gen))
        (.monitorExit ___gen)
        (.emit Compiler'NIL_EXPR, ___context, ___objx, ___gen)
        nil
    )
)

(class-ns CatchClause
    (defn- #_"CatchClause" CatchClause'init []
        (hash-map
            #_"Class" :c nil
            #_"LocalBinding" :lb nil
            #_"Expr" :handler nil
            #_"Label" :label nil
            #_"Label" :endLabel nil
        )
    )

    (defn #_"CatchClause" CatchClause'new [#_"Class" ___c, #_"LocalBinding" ___lb, #_"Expr" ___handler]
        (let [this (CatchClause'init)]
            (ยง ass (:c this) ___c)
            (ยง ass (:lb this) ___lb)
            (ยง ass (:handler this) ___handler)
            this
        )
    )
)

#_closure
(class-ns TryParser (ยง implements IParser)
    (defn #_"TryParser" TryParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"TryParser" this, #_"Context" ___context, #_"Object" ___frm]
        (let [#_"ISeq" ___form (cast' ISeq ___frm)]
            (when (ร ___context != :Context'RETURN)
                (ยง return (ร Compiler'analyze-2(___context, RT'list-1(RT'list-3(Compiler'FNONCE, PersistentVector'EMPTY, ___form)))))
            )

            ;; (try try-expr* catch-expr* finally-expr?)
            ;; catch-expr: (catch class sym expr*)
            ;; finally-expr: (finally expr*)

            (let [#_"PersistentVector" ___body PersistentVector'EMPTY]
                (let [#_"PersistentVector" ___catches PersistentVector'EMPTY]
                    (let [#_"Expr" ___bodyExpr nil]
                        (let [#_"Expr" ___finallyExpr nil]
                            (let [#_"boolean" ___caught false]
                                (let [#_"int" ___retLocal (Compiler'getAndIncLocalNum)]
                                    (let [#_"int" ___finallyLocal (Compiler'getAndIncLocalNum)]
                                        (loop-when-recur [#_"ISeq" ___fs (next ___form)] (some? ___fs) [(next ___fs)]
                                            (let [#_"Object" ___f (first ___fs)]
                                                (let [#_"Object" ___op (when (ยง instance? ISeq ___f) (.first (cast' ISeq ___f)))]
                                                    (if (and (not (Util'equals ___op, Compiler'CATCH)) (not (Util'equals ___op, Compiler'FINALLY)))
                                                        (do
                                                            (when ___caught
                                                                (throw (Util'runtimeException-1 "Only catch or finally clause can follow catch in try expression"))
                                                            )
                                                            (ยง ass ___body (.cons ___body, ___f))
                                                        )
                                                        (do
                                                            (when (nil? ___bodyExpr)
                                                                (try
                                                                    (ร Var'pushThreadBindings(RT'map(
                                                                        (object-array [
                                                                            Compiler'NO_RECUR              true
                                                                            Compiler'METHOD_RETURN_CONTEXT nil
                                                                        ])
                                                                    )))
                                                                    (ยง ass ___bodyExpr (ร (BodyParser'new()).parse(___context, RT'seq(___body))))
                                                                    (finally
                                                                        (Var'popThreadBindings)
                                                                    )
                                                                )
                                                            )

                                                            (cond (Util'equals ___op, Compiler'CATCH)
                                                                (do
                                                                    (let [#_"Class" ___c (ร HostExpr'maybeClass(RT'second(___f), false))]
                                                                        (when (nil? ___c)
                                                                            (throw (IllegalArgumentException. (str "Unable to resolve classname: " (RT'second ___f))))
                                                                        )
                                                                        (when (not (ยง instance? Symbol (RT'third ___f)))
                                                                            (throw (IllegalArgumentException. (str "Bad binding form, expected symbol, got: " (RT'third ___f))))
                                                                        )
                                                                        (let [#_"Symbol" ___sym (cast' Symbol (RT'third ___f))]
                                                                            (when (some? (.getNamespace ___sym))
                                                                                (throw (Util'runtimeException-1 (str "Can't bind qualified name:" ___sym)))
                                                                            )

                                                                            (let [#_"IPersistentMap" ___dynamicBindings
                                                                                    (ร RT'map(
                                                                                        (object-array [
                                                                                            Compiler'LOCAL_ENV        Compiler'LOCAL_ENV.deref()
                                                                                            Compiler'NEXT_LOCAL_NUM   Compiler'NEXT_LOCAL_NUM.deref()
                                                                                            Compiler'IN_CATCH_FINALLY RT'T
                                                                                        ])
                                                                                    ))]
                                                                                (try
                                                                                    (Var'pushThreadBindings ___dynamicBindings)
                                                                                    (let [#_"LocalBinding" ___lb (Compiler'registerLocal ___sym, (cast' Symbol (when (ยง instance? Symbol (RT'second ___f)) (RT'second ___f))), nil, false)]
                                                                                        (let [#_"Expr" ___handler (ร (BodyParser'new()).parse(:Context'EXPRESSION, RT'next(RT'next(RT'next(___f)))))]
                                                                                            (ยง ass ___catches (ร ___catches.cons(CatchClause'new(___c, ___lb, ___handler))))
                                                                                        )
                                                                                    )
                                                                                    (finally
                                                                                        (Var'popThreadBindings)
                                                                                    )
                                                                                )
                                                                                (ยง ass ___caught true)
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                :else ;; finally
                                                                (do
                                                                    (when (some? (next ___fs))
                                                                        (throw (Util'runtimeException-1 "finally clause must be last in try expression"))
                                                                    )
                                                                    (try
                                                                        (ร Var'pushThreadBindings(RT'map(
                                                                            (object-array [
                                                                                Compiler'IN_CATCH_FINALLY RT'T
                                                                            ])
                                                                        )))
                                                                        (ยง ass ___finallyExpr (ร (BodyParser'new()).parse(:Context'STATEMENT, RT'next(___f))))
                                                                        (finally
                                                                            (Var'popThreadBindings)
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        (when (nil? ___bodyExpr)
                                            ;; this codepath is hit when there is neither catch or finally, e.g. (try (expr))
                                            ;; return a body expr directly
                                            (try
                                                (ร Var'pushThreadBindings(RT'map(
                                                    (object-array [
                                                        Compiler'NO_RECUR true
                                                    ])
                                                )))
                                                (ยง ass ___bodyExpr (ร (BodyParser'new()).parse(___context, RT'seq(___body))))
                                                (finally
                                                    (Var'popThreadBindings)
                                                )
                                            )
                                            (ยง return ___bodyExpr)
                                        )

                                        (TryExpr'new ___bodyExpr, ___catches, ___finallyExpr, ___retLocal, ___finallyLocal)
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns TryExpr (ยง implements Expr)
    (defn- #_"TryExpr" TryExpr'init []
        (hash-map
            #_"Expr" :tryExpr nil
            #_"Expr" :finallyExpr nil
            #_"PersistentVector" :catchExprs nil
            #_"int" :retLocal 0
            #_"int" :finallyLocal 0
        )
    )

    (defn #_"TryExpr" TryExpr'new [#_"Expr" ___tryExpr, #_"PersistentVector" ___catchExprs, #_"Expr" ___finallyExpr, #_"int" ___retLocal, #_"int" ___finallyLocal]
        (let [this (TryExpr'init)]
            (ยง ass (:tryExpr this) ___tryExpr)
            (ยง ass (:catchExprs this) ___catchExprs)
            (ยง ass (:finallyExpr this) ___finallyExpr)
            (ยง ass (:retLocal this) ___retLocal)
            (ยง ass (:finallyLocal this) ___finallyLocal)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"TryExpr" this]
        (throw (UnsupportedOperationException. "Can't eval try"))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"TryExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (let [#_"Label" ___startTry (.newLabel ___gen)]
            (let [#_"Label" ___endTry (.newLabel ___gen)]
                (let [#_"Label" ___end (.newLabel ___gen)]
                    (let [#_"Label" ___ret (.newLabel ___gen)]
                        (let [#_"Label" ___finallyLabel (.newLabel ___gen)]
                            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:catchExprs this).count()) [(inc ___i)]
                                (let [#_"CatchClause" ___clause (cast' CatchClause (.nth (:catchExprs this), ___i))]
                                    (ยง ass (:label ___clause) (.newLabel ___gen))
                                    (ยง ass (:endLabel ___clause) (.newLabel ___gen))
                                )
                            )

                            (.mark ___gen, ___startTry)
                            (.emit (:tryExpr this), ___context, ___objx, ___gen)
                            (when (ร ___context != :Context'STATEMENT)
                                (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ISTORE), (:retLocal this)))
                            )
                            (.mark ___gen, ___endTry)
                            (when (some? (:finallyExpr this))
                                (ร (:finallyExpr this).emit(:Context'STATEMENT, ___objx, ___gen))
                            )
                            (.goTo ___gen, ___ret)

                            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:catchExprs this).count()) [(inc ___i)]
                                (let [#_"CatchClause" ___clause (cast' CatchClause (.nth (:catchExprs this), ___i))]
                                    (.mark ___gen, (:label ___clause))
                                    ;; exception should be on stack
                                    ;; put in clause local
                                    (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ISTORE), (:idx (:lb ___clause))))
                                    (.emit (:handler ___clause), ___context, ___objx, ___gen)
                                    (when (ร ___context != :Context'STATEMENT)
                                        (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ISTORE), (:retLocal this)))
                                    )
                                    (.mark ___gen, (:endLabel ___clause))

                                    (when (some? (:finallyExpr this))
                                        (ร (:finallyExpr this).emit(:Context'STATEMENT, ___objx, ___gen))
                                    )
                                    (.goTo ___gen, ___ret)
                                )
                            )
                            (when (some? (:finallyExpr this))
                                (.mark ___gen, ___finallyLabel)
                                ;; exception should be on stack
                                (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ISTORE), (:finallyLocal this)))
                                (ร (:finallyExpr this).emit(:Context'STATEMENT, ___objx, ___gen))
                                (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ILOAD), (:finallyLocal this)))
                                (.throwException ___gen)
                            )
                            (.mark ___gen, ___ret)
                            (when (ร ___context != :Context'STATEMENT)
                                (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ILOAD), (:retLocal this)))
                            )
                            (.mark ___gen, ___end)
                            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:catchExprs this).count()) [(inc ___i)]
                                (let [#_"CatchClause" ___clause (cast' CatchClause (.nth (:catchExprs this), ___i))]
                                    (ร ___gen.visitTryCatchBlock(___startTry, ___endTry, (:label ___clause), (:c ___clause).getName().replace(\., \/)))
                                )
                            )
                            (when (some? (:finallyExpr this))
                                (.visitTryCatchBlock ___gen, ___startTry, ___endTry, ___finallyLabel, nil)
                                (loop-when-recur [#_"int" ___i 0] (ร ___i < (:catchExprs this).count()) [(inc ___i)]
                                    (let [#_"CatchClause" ___clause (cast' CatchClause (.nth (:catchExprs this), ___i))]
                                        (.visitTryCatchBlock ___gen, (:label ___clause), (:endLabel ___clause), ___finallyLabel, nil)
                                    )
                                )
                            )
                            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:catchExprs this).count()) [(inc ___i)]
                                (let [#_"CatchClause" ___clause (cast' CatchClause (.nth (:catchExprs this), ___i))]
                                    (ร ___gen.visitLocalVariable((:name (:lb ___clause)), "Ljava/lang/Object;", nil, (:label ___clause), (:endLabel ___clause), (:idx (:lb ___clause))))
                                )
                            )
                            nil
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"TryExpr" this]
        (.hasJavaClass (:tryExpr this))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"TryExpr" this]
        (.getJavaClass (:tryExpr this))
    )
)

#_closure
(class-ns ThrowParser (ยง implements IParser)
    (defn #_"ThrowParser" ThrowParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"ThrowParser" this, #_"Context" ___context, #_"Object" ___form]
        (cond (ร ___context == :Context'EVAL)
            (do
                (ยง return (ร Compiler'analyze-2(___context, RT'list-1(RT'list-3(Compiler'FNONCE, PersistentVector'EMPTY, ___form)))))
            )
            (ร RT'count(___form) == 1)
            (do
                (throw (Util'runtimeException-1 "Too few arguments to throw, throw expects a single Throwable instance"))
            )
            (ร RT'count(___form) > 2)
            (do
                (throw (Util'runtimeException-1 "Too many arguments to throw, throw expects a single Throwable instance"))
            )
        )
        (ร ThrowExpr'new(Compiler'analyze-2(:Context'EXPRESSION, RT'second(___form))))
    )
)

(class-ns ThrowExpr (ยง extends UntypedExpr)
    (defn- #_"ThrowExpr" ThrowExpr'init []
        (hash-map
            #_"Expr" :excExpr nil
        )
    )

    (defn #_"ThrowExpr" ThrowExpr'new [#_"Expr" ___excExpr]
        (let [this (merge (UntypedExpr'new) (ThrowExpr'init))]
            (ยง ass (:excExpr this) ___excExpr)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"ThrowExpr" this]
        (throw (Util'runtimeException-1 "Can't eval throw"))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"ThrowExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (ร (:excExpr this).emit(:Context'EXPRESSION, ___objx, ___gen))
        (.checkCast ___gen, Compiler'THROWABLE_TYPE)
        (.throwException ___gen)
        nil
    )
)

#_closure
(class-ns NewParser (ยง implements IParser)
    (defn #_"NewParser" NewParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"NewParser" this, #_"Context" ___context, #_"Object" ___frm]
        (let [#_"int" ___line (Compiler'lineDeref)]
            (let [#_"int" ___column (Compiler'columnDeref)]
                (let [#_"ISeq" ___form (cast' ISeq ___frm)]
                    ;; (new Classname args...)
                    (when (ร (count ___form) < 2)
                        (throw (Util'runtimeException-1 "wrong number of arguments, expecting: (new Classname args...)"))
                    )
                    (let [#_"Class" ___c (ร HostExpr'maybeClass(RT'second(___form), false))]
                        (when (nil? ___c)
                            (throw (IllegalArgumentException. (str "Unable to resolve classname: " (RT'second ___form))))
                        )
                        (let [#_"PersistentVector" ___args PersistentVector'EMPTY]
                            (loop-when-recur [#_"ISeq" ___s (ร RT'next(RT'next(___form)))] (some? ___s) [(next ___s)]
                                (ยง ass ___args (.cons ___args, (Compiler'analyze-2 (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), (first ___s))))
                            )
                            (NewExpr'new ___c, ___args, ___line, ___column)
                        )
                    )
                )
            )
        )
    )
)

(class-ns NewExpr (ยง implements Expr)
    (def #_"Method" NewExpr'invokeConstructorMethod (Method/getMethod "Object invokeConstructor(Class, Object[])"))
    (def #_"Method" NewExpr'forNameMethod (Method/getMethod "Class classForName(String)"))

    (defn- #_"NewExpr" NewExpr'init []
        (hash-map
            #_"IPersistentVector" :args nil
            #_"Constructor" :ctor nil
            #_"Class" :c nil
        )
    )

    (defn #_"NewExpr" NewExpr'new [#_"Class" ___c, #_"IPersistentVector" ___args, #_"int" ___line, #_"int" ___column]
        (let [this (NewExpr'init)]
            (ยง ass (:args this) ___args)
            (ยง ass (:c this) ___c)
            (let [#_"Constructor[]" ___allctors (.getConstructors ___c)]
                (let [#_"ArrayList" ___ctors (ArrayList.)]
                    (let [#_"ArrayList<Class[]>" ___params (ArrayList.)]
                        (let [#_"ArrayList<Class>" ___rets (ArrayList.)]
                            (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___allctors)) [(inc ___i)]
                                (let [#_"Constructor" ___ctor (ยง aget ___allctors ___i)]
                                    (when (ร (ยง alength (.getParameterTypes ___ctor)) == (count ___args))
                                        (.add ___ctors, ___ctor)
                                        (.add ___params, (.getParameterTypes ___ctor))
                                        (.add ___rets, ___c)
                                    )
                                )
                            )
                            (when (.isEmpty ___ctors)
                                (throw (IllegalArgumentException. (str "No matching ctor found for " ___c)))
                            )

                            (let [#_"int" ___ctoridx 0]
                                (when (ร (.size ___ctors) > 1)
                                    (ยง ass ___ctoridx (ร Compiler'getMatchingParams((.getName ___c), ___params, ___args, ___rets)))
                                )

                                (ยง ass (:ctor this) (when (>= ___ctoridx 0) (cast Constructor (.get ___ctors, ___ctoridx))))
                                (when (and (nil? (:ctor this)) (RT'booleanCast-1o (.deref RT'WARN_ON_REFLECTION)))
                                    (ร RT'errPrintWriter().format("Reflection warning, %s:%d:%d - call to %s ctor can't be resolved.\n", (object-array [ (.deref Compiler'SOURCE_PATH), ___line, ___column, (.getName ___c) ])))
                                )
                                this
                            )
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"NewExpr" this]
        (let [#_"Object[]" ___argvals (make-array Object (count (:args this)))]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:args this).count()) [(inc ___i)]
                (ยง ass (ยง aget ___argvals ___i) (.eval (cast' Expr (.nth (:args this), ___i))))
            )
            (when (ร (some? (:ctor this)))
                (try
                    (ยง return (ร (:ctor this).newInstance(Reflector'boxArgs((:ctor this).getParameterTypes(), ___argvals))))
                    (catch Exception ___e
                        (throw (Util'sneakyThrow ___e))
                    )
                )
            )
            (Reflector'invokeConstructor (:c this), ___argvals)
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"NewExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (if (ร (some? (:ctor this)))
            (do
                (let [#_"Type" ___type (Compiler'getType (:c this))]
                    (.newInstance ___gen, ___type)
                    (.dup ___gen)
                    (ร MethodExpr'emitTypedArgs(___objx, ___gen, (:ctor this).getParameterTypes(), (:args this)))
                    (ร ___gen.invokeConstructor(___type, (Method. "<init>", (Type/getConstructorDescriptor (:ctor this)))))
                )
            )
            (do
                (ร ___gen.push(Compiler'destubClassName((:c this).getName())))
                (.invokeStatic ___gen, Compiler'RT_TYPE, NewExpr'forNameMethod)
                (MethodExpr'emitArgsAsArray (:args this), ___objx, ___gen)
                (.invokeStatic ___gen, Compiler'REFLECTOR_TYPE, invokeConstructorMethod)
            )
        )
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"NewExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"NewExpr" this]
        (:c this)
    )
)

(class-ns MetaExpr (ยง implements Expr)
    (ยง def #_"Type" MetaExpr'IOBJ_TYPE (Type/getType (ยง class IObj)))
    (def #_"Method" MetaExpr'withMetaMethod (Method/getMethod "cloiure.lang.IObj withMeta(cloiure.lang.IPersistentMap)"))

    (defn- #_"MetaExpr" MetaExpr'init []
        (hash-map
            #_"Expr" :expr nil
            #_"Expr" :meta nil
        )
    )

    (defn #_"MetaExpr" MetaExpr'new [#_"Expr" ___expr, #_"Expr" ___meta]
        (let [this (MetaExpr'init)]
            (ยง ass (:expr this) ___expr)
            (ยง ass (:meta this) ___meta)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"MetaExpr" this]
        (ร (cast' IObj (.eval (:expr this))).withMeta((cast' IPersistentMap (.eval (:meta this)))))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"MetaExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (ร (:expr this).emit(:Context'EXPRESSION, ___objx, ___gen))
        (.checkCast ___gen, MetaExpr'IOBJ_TYPE)
        (ร (:meta this).emit(:Context'EXPRESSION, ___objx, ___gen))
        (.checkCast ___gen, Compiler'IPERSISTENTMAP_TYPE)
        (.invokeInterface ___gen, MetaExpr'IOBJ_TYPE, MetaExpr'withMetaMethod)
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"MetaExpr" this]
        (.hasJavaClass (:expr this))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"MetaExpr" this]
        (.getJavaClass (:expr this))
    )
)

#_closure
(class-ns IfParser (ยง implements IParser)
    (defn #_"IfParser" IfParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"IfParser" this, #_"Context" ___context, #_"Object" ___frm]
        (let [#_"ISeq" ___form (cast' ISeq ___frm)]
            ;; (if test then) or (if test then else)
            (cond (ร (count ___form) > 4)
                (do
                    (throw (Util'runtimeException-1 "Too many arguments to if"))
                )
                (ร (count ___form) < 3)
                (do
                    (throw (Util'runtimeException-1 "Too few arguments to if"))
                )
            )
            (let [#_"PathNode" ___branch (ร PathNode'new(:PathType'BRANCH, (cast' PathNode (.get Compiler'CLEAR_PATH))))]
                (let [#_"Expr" ___testexpr (Compiler'analyze-2 (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), (RT'second ___form))]
                    (let [(ร Expr thenexpr, elseexpr)]
                        (try
                            (ร Var'pushThreadBindings(RT'map(
                                (object-array [
                                    Compiler'CLEAR_PATH PathNode'new(:PathType'PATH, ___branch)
                                ])
                            )))
                            (ยง ass thenexpr (ร Compiler'analyze-2(___context, RT'third(___form))))
                            (finally
                                (Var'popThreadBindings)
                            )
                        )
                        (try
                            (ร Var'pushThreadBindings(RT'map(
                                (object-array [
                                    Compiler'CLEAR_PATH PathNode'new(:PathType'PATH, ___branch)
                                ])
                            )))
                            (ยง ass elseexpr (ร Compiler'analyze-2(___context, RT'fourth(___form))))
                            (finally
                                (Var'popThreadBindings)
                            )
                        )
                        (ร IfExpr'new(Compiler'lineDeref(), Compiler'columnDeref(), ___testexpr, thenexpr, elseexpr))
                    )
                )
            )
        )
    )
)

(class-ns IfExpr (ยง implements Expr, MaybePrimitiveExpr)
    (defn- #_"IfExpr" IfExpr'init []
        (hash-map
            #_"Expr" :testExpr nil
            #_"Expr" :thenExpr nil
            #_"Expr" :elseExpr nil
            #_"int" :line 0
            #_"int" :column 0
        )
    )

    (defn #_"IfExpr" IfExpr'new [#_"int" ___line, #_"int" ___column, #_"Expr" ___testExpr, #_"Expr" ___thenExpr, #_"Expr" ___elseExpr]
        (let [this (IfExpr'init)]
            (ยง ass (:testExpr this) ___testExpr)
            (ยง ass (:thenExpr this) ___thenExpr)
            (ยง ass (:elseExpr this) ___elseExpr)
            (ยง ass (:line this) ___line)
            (ยง ass (:column this) ___column)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"IfExpr" this]
        (let [#_"Object" ___t (.eval (:testExpr this))]
            (when (and (some? ___t) (ร ___t != Boolean/FALSE))
                (ยง return (.eval (:thenExpr this)))
            )
            (.eval (:elseExpr this))
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"IfExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.doEmit this, ___context, ___objx, ___gen, false)
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"IfExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.doEmit this, ___context, ___objx, ___gen, true)
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method doEmit) [#_"IfExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"boolean" ___emitUnboxed]
        (let [#_"Label" ___nullLabel (.newLabel ___gen)]
            (let [#_"Label" ___falseLabel (.newLabel ___gen)]
                (let [#_"Label" ___endLabel (.newLabel ___gen)]
                    (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))

                    (cond (and (ยง instance? StaticMethodExpr (:testExpr this)) (.canEmitIntrinsicPredicate (cast' StaticMethodExpr (:testExpr this))))
                        (do
                            (ร (cast' StaticMethodExpr (:testExpr this)).emitIntrinsicPredicate(:Context'EXPRESSION, ___objx, ___gen, ___falseLabel))
                        )
                        (ร Compiler'maybePrimitiveType((:testExpr this)) == Boolean/TYPE)
                        (do
                            (ร (cast' MaybePrimitiveExpr (:testExpr this)).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                            (ร ___gen.ifZCmp(___gen.EQ, ___falseLabel))
                        )
                        :else
                        (do
                            (ร (:testExpr this).emit(:Context'EXPRESSION, ___objx, ___gen))
                            (.dup ___gen)
                            (.ifNull ___gen, ___nullLabel)
                            (.getStatic ___gen, Compiler'BOOLEAN_OBJECT_TYPE, "FALSE", Compiler'BOOLEAN_OBJECT_TYPE)
                            (.visitJumpInsn ___gen, Opcodes/IF_ACMPEQ, ___falseLabel)
                        )
                    )
                    (if ___emitUnboxed
                        (do
                            (ร (cast' MaybePrimitiveExpr (:thenExpr this)).emitUnboxed(___context, ___objx, ___gen))
                        )
                        (do
                            (.emit (:thenExpr this), ___context, ___objx, ___gen)
                        )
                    )
                    (.goTo ___gen, ___endLabel)
                    (.mark ___gen, ___nullLabel)
                    (.pop ___gen)
                    (.mark ___gen, ___falseLabel)
                    (if ___emitUnboxed
                        (do
                            (ร (cast' MaybePrimitiveExpr (:elseExpr this)).emitUnboxed(___context, ___objx, ___gen))
                        )
                        (do
                            (.emit (:elseExpr this), ___context, ___objx, ___gen)
                        )
                    )
                    (.mark ___gen, ___endLabel)
                    nil
                )
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"IfExpr" this]
        (and (.hasJavaClass (:thenExpr this))
             (.hasJavaClass (:elseExpr this))
            (or (ร (.getJavaClass (:thenExpr this)) == (.getJavaClass (:elseExpr this)))
                (ร (.getJavaClass (:thenExpr this)) == Compiler'RECUR_CLASS)
                (ร (.getJavaClass (:elseExpr this)) == Compiler'RECUR_CLASS)
                (and (nil? (.getJavaClass (:thenExpr this))) (not (ร (:elseExpr this).getJavaClass().isPrimitive())))
                (and (nil? (.getJavaClass (:elseExpr this))) (not (ร (:thenExpr this).getJavaClass().isPrimitive())))))
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"IfExpr" this]
        (try
            (and (ยง instance? MaybePrimitiveExpr (:thenExpr this))
                 (ยง instance? MaybePrimitiveExpr (:elseExpr this))
                (or (ร (.getJavaClass (:thenExpr this)) == (.getJavaClass (:elseExpr this)))
                    (ร (.getJavaClass (:thenExpr this)) == Compiler'RECUR_CLASS)
                    (ร (.getJavaClass (:elseExpr this)) == Compiler'RECUR_CLASS))
                 (.canEmitPrimitive (cast' MaybePrimitiveExpr (:thenExpr this)))
                 (.canEmitPrimitive (cast' MaybePrimitiveExpr (:elseExpr this))))
            (catch Exception ___e
                false
            )
        )
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"IfExpr" this]
        (let [#_"Class" ___thenClass (.getJavaClass (:thenExpr this))]
            (when (and (some? ___thenClass) (ร ___thenClass != Compiler'RECUR_CLASS))
                (ยง return ___thenClass)
            )
            (.getJavaClass (:elseExpr this))
        )
    )
)

(class-ns EmptyExpr (ยง implements Expr)
    (ยง def #_"Type" EmptyExpr'HASHMAP_TYPE (Type/getType (ยง class PersistentArrayMap)))
    (ยง def #_"Type" EmptyExpr'HASHSET_TYPE (Type/getType (ยง class PersistentHashSet)))
    (ยง def #_"Type" EmptyExpr'VECTOR_TYPE (Type/getType (ยง class PersistentVector)))
    (ยง def #_"Type" EmptyExpr'IVECTOR_TYPE (Type/getType (ยง class IPersistentVector)))
    (ยง def #_"Type" EmptyExpr'TUPLE_TYPE (Type/getType (ยง class Tuple)))
    (ยง def #_"Type" EmptyExpr'LIST_TYPE (Type/getType (ยง class PersistentList)))
    (ยง def #_"Type" EmptyExpr'EMPTY_LIST_TYPE (Type/getType (ยง class EmptyList)))

    (defn- #_"EmptyExpr" EmptyExpr'init []
        (hash-map
            #_"Object" :coll nil
        )
    )

    (defn #_"EmptyExpr" EmptyExpr'new [#_"Object" ___coll]
        (let [this (EmptyExpr'init)]
            (ยง ass (:coll this) ___coll)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"EmptyExpr" this]
        (:coll this)
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"EmptyExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (cond (ยง instance? IPersistentList (:coll this))
            (do
                (.getStatic ___gen, EmptyExpr'LIST_TYPE, "EMPTY", EmptyExpr'EMPTY_LIST_TYPE)
            )
            (ยง instance? IPersistentVector (:coll this))
            (do
                (.getStatic ___gen, EmptyExpr'VECTOR_TYPE, "EMPTY", EmptyExpr'VECTOR_TYPE)
            )
            (ยง instance? IPersistentMap (:coll this))
            (do
                (.getStatic ___gen, EmptyExpr'HASHMAP_TYPE, "EMPTY", EmptyExpr'HASHMAP_TYPE)
            )
            (ยง instance? IPersistentSet (:coll this))
            (do
                (.getStatic ___gen, EmptyExpr'HASHSET_TYPE, "EMPTY", EmptyExpr'HASHSET_TYPE)
            )
            :else
            (do
                (throw (UnsupportedOperationException. "Unknown Collection type"))
            )
        )
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"EmptyExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"EmptyExpr" this]
        (cond (ยง instance? IPersistentList (:coll this))
            (do
                (ยง class IPersistentList)
            )
            (ยง instance? IPersistentVector (:coll this))
            (do
                (ยง class IPersistentVector)
            )
            (ยง instance? IPersistentMap (:coll this))
            (do
                (ยง class IPersistentMap)
            )
            (ยง instance? IPersistentSet (:coll this))
            (do
                (ยง class IPersistentSet)
            )
            :else
            (do
                (throw (UnsupportedOperationException. "Unknown Collection type"))
            )
        )
    )
)

(class-ns ListExpr (ยง implements Expr)
    (def #_"Method" ListExpr'arrayToListMethod (Method/getMethod "cloiure.lang.ISeq arrayToList(Object[])"))

    (defn- #_"ListExpr" ListExpr'init []
        (hash-map
            #_"IPersistentVector" :args nil
        )
    )

    (defn #_"ListExpr" ListExpr'new [#_"IPersistentVector" ___args]
        (let [this (ListExpr'init)]
            (ยง ass (:args this) ___args)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"ListExpr" this]
        (let [#_"IPersistentVector" ___ret PersistentVector'EMPTY]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:args this).count()) [(inc ___i)]
                (ยง ass ___ret (cast' IPersistentVector (ร ___ret.cons((cast' Expr (.nth (:args this), ___i)).eval()))))
            )
            (.seq ___ret)
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"ListExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (MethodExpr'emitArgsAsArray (:args this), ___objx, ___gen)
        (.invokeStatic ___gen, Compiler'RT_TYPE, ListExpr'arrayToListMethod)
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"ListExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"ListExpr" this]
        (ยง class IPersistentList)
    )
)

(class-ns MapExpr (ยง implements Expr)
    (def #_"Method" MapExpr'mapMethod (Method/getMethod "cloiure.lang.IPersistentMap map(Object[])"))
    (def #_"Method" MapExpr'mapUniqueKeysMethod (Method/getMethod "cloiure.lang.IPersistentMap mapUniqueKeys(Object[])"))

    (defn- #_"MapExpr" MapExpr'init []
        (hash-map
            #_"IPersistentVector" :keyvals nil
        )
    )

    (defn #_"MapExpr" MapExpr'new [#_"IPersistentVector" ___keyvals]
        (let [this (MapExpr'init)]
            (ยง ass (:keyvals this) ___keyvals)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"MapExpr" this]
        (let [#_"Object[]" ___ret (make-array Object (count (:keyvals this)))]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:keyvals this).count()) [(inc ___i)]
                (ยง ass (ยง aget ___ret ___i) (.eval (cast' Expr (.nth (:keyvals this), ___i))))
            )
            (RT'map ___ret)
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"MapExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (let [#_"boolean" ___allKeysConstant true]
            (let [#_"boolean" ___allConstantKeysUnique true]
                (let [#_"IPersistentSet" ___constantKeys PersistentHashSet'EMPTY]
                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (:keyvals this).count()) [(+ ___i 2)]
                        (let [#_"Expr" ___k (cast' Expr (.nth (:keyvals this), ___i))]
                            (if (ยง instance? LiteralExpr ___k)
                                (do
                                    (let [#_"Object" ___kval (.eval ___k)]
                                        (if (.contains ___constantKeys, ___kval)
                                            (do
                                                (ยง ass ___allConstantKeysUnique false)
                                            )
                                            (do
                                                (ยง ass ___constantKeys (cast' IPersistentSet (.cons ___constantKeys, ___kval)))
                                            )
                                        )
                                    )
                                )
                                (do
                                    (ยง ass ___allKeysConstant false)
                                )
                            )
                        )
                    )
                    (MethodExpr'emitArgsAsArray (:keyvals this), ___objx, ___gen)
                    (if (or (and ___allKeysConstant ___allConstantKeysUnique) (ร (:keyvals this).count() <= 2))
                        (do
                            (.invokeStatic ___gen, Compiler'RT_TYPE, mapUniqueKeysMethod)
                        )
                        (do
                            (.invokeStatic ___gen, Compiler'RT_TYPE, mapMethod)
                        )
                    )
                    (when (ร ___context == :Context'STATEMENT)
                        (.pop ___gen)
                    )
                    nil
                )
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"MapExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"MapExpr" this]
        (ยง class IPersistentMap)
    )

    (defn #_"Expr" MapExpr'parse [#_"Context" ___context, #_"IPersistentMap" ___form]
        (let [#_"IPersistentVector" ___keyvals PersistentVector'EMPTY]
            (let [#_"boolean" ___keysConstant true]
                (let [#_"boolean" ___valsConstant true]
                    (let [#_"boolean" ___allConstantKeysUnique true]
                        (let [#_"IPersistentSet" ___constantKeys PersistentHashSet'EMPTY]
                            (loop-when-recur [#_"ISeq" ___s (RT'seq ___form)] (some? ___s) [(next ___s)]
                                (let [#_"IMapEntry" ___e (cast' IMapEntry (first ___s))]
                                    (let [#_"Expr" ___k (Compiler'analyze-2 (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), (.key ___e))]
                                        (let [#_"Expr" ___v (Compiler'analyze-2 (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), (.val ___e))]
                                            (ยง ass ___keyvals (cast' IPersistentVector (.cons ___keyvals, ___k)))
                                            (ยง ass ___keyvals (cast' IPersistentVector (.cons ___keyvals, ___v)))
                                            (if (ยง instance? LiteralExpr ___k)
                                                (do
                                                    (let [#_"Object" ___kval (.eval ___k)]
                                                        (if (.contains ___constantKeys, ___kval)
                                                            (do
                                                                (ยง ass ___allConstantKeysUnique false)
                                                            )
                                                            (do
                                                                (ยง ass ___constantKeys (cast' IPersistentSet (.cons ___constantKeys, ___kval)))
                                                            )
                                                        )
                                                    )
                                                )
                                                (do
                                                    (ยง ass ___keysConstant false)
                                                )
                                            )
                                            (when (not (ยง instance? LiteralExpr ___v))
                                                (ยง ass ___valsConstant false)
                                            )
                                        )
                                    )
                                )
                            )

                            (let [#_"Expr" ___ret (MapExpr'new ___keyvals)]
                                (cond (and (ยง instance? IObj ___form) (some? (.meta (cast' IObj ___form))))
                                    (do
                                        (MetaExpr'new ___ret, (MapExpr'parse (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), (.meta (cast' IObj ___form))))
                                    )
                                    ___keysConstant
                                    (do
                                        ;; TBD: Add more detail to exception thrown below.
                                        (when (not ___allConstantKeysUnique)
                                            (throw (IllegalArgumentException. "Duplicate constant keys in map"))
                                        )
                                        (if ___valsConstant
                                            (do
                                                (let [#_"IPersistentMap" ___m PersistentArrayMap'EMPTY]
                                                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (.length ___keyvals)) [(+ ___i 2)]
                                                        (ยง ass ___m (ร ___m.assoc((cast' LiteralExpr (.nth ___keyvals, ___i)).val(), (cast' LiteralExpr (ร ___keyvals.nth(___i + 1))).val())))
                                                    )
                                                    (ConstantExpr'new ___m)
                                                )
                                            )
                                            (do
                                                ___ret
                                            )
                                        )
                                    )
                                    :else
                                    (do
                                        ___ret
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns SetExpr (ยง implements Expr)
    (def #_"Method" SetExpr'setMethod (Method/getMethod "cloiure.lang.IPersistentSet set(Object[])"))

    (defn- #_"SetExpr" SetExpr'init []
        (hash-map
            #_"IPersistentVector" :keys nil
        )
    )

    (defn #_"SetExpr" SetExpr'new [#_"IPersistentVector" ___keys]
        (let [this (SetExpr'init)]
            (ยง ass (:keys this) ___keys)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"SetExpr" this]
        (let [#_"Object[]" ___ret (make-array Object (count (:keys this)))]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:keys this).count()) [(inc ___i)]
                (ยง ass (ยง aget ___ret ___i) (.eval (cast' Expr (.nth (:keys this), ___i))))
            )
            (RT'set ___ret)
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"SetExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (MethodExpr'emitArgsAsArray (:keys this), ___objx, ___gen)
        (.invokeStatic ___gen, Compiler'RT_TYPE, setMethod)
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"SetExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"SetExpr" this]
        (ยง class IPersistentSet)
    )

    (defn #_"Expr" SetExpr'parse [#_"Context" ___context, #_"IPersistentSet" ___form]
        (let [#_"IPersistentVector" ___keys PersistentVector'EMPTY]
            (let [#_"boolean" ___constant true]
                (loop-when-recur [#_"ISeq" ___s (RT'seq ___form)] (some? ___s) [(next ___s)]
                    (let [#_"Object" ___e (first ___s)]
                        (let [#_"Expr" ___expr (Compiler'analyze-2 (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), ___e)]
                            (ยง ass ___keys (cast' IPersistentVector (.cons ___keys, ___expr)))
                            (when (not (ยง instance? LiteralExpr ___expr))
                                (ยง ass ___constant false)
                            )
                        )
                    )
                )
                (let [#_"Expr" ___ret (SetExpr'new ___keys)]
                    (cond (and (ยง instance? IObj ___form) (some? (.meta (cast' IObj ___form))))
                        (do
                            (MetaExpr'new ___ret, (MapExpr'parse (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), (.meta (cast' IObj ___form))))
                        )
                        ___constant
                        (do
                            (let [#_"IPersistentSet" ___set PersistentHashSet'EMPTY]
                                (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___keys)) [(inc ___i)]
                                    (let [#_"LiteralExpr" ___ve (cast' LiteralExpr (.nth ___keys, ___i))]
                                        (ยง ass ___set (cast' IPersistentSet (.cons ___set, (.val ___ve))))
                                    )
                                )
                                (ConstantExpr'new ___set)
                            )
                        )
                        :else
                        (do
                            ___ret
                        )
                    )
                )
            )
        )
    )
)

(class-ns VectorExpr (ยง implements Expr)
    (def #_"Method" VectorExpr'vectorMethod (Method/getMethod "cloiure.lang.IPersistentVector vector(Object[])"))

    (defn- #_"VectorExpr" VectorExpr'init []
        (hash-map
            #_"IPersistentVector" :args nil
        )
    )

    (defn #_"VectorExpr" VectorExpr'new [#_"IPersistentVector" ___args]
        (let [this (VectorExpr'init)]
            (ยง ass (:args this) ___args)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"VectorExpr" this]
        (let [#_"IPersistentVector" ___ret PersistentVector'EMPTY]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:args this).count()) [(inc ___i)]
                (ยง ass ___ret (cast' IPersistentVector (ร ___ret.cons((cast' Expr (.nth (:args this), ___i)).eval()))))
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"VectorExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (if (ร (:args this).count() <= Tuple'MAX_SIZE)
            (do
                (loop-when-recur [#_"int" ___i 0] (ร ___i < (:args this).count()) [(inc ___i)]
                    (ร (cast' Expr (.nth (:args this), ___i)).emit(:Context'EXPRESSION, ___objx, ___gen))
                )
                (ร ___gen.invokeStatic(Compiler'TUPLE_TYPE, Compiler'createTupleMethods[(:args this).count()]))
            )
            (do
                (MethodExpr'emitArgsAsArray (:args this), ___objx, ___gen)
                (.invokeStatic ___gen, Compiler'RT_TYPE, vectorMethod)
            )
        )

        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"VectorExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"VectorExpr" this]
        (ยง class IPersistentVector)
    )

    (defn #_"Expr" VectorExpr'parse [#_"Context" ___context, #_"IPersistentVector" ___form]
        (let [#_"boolean" ___constant true]
            (let [#_"IPersistentVector" ___args PersistentVector'EMPTY]
                (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___form)) [(inc ___i)]
                    (let [#_"Expr" ___v (Compiler'analyze-2 (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), (.nth ___form, ___i))]
                        (ยง ass ___args (cast' IPersistentVector (.cons ___args, ___v)))
                        (when (not (ยง instance? LiteralExpr ___v))
                            (ยง ass ___constant false)
                        )
                    )
                )
                (let [#_"Expr" ___ret (VectorExpr'new ___args)]
                    (cond (and (ยง instance? IObj ___form) (some? (.meta (cast' IObj ___form))))
                        (do
                            (MetaExpr'new ___ret, (MapExpr'parse (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), (.meta (cast' IObj ___form))))
                        )
                        ___constant
                        (do
                            (let [#_"IPersistentVector" ___rv PersistentVector'EMPTY]
                                (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___args)) [(inc ___i)]
                                    (let [#_"LiteralExpr" ___ve (cast' LiteralExpr (.nth ___args, ___i))]
                                        (ยง ass ___rv (.cons ___rv, (.val ___ve)))
                                    )
                                )
                                (ConstantExpr'new ___rv)
                            )
                        )
                        :else
                        (do
                            ___ret
                        )
                    )
                )
            )
        )
    )
)

(class-ns KeywordInvokeExpr (ยง implements Expr)
    (ยง def #_"Type" KeywordInvokeExpr'ILOOKUP_TYPE (Type/getType (ยง class ILookup)))

    (defn- #_"KeywordInvokeExpr" KeywordInvokeExpr'init []
        (hash-map
            #_"KeywordExpr" :kw nil
            #_"Object" :tag nil
            #_"Expr" :target nil
            #_"int" :line 0
            #_"int" :column 0
            #_"int" :siteIndex 0
            #_"String" :source nil

            #_"Class" :jc nil
        )
    )

    (defn #_"KeywordInvokeExpr" KeywordInvokeExpr'new [#_"String" ___source, #_"int" ___line, #_"int" ___column, #_"Symbol" ___tag, #_"KeywordExpr" ___kw, #_"Expr" ___target]
        (let [this (KeywordInvokeExpr'init)]
            (ยง ass (:source this) ___source)
            (ยง ass (:kw this) ___kw)
            (ยง ass (:target this) ___target)
            (ยง ass (:line this) ___line)
            (ยง ass (:column this) ___column)
            (ยง ass (:tag this) ___tag)
            (ยง ass (:siteIndex this) (Compiler'registerKeywordCallsite (:k ___kw)))
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"KeywordInvokeExpr" this]
        (try
            (ร (:k (:kw this)).invoke((:target this).eval()))
            (catch Throwable ___e
                (if (not (ยง instance? CompilerException ___e))
                    (do
                        (throw (CompilerException'new (:source this), (:line this), (:column this), ___e))
                    )
                    (do
                        (throw (cast' CompilerException ___e))
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"KeywordInvokeExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (let [#_"Label" ___endLabel (.newLabel ___gen)]
            (let [#_"Label" ___faultLabel (.newLabel ___gen)]
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (ร ___gen.getStatic((:objtype ___objx), ___objx.thunkNameStatic((:siteIndex this)), ObjExpr'ILOOKUP_THUNK_TYPE))
                (.dup ___gen) ;; thunk, thunk
                (ร (:target this).emit(:Context'EXPRESSION, ___objx, ___gen)) ;; thunk, thunk, target
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (.dupX2 ___gen) ;; target, thunk, thunk, target
                (ร ___gen.invokeInterface(ObjExpr'ILOOKUP_THUNK_TYPE, Method/getMethod("Object get(Object)"))) ;; target, thunk, result
                (.dupX2 ___gen) ;; result, target, thunk, result
                (.visitJumpInsn ___gen, Opcodes/IF_ACMPEQ, ___faultLabel) ;; result, target
                (.pop ___gen) ;; result
                (.goTo ___gen, ___endLabel)

                (.mark ___gen, ___faultLabel) ;; result, target
                (.swap ___gen) ;; target, result
                (.pop ___gen) ;; target
                (.dup ___gen) ;; target, target
                (ร ___gen.getStatic((:objtype ___objx), ___objx.siteNameStatic((:siteIndex this)), ObjExpr'KEYWORD_LOOKUPSITE_TYPE)) ;; target, target, site
                (.swap ___gen) ;; target, site, target
                (ร ___gen.invokeInterface(ObjExpr'ILOOKUP_SITE_TYPE, Method/getMethod("cloiure.lang.ILookupThunk fault(Object)"))) ;; target, new-thunk
                (.dup ___gen) ;; target, new-thunk, new-thunk
                (ร ___gen.putStatic((:objtype ___objx), ___objx.thunkNameStatic((:siteIndex this)), ObjExpr'ILOOKUP_THUNK_TYPE)) ;; target, new-thunk
                (.swap ___gen) ;; new-thunk, target
                (ร ___gen.invokeInterface(ObjExpr'ILOOKUP_THUNK_TYPE, Method/getMethod("Object get(Object)"))) ;; result

                (.mark ___gen, ___endLabel)
                (when (ร ___context == :Context'STATEMENT)
                    (.pop ___gen)
                )
                nil
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"KeywordInvokeExpr" this]
        (some? (:tag this))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"KeywordInvokeExpr" this]
        (when (nil? (:jc this))
            (ยง ass (:jc this) (HostExpr'tagToClass (:tag this)))
        )
        (:jc this)
    )
)

(class-ns InstanceOfExpr (ยง implements Expr, MaybePrimitiveExpr)
    (defn- #_"InstanceOfExpr" InstanceOfExpr'init []
        (hash-map
            #_"Expr" :expr nil
            #_"Class" :c nil
        )
    )

    (defn #_"InstanceOfExpr" InstanceOfExpr'new [#_"Class" ___c, #_"Expr" ___expr]
        (let [this (InstanceOfExpr'init)]
            (ยง ass (:expr this) ___expr)
            (ยง ass (:c this) ___c)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"InstanceOfExpr" this]
        (when (ร (:c this).isInstance((:expr this).eval()))
            (ยง return RT'T)
        )
        RT'F
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"InstanceOfExpr" this]
        true
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"InstanceOfExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (ร (:expr this).emit(:Context'EXPRESSION, ___objx, ___gen))
        (ร ___gen.instanceOf(Compiler'getType((:c this))))
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"InstanceOfExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.emitUnboxed this, ___context, ___objx, ___gen)
        (HostExpr'emitBoxReturn ___objx, ___gen, Boolean/TYPE)
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"InstanceOfExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"InstanceOfExpr" this]
        Boolean/TYPE
    )
)

(class-ns StaticInvokeExpr (ยง implements Expr, MaybePrimitiveExpr)
    (defn- #_"StaticInvokeExpr" StaticInvokeExpr'init []
        (hash-map
            #_"Type" :target nil
            #_"Class" :retClass nil
            #_"Class[]" :paramclasses nil
            #_"Type[]" :paramtypes nil
            #_"IPersistentVector" :args nil
            #_"boolean" :variadic false
            #_"boolean" :tailPosition false
            #_"Object" :tag nil

            #_"Class" :jc nil
        )
    )

    (defn #_"StaticInvokeExpr" StaticInvokeExpr'new [#_"Type" ___target, #_"Class" ___retClass, #_"Class[]" ___paramclasses, #_"Type[]" ___paramtypes, #_"boolean" ___variadic, #_"IPersistentVector" ___args, #_"Object" ___tag, #_"boolean" ___tailPosition]
        (let [this (StaticInvokeExpr'init)]
            (ยง ass (:target this) ___target)
            (ยง ass (:retClass this) ___retClass)
            (ยง ass (:paramclasses this) ___paramclasses)
            (ยง ass (:paramtypes this) ___paramtypes)
            (ยง ass (:args this) ___args)
            (ยง ass (:variadic this) ___variadic)
            (ยง ass (:tailPosition this) ___tailPosition)
            (ยง ass (:tag this) ___tag)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"StaticInvokeExpr" this]
        (throw (UnsupportedOperationException. "Can't eval StaticInvokeExpr"))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"StaticInvokeExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.emitUnboxed this, ___context, ___objx, ___gen)
        (when (ร ___context != :Context'STATEMENT)
            (HostExpr'emitBoxReturn ___objx, ___gen, (:retClass this))
        )
        (when (ร ___context == :Context'STATEMENT)
            (if (or (ร (:retClass this) == Long/TYPE) (ร (:retClass this) == Double/TYPE))
                (do
                    (.pop2 ___gen)
                )
                (do
                    (.pop ___gen)
                )
            )
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"StaticInvokeExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"StaticInvokeExpr" this]
        (when (nil? (:jc this))
            (ยง ass (:jc this) (Compiler'retType (when (some? (:tag this)) (HostExpr'tagToClass (:tag this))), (:retClass this)))
        )
        (:jc this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"StaticInvokeExpr" this]
        (.isPrimitive (:retClass this))
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"StaticInvokeExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (let [#_"Method" ___ms (Method. "invokeStatic", (.getReturnType this), (:paramtypes this))]
            (if (:variadic this)
                (do
                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength (:paramclasses this)) - 1) [(inc ___i)]
                        (let [#_"Expr" ___e (cast' Expr (.nth (:args this), ___i))]
                            (if (ร Compiler'maybePrimitiveType(___e) == (:paramclasses this)[___i])
                                (do
                                    (ร (cast' MaybePrimitiveExpr ___e).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                                )
                                (do
                                    (ร ___e.emit(:Context'EXPRESSION, ___objx, ___gen))
                                    (ร HostExpr'emitUnboxArg(___objx, ___gen, (:paramclasses this)[___i]))
                                )
                            )
                        )
                    )
                    (let [#_"IPersistentVector" ___restArgs (ร RT'subvec((:args this), (ยง alength (:paramclasses this)) - 1, (:args this).count()))]
                        (MethodExpr'emitArgsAsArray ___restArgs, ___objx, ___gen)
                        (ร ___gen.invokeStatic(Type/getType((ยง class ArraySeq)), Method/getMethod("cloiure.lang.ArraySeq create(Object[])")))
                    )
                )
                (do
                    (MethodExpr'emitTypedArgs ___objx, ___gen, (:paramclasses this), (:args this))
                )
            )

            (when (and (:tailPosition this) (not (:canBeDirect ___objx)))
                (let [#_"ObjMethod" ___method (cast' ObjMethod (.deref Compiler'METHOD))]
                    (.emitClearThis ___method, ___gen)
                )
            )

            (.invokeStatic ___gen, (:target this), ___ms)
            nil
        )
    )

    #_method
    (ยง defn- #_"Type" (ยง method getReturnType) [#_"StaticInvokeExpr" this]
        (Type/getType (:retClass this))
    )

    (defn #_"Expr" StaticInvokeExpr'parse [#_"Var" ___v, #_"ISeq" ___args, #_"Object" ___tag, #_"boolean" ___tailPosition]
        (when (or (not (.isBound ___v)) (nil? (.get ___v)))
            (ยง return nil)
        )
        (let [#_"Class" ___c (.getClass (.get ___v))]
            (let [#_"String" ___cname (.getName ___c)]
                (let [#_"java.lang.reflect.Method[]" ___allmethods (.getMethods ___c)]
                    (let [#_"boolean" ___variadic false]
                        (let [#_"int" ___argcount (RT'count ___args)]
                            (let [#_"java.lang.reflect.Method" ___method nil]
                                (doseq [#_"java.lang.reflect.Method" ___m ___allmethods]
                                    (when (and (Modifier/isStatic (.getModifiers ___m)) (ร (.getName ___m).equals("invokeStatic")))
                                        (let [#_"Class[]" ___params (.getParameterTypes ___m)]
                                            (cond (= ___argcount (ยง alength ___params))
                                                (do
                                                    (ยง ass ___method ___m)
                                                    (ยง ass ___variadic (and (pos? ___argcount) (ร ___params[(ยง alength ___params) - 1] == (ยง class ISeq))))
                                                    (ยง break )
                                                )
                                                (and (< 0 (ยง alength ___params) ___argcount) (ร ___params[(ยง alength ___params) - 1] == (ยง class ISeq)))
                                                (do
                                                    (ยง ass ___method ___m)
                                                    (ยง ass ___variadic true)
                                                    (ยง break )
                                                )
                                            )
                                        )
                                    )
                                )
                                (when (nil? ___method)
                                    (ยง return nil)
                                )

                                (let [#_"Class" ___retClass (.getReturnType ___method)]
                                    (let [#_"Class[]" ___paramClasses (.getParameterTypes ___method)]
                                        (let [#_"Type[]" ___paramTypes (make-array Type (ยง alength ___paramClasses))]
                                            (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___paramClasses)) [(inc ___i)]
                                                (ยง ass (ยง aget ___paramTypes ___i) (Type/getType (ยง aget ___paramClasses ___i)))
                                            )

                                            (let [#_"Type" ___target (ยง unsure Type/getType ___c)]
                                                (let [#_"PersistentVector" ___argv PersistentVector'EMPTY]
                                                    (loop-when-recur [#_"ISeq" ___s (RT'seq ___args)] (some? ___s) [(next ___s)]
                                                        (ยง ass ___argv (ร ___argv.cons(Compiler'analyze-2(:Context'EXPRESSION, (first ___s)))))
                                                    )

                                                    (StaticInvokeExpr'new ___target, ___retClass, ___paramClasses, ___paramTypes, ___variadic, ___argv, ___tag, ___tailPosition)
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns InvokeExpr (ยง implements Expr)
    (ยง def #_"Keyword" InvokeExpr'onKey (Keyword'intern-1 "on"))
    (ยง def #_"Keyword" InvokeExpr'methodMapKey (Keyword'intern-1 "method-map"))

    (defn #_"Object" InvokeExpr'sigTag [#_"int" ___argcount, #_"Var" ___v]
        (let [#_"Object" ___arglists (ร RT'get-2(RT'meta(___v), Compiler'arglistsKey))]
            (let [#_"Object" ___sigTag nil]
                (loop-when-recur [#_"ISeq" ___s (RT'seq ___arglists)] (some? ___s) [(next ___s)]
                    (let [#_"APersistentVector" ___sig (cast' APersistentVector (first ___s))]
                        (let [#_"int" ___restOffset (.indexOf ___sig, Compiler'_AMP_)]
                            (when (or (= ___argcount (count ___sig)) (<= 0 ___restOffset ___argcount))
                                (ยง return (Compiler'tagOf ___sig))
                            )
                        )
                    )
                )
                nil
            )
        )
    )

    (defn- #_"InvokeExpr" InvokeExpr'init []
        (hash-map
            #_"Expr" :fexpr nil
            #_"Object" :tag nil
            #_"IPersistentVector" :args nil
            #_"int" :line 0
            #_"int" :column 0
            #_"boolean" :tailPosition false
            #_"String" :source nil

            #_"boolean" :isProtocol false
            #_"boolean" :isDirect false
            #_"int" :siteIndex -1
            #_"Class" :protocolOn nil
            #_"java.lang.reflect.Method" :onMethod nil

            #_"Class" :jc nil
        )
    )

    (defn #_"InvokeExpr" InvokeExpr'new [#_"String" ___source, #_"int" ___line, #_"int" ___column, #_"Symbol" ___tag, #_"Expr" ___fexpr, #_"IPersistentVector" ___args, #_"boolean" ___tailPosition]
        (let [this (InvokeExpr'init)]
            (ยง ass (:source this) ___source)
            (ยง ass (:fexpr this) ___fexpr)
            (ยง ass (:args this) ___args)
            (ยง ass (:line this) ___line)
            (ยง ass (:column this) ___column)
            (ยง ass (:tailPosition this) ___tailPosition)

            (when (ยง instance? VarExpr ___fexpr)
                (let [#_"Var" ___fvar (:var (cast' VarExpr ___fexpr))]
                    (let [#_"Var" ___pvar (cast' Var (ร RT'get-2((.meta ___fvar), Compiler'protocolKey)))]
                        (when (and (some? ___pvar) (.isBound Compiler'PROTOCOL_CALLSITES))
                            (ยง ass (:isProtocol this) true)
                            (ยง ass (:siteIndex this) (ร Compiler'registerProtocolCallsite((:var (cast' VarExpr ___fexpr)))))
                            (let [#_"Object" ___pon (ร RT'get-2((.get ___pvar), Compiler'onKey))]
                                (ยง ass (:protocolOn this) (HostExpr'maybeClass ___pon, false))
                                (when (ร (some? (:protocolOn this)))
                                    (let [#_"IPersistentMap" ___mmap (cast' IPersistentMap (ร RT'get-2((.get ___pvar), methodMapKey)))]
                                        (let [#_"Keyword" ___mmapVal (cast' Keyword (ร ___mmap.valAt(Keyword'intern((:sym ___fvar)))))]
                                            (when (nil? ___mmapVal)
                                                (throw (IllegalArgumentException. (str "No method of interface: " (.getName (:protocolOn this)) " found for function: " (:sym ___fvar) " of protocol: " (:sym ___pvar) " (The protocol method may have been defined before and removed.)")))
                                            )
                                            (let [#_"String" ___mname (ร Compiler'munge((:sym ___mmapVal).toString()))]
                                                (let [#_"List" ___methods (ร Reflector'getMethods((:protocolOn this), (count ___args) - 1, ___mname, false))]
                                                    (when (ร (.size ___methods) != 1)
                                                        (throw (IllegalArgumentException. (str "No single method: " ___mname " of interface: " (.getName (:protocolOn this)) " found for function: " (:sym ___fvar) " of protocol: " (:sym ___pvar))))
                                                    )
                                                    (ยง ass (:onMethod this) (ร (java.lang.reflect.Method) ___methods.get(0)))
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )

            (cond (some? ___tag)
                (do
                    (ยง ass (:tag this) ___tag)
                )
                (ยง instance? VarExpr ___fexpr)
                (do
                    (let [#_"Var" ___v (:var (cast' VarExpr ___fexpr))]
                        (let [#_"Object" ___arglists (ร RT'get-2(RT'meta(___v), Compiler'arglistsKey))]
                            (let [#_"Object" ___sigTag (ร InvokeExpr'sigTag((count ___args), ___v))]
                                (ยง ass (:tag this) (or ___sigTag (:tag (cast' VarExpr ___fexpr))))
                            )
                        )
                    )
                )
                :else
                (do
                    (ยง ass (:tag this) nil)
                )
            )
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"InvokeExpr" this]
        (try
            (let [#_"IFn" ___fn (cast' IFn (.eval (:fexpr this)))]
                (let [#_"PersistentVector" ___argvs PersistentVector'EMPTY]
                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (:args this).count()) [(inc ___i)]
                        (ยง ass ___argvs (ร ___argvs.cons((cast' Expr (.nth (:args this), ___i)).eval())))
                    )
                    (ร ___fn.applyTo(RT'seq(Util'ret1(___argvs, (ยง ass ___argvs nil)))))
                )
            )
            (catch Throwable ___e
                (if (not (ยง instance? CompilerException ___e))
                    (do
                        (throw (CompilerException'new (:source this), (:line this), (:column this), ___e))
                    )
                    (do
                        (throw (cast' CompilerException ___e))
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"InvokeExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (if (:isProtocol this)
            (do
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (.emitProto this, ___context, ___objx, ___gen)
            )
            (do
                (ร (:fexpr this).emit(:Context'EXPRESSION, ___objx, ___gen))
                (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))
                (.checkCast ___gen, Compiler'IFN_TYPE)
                (.emitArgsAndCall this, 0, ___context, ___objx, ___gen)
            )
        )
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emitProto) [#_"InvokeExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (let [#_"Label" ___onLabel (.newLabel ___gen)]
            (let [#_"Label" ___callLabel (.newLabel ___gen)]
                (let [#_"Label" ___endLabel (.newLabel ___gen)]
                    (let [#_"Var" ___v (:var (cast' VarExpr (:fexpr this)))]
                        (let [#_"Expr" ___e (cast' Expr (.nth (:args this), 0))]
                            (ร ___e.emit(:Context'EXPRESSION, ___objx, ___gen))
                            (.dup ___gen) ;; target, target
                            (ร ___gen.invokeStatic(Compiler'UTIL_TYPE, Method/getMethod("Class classOf(Object)"))) ;; target, class
                            (ร ___gen.getStatic((:objtype ___objx), ___objx.cachedClassName((:siteIndex this)), Compiler'CLASS_TYPE)) ;; target, class, cached-class
                            (.visitJumpInsn ___gen, Opcodes/IF_ACMPEQ, ___callLabel) ;; target
                            (when (some? (:protocolOn this))
                                (.dup ___gen) ;; target, target
                                (ร ___gen.instanceOf(Type/getType((:protocolOn this))))
                                (.ifZCmp ___gen, GeneratorAdapter/NE, ___onLabel)
                            )

                            (.dup ___gen) ;; target, target
                            (ร ___gen.invokeStatic(Compiler'UTIL_TYPE, Method/getMethod("Class classOf(Object)"))) ;; target, class
                            (ร ___gen.putStatic((:objtype ___objx), ___objx.cachedClassName((:siteIndex this)), Compiler'CLASS_TYPE)) ;; target

                            (.mark ___gen, ___callLabel) ;; target
                            (.emitVar ___objx, ___gen, ___v)
                            (ร ___gen.invokeVirtual(Compiler'VAR_TYPE, Method/getMethod("Object getRawRoot()"))) ;; target, proto-fn
                            (.swap ___gen)
                            (.emitArgsAndCall this, 1, ___context, ___objx, ___gen)
                            (.goTo ___gen, ___endLabel)

                            (.mark ___gen, ___onLabel) ;; target
                            (when (some? (:protocolOn this))
                                (ร ___gen.checkCast(Type/getType((:protocolOn this))))
                                (ร MethodExpr'emitTypedArgs(___objx, ___gen, (:onMethod this).getParameterTypes(), RT'subvec((:args this), 1, (:args this).count())))
                                (when (ร ___context == :Context'RETURN)
                                    (let [#_"ObjMethod" ___method (cast' ObjMethod (.deref Compiler'METHOD))]
                                        (.emitClearLocals ___method, ___gen)
                                    )
                                )
                                (let [#_"Method" ___m (Method. (.getName (:onMethod this)), (Type/getReturnType (:onMethod this)), (Type/getArgumentTypes (:onMethod this)))]
                                    (ร ___gen.invokeInterface(Type/getType((:protocolOn this)), ___m))
                                    (ร HostExpr'emitBoxReturn(___objx, ___gen, (:onMethod this).getReturnType()))
                                )
                            )
                            (.mark ___gen, ___endLabel)
                            nil
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emitArgsAndCall) [#_"InvokeExpr" this, #_"int" ___firstArgToEmit, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (loop-when-recur [#_"int" ___i ___firstArgToEmit] (ร ___i < Math/min(Compiler'MAX_POSITIONAL_ARITY, (:args this).count())) [(inc ___i)]
            (let [#_"Expr" ___e (cast' Expr (.nth (:args this), ___i))]
                (ร ___e.emit(:Context'EXPRESSION, ___objx, ___gen))
            )
        )
        (when (ร (:args this).count() > Compiler'MAX_POSITIONAL_ARITY)
            (let [#_"PersistentVector" ___restArgs PersistentVector'EMPTY]
                (loop-when-recur [#_"int" ___i Compiler'MAX_POSITIONAL_ARITY] (ร ___i < (:args this).count()) [(inc ___i)]
                    (ยง ass ___restArgs (ร ___restArgs.cons((:args this).nth(___i))))
                )
                (MethodExpr'emitArgsAsArray ___restArgs, ___objx, ___gen)
            )
        )
        (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))

        (when (and (:tailPosition this) (not (:canBeDirect ___objx)))
            (let [#_"ObjMethod" ___method (cast' ObjMethod (.deref Compiler'METHOD))]
                (.emitClearThis ___method, ___gen)
            )
        )

        (ร ___gen.invokeInterface(Compiler'IFN_TYPE, (Method. "invoke", Compiler'OBJECT_TYPE, (ร Compiler'ARG_TYPES[Math/min(Compiler'MAX_POSITIONAL_ARITY + 1, (:args this).count())]))))
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"InvokeExpr" this]
        (some? (:tag this))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"InvokeExpr" this]
        (when (nil? (:jc this))
            (ยง ass (:jc this) (HostExpr'tagToClass (:tag this)))
        )
        (:jc this)
    )

    (defn #_"Expr" InvokeExpr'parse [#_"Context" ___context, #_"ISeq" ___form]
        (let [#_"boolean" ___tailPosition (Compiler'inTailCall ___context)]
            (when (ร ___context != :Context'EVAL)
                (ยง ass ___context (ร :Context'EXPRESSION))
            )
            (let [#_"Expr" ___fexpr (ร Compiler'analyze-2(___context, (first ___form)))]
                (when (and (ยง instance? VarExpr ___fexpr) (.equals (:var (cast' VarExpr ___fexpr)), Compiler'INSTANCE) (ร (RT'count ___form) == 3))
                    (let [#_"Expr" ___sexpr (ร Compiler'analyze-2(:Context'EXPRESSION, RT'second(___form)))]
                        (when (ยง instance? ConstantExpr ___sexpr)
                            (let [#_"Object" ___val (.val (cast' ConstantExpr ___sexpr))]
                                (when (instance? Class ___val)
                                    (ยง return (ร InstanceOfExpr'new((cast Class ___val), Compiler'analyze-2(___context, RT'third(___form)))))
                                )
                            )
                        )
                    )
                )

                (when (and (RT'booleanCast-1o (Compiler'getCompilerOption Compiler'directLinkingKey)) (ยง instance? VarExpr ___fexpr) (not= ___context :Context'EVAL))
                    (let [#_"Var" ___v (:var (cast' VarExpr ___fexpr))]
                        (when (and (not (.isDynamic ___v)) (not (RT'booleanCast-1o (RT'get-3 (.meta ___v), Compiler'redefKey, false))))
                            (let [#_"Symbol" ___formtag (Compiler'tagOf ___form)]
                                (let [#_"Object" ___arglists (ร RT'get-2(RT'meta(___v), Compiler'arglistsKey))]
                                    (let [#_"int" ___arity (RT'count (next ___form))]
                                        (let [#_"Object" ___sigtag (InvokeExpr'sigTag ___arity, ___v)]
                                            (let [#_"Object" ___vtag (ร RT'get-2(RT'meta(___v), RT'TAG_KEY))]
                                                (let [#_"Expr" ___ret (StaticInvokeExpr'parse ___v, (RT'next ___form), (or ___formtag ___sigtag ___vtag), ___tailPosition)]
                                                    (when (some? ___ret)
                                                        (ยง return ___ret)
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )

                (when (and (ยง instance? VarExpr ___fexpr) (ร ___context != :Context'EVAL))
                    (let [#_"Var" ___v (:var (cast' VarExpr ___fexpr))]
                        (let [#_"Object" ___arglists (ร RT'get-2(RT'meta(___v), Compiler'arglistsKey))]
                            (let [#_"int" ___arity (RT'count (next ___form))]
                                (loop-when-recur [#_"ISeq" ___s (RT'seq ___arglists)] (some? ___s) [(next ___s)]
                                    (let [#_"IPersistentVector" ___args (cast' IPersistentVector (first ___s))]
                                        (when (ร (count ___args) == ___arity)
                                            (let [#_"String" ___primc (FnMethod'primInterface ___args)]
                                                (when (some? ___primc)
                                                    (ยง return (ร Compiler'analyze-2(___context, (cast' IObj (ร RT'listStar-3(Symbol'intern-1(".invokePrim"), (cast' Symbol (first ___form)).withMeta(RT'map(RT'TAG_KEY, Symbol'intern-1(___primc))), (next ___form)))).withMeta((cast' IPersistentMap (ร RT'conj(RT'meta(___v), RT'meta(___form))))))))
                                                )
                                                (ยง break )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )

                (when (and (ยง instance? KeywordExpr ___fexpr) (ร (RT'count ___form) == 2) (.isBound Compiler'KEYWORD_CALLSITES))
                    (let [#_"Expr" ___target (ร Compiler'analyze-2(___context, RT'second(___form)))]
                        (ยง return (ร KeywordInvokeExpr'new((cast String (.deref Compiler'SOURCE)), Compiler'lineDeref(), Compiler'columnDeref(), Compiler'tagOf(___form), (cast' KeywordExpr ___fexpr), ___target)))
                    )
                )
                (let [#_"PersistentVector" ___args PersistentVector'EMPTY]
                    (loop-when-recur [#_"ISeq" ___s (RT'seq (next ___form))] (some? ___s) [(next ___s)]
                        (ยง ass ___args (ร ___args.cons(Compiler'analyze-2(___context, (first ___s)))))
                    )

                    (ร InvokeExpr'new((cast String (.deref Compiler'SOURCE)), Compiler'lineDeref(), Compiler'columnDeref(), Compiler'tagOf(___form), ___fexpr, ___args, ___tailPosition))
                )
            )
        )
    )
)

#_stateless
(class-ns SourceDebugExtensionAttribute (ยง extends Attribute)
    (defn #_"SourceDebugExtensionAttribute" SourceDebugExtensionAttribute'new []
        (Attribute'new "SourceDebugExtension")
    )

    #_method
    (ยง defn #_"void" (ยง method writeSMAP) [#_"SourceDebugExtensionAttribute" this, #_"ClassWriter" ___cw, #_"String" ___smap]
        (let [#_"ByteVector" ___bv (write ___cw, nil, -1, -1, -1)]
            (.putUTF8 ___bv, ___smap)
            nil
        )
    )
)

(class-ns FnExpr (ยง extends ObjExpr)
    (ยง def #_"Type" FnExpr'aFnType (Type/getType (ยง class AFunction)))
    (ยง def #_"Type" FnExpr'restFnType (Type/getType (ยง class RestFn)))

    (defn- #_"FnExpr" FnExpr'init []
        (hash-map
            ;; if there is a variadic overload (there can only be one) it is stored here
            #_"FnMethod" :variadicMethod nil
            #_"IPersistentCollection" :methods nil
            #_"boolean" :hasPrimSigs false
            #_"boolean" :hasMeta false
            #_"boolean" :hasEnclosingMethod false

            #_"Class" :jc nil
        )
    )

    (defn #_"FnExpr" FnExpr'new [#_"Object" ___tag]
        (merge (ObjExpr'new ___tag) (FnExpr'init))
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"FnExpr" this]
        true
    )

    #_method
    (ยง defn #_"boolean" (ยง method supportsMeta) [#_"FnExpr" this]
        (:hasMeta this)
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"FnExpr" this]
        (when (nil? (:jc this))
            (ยง ass (:jc this) (if (some? (:tag this)) (HostExpr'tagToClass (:tag this)) (ยง class AFunction)))
        )
        (:jc this)
    )

    #_protected
    #_method
    (ยง defn #_"void" (ยง method emitMethods) [#_"FnExpr" this, #_"ClassVisitor" ___cv]
        ;; override of invoke/doInvoke for each method
        (loop-when-recur [#_"ISeq" ___s (RT'seq (:methods this))] (some? ___s) [(next ___s)]
            (let [#_"ObjMethod" ___method (cast' ObjMethod (first ___s))]
                (.emit ___method, this, ___cv)
            )
        )

        (when (.isVariadic this)
            (let [#_"GeneratorAdapter" ___gen (GeneratorAdapter. Opcodes/ACC_PUBLIC, (Method/getMethod "int getRequiredArity()"), nil, nil, ___cv)]
                (.visitCode ___gen)
                (ร ___gen.push((:reqParms (:variadicMethod this)).count()))
                (.returnValue ___gen)
                (.endMethod ___gen)
            )
        )
        nil
    )

    (defn #_"Expr" FnExpr'parse [#_"Context" ___context, #_"ISeq" ___form, #_"String" ___name]
        (let [#_"ISeq" ___origForm ___form]
            (let [#_"FnExpr" ___fn (ร FnExpr'new(Compiler'tagOf(___form)))]
                (let [#_"Keyword" ___retkey (Keyword'intern-2 nil, "rettag")]
                    (let [#_"Object" ___rettag (ร RT'get-2(RT'meta(___form), ___retkey))]
                        (ยง ass (:src ___fn) ___form)
                        (let [#_"ObjMethod" ___enclosingMethod (cast' ObjMethod (.deref Compiler'METHOD))]
                            (ยง ass (:hasEnclosingMethod ___fn) (some? ___enclosingMethod))
                            (when (some? (.meta (cast' IMeta (first ___form))))
                                (ยง ass (:onceOnly ___fn) (ร RT'booleanCast-1o(RT'get-2(RT'meta((first ___form)), Keyword'intern-2(nil, "once")))))
                            )

                            (let [#_"String" ___basename (str (if (some? ___enclosingMethod) (:name (:objx ___enclosingMethod)) (ร Compiler'munge((:name (:name (.currentNS this)))))) "$")]
                                (let [#_"Symbol" ___nm nil]
                                    (if (ยง instance? Symbol (RT'second ___form))
                                        (do
                                            (ยง ass ___nm (cast' Symbol (RT'second ___form)))
                                            (ยง ass ___name (str (:name ___nm) "__" (RT'nextID)))
                                        )
                                        (do
                                            (cond (nil? ___name)
                                                (do
                                                    (ยง ass ___name (str "fn__" (RT'nextID)))
                                                )
                                                (some? ___enclosingMethod)
                                                (do
                                                    (ยง ass ___name (str ___name "__"(RT'nextID)))
                                                )
                                            )
                                        )
                                    )

                                    (let [#_"String" ___simpleName (ร Compiler'munge(___name).replace(".", "_DOT_"))]
                                        (ยง ass (:name ___fn) (+ ___basename ___simpleName))
                                        (ยง ass (:internalName ___fn) (ร (:name ___fn).replace(\., \/)))
                                        (ยง ass (:objtype ___fn) (Type/getObjectType (:internalName ___fn)))
                                        (let [#_"ArrayList<String>" ___prims (ArrayList.)]
                                            (try
                                                (ร Var'pushThreadBindings(RT'mapUniqueKeys(
                                                    (object-array [
                                                        Compiler'CONSTANTS          PersistentVector'EMPTY
                                                        Compiler'CONSTANT_IDS       (IdentityHashMap.)
                                                        Compiler'KEYWORDS           PersistentHashMap'EMPTY
                                                        Compiler'VARS               PersistentHashMap'EMPTY
                                                        Compiler'KEYWORD_CALLSITES  PersistentVector'EMPTY
                                                        Compiler'PROTOCOL_CALLSITES PersistentVector'EMPTY
                                                        Compiler'VAR_CALLSITES      (Compiler'emptyVarCallSites)
                                                        Compiler'NO_RECUR           nil
                                                    ])
                                                )))

                                                ;; arglist might be preceded by symbol naming this fn
                                                (when (some? ___nm)
                                                    (ยง ass (:thisName ___fn) (:name ___nm))
                                                    (ยง ass ___form (ร RT'cons(Compiler'FN, RT'next(RT'next(___form)))))
                                                )

                                                ;; now (fn [args] body...) or (fn ([args] body...) ([args2] body2...) ...)
                                                ;; turn former into latter
                                                (when (ยง instance? IPersistentVector (RT'second ___form))
                                                    (ยง ass ___form (ร RT'list-2(Compiler'FN, RT'next(___form))))
                                                )
                                                (ยง ass (:line ___fn) (Compiler'lineDeref))
                                                (ยง ass (:column ___fn) (Compiler'columnDeref))
                                                (let [#_"FnMethod[]" ___methodArray (ร FnMethod'new[Compiler'MAX_POSITIONAL_ARITY + 1])]
                                                    (let [#_"FnMethod" ___variadicMethod nil]
                                                        (let [#_"boolean" ___usesThis false]
                                                            (loop-when-recur [#_"ISeq" ___s (RT'next ___form)] (some? ___s) [(RT'next ___s)]
                                                                (let [#_"FnMethod" ___f (ร FnMethod'parse(___fn, (cast' ISeq (RT'first ___s)), ___rettag))]
                                                                    (when (:usesThis ___f)
                                                                        (ยง ass ___usesThis true)
                                                                    )
                                                                    (cond (.isVariadic ___f)
                                                                        (do
                                                                            (if (nil? ___variadicMethod)
                                                                                (do
                                                                                    (ยง ass ___variadicMethod ___f)
                                                                                )
                                                                                (do
                                                                                    (throw (Util'runtimeException-1 "Can't have more than 1 variadic overload"))
                                                                                )
                                                                            )
                                                                        )
                                                                        (nil? (ยง aget ___methodArray (ร (:reqParms ___f).count())))
                                                                        (do
                                                                            (ยง ass (ยง aget ___methodArray (ร (:reqParms ___f).count())) ___f)
                                                                        )
                                                                        :else
                                                                        (do
                                                                            (throw (Util'runtimeException-1 "Can't have 2 overloads with same arity"))
                                                                        )
                                                                    )
                                                                    (when (ร (some? (:prim ___f)))
                                                                        (.add ___prims, (:prim ___f))
                                                                    )
                                                                )
                                                            )
                                                            (when (some? ___variadicMethod)
                                                                (loop-when-recur [#_"int" ___i (ร (:reqParms ___variadicMethod).count() + 1)] (<= ___i Compiler'MAX_POSITIONAL_ARITY) [(inc ___i)]
                                                                    (when (some? (ยง aget ___methodArray ___i))
                                                                        (throw (Util'runtimeException-1 "Can't have fixed arity function with more params than variadic function"))
                                                                    )
                                                                )
                                                            )

                                                            (ยง ass (:canBeDirect ___fn) (and (not (:hasEnclosingMethod ___fn)) (zero? (.count (:closes ___fn))) (not ___usesThis)))

                                                            (let [#_"IPersistentCollection" ___methods nil]
                                                                (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___methodArray)) [(inc ___i)]
                                                                    (when (some? (ยง aget ___methodArray ___i))
                                                                        (ยง ass ___methods (ร RT'conj(___methods, ___methodArray[___i])))
                                                                    )
                                                                )
                                                                (when (some? ___variadicMethod)
                                                                    (ยง ass ___methods (RT'conj ___methods, ___variadicMethod))
                                                                )

                                                                (when (:canBeDirect ___fn)
                                                                    (doseq [#_"FnMethod" ___fm (ร (Collection<FnMethod>)___methods)]
                                                                        (when (ร (some? (:locals ___fm)))
                                                                            (doseq [#_"LocalBinding" ___lb (ร (Collection<LocalBinding>)RT'keys((:locals ___fm)))]
                                                                                (when (:isArg ___lb)
                                                                                    (ยง ass (:idx ___lb) (ร (:idx ___lb) - 1))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )

                                                                (ยง ass (:methods ___fn) ___methods)
                                                                (ยง ass (:variadicMethod ___fn) ___variadicMethod)
                                                                (ยง ass (:keywords ___fn) (cast' IPersistentMap (.deref Compiler'KEYWORDS)))
                                                                (ยง ass (:vars ___fn) (cast' IPersistentMap (.deref Compiler'VARS)))
                                                                (ยง ass (:constants ___fn) (cast' PersistentVector (.deref Compiler'CONSTANTS)))
                                                                (ยง ass (:keywordCallsites ___fn) (cast' IPersistentVector (.deref Compiler'KEYWORD_CALLSITES)))
                                                                (ยง ass (:protocolCallsites ___fn) (cast' IPersistentVector (.deref Compiler'PROTOCOL_CALLSITES)))
                                                                (ยง ass (:varCallsites ___fn) (cast' IPersistentSet (.deref Compiler'VAR_CALLSITES)))

                                                                (ยง ass (:constantsID ___fn) (RT'nextID))
                                                            )
                                                        )
                                                    )
                                                )
                                                (finally
                                                    (Var'popThreadBindings)
                                                )
                                            )
                                            (ยง ass (:hasPrimSigs ___fn) (pos? (.size ___prims)))
                                            (let [#_"IPersistentMap" ___fmeta (RT'meta ___origForm)]
                                                (when (some? ___fmeta)
                                                    (ยง ass ___fmeta (ร ___fmeta.without(RT'LINE_KEY).without(RT'COLUMN_KEY).without(RT'FILE_KEY).without(___retkey)))
                                                )

                                                (ยง ass (:hasMeta ___fn) (pos? (RT'count ___fmeta)))

                                                (try
                                                    (.compile ___fn, (if (.isVariadic ___fn) "cloiure/lang/RestFn" "cloiure/lang/AFunction"), (if (zero? (.size ___prims)) nil (.toArray ___prims, (make-array String (.size ___prims)))), (:onceOnly ___fn))
                                                    (catch IOException ___e
                                                        (throw (Util'sneakyThrow ___e))
                                                    )
                                                )
                                                (.getCompiledClass ___fn)

                                                (if (.supportsMeta ___fn)
                                                    (do
                                                        (MetaExpr'new ___fn, (MapExpr'parse (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), ___fmeta))
                                                    )
                                                    (do
                                                        ___fn
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"ObjMethod" (ยง method variadicMethod) [#_"FnExpr" this]
        (:variadicMethod this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method isVariadic) [#_"FnExpr" this]
        (some? (:variadicMethod this))
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method methods) [#_"FnExpr" this]
        (:methods this)
    )

    #_method
    (ยง defn #_"void" (ยง method emitForDefn) [#_"FnExpr" this, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (ร this.emit(:Context'EXPRESSION, ___objx, ___gen))
        nil
    )
)

(class-ns ObjExpr (ยง implements Expr)
    (def #_"String" ObjExpr'CONST_PREFIX "const__")

    (def #_"Method" ObjExpr'voidctor (Method/getMethod "void <init>()"))

    (def #_"Method" ObjExpr'kwintern (Method/getMethod "cloiure.lang.Keyword intern(String, String)"))
    (def #_"Method" ObjExpr'symintern (Method/getMethod "cloiure.lang.Symbol intern(String)"))
    (def #_"Method" ObjExpr'varintern (Method/getMethod "cloiure.lang.Var intern(cloiure.lang.Symbol, cloiure.lang.Symbol)"))

    (ยง def #_"Type" ObjExpr'DYNAMIC_CLASSLOADER_TYPE (Type/getType (ยง class DynamicClassLoader)))
    (def #_"Method" ObjExpr'getClassMethod (Method/getMethod "Class getClass()"))
    (def #_"Method" ObjExpr'getClassLoaderMethod (Method/getMethod "ClassLoader getClassLoader()"))
    (def #_"Method" ObjExpr'getConstantsMethod (Method/getMethod "Object[] getConstants(int)"))
    (def #_"Method" ObjExpr'readStringMethod (Method/getMethod "Object readString(String)"))

    (ยง def #_"Type" ObjExpr'ILOOKUP_SITE_TYPE (Type/getType (ยง class ILookupSite)))
    (ยง def #_"Type" ObjExpr'ILOOKUP_THUNK_TYPE (Type/getType (ยง class ILookupThunk)))
    (ยง def #_"Type" ObjExpr'KEYWORD_LOOKUPSITE_TYPE (Type/getType (ยง class KeywordLookupSite)))

    (defn- #_"ObjExpr" ObjExpr'init []
        (hash-map
            #_"String" :name nil
            #_"String" :internalName nil
            #_"String" :thisName nil
            #_"Type" :objtype nil
            #_"Object" :tag nil
            ;; localbinding->itself
            #_"IPersistentMap" :closes PersistentHashMap'EMPTY
            ;; localbndingexprs
            #_"IPersistentVector" :closesExprs PersistentVector'EMPTY
            ;; symbols
            #_"IPersistentSet" :volatiles PersistentHashSet'EMPTY

            ;; symbol->lb
            #_"IPersistentMap" :fields nil

            ;; hinted fields
            #_"IPersistentVector" :hintedFields PersistentVector'EMPTY

            ;; Keyword->KeywordExpr
            #_"IPersistentMap" :keywords PersistentHashMap'EMPTY
            #_"IPersistentMap" :vars PersistentHashMap'EMPTY
            #_"Class" :compiledClass nil
            #_"int" :line 0
            #_"int" :column 0
            #_"PersistentVector" :constants nil
            #_"IPersistentSet" :usedConstants PersistentHashSet'EMPTY

            #_"int" :constantsID 0
            #_"int" :altCtorDrops 0

            #_"IPersistentVector" :keywordCallsites nil
            #_"IPersistentVector" :protocolCallsites nil
            #_"IPersistentSet" :varCallsites nil
            #_"boolean" :onceOnly false

            #_"Object" :src nil

            #_"IPersistentMap" :opts PersistentHashMap'EMPTY

            #_protected
            #_"IPersistentMap" :classMeta nil
            #_protected
            #_"boolean" :canBeDirect false

            #_"DynamicClassLoader" :loader nil
            #_"byte[]" :bytecode nil

            #_"Class" :jc nil
        )
    )

    (defn #_"ObjExpr" ObjExpr'new [#_"Object" ___tag]
        (let [this (ObjExpr'init)]
            (ยง ass (:tag this) ___tag)
            this
        )
    )

    #_method
    (ยง defn #_"String" (ยง method name) [#_"ObjExpr" this]
        (:name this)
    )

    #_method
    (ยง defn #_"String" (ยง method internalName) [#_"ObjExpr" this]
        (:internalName this)
    )

    #_method
    (ยง defn #_"String" (ยง method thisName) [#_"ObjExpr" this]
        (:thisName this)
    )

    #_method
    (ยง defn #_"Type" (ยง method objtype) [#_"ObjExpr" this]
        (:objtype this)
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method closes) [#_"ObjExpr" this]
        (:closes this)
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method keywords) [#_"ObjExpr" this]
        (:keywords this)
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method vars) [#_"ObjExpr" this]
        (:vars this)
    )

    #_method
    (ยง defn #_"Class" (ยง method compiledClass) [#_"ObjExpr" this]
        (:compiledClass this)
    )

    #_method
    (ยง defn #_"int" (ยง method line) [#_"ObjExpr" this]
        (:line this)
    )

    #_method
    (ยง defn #_"int" (ยง method column) [#_"ObjExpr" this]
        (:column this)
    )

    #_method
    (ยง defn #_"PersistentVector" (ยง method constants) [#_"ObjExpr" this]
        (:constants this)
    )

    #_method
    (ยง defn #_"int" (ยง method constantsID) [#_"ObjExpr" this]
        (:constantsID this)
    )

    (defn #_"String" ObjExpr'trimGenID [#_"String" ___name]
        (let [#_"int" ___i (.lastIndexOf ___name, "__")]
            (if (= ___i -1) ___name (.substring ___name, 0, ___i))
        )
    )

    #_method
    (ยง defn #_"Type[]" (ยง method ctorTypes) [#_"ObjExpr" this]
        (let [#_"IPersistentVector" ___tv (if (not (.supportsMeta this)) PersistentVector'EMPTY (RT'vector Compiler'IPERSISTENTMAP_TYPE))]
            (loop-when-recur [#_"ISeq" ___s (RT'keys (:closes this))] (some? ___s) [(next ___s)]
                (let [#_"LocalBinding" ___lb (cast' LocalBinding (first ___s))]
                    (if (some? (.getPrimitiveType ___lb))
                        (do
                            (ยง ass ___tv (ร ___tv.cons(Type/getType((.getPrimitiveType ___lb)))))
                        )
                        (do
                            (ยง ass ___tv (.cons ___tv, Compiler'OBJECT_TYPE))
                        )
                    )
                )
            )
            (let [#_"Type[]" ___ret (make-array Type (count ___tv))]
                (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___tv)) [(inc ___i)]
                    (ยง ass (ยง aget ___ret ___i) (cast Type (.nth ___tv, ___i)))
                )
                ___ret
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method compile) [#_"ObjExpr" this, #_"String" ___superName, #_"String[]" ___interfaceNames, #_"boolean" ___oneTimeUse] #_(ยง throws IOException)
        ;; create bytecode for a class
        ;; with name current_ns.defname[$letname]+
        ;; anonymous fns get names fn__id
        ;; derived from AFn'RestFn
        (let [#_"ClassWriter" ___cw (ClassWriter. ClassWriter/COMPUTE_MAXS)]
            (let [#_"ClassVisitor" ___cv ___cw]
                (ร ___cv.visit(Opcodes/V1_5, Opcodes/ACC_PUBLIC + Opcodes/ACC_SUPER + Opcodes/ACC_FINAL, (:internalName this), nil, ___superName, ___interfaceNames))
                (let [#_"String" ___source (cast String (.deref Compiler'SOURCE))]
                    (let [#_"int" ___lineBefore (cast Integer (.deref Compiler'LINE_BEFORE))]
                        (let [#_"int" ___lineAfter (cast Integer (inc (.deref Compiler'LINE_AFTER)))]
                            (let [#_"int" ___columnBefore (cast Integer (.deref Compiler'COLUMN_BEFORE))]
                                (let [#_"int" ___columnAfter (cast Integer (inc (.deref Compiler'COLUMN_AFTER)))]
                                    (when (and (some? ___source) (some? (.deref Compiler'SOURCE_PATH)))
                                        (let [#_"String" ___smap
                                                (str "SMAP\n"
                                                    (if (pos? (.lastIndexOf ___source, \.)) (ร ___source.substring(0, ___source.lastIndexOf(\.))) ___source)
                                                    ".java\n"
                                                    "Cloiure\n"
                                                    "*S Cloiure\n"
                                                    "*F\n"
                                                    "+ 1 " ___source "\n"
                                                    (cast String (.deref Compiler'SOURCE_PATH)) "\n"
                                                    "*L\n"
                                                    (ร String/format("%d#1,%d:%d\n", (object-array [ ___lineBefore, (- ___lineAfter ___lineBefore), ___lineBefore ])))
                                                    "*E"
                                                )]
                                            (.visitSource ___cv, ___source, ___smap)
                                        )
                                    )
                                    (ร Compiler'addAnnotation(___cv, (:classMeta this)))

                                    (when (.supportsMeta this)
                                        (ร ___cv.visitField(Opcodes/ACC_FINAL, "__meta", Compiler'IPERSISTENTMAP_TYPE.getDescriptor(), nil, nil))
                                    )
                                    ;; instance fields for closed-overs
                                    (loop-when-recur [#_"ISeq" ___s (RT'keys (:closes this))] (some? ___s) [(next ___s)]
                                        (let [#_"LocalBinding" ___lb (cast' LocalBinding (first ___s))]
                                            (if (.isDeftype this)
                                                (do
                                                    (let [#_"int" ___access (if (.isVolatile this, ___lb) Opcodes/ACC_VOLATILE (if (.isMutable this, ___lb) 0 (+ Opcodes/ACC_PUBLIC Opcodes/ACC_FINAL)))]
                                                        (ยง let [#_"FieldVisitor" ___fv]
                                                            (if (some? (.getPrimitiveType ___lb))
                                                                (do
                                                                    (ยง ass ___fv (ร ___cv.visitField(___access, (:name ___lb), Type/getType((.getPrimitiveType ___lb)).getDescriptor(), nil, nil)))
                                                                )
                                                                (do
                                                                    ;; todo - when closed-overs are fields, use more specific types here and in ctor and emitLocal?
                                                                    (ยง ass ___fv (ร ___cv.visitField(___access, (:name ___lb), Compiler'OBJECT_TYPE.getDescriptor(), nil, nil)))
                                                                )
                                                            )
                                                            (ร Compiler'addAnnotation(___fv, RT'meta((:sym ___lb))))
                                                        )
                                                    )
                                                )
                                                (do
                                                    ;; todo - only enable this non-private+writability for letfns where we need it
                                                    (if (some? (.getPrimitiveType ___lb))
                                                        (do
                                                            (ร ___cv.visitField((if (.isVolatile this, ___lb) Opcodes/ACC_VOLATILE 0), (:name ___lb), (ร Type/getType((.getPrimitiveType ___lb)).getDescriptor()), nil, nil))
                                                        )
                                                        (do
                                                            (ร ___cv.visitField(0, (:name ___lb), Compiler'OBJECT_TYPE.getDescriptor(), nil, nil))
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )

                                    ;; static fields for callsites and thunks
                                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (:protocolCallsites this).count()) [(inc ___i)]
                                        (ร ___cv.visitField(Opcodes/ACC_PRIVATE + Opcodes/ACC_STATIC, this.cachedClassName(___i), Compiler'CLASS_TYPE.getDescriptor(), nil, nil))
                                    )

                                    ;; ctor that takes closed-overs and inits base + fields
                                    (let [#_"Method" ___m (Method. "<init>", Type/VOID_TYPE, (.ctorTypes this))]
                                        (let [#_"GeneratorAdapter" ___ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___m, nil, nil, ___cv)]
                                            (let [#_"Label" ___start (.newLabel ___ctorgen)]
                                                (let [#_"Label" ___end (.newLabel ___ctorgen)]
                                                    (.visitCode ___ctorgen)
                                                    (ร ___ctorgen.visitLineNumber((:line this), (.mark ___ctorgen)))
                                                    (.visitLabel ___ctorgen, ___start)
                                                    (.loadThis ___ctorgen)
                                                    (ร ___ctorgen.invokeConstructor(Type/getObjectType(___superName), voidctor))

                                                    (when (.supportsMeta this)
                                                        (.loadThis ___ctorgen)
                                                        (ร ___ctorgen.visitVarInsn(Compiler'IPERSISTENTMAP_TYPE.getOpcode(Opcodes/ILOAD), 1))
                                                        (ร ___ctorgen.putField((:objtype this), "__meta", Compiler'IPERSISTENTMAP_TYPE))
                                                    )

                                                    (let [#_"int" ___a (if (.supportsMeta this) 2 1)]
                                                        (loop-when-recur [#_"ISeq" ___s (RT'keys (:closes this)) ___a ___a] (some? ___s) [(next ___s) (inc ___a)]
                                                            (let [#_"LocalBinding" ___lb (cast' LocalBinding (first ___s))]
                                                                (.loadThis ___ctorgen)
                                                                (let [#_"Class" ___primc (.getPrimitiveType ___lb)]
                                                                    (if (some? ___primc)
                                                                        (do
                                                                            (ร ___ctorgen.visitVarInsn(Type/getType(___primc).getOpcode(Opcodes/ILOAD), ___a))
                                                                            (ร ___ctorgen.putField((:objtype this), (:name ___lb), Type/getType(___primc)))
                                                                            (when (or (ร ___primc == Long/TYPE) (ร ___primc == Double/TYPE))
                                                                                (ยง ass ___a (inc ___a))
                                                                            )
                                                                        )
                                                                        (do
                                                                            (ร ___ctorgen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ILOAD), ___a))
                                                                            (ร ___ctorgen.putField((:objtype this), (:name ___lb), Compiler'OBJECT_TYPE))
                                                                        )
                                                                    )
                                                                    (ยง ass (:closesExprs this) (ร (:closesExprs this).cons(LocalBindingExpr'new(___lb, nil))))
                                                                )
                                                            )
                                                        )

                                                        (.visitLabel ___ctorgen, ___end)

                                                        (.returnValue ___ctorgen)

                                                        (.endMethod ___ctorgen)

                                                        (when (> (:altCtorDrops this) 0)
                                                            ;; ctor that takes closed-overs and inits base + fields
                                                            (let [#_"Type[]" ___ctorTypes (.ctorTypes this)]
                                                                (let [#_"Type[]" ___altCtorTypes (make-array Type (- (ยง alength ___ctorTypes) (:altCtorDrops this)))]
                                                                    (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___altCtorTypes)) [(inc ___i)]
                                                                        (ยง ass (ยง aget ___altCtorTypes ___i) (ยง aget ___ctorTypes ___i))
                                                                    )
                                                                    (let [#_"Method" ___alt (Method. "<init>", Type/VOID_TYPE, ___altCtorTypes)]
                                                                        (ยง ass ___ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___alt, nil, nil, ___cv))
                                                                        (.visitCode ___ctorgen)
                                                                        (.loadThis ___ctorgen)
                                                                        (.loadArgs ___ctorgen)

                                                                        (.visitInsn ___ctorgen, Opcodes/ACONST_NULL) ;; __meta
                                                                        (.visitInsn ___ctorgen, Opcodes/ACONST_NULL) ;; __extmap
                                                                        (.visitInsn ___ctorgen, Opcodes/ICONST_0) ;; __hash
                                                                        (.visitInsn ___ctorgen, Opcodes/ICONST_0) ;; __hasheq

                                                                        (ร ___ctorgen.invokeConstructor((:objtype this), (Method. "<init>", Type/VOID_TYPE, ___ctorTypes)))

                                                                        (.returnValue ___ctorgen)
                                                                        (.endMethod ___ctorgen)

                                                                        ;; alt ctor no __hash, __hasheq
                                                                        (ยง ass ___altCtorTypes (make-array Type (- (ยง alength ___ctorTypes) 2)))
                                                                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___altCtorTypes)) [(inc ___i)]
                                                                            (ยง ass (ยง aget ___altCtorTypes ___i) (ยง aget ___ctorTypes ___i))
                                                                        )

                                                                        (ยง ass ___alt (Method. "<init>", Type/VOID_TYPE, ___altCtorTypes))
                                                                        (ยง ass ___ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___alt, nil, nil, ___cv))
                                                                        (.visitCode ___ctorgen)
                                                                        (.loadThis ___ctorgen)
                                                                        (.loadArgs ___ctorgen)

                                                                        (.visitInsn ___ctorgen, Opcodes/ICONST_0) ;; __hash
                                                                        (.visitInsn ___ctorgen, Opcodes/ICONST_0) ;; __hasheq

                                                                        (ร ___ctorgen.invokeConstructor((:objtype this), (Method. "<init>", Type/VOID_TYPE, ___ctorTypes)))

                                                                        (.returnValue ___ctorgen)
                                                                        (.endMethod ___ctorgen)
                                                                    )
                                                                )
                                                            )
                                                        )

                                                        (when (.supportsMeta this)
                                                            ;; ctor that takes closed-overs but not meta
                                                            (let [#_"Type[]" ___ctorTypes (.ctorTypes this)]
                                                                (let [#_"Type[]" ___noMetaCtorTypes (make-array Type (- (ยง alength ___ctorTypes) 1))]
                                                                    (loop-when-recur [#_"int" ___i 1] (< ___i (ยง alength ___ctorTypes)) [(inc ___i)]
                                                                        (ยง ass (ยง aget ___noMetaCtorTypes (ร ___i - 1)) (ยง aget ___ctorTypes ___i))
                                                                    )
                                                                    (let [#_"Method" ___alt (Method. "<init>", Type/VOID_TYPE, ___noMetaCtorTypes)]
                                                                        (ยง ass ___ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___alt, nil, nil, ___cv))
                                                                        (.visitCode ___ctorgen)
                                                                        (.loadThis ___ctorgen)
                                                                        (.visitInsn ___ctorgen, Opcodes/ACONST_NULL) ;; nil meta
                                                                        (.loadArgs ___ctorgen)
                                                                        (ร ___ctorgen.invokeConstructor((:objtype this), (Method. "<init>", Type/VOID_TYPE, ___ctorTypes)))

                                                                        (.returnValue ___ctorgen)
                                                                        (.endMethod ___ctorgen)

                                                                        ;; meta()
                                                                        (let [#_"Method" ___meth (Method/getMethod "cloiure.lang.IPersistentMap meta()")]
                                                                            (let [#_"GeneratorAdapter" ___gen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___meth, nil, nil, ___cv)]
                                                                                (.visitCode ___gen)
                                                                                (.loadThis ___gen)
                                                                                (ร ___gen.getField((:objtype this), "__meta", Compiler'IPERSISTENTMAP_TYPE))

                                                                                (.returnValue ___gen)
                                                                                (.endMethod ___gen)

                                                                                ;; withMeta()
                                                                                (ยง ass ___meth (Method/getMethod "cloiure.lang.IObj withMeta(cloiure.lang.IPersistentMap)"))

                                                                                (ยง ass ___gen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___meth, nil, nil, ___cv))
                                                                                (.visitCode ___gen)
                                                                                (.newInstance ___gen, (:objtype this))
                                                                                (.dup ___gen)
                                                                                (.loadArg ___gen, 0)

                                                                                (loop-when-recur [#_"ISeq" ___s (RT'keys (:closes this)) ___a ___a] (some? ___s) [(next ___s) (inc ___a)]
                                                                                    (let [#_"LocalBinding" ___lb (cast' LocalBinding (first ___s))]
                                                                                        (.loadThis ___gen)
                                                                                        (let [#_"Class" ___primc (.getPrimitiveType ___lb)]
                                                                                            (if (some? ___primc)
                                                                                                (do
                                                                                                    (ร ___gen.getField((:objtype this), (:name ___lb), Type/getType(___primc)))
                                                                                                )
                                                                                                (do
                                                                                                    (ร ___gen.getField((:objtype this), (:name ___lb), Compiler'OBJECT_TYPE))
                                                                                                )
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                )

                                                                                (ร ___gen.invokeConstructor((:objtype this), (Method. "<init>", Type/VOID_TYPE, ___ctorTypes)))
                                                                                (.returnValue ___gen)
                                                                                (.endMethod ___gen)
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )

                                                        (.emitStatics this, ___cv)
                                                        (.emitMethods this, ___cv)

                                                        ;; static fields for constants
                                                        (loop-when-recur [#_"int" ___i 0] (ร ___i < (:constants this).count()) [(inc ___i)]
                                                            (when (.contains (:usedConstants this), ___i)
                                                                (ร ___cv.visitField(Opcodes/ACC_PUBLIC + Opcodes/ACC_FINAL + Opcodes/ACC_STATIC, this.constantName(___i), this.constantType(___i).getDescriptor(), nil, nil))
                                                            )
                                                        )

                                                        ;; static fields for lookup sites
                                                        (loop-when-recur [#_"int" ___i 0] (ร ___i < (:keywordCallsites this).count()) [(inc ___i)]
                                                            (ร ___cv.visitField(Opcodes/ACC_FINAL + Opcodes/ACC_STATIC, this.siteNameStatic(___i), ObjExpr'KEYWORD_LOOKUPSITE_TYPE.getDescriptor(), nil, nil))
                                                            (ร ___cv.visitField(Opcodes/ACC_STATIC, this.thunkNameStatic(___i), ObjExpr'ILOOKUP_THUNK_TYPE.getDescriptor(), nil, nil))
                                                        )

                                                        ;; static init for constants, keywords and vars
                                                        (let [#_"GeneratorAdapter" ___clinitgen (GeneratorAdapter. (+ Opcodes/ACC_PUBLIC Opcodes/ACC_STATIC), (Method/getMethod "void <clinit> ()"), nil, nil, ___cv)]
                                                            (.visitCode ___clinitgen)
                                                            (ร ___clinitgen.visitLineNumber((:line this), (.mark ___clinitgen)))

                                                            (when (pos? (.count (:constants this)))
                                                                (.emitConstants this, ___clinitgen)
                                                            )

                                                            (when (pos? (.count (:keywordCallsites this)))
                                                                (.emitKeywordCallsites this, ___clinitgen)
                                                            )

                                                            (when (and (.isDeftype this) (RT'booleanCast-1o (RT'get-2 (:opts this), Compiler'loadNs)))
                                                                (let [#_"String" ___nsname (ร (cast' Symbol (RT'second (:src this))).getNamespace())]
                                                                    (when (not (.equals ___nsname, "cloiure.core"))
                                                                        (.push ___clinitgen, "cloiure.core")
                                                                        (.push ___clinitgen, "require")
                                                                        (ร ___clinitgen.invokeStatic(Compiler'RT_TYPE, Method/getMethod("cloiure.lang.Var var(String, String)")))
                                                                        (ร ___clinitgen.invokeVirtual(Compiler'VAR_TYPE, Method/getMethod("Object getRawRoot()")))
                                                                        (.checkCast ___clinitgen, Compiler'IFN_TYPE)
                                                                        (.push ___clinitgen, ___nsname)
                                                                        (ร ___clinitgen.invokeStatic(Compiler'SYMBOL_TYPE, Method/getMethod("cloiure.lang.Symbol create(String)")))
                                                                        (ร ___clinitgen.invokeInterface(Compiler'IFN_TYPE, Method/getMethod("Object invoke(Object)")))
                                                                        (.pop ___clinitgen)
                                                                    )
                                                                )
                                                            )

                                                            (.returnValue ___clinitgen)

                                                            (.endMethod ___clinitgen)

                                                            ;; end of class
                                                            (.visitEnd ___cv)

                                                            (ยง ass (:bytecode this) (.toByteArray ___cw))
                                                            (when (ร RT'booleanCast-1o(Compiler'COMPILE_FILES.deref()))
                                                                (ร Compiler'writeClassFile((:internalName this), (:bytecode this)))
                                                            )
                                                            nil
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn- #_"void" (ยง method emitKeywordCallsites) [#_"ObjExpr" this, #_"GeneratorAdapter" ___clinitgen]
        (loop-when-recur [#_"int" ___i 0] (ร ___i < (:keywordCallsites this).count()) [(inc ___i)]
            (let [#_"Keyword" ___k (cast' Keyword (.nth (:keywordCallsites this), ___i))]
                (.newInstance ___clinitgen, ObjExpr'KEYWORD_LOOKUPSITE_TYPE)
                (.dup ___clinitgen)
                (.emitValue this, ___k, ___clinitgen)
                (ร ___clinitgen.invokeConstructor(ObjExpr'KEYWORD_LOOKUPSITE_TYPE, Method/getMethod("void <init>(cloiure.lang.Keyword)")))
                (.dup ___clinitgen)
                (ร ___clinitgen.putStatic((:objtype this), this.siteNameStatic(___i), ObjExpr'KEYWORD_LOOKUPSITE_TYPE))
                (ร ___clinitgen.putStatic((:objtype this), this.thunkNameStatic(___i), ObjExpr'ILOOKUP_THUNK_TYPE))
            )
        )
        nil
    )

    #_protected
    #_method
    (ยง defn #_"void" (ยง method emitStatics) [#_"ObjExpr" this, #_"ClassVisitor" ___gen]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"void" (ยง method emitMethods) [#_"ObjExpr" this, #_"ClassVisitor" ___gen]
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emitListAsObjectArray) [#_"ObjExpr" this, #_"Object" ___value, #_"GeneratorAdapter" ___gen]
        (ร ___gen.push((cast List ___value).size()))
        (.newArray ___gen, Compiler'OBJECT_TYPE)
        (loop-when-recur [#_"Iterator" ___it (.iterator (cast List ___value)) #_"int" ___i 0] (.hasNext ___it) [___it (inc ___i)]
            (.dup ___gen)
            (.push ___gen, ___i)
            (ร this.emitValue((next ___it), ___gen))
            (.arrayStore ___gen, Compiler'OBJECT_TYPE)
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emitValue) [#_"ObjExpr" this, #_"Object" ___value, #_"GeneratorAdapter" ___gen]
        (let [#_"boolean" ___partial true]
            (cond (nil? ___value)
                (do
                    (.visitInsn ___gen, Opcodes/ACONST_NULL)
                )
                (instance? String ___value)
                (do
                    (.push ___gen, (cast String ___value))
                )
                (instance? Boolean ___value)
                (do
                    (if (.booleanValue (cast Boolean ___value))
                        (do
                            (.getStatic ___gen, Compiler'BOOLEAN_OBJECT_TYPE, "TRUE", Compiler'BOOLEAN_OBJECT_TYPE)
                        )
                        (do
                            (.getStatic ___gen, Compiler'BOOLEAN_OBJECT_TYPE, "FALSE", Compiler'BOOLEAN_OBJECT_TYPE)
                        )
                    )
                )
                (instance? Integer ___value)
                (do
                    (ร ___gen.push((cast Integer ___value).intValue()))
                    (ร ___gen.invokeStatic(Type/getType(Integer), Method/getMethod("Integer valueOf(int)")))
                )
                (instance? Long ___value)
                (do
                    (ร ___gen.push((cast Long ___value).longValue()))
                    (ร ___gen.invokeStatic(Type/getType(Long), Method/getMethod("Long valueOf(long)")))
                )
                (instance? Double ___value)
                (do
                    (ร ___gen.push((cast Double ___value).doubleValue()))
                    (ร ___gen.invokeStatic(Type/getType(Double), Method/getMethod("Double valueOf(double)")))
                )
                (instance? Character ___value)
                (do
                    (ร ___gen.push((cast Character ___value).charValue()))
                    (ร ___gen.invokeStatic(Type/getType(Character), Method/getMethod("Character valueOf(char)")))
                )
                (instance? Class ___value)
                (do
                    (let [#_"Class" ___cc (cast Class ___value)]
                        (if (.isPrimitive ___cc)
                            (do
                                (ยง let [#_"Type" ___bt]
                                    (cond (= ___cc Boolean/TYPE)
                                        (do
                                            (ยง ass ___bt (Type/getType Boolean))
                                        )
                                        (= ___cc Byte/TYPE)
                                        (do
                                            (ยง ass ___bt (Type/getType Byte))
                                        )
                                        (= ___cc Character/TYPE)
                                        (do
                                            (ยง ass ___bt (Type/getType Character))
                                        )
                                        (= ___cc Double/TYPE)
                                        (do
                                            (ยง ass ___bt (Type/getType Double))
                                        )
                                        (= ___cc Float/TYPE)
                                        (do
                                            (ยง ass ___bt (Type/getType Float))
                                        )
                                        (= ___cc Integer/TYPE)
                                        (do
                                            (ยง ass ___bt (Type/getType Integer))
                                        )
                                        (= ___cc Long/TYPE)
                                        (do
                                            (ยง ass ___bt (Type/getType Long))
                                        )
                                        (= ___cc Short/TYPE)
                                        (do
                                            (ยง ass ___bt (Type/getType Short))
                                        )
                                        :else
                                        (do
                                            (throw (Util'runtimeException-1 (str "Can't embed unknown primitive in code: " ___value)))
                                        )
                                    )
                                    (ร ___gen.getStatic(___bt, "TYPE", Type/getType(Class)))
                                )
                            )
                            (do
                                (ร ___gen.push(Compiler'destubClassName((.getName ___cc))))
                                (ร ___gen.invokeStatic(Compiler'RT_TYPE, Method/getMethod("Class classForName(String)")))
                            )
                        )
                    )
                )
                (ยง instance? Symbol ___value)
                (do
                    (ร ___gen.push((:ns (cast' Symbol ___value))))
                    (ร ___gen.push((:name (cast' Symbol ___value))))
                    (ร ___gen.invokeStatic(Type/getType((ยง class Symbol)), Method/getMethod("cloiure.lang.Symbol intern(String, String)")))
                )
                (ยง instance? Keyword ___value)
                (do
                    (ร ___gen.push((:ns (:sym (cast' Keyword ___value)))))
                    (ร ___gen.push((:name (:sym (cast' Keyword ___value)))))
                    (ร ___gen.invokeStatic(Compiler'RT_TYPE, Method/getMethod("cloiure.lang.Keyword keyword(String, String)")))
                )
                (ยง instance? Var ___value)
                (do
                    (let [#_"Var" ___var (cast' Var ___value)]
                        (ร ___gen.push((:name (:ns ___var)).toString()))
                        (ร ___gen.push((:sym ___var).toString()))
                        (ร ___gen.invokeStatic(Compiler'RT_TYPE, Method/getMethod("cloiure.lang.Var var(String, String)")))
                    )
                )
                (ยง instance? IType ___value)
                (do
                    (let [#_"Method" ___ctor (Method. "<init>", (Type/getConstructorDescriptor (ร (.getClass ___value).getConstructors()[0])))]
                        (ร ___gen.newInstance(Type/getType((.getClass ___value))))
                        (.dup ___gen)
                        (let [#_"IPersistentVector" ___fields (cast' IPersistentVector (ร Reflector'invokeStaticMethod-3c((.getClass ___value), "getBasis", (object-array 0))))]
                            (loop-when-recur [#_"ISeq" ___s (RT'seq ___fields)] (some? ___s) [(next ___s)]
                                (let [#_"Symbol" ___field (cast' Symbol (first ___s))]
                                    (let [#_"Class" ___k (ร Compiler'tagClass(Compiler'tagOf(___field)))]
                                        (let [#_"Object" ___val (ร Reflector'getInstanceField(___value, Compiler'munge((:name ___field))))]
                                            (.emitValue this, ___val, ___gen)

                                            (when (.isPrimitive ___k)
                                                (let [#_"Type" ___b (Type/getType (Compiler'boxClass ___k))]
                                                    (let [#_"String" ___p (ร Type/getType(___k).getDescriptor())]
                                                        (let [#_"String" ___n (.getName ___k)]
                                                            (ร ___gen.invokeVirtual(___b, (Method. (str ___n "Value"), (str "()" ___p))))
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                            (ร ___gen.invokeConstructor(Type/getType((.getClass ___value)), ___ctor))
                        )
                    )
                )
                (ยง instance? IRecord ___value)
                (do
                    (let [#_"Method" ___createMethod (Method/getMethod (str (.getName (.getClass ___value)) " create(cloiure.lang.IPersistentMap)"))]
                        (ร this.emitValue(PersistentArrayMap'create((java.util.Map) ___value), ___gen))
                        (ร ___gen.invokeStatic(Compiler'getType((.getClass ___value)), ___createMethod))
                    )
                )
                (ยง instance? IPersistentMap ___value)
                (do
                    (let [#_"List" ___entries (ArrayList.)]
                        (doseq [#_"Map$Entry" ___entry (ร (Set<Map$Entry>) (cast Map ___value).entrySet())]
                            (.add ___entries, (.getKey ___entry))
                            (.add ___entries, (.getValue ___entry))
                        )
                        (.emitListAsObjectArray this, ___entries, ___gen)
                        (ร ___gen.invokeStatic(Compiler'RT_TYPE, Method/getMethod("cloiure.lang.IPersistentMap map(Object[])")))
                    )
                )
                (ยง instance? IPersistentVector ___value)
                (do
                    (let [#_"IPersistentVector" ___args (cast' IPersistentVector ___value)]
                        (if (ร (count ___args) <= Tuple'MAX_SIZE)
                            (do
                                (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___args)) [(inc ___i)]
                                    (ร this.emitValue(___args.nth(___i), ___gen))
                                )
                                (ร ___gen.invokeStatic(Compiler'TUPLE_TYPE, Compiler'createTupleMethods[(count ___args)]))
                            )
                            (do
                                (.emitListAsObjectArray this, ___value, ___gen)
                                (ร ___gen.invokeStatic(Compiler'RT_TYPE, Method/getMethod("cloiure.lang.IPersistentVector vector(Object[])")))
                            )
                        )
                    )
                )
                (ยง instance? PersistentHashSet ___value)
                (do
                    (let [#_"ISeq" ___vs (RT'seq ___value)]
                        (if (nil? ___vs)
                            (do
                                (ร ___gen.getStatic(Type/getType((ยง class PersistentHashSet)), "EMPTY", Type/getType((ยง class PersistentHashSet))))
                            )
                            (do
                                (.emitListAsObjectArray this, ___vs, ___gen)
                                (ร ___gen.invokeStatic(Type/getType((ยง class PersistentHashSet)), Method/getMethod("cloiure.lang.PersistentHashSet create(Object[])")))
                            )
                        )
                    )
                )
                (or (ยง instance? ISeq ___value) (ยง instance? IPersistentList ___value))
                (do
                    (.emitListAsObjectArray this, ___value, ___gen)
                    (ร ___gen.invokeStatic(Type/getType(java.util.Arrays), Method/getMethod("java.util.List asList(Object[])")))
                    (ร ___gen.invokeStatic(Type/getType((ยง class PersistentList)), Method/getMethod("cloiure.lang.IPersistentList create(java.util.List)")))
                )
                (instance? Pattern ___value)
                (do
                    (ร this.emitValue((.toString ___value), ___gen))
                    (ร ___gen.invokeStatic(Type/getType(Pattern), Method/getMethod("java.util.regex.Pattern compile(String)")))
                )
                :else
                (do
                    (let [#_"String" ___cs nil]
                        (try
                            (ยง ass ___cs (RT'printString ___value))
                            (catch Exception ___e
                                (throw (Util'runtimeException-1 (str "Can't embed object in code, maybe print-dup not defined: " ___value)))
                            )
                        )
                        (when (zero? (.length ___cs))
                            (throw (Util'runtimeException-1 (str "Can't embed unreadable object in code: " ___value)))
                        )

                        (when (.startsWith ___cs, "#<")
                            (throw (Util'runtimeException-1 (str "Can't embed unreadable object in code: " ___cs)))
                        )

                        (.push ___gen, ___cs)
                        (.invokeStatic ___gen, Compiler'RT_TYPE, readStringMethod)
                        (ยง ass ___partial false)
                    )
                )
            )

            (when ___partial
                (when (and (ยง instance? IObj ___value) (pos? (RT'count (.meta (cast' IObj ___value)))))
                    (.checkCast ___gen, Compiler'IOBJ_TYPE)
                    (let [#_"Object" ___m (.meta (cast' IObj ___value))]
                        (ร this.emitValue(Compiler'elideMeta(___m), ___gen))
                        (.checkCast ___gen, Compiler'IPERSISTENTMAP_TYPE)
                        (ร ___gen.invokeInterface(Compiler'IOBJ_TYPE, Method/getMethod("cloiure.lang.IObj withMeta(cloiure.lang.IPersistentMap)")))
                    )
                )
            )
            nil
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emitConstants) [#_"ObjExpr" this, #_"GeneratorAdapter" ___clinitgen]
        (try
            (ร Var'pushThreadBindings(RT'map(
                (object-array [
                    RT'PRINT_DUP RT'T
                ])
            )))

            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:constants this).count()) [(inc ___i)]
                (when (.contains (:usedConstants this), ___i)
                    (ร this.emitValue((:constants this).nth(___i), ___clinitgen))
                    (ร ___clinitgen.checkCast(this.constantType(___i)))
                    (ร ___clinitgen.putStatic((:objtype this), this.constantName(___i), this.constantType(___i)))
                )
            )
            (finally
                (Var'popThreadBindings)
            )
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method isMutable) [#_"ObjExpr" this, #_"LocalBinding" ___lb]
        (or (.isVolatile this, ___lb) (and (ร RT'booleanCast-1o(RT'contains((:fields this), (:sym ___lb)))) (ร RT'booleanCast-1o(RT'get-2((:sym ___lb).meta(), Keyword'intern-1("unsynchronized-mutable"))))))
    )

    #_method
    (ยง defn #_"boolean" (ยง method isVolatile) [#_"ObjExpr" this, #_"LocalBinding" ___lb]
        (and (ร RT'booleanCast-1o(RT'contains((:fields this), (:sym ___lb)))) (ร RT'booleanCast-1o(RT'get-2((:sym ___lb).meta(), Keyword'intern-1("volatile-mutable")))))
    )

    #_method
    (ยง defn #_"boolean" (ยง method isDeftype) [#_"ObjExpr" this]
        (some? (:fields this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method supportsMeta) [#_"ObjExpr" this]
        (not (.isDeftype this))
    )

    #_method
    (ยง defn #_"void" (ยง method emitClearCloses) [#_"ObjExpr" this, #_"GeneratorAdapter" ___gen]
        nil
    )

    #_method
    (ยง defn #_"Class" (ยง method getCompiledClass) [#_"ObjExpr" this]
        (ยง sync this
            (when (nil? (:compiledClass this))
                (ยง ass (:loader this) (cast' DynamicClassLoader (.deref Compiler'LOADER)))
                (ยง ass (:compiledClass this) (ร (:loader this).defineClass((:name this), (:bytecode this), (:src this))))
            )
            (:compiledClass this)
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"ObjExpr" this]
        (when (.isDeftype this)
            (ยง return nil)
        )
        (try
            (.newInstance (.getCompiledClass this))
            (catch Exception ___e
                (throw (Util'sneakyThrow ___e))
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emitLetFnInits) [#_"ObjExpr" this, #_"GeneratorAdapter" ___gen, #_"ObjExpr" ___objx, #_"IPersistentSet" ___letFnLocals]
        ;; objx arg is enclosing objx, not this
        (.checkCast ___gen, (:objtype this))

        (loop-when-recur [#_"ISeq" ___s (RT'keys (:closes this))] (some? ___s) [(next ___s)]
            (let [#_"LocalBinding" ___lb (cast' LocalBinding (first ___s))]
                (when (.contains ___letFnLocals, ___lb)
                    (let [#_"Class" ___primc (.getPrimitiveType ___lb)]
                        (.dup ___gen)
                        (if (some? ___primc)
                            (do
                                (.emitUnboxedLocal ___objx, ___gen, ___lb)
                                (ร ___gen.putField((:objtype this), (:name ___lb), Type/getType(___primc)))
                            )
                            (do
                                (.emitLocal ___objx, ___gen, ___lb, false)
                                (ร ___gen.putField((:objtype this), (:name ___lb), Compiler'OBJECT_TYPE))
                            )
                        )
                    )
                )
            )
        )
        (.pop ___gen)
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"ObjExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        ;; emitting a Fn means constructing an instance, feeding closed-overs from enclosing scope, if any
        ;; objx arg is enclosing objx, not this
        (if (.isDeftype this)
            (do
                (.visitInsn ___gen, Opcodes/ACONST_NULL)
            )
            (do
                (.newInstance ___gen, (:objtype this))
                (.dup ___gen)
                (when (.supportsMeta this)
                    (.visitInsn ___gen, Opcodes/ACONST_NULL)
                )
                (loop-when-recur [#_"ISeq" ___s (RT'seq (:closesExprs this))] (some? ___s) [(next ___s)]
                    (let [#_"LocalBindingExpr" ___lbe (cast' LocalBindingExpr (first ___s))]
                        (let [#_"LocalBinding" ___lb (:b ___lbe)]
                            (if (some? (.getPrimitiveType ___lb))
                                (do
                                    (.emitUnboxedLocal ___objx, ___gen, ___lb)
                                )
                                (do
                                    (.emitLocal ___objx, ___gen, ___lb, (:shouldClear ___lbe))
                                )
                            )
                        )
                    )
                )
                (ร ___gen.invokeConstructor((:objtype this), (Method. "<init>", Type/VOID_TYPE, (.ctorTypes this))))
            )
        )
        (when (ร ___context == :Context'STATEMENT)
            (.pop ___gen)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"ObjExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"ObjExpr" this]
        (when (nil? (:jc this))
            (ยง ass (:jc this) (cond (some? (:compiledClass this)) (:compiledClass this) (some? (:tag this)) (HostExpr'tagToClass (:tag this)) :else (ยง class IFn)))
        )
        (:jc this)
    )

    #_method
    (ยง defn #_"void" (ยง method emitAssignLocal) [#_"ObjExpr" this, #_"GeneratorAdapter" ___gen, #_"LocalBinding" ___lb, #_"Expr" ___val]
        (when (not (.isMutable this, ___lb))
            (throw (IllegalArgumentException. (str "Cannot assign to non-mutable: " (:name ___lb))))
        )
        (let [#_"Class" ___primc (.getPrimitiveType ___lb)]
            (.loadThis ___gen)
            (if (some? ___primc)
                (do
                    (when (not (and (ยง instance? MaybePrimitiveExpr ___val) (.canEmitPrimitive (cast' MaybePrimitiveExpr ___val))))
                        (throw (IllegalArgumentException. (str "Must assign primitive to primitive mutable: " (:name ___lb))))
                    )
                    (let [#_"MaybePrimitiveExpr" ___me (cast' MaybePrimitiveExpr ___val)]
                        (ร ___me.emitUnboxed(:Context'EXPRESSION, this, ___gen))
                        (ร ___gen.putField((:objtype this), (:name ___lb), Type/getType(___primc)))
                    )
                )
                (do
                    (ร ___val.emit(:Context'EXPRESSION, this, ___gen))
                    (ร ___gen.putField((:objtype this), (:name ___lb), Compiler'OBJECT_TYPE))
                )
            )
            nil
        )
    )

    #_method
    (ยง defn- #_"void" (ยง method emitLocal) [#_"ObjExpr" this, #_"GeneratorAdapter" ___gen, #_"LocalBinding" ___lb, #_"boolean" ___clear]
        (if (.containsKey (:closes this), ___lb)
            (do
                (let [#_"Class" ___primc (.getPrimitiveType ___lb)]
                    (.loadThis ___gen)
                    (if (some? ___primc)
                        (do
                            (ร ___gen.getField((:objtype this), (:name ___lb), Type/getType(___primc)))
                            (HostExpr'emitBoxReturn this, ___gen, ___primc)
                        )
                        (do
                            (ร ___gen.getField((:objtype this), (:name ___lb), Compiler'OBJECT_TYPE))
                            (when (and (:onceOnly this) ___clear (:canBeCleared ___lb))
                                (.loadThis ___gen)
                                (.visitInsn ___gen, Opcodes/ACONST_NULL)
                                (ร ___gen.putField((:objtype this), (:name ___lb), Compiler'OBJECT_TYPE))
                            )
                        )
                    )
                )
            )
            (do
                (let [#_"int" ___argoff (if (:canBeDirect this) 0 1)]
                    (let [#_"Class" ___primc (.getPrimitiveType ___lb)]
                        (if (:isArg ___lb)
                            (do
                                (ร ___gen.loadArg(___lb.idx-argoff))
                                (cond (some? ___primc)
                                    (do
                                        (HostExpr'emitBoxReturn this, ___gen, ___primc)
                                    )
                                    (and ___clear (:canBeCleared ___lb))
                                    (do
                                        (.visitInsn ___gen, Opcodes/ACONST_NULL)
                                        (ร ___gen.storeArg((:idx ___lb) - ___argoff))
                                    )
                                )
                            )
                            (do
                                (if (some? ___primc)
                                    (do
                                        (ร ___gen.visitVarInsn(Type/getType(___primc).getOpcode(Opcodes/ILOAD), (:idx ___lb)))
                                        (HostExpr'emitBoxReturn this, ___gen, ___primc)
                                    )
                                    (do
                                        (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ILOAD), (:idx ___lb)))
                                        (when (and ___clear (:canBeCleared ___lb))
                                            (.visitInsn ___gen, Opcodes/ACONST_NULL)
                                            (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ISTORE), (:idx ___lb)))
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    #_method
    (ยง defn- #_"void" (ยง method emitUnboxedLocal) [#_"ObjExpr" this, #_"GeneratorAdapter" ___gen, #_"LocalBinding" ___lb]
        (let [#_"int" ___argoff (if (:canBeDirect this) 0 1)]
            (let [#_"Class" ___primc (.getPrimitiveType ___lb)]
                (cond (.containsKey (:closes this), ___lb)
                    (do
                        (.loadThis ___gen)
                        (ร ___gen.getField((:objtype this), (:name ___lb), Type/getType(___primc)))
                    )
                    (:isArg ___lb)
                    (do
                        (ร ___gen.loadArg(___lb.idx-argoff))
                    )
                    :else
                    (do
                        (ร ___gen.visitVarInsn(Type/getType(___primc).getOpcode(Opcodes/ILOAD), (:idx ___lb)))
                    )
                )
                nil
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emitVar) [#_"ObjExpr" this, #_"GeneratorAdapter" ___gen, #_"Var" ___var]
        (let [#_"Integer" ___i (cast Integer (.valAt (:vars this), ___var))]
            (.emitConstant this, ___gen, ___i)
            nil
        )
    )

    (def #_"Method" ObjExpr'varGetMethod (Method/getMethod "Object get()"))
    (def #_"Method" ObjExpr'varGetRawMethod (Method/getMethod "Object getRawRoot()"))

    #_method
    (ยง defn #_"void" (ยง method emitVarValue) [#_"ObjExpr" this, #_"GeneratorAdapter" ___gen, #_"Var" ___v]
        (let [#_"Integer" ___i (cast Integer (.valAt (:vars this), ___v))]
            (if (not (.isDynamic ___v))
                (do
                    (.emitConstant this, ___gen, ___i)
                    (.invokeVirtual ___gen, Compiler'VAR_TYPE, ObjExpr'varGetRawMethod)
                )
                (do
                    (.emitConstant this, ___gen, ___i)
                    (.invokeVirtual ___gen, Compiler'VAR_TYPE, varGetMethod)
                )
            )
            nil
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emitKeyword) [#_"ObjExpr" this, #_"GeneratorAdapter" ___gen, #_"Keyword" ___k]
        (let [#_"Integer" ___i (cast Integer (.valAt (:keywords this), ___k))]
            (.emitConstant this, ___gen, ___i)
            nil
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emitConstant) [#_"ObjExpr" this, #_"GeneratorAdapter" ___gen, #_"int" ___id]
        (ยง ass (:usedConstants this) (cast' IPersistentSet (.cons (:usedConstants this), ___id)))
        (ร ___gen.getStatic((:objtype this), this.constantName(___id), this.constantType(___id)))
        nil
    )

    #_method
    (ยง defn #_"String" (ยง method constantName) [#_"ObjExpr" this, #_"int" ___id]
        (str ObjExpr'CONST_PREFIX ___id)
    )

    #_method
    (ยง defn #_"String" (ยง method siteName) [#_"ObjExpr" this, #_"int" ___n]
        (str "__site__" ___n)
    )

    #_method
    (ยง defn #_"String" (ยง method siteNameStatic) [#_"ObjExpr" this, #_"int" ___n]
        (str (.siteName this, ___n) "__")
    )

    #_method
    (ยง defn #_"String" (ยง method thunkName) [#_"ObjExpr" this, #_"int" ___n]
        (str "__thunk__" ___n)
    )

    #_method
    (ยง defn #_"String" (ยง method cachedClassName) [#_"ObjExpr" this, #_"int" ___n]
        (str "__cached_class__" ___n)
    )

    #_method
    (ยง defn #_"String" (ยง method cachedVarName) [#_"ObjExpr" this, #_"int" ___n]
        (str "__cached_var__" ___n)
    )

    #_method
    (ยง defn #_"String" (ยง method varCallsiteName) [#_"ObjExpr" this, #_"int" ___n]
        (str "__var__callsite__" ___n)
    )

    #_method
    (ยง defn #_"String" (ยง method thunkNameStatic) [#_"ObjExpr" this, #_"int" ___n]
        (str (.thunkName this, ___n) "__")
    )

    #_method
    (ยง defn #_"Type" (ยง method constantType) [#_"ObjExpr" this, #_"int" ___id]
        (let [#_"Object" ___o (.nth (:constants this), ___id)]
            (let [#_"Class" ___c (ร cloiure.lang.Util'classOf(___o))]
                (when (and (some? ___c) (Modifier/isPublic (.getModifiers ___c)))
                    ;; can't emit derived fn types due to visibility
                    (cond (.isAssignableFrom (ยง class LazySeq), ___c)
                        (do
                            (ยง return (Type/getType (ยง class ISeq)))
                        )
                        (ร ___c == (ยง class Keyword))
                        (do
                            (ยง return (Type/getType (ยง class Keyword)))
                        )
                        (.isAssignableFrom (ยง class RestFn), ___c)
                        (do
                            (ยง return (Type/getType (ยง class RestFn)))
                        )
                        (.isAssignableFrom (ยง class AFn), ___c)
                        (do
                            (ยง return (Type/getType (ยง class AFn)))
                        )
                        (ร ___c == (ยง class Var))
                        (do
                            (ยง return (Type/getType (ยง class Var)))
                        )
                        (= ___c String)
                        (do
                            (ยง return (Type/getType String))
                        )
                    )
                )
                Compiler'OBJECT_TYPE
            )
        )
    )
)

(def PathType'enum-set
    (hash-set
        :PathType'PATH
        :PathType'BRANCH
    )
)

(class-ns PathNode
    (defn- #_"PathNode" PathNode'init []
        (hash-map
            #_"PathType" :type nil
            #_"PathNode" :parent nil
        )
    )

    (defn #_"PathNode" PathNode'new [#_"PathType" ___type, #_"PathNode" ___parent]
        (let [this (PathNode'init)]
            (ยง ass (:type this) ___type)
            (ยง ass (:parent this) ___parent)
            this
        )
    )
)

(def PState'enum-set
    (hash-set
        :PState'REQ
        :PState'REST
        :PState'DONE
    )
)

(class-ns FnMethod (ยง extends ObjMethod)
    (defn- #_"FnMethod" FnMethod'init []
        (hash-map
            ;; localbinding->localbinding
            #_"PersistentVector" :reqParms PersistentVector'EMPTY
            #_"LocalBinding" :restParm nil
            #_"Type[]" :argtypes nil
            #_"Class[]" :argclasses nil
            #_"Class" :retClass nil
            #_"String" :prim nil
        )
    )

    (defn #_"FnMethod" FnMethod'new [#_"ObjExpr" ___objx, #_"ObjMethod" ___parent]
        (merge (ObjMethod'new ___objx, ___parent) (FnMethod'init))
    )

    (defn #_"char" FnMethod'classChar [#_"Object" ___x]
        (let [#_"Class" ___c nil]
            (cond (instance? Class ___x)
                (do
                    (ยง ass ___c (cast Class ___x))
                )
                (ยง instance? Symbol ___x)
                (do
                    (ยง ass ___c (ร Compiler'primClass-1s((cast' Symbol ___x))))
                )
            )
            (when (or (nil? ___c) (not (.isPrimitive ___c)))
                (ยง return \O)
            )
            (when (= ___c Long/TYPE)
                (ยง return \L)
            )
            (when (= ___c Double/TYPE)
                (ยง return \D)
            )
            (throw (IllegalArgumentException. "Only long and double primitives are supported"))
        )
    )

    (defn #_"String" FnMethod'primInterface [#_"IPersistentVector" ___arglist]
        (let [#_"StringBuilder" ___sb (StringBuilder.)]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___arglist)) [(inc ___i)]
                (ร ___sb.append(classChar(Compiler'tagOf(___arglist.nth(___i)))))
            )
            (ร ___sb.append(classChar(Compiler'tagOf(___arglist))))
            (let [#_"String" ___ret (.toString ___sb)]
                (let [#_"boolean" ___prim (or (.contains ___ret, "L") (.contains ___ret, "D"))]
                    (when (and ___prim (ร (count ___arglist) > 4))
                        (throw (IllegalArgumentException. "fns taking primitives support only 4 or fewer args"))
                    )
                    (when ___prim
                        (ยง return (str "cloiure.lang.IFn$" ___ret))
                    )
                    nil
                )
            )
        )
    )

    (defn #_"FnMethod" FnMethod'parse [#_"ObjExpr" ___objx, #_"ISeq" ___form, #_"Object" ___rettag]
        ;; ([args] body...)
        (let [#_"IPersistentVector" ___parms (cast' IPersistentVector (RT'first ___form))]
            (let [#_"ISeq" ___body (RT'next ___form)]
                (try
                    (let [#_"FnMethod" ___method (ร FnMethod'new(___objx, (cast' ObjMethod (.deref Compiler'METHOD))))]
                        (ยง ass (:line ___method) (Compiler'lineDeref))
                        (ยง ass (:column ___method) (Compiler'columnDeref))
                        ;; register as the current method and set up a new env frame
                        (let [#_"PathNode" ___pnode (cast' PathNode (.get Compiler'CLEAR_PATH))]
                            (when (nil? ___pnode)
                                (ยง ass ___pnode (ร PathNode'new(:PathType'PATH, nil)))
                            )
                            (ร Var'pushThreadBindings(RT'mapUniqueKeys(
                                (object-array [
                                    Compiler'METHOD                ___method
                                    Compiler'LOCAL_ENV             (.deref Compiler'LOCAL_ENV)
                                    Compiler'LOOP_LOCALS           nil
                                    Compiler'NEXT_LOCAL_NUM        0
                                    Compiler'CLEAR_PATH            ___pnode
                                    Compiler'CLEAR_ROOT            ___pnode
                                    Compiler'CLEAR_SITES           PersistentHashMap'EMPTY
                                    Compiler'METHOD_RETURN_CONTEXT RT'T
                                ])
                            )))

                            (ยง ass (:prim ___method) (primInterface ___parms))
                            (when (ร (some? (:prim ___method)))
                                (ยง ass (:prim ___method) (ร (:prim ___method).replace(\., \/)))
                            )

                            (when (instance? String ___rettag)
                                (ยง ass ___rettag (ร Symbol'intern-2(nil, (cast String ___rettag))))
                            )
                            (when (not (ยง instance? Symbol ___rettag))
                                (ยง ass ___rettag nil)
                            )
                            (when (some? ___rettag)
                                (let [#_"String" ___retstr (.getName (cast' Symbol ___rettag))]
                                    (when (not (or (.equals ___retstr, "long") (.equals ___retstr, "double")))
                                        (ยง ass ___rettag nil)
                                    )
                                )
                            )
                            (ยง ass (:retClass ___method) (Compiler'tagClass (or (Compiler'tagOf ___parms) ___rettag)))
                            (if (.isPrimitive (:retClass ___method))
                                (do
                                    (when (not (or (ร (:retClass ___method) == Double/TYPE) (ร (:retClass ___method) == Long/TYPE)))
                                        (throw (IllegalArgumentException. "Only long and double primitives are supported"))
                                    )
                                )
                                (do
                                    (ยง ass (:retClass ___method) Object)
                                )
                            )
                            ;; register 'this' as local 0
                            (if (ร (some? (:thisName ___objx)))
                                (do
                                    (ร Compiler'registerLocal(Symbol'intern-1((:thisName ___objx)), nil, nil, false))
                                )
                                (do
                                    (Compiler'getAndIncLocalNum)
                                )
                            )
                            (let [#_"PState" ___state (ร :PState'REQ)]
                                (let [#_"PersistentVector" ___argLocals PersistentVector'EMPTY]
                                    (let [#_"ArrayList<Type>" ___argtypes (ArrayList.)]
                                        (let [#_"ArrayList<Class>" ___argclasses (ArrayList.)]
                                            (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___parms)) [(inc ___i)]
                                                (when (not (ยง instance? Symbol (.nth ___parms, ___i)))
                                                    (throw (IllegalArgumentException. "fn params must be Symbols"))
                                                )
                                                (let [#_"Symbol" ___p (cast' Symbol (.nth ___parms, ___i))]
                                                    (when (some? (.getNamespace ___p))
                                                        (throw (Util'runtimeException-1 (str "Can't use qualified name as parameter: " ___p)))
                                                    )
                                                    (if (.equals ___p, Compiler'_AMP_)
                                                        (do
                                                            (if (ร ___state == :PState'REQ)
                                                                (do
                                                                    (ยง ass ___state (ร :PState'REST))
                                                                )
                                                                (do
                                                                    (throw (Util'runtimeException-1 "Invalid parameter list"))
                                                                )
                                                            )
                                                        )
                                                        (do
                                                            (let [#_"Class" ___pc (ร Compiler'primClass-1c(Compiler'tagClass(Compiler'tagOf(___p))))]
                                                                (when (and (.isPrimitive ___pc) (not (or (ร ___pc == Double/TYPE) (ร ___pc == Long/TYPE))))
                                                                    (throw (IllegalArgumentException. (str "Only long and double primitives are supported: " ___p)))
                                                                )

                                                                (when (and (= ___state :PState'REST) (some? (Compiler'tagOf ___p)))
                                                                    (throw (Util'runtimeException-1 "& arg cannot have type hint"))
                                                                )
                                                                (when (and (= ___state :PState'REST) (some? (:prim ___method)))
                                                                    (throw (Util'runtimeException-1 "fns taking primitives cannot be variadic"))
                                                                )

                                                                (when (ร ___state == :PState'REST)
                                                                    (ยง ass ___pc (ยง class ISeq))
                                                                )
                                                                (ร ___argtypes.add(Type/getType(___pc)))
                                                                (.add ___argclasses, ___pc)
                                                                (let [#_"LocalBinding" ___lb (if (.isPrimitive ___pc) (Compiler'registerLocal ___p, nil, (MethodParamExpr'new ___pc), true) (Compiler'registerLocal ___p, (if (= ___state :PState'REST) Compiler'ISEQ (Compiler'tagOf ___p)), nil, true))]
                                                                    (ยง ass ___argLocals (.cons ___argLocals, ___lb))
                                                                    (ยง switch ___state
                                                                        (ยง case :PState'REQ)
                                                                        (do
                                                                            (ยง ass (:reqParms ___method) (.cons (:reqParms ___method), ___lb))
                                                                            (ยง break )
                                                                        )
                                                                        (ยง case :PState'REST)
                                                                        (do
                                                                            (ยง ass (:restParm ___method) ___lb)
                                                                            (ยง ass ___state (ร :PState'DONE))
                                                                            (ยง break )
                                                                        )
                                                                        (ยง default )
                                                                        (do
                                                                            (throw (Util'runtimeException-1 "Unexpected parameter"))
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                            (when (ร (:reqParms ___method).count() > Compiler'MAX_POSITIONAL_ARITY)
                                                (throw (Util'runtimeException-1 (str "Can't specify more than " Compiler'MAX_POSITIONAL_ARITY " params")))
                                            )
                                            (.set Compiler'LOOP_LOCALS, ___argLocals)
                                            (ยง ass (:argLocals ___method) ___argLocals)
                                            (ยง ass (:argtypes ___method) (.toArray ___argtypes, (make-array Type (.size ___argtypes))))
                                            (ยง ass (:argclasses ___method) (.toArray ___argclasses, (make-array Class (.size ___argtypes))))
                                            (when (ร (some? (:prim ___method)))
                                                (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength (:argclasses ___method))) [(inc ___i)]
                                                    (when (or (ร (:argclasses ___method)[___i] == Long/TYPE) (ร (:argclasses ___method)[___i] == Double/TYPE))
                                                        (Compiler'getAndIncLocalNum)
                                                    )
                                                )
                                            )
                                            (ยง ass (:body ___method) (ร (BodyParser'new()).parse(:Context'RETURN, ___body)))
                                            ___method
                                        )
                                    )
                                )
                            )
                        )
                    )
                    (finally
                        (Var'popThreadBindings)
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"FnMethod" this, #_"ObjExpr" ___fn, #_"ClassVisitor" ___cv]
        (cond (:canBeDirect ___fn)
            (do
                (.doEmitStatic this, ___fn, ___cv)
            )
            (some? (:prim this))
            (do
                (.doEmitPrim this, ___fn, ___cv)
            )
            :else
            (do
                (.doEmit this, ___fn, ___cv)
            )
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method doEmitStatic) [#_"FnMethod" this, #_"ObjExpr" ___fn, #_"ClassVisitor" ___cv]
        (let [#_"Type" ___returnType (Type/getType (:retClass this))]
            (let [#_"Method" ___ms (Method. "invokeStatic", ___returnType, (:argtypes this))]
                ;; todo don't hardwire EXCEPTION_TYPES
                (let [#_"GeneratorAdapter" ___gen (GeneratorAdapter. (+ Opcodes/ACC_PUBLIC Opcodes/ACC_STATIC), ___ms, nil, Compiler'EXCEPTION_TYPES, ___cv)]
                    (.visitCode ___gen)
                    (let [#_"Label" ___loopLabel (.mark ___gen)]
                        (.visitLineNumber ___gen, (:line this), ___loopLabel)
                        (try
                            (ร Var'pushThreadBindings(RT'map(
                                (object-array [
                                    Compiler'LOOP_LABEL ___loopLabel
                                    Compiler'METHOD     this
                                ])
                            )))
                            (ร emitBody((:objx this), ___gen, (:retClass this), (:body this)))

                            (let [#_"Label" ___end (.mark ___gen)]
                                (loop-when-recur [#_"ISeq" ___lbs (.seq (:argLocals this))] (some? ___lbs) [(next ___lbs)]
                                    (let [#_"LocalBinding" ___lb (cast' LocalBinding (first ___lbs))]
                                        (ร ___gen.visitLocalVariable((:name ___lb), (:argtypes this)[(:idx ___lb)].getDescriptor(), nil, ___loopLabel, ___end, (:idx ___lb)))
                                    )
                                )
                            )
                            (finally
                                (Var'popThreadBindings)
                            )
                        )

                        (.returnValue ___gen)
                        (.endMethod ___gen)

                        ;; generate the regular invoke, calling the static method
                        (let [#_"Method" ___m (Method. (.getMethodName this), Compiler'OBJECT_TYPE, (.getArgTypes this))]
                            ;; todo don't hardwire EXCEPTION_TYPES
                            (ยง ass ___gen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___m, nil, Compiler'EXCEPTION_TYPES, ___cv))
                            (.visitCode ___gen)
                            (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength (:argtypes this))) [(inc ___i)]
                                (.loadArg ___gen, ___i)
                                (ร HostExpr'emitUnboxArg(___fn, ___gen, (:argclasses this)[___i]))
                                (when (not (ร (:argclasses this)[___i].isPrimitive()))
                                    (.visitInsn ___gen, Opcodes/ACONST_NULL)
                                    (.storeArg ___gen, ___i)
                                )
                            )
                            (let [#_"Label" ___callLabel (.mark ___gen)]
                                (.visitLineNumber ___gen, (:line this), ___callLabel)
                                (ร ___gen.invokeStatic((:objtype (:objx this)), ___ms))
                                (.box ___gen, ___returnType)

                                (.returnValue ___gen)
                                (.endMethod ___gen)

                                ;; generate primInvoke if prim
                                (when (some? (:prim this))
                                    (when (or (ร (:retClass this) == Double/TYPE) (ร (:retClass this) == Long/TYPE))
                                        (ยง ass ___returnType (.getReturnType this))
                                    )
                                    (let [#_"else" ___returnType Compiler'OBJECT_TYPE]
                                        (let [#_"Method" ___pm (Method. "invokePrim", ___returnType, (:argtypes this))]
                                            ;; todo don't hardwire EXCEPTION_TYPES
                                            (ยง ass ___gen (GeneratorAdapter. (+ Opcodes/ACC_PUBLIC Opcodes/ACC_FINAL), ___pm, nil, Compiler'EXCEPTION_TYPES, ___cv))
                                            (.visitCode ___gen)
                                            (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength (:argtypes this))) [(inc ___i)]
                                                (.loadArg ___gen, ___i)
                                                (when (not (ร (:argclasses this)[___i].isPrimitive()))
                                                    (.visitInsn ___gen, Opcodes/ACONST_NULL)
                                                    (.storeArg ___gen, ___i)
                                                )
                                            )
                                            (ร ___gen.invokeStatic((:objtype (:objx this)), ___ms))

                                            (.returnValue ___gen)
                                            (.endMethod ___gen)
                                        )
                                    )
                                )
                                nil
                            )
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method doEmitPrim) [#_"FnMethod" this, #_"ObjExpr" ___fn, #_"ClassVisitor" ___cv]
        (ยง let [#_"Type" ___returnType]
            (if (or (ร (:retClass this) == Double/TYPE) (ร (:retClass this) == Long/TYPE))
                (do
                    (ยง ass ___returnType (.getReturnType this))
                )
                (do
                    (ยง ass ___returnType Compiler'OBJECT_TYPE)
                )
            )
            (let [#_"Method" ___ms (Method. "invokePrim", ___returnType, (:argtypes this))]
                ;; todo don't hardwire EXCEPTION_TYPES
                (let [#_"GeneratorAdapter" ___gen (GeneratorAdapter. (+ Opcodes/ACC_PUBLIC Opcodes/ACC_FINAL), ___ms, nil, Compiler'EXCEPTION_TYPES, ___cv)]
                    (.visitCode ___gen)

                    (let [#_"Label" ___loopLabel (.mark ___gen)]
                        (.visitLineNumber ___gen, (:line this), ___loopLabel)
                        (try
                            (ร Var'pushThreadBindings(RT'map(
                                (object-array [
                                    Compiler'LOOP_LABEL ___loopLabel
                                    Compiler'METHOD     this
                                ])
                            )))
                            (ร emitBody((:objx this), ___gen, (:retClass this), (:body this)))

                            (let [#_"Label" ___end (.mark ___gen)]
                                (.visitLocalVariable ___gen, "this", "Ljava/lang/Object;", nil, ___loopLabel, ___end, 0)
                                (loop-when-recur [#_"ISeq" ___lbs (.seq (:argLocals this))] (some? ___lbs) [(next ___lbs)]
                                    (let [#_"LocalBinding" ___lb (cast' LocalBinding (first ___lbs))]
                                        (ร ___gen.visitLocalVariable((:name ___lb), (:argtypes this)[___lb.idx-1].getDescriptor(), nil, ___loopLabel, ___end, (:idx ___lb)))
                                    )
                                )
                            )
                            (finally
                                (Var'popThreadBindings)
                            )
                        )

                        (.returnValue ___gen)
                        (.endMethod ___gen)

                        ;; generate the regular invoke, calling the prim method
                        (let [#_"Method" ___m (Method. (.getMethodName this), Compiler'OBJECT_TYPE, (.getArgTypes this))]
                            ;; todo don't hardwire EXCEPTION_TYPES
                            (ยง ass ___gen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___m, nil, Compiler'EXCEPTION_TYPES, ___cv))
                            (.visitCode ___gen)
                            (.loadThis ___gen)
                            (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength (:argtypes this))) [(inc ___i)]
                                (.loadArg ___gen, ___i)
                                (ร HostExpr'emitUnboxArg(___fn, ___gen, (:argclasses this)[___i]))
                            )
                            (.invokeInterface ___gen, (Type/getType (str "L" (:prim this) ";")), ___ms)
                            (.box ___gen, (.getReturnType this))

                            (.returnValue ___gen)
                            (.endMethod ___gen)
                            nil
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method doEmit) [#_"FnMethod" this, #_"ObjExpr" ___fn, #_"ClassVisitor" ___cv]
        (let [#_"Method" ___m (Method. (.getMethodName this), (.getReturnType this), (.getArgTypes this))]
            ;; todo don't hardwire EXCEPTION_TYPES
            (let [#_"GeneratorAdapter" ___gen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___m, nil, Compiler'EXCEPTION_TYPES, ___cv)]
                (.visitCode ___gen)

                (let [#_"Label" ___loopLabel (.mark ___gen)]
                    (.visitLineNumber ___gen, (:line this), ___loopLabel)
                    (try
                        (ร Var'pushThreadBindings(RT'map(
                            (object-array [
                                Compiler'LOOP_LABEL ___loopLabel
                                Compiler'METHOD     this
                            ])
                        )))

                        (ร (:body this).emit(:Context'RETURN, ___fn, ___gen))
                        (let [#_"Label" ___end (.mark ___gen)]
                            (.visitLocalVariable ___gen, "this", "Ljava/lang/Object;", nil, ___loopLabel, ___end, 0)
                            (loop-when-recur [#_"ISeq" ___lbs (.seq (:argLocals this))] (some? ___lbs) [(next ___lbs)]
                                (let [#_"LocalBinding" ___lb (cast' LocalBinding (first ___lbs))]
                                    (.visitLocalVariable ___gen, (:name ___lb), "Ljava/lang/Object;", nil, ___loopLabel, ___end, (:idx ___lb))
                                )
                            )
                        )
                        (finally
                            (Var'popThreadBindings)
                        )
                    )

                    (.returnValue ___gen)
                    (.endMethod ___gen)
                    nil
                )
            )
        )
    )

    #_method
    (ยง defn #_"PersistentVector" (ยง method reqParms) [#_"FnMethod" this]
        (:reqParms this)
    )

    #_method
    (ยง defn #_"LocalBinding" (ยง method restParm) [#_"FnMethod" this]
        (:restParm this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method isVariadic) [#_"FnMethod" this]
        (some? (:restParm this))
    )

    #_method
    (ยง defn #_"int" (ยง method numParams) [#_"FnMethod" this]
        (+ (.count (:reqParms this)) (if (.isVariadic this) 1 0))
    )

    #_method
    (ยง defn #_"String" (ยง method getMethodName) [#_"FnMethod" this]
        (if (.isVariadic this) "doInvoke" "invoke")
    )

    #_method
    (ยง defn #_"Type" (ยง method getReturnType) [#_"FnMethod" this]
        (when (some? (:prim this)) ;; objx.isStatic
            (ยง return (Type/getType (:retClass this)))
        )
        Compiler'OBJECT_TYPE
    )

    #_method
    (ยง defn #_"Type[]" (ยง method getArgTypes) [#_"FnMethod" this]
        (when (and (.isVariadic this) (ร (.count (:reqParms this)) == Compiler'MAX_POSITIONAL_ARITY))
            (let [#_"Type[]" ___ret (make-array Type (ร Compiler'MAX_POSITIONAL_ARITY + 1))]
                (loop-when-recur [#_"int" ___i 0] (ร ___i < Compiler'MAX_POSITIONAL_ARITY + 1) [(inc ___i)]
                    (ยง ass (ยง aget ___ret ___i) Compiler'OBJECT_TYPE)
                )
                (ยง return ___ret)
            )
        )
        (ร Compiler'ARG_TYPES[(.numParams this)])
    )

    #_method
    (ยง defn #_"void" (ยง method emitClearLocals) [#_"FnMethod" this, #_"GeneratorAdapter" ___gen]
        nil
    )
)

#_abstract
(class-ns ObjMethod
    (defn- #_"ObjMethod" ObjMethod'init []
        (hash-map
            ;; when closures are defined inside other closures,
            ;; the closed over locals need to be propagated to the enclosing objx
            #_"ObjMethod" :parent nil
            ;; localbinding->localbinding
            #_"IPersistentMap" :locals nil
            ;; num->localbinding
            #_"IPersistentMap" :indexlocals nil
            #_"Expr" :body nil
            #_"ObjExpr" :objx nil
            #_"PersistentVector" :argLocals nil
            #_"int" :maxLocal 0
            #_"int" :line 0
            #_"int" :column 0
            #_"boolean" :usesThis false
            #_"PersistentHashSet" :localsUsedInCatchFinally PersistentHashSet'EMPTY
            #_protected
            #_"IPersistentMap" :methodMeta nil
        )
    )

    (defn #_"ObjMethod" ObjMethod'new [#_"ObjExpr" ___objx, #_"ObjMethod" ___parent]
        (let [this (ObjMethod'init)]
            (ยง ass (:parent this) ___parent)
            (ยง ass (:objx this) ___objx)
            this
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method locals) [#_"ObjMethod" this]
        (:locals this)
    )

    #_method
    (ยง defn #_"Expr" (ยง method body) [#_"ObjMethod" this]
        (:body this)
    )

    #_method
    (ยง defn #_"ObjExpr" (ยง method objx) [#_"ObjMethod" this]
        (:objx this)
    )

    #_method
    (ยง defn #_"PersistentVector" (ยง method argLocals) [#_"ObjMethod" this]
        (:argLocals this)
    )

    #_method
    (ยง defn #_"int" (ยง method maxLocal) [#_"ObjMethod" this]
        (:maxLocal this)
    )

    #_method
    (ยง defn #_"int" (ยง method line) [#_"ObjMethod" this]
        (:line this)
    )

    #_method
    (ยง defn #_"int" (ยง method column) [#_"ObjMethod" this]
        (:column this)
    )

    (defn #_"void" ObjMethod'emitBody [#_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Class" ___retClass, #_"Expr" ___body]
        (let [#_"MaybePrimitiveExpr" ___be (cast' MaybePrimitiveExpr ___body)]
            (if (and (Util'isPrimitive ___retClass) (.canEmitPrimitive ___be))
                (do
                    (let [#_"Class" ___bc (Compiler'maybePrimitiveType ___be)]
                        (cond (= ___bc ___retClass)
                            (do
                                (ร ___be.emitUnboxed(:Context'RETURN, ___objx, ___gen))
                            )
                            (and (ร ___retClass == Long/TYPE) (ร ___bc == Integer/TYPE))
                            (do
                                (ร ___be.emitUnboxed(:Context'RETURN, ___objx, ___gen))
                                (.visitInsn ___gen, Opcodes/I2L)
                            )
                            (and (ร ___retClass == Double/TYPE) (ร ___bc == Float/TYPE))
                            (do
                                (ร ___be.emitUnboxed(:Context'RETURN, ___objx, ___gen))
                                (.visitInsn ___gen, Opcodes/F2D)
                            )
                            (and (ร ___retClass == Integer/TYPE) (ร ___bc == Long/TYPE))
                            (do
                                (ร ___be.emitUnboxed(:Context'RETURN, ___objx, ___gen))
                                (ร ___gen.invokeStatic(Compiler'RT_TYPE, Method/getMethod("int intCast(long)")))
                            )
                            (and (ร ___retClass == Float/TYPE) (ร ___bc == Double/TYPE))
                            (do
                                (ร ___be.emitUnboxed(:Context'RETURN, ___objx, ___gen))
                                (.visitInsn ___gen, Opcodes/D2F)
                            )
                            :else
                            (do
                                (throw (IllegalArgumentException. (str "Mismatched primitive return, expected: " ___retClass ", had: " (.getJavaClass ___be))))
                            )
                        )
                    )
                )
                (do
                    (ร ___body.emit(:Context'RETURN, ___objx, ___gen))
                    (if (= ___retClass Void/TYPE)
                        (do
                            (.pop ___gen)
                        )
                        (do
                            (ร ___gen.unbox(Type/getType(___retClass)))
                        )
                    )
                )
            )
            nil
        )
    )

    #_abstract
    (ยง defn #_"int" (ยง method numParams) [#_"ObjMethod" this])
    #_abstract
    (ยง defn #_"String" (ยง method getMethodName) [#_"ObjMethod" this])
    #_abstract
    (ยง defn #_"Type" (ยง method getReturnType) [#_"ObjMethod" this])
    #_abstract
    (ยง defn #_"Type[]" (ยง method getArgTypes) [#_"ObjMethod" this])

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"ObjMethod" this, #_"ObjExpr" ___fn, #_"ClassVisitor" ___cv]
        (let [#_"Method" ___m (Method. (.getMethodName this), (.getReturnType this), (.getArgTypes this))]
            ;; todo don't hardwire EXCEPTION_TYPES
            (let [#_"GeneratorAdapter" ___gen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___m, nil, Compiler'EXCEPTION_TYPES, ___cv)]
                (.visitCode ___gen)

                (let [#_"Label" ___loopLabel (.mark ___gen)]
                    (.visitLineNumber ___gen, (:line this), ___loopLabel)
                    (try
                        (ร Var'pushThreadBindings(RT'map(
                            (object-array [
                                Compiler'LOOP_LABEL ___loopLabel
                                Compiler'METHOD     this
                            ])
                        )))

                        (ร (:body this).emit(:Context'RETURN, ___fn, ___gen))
                        (let [#_"Label" ___end (.mark ___gen)]
                            (.visitLocalVariable ___gen, "this", "Ljava/lang/Object;", nil, ___loopLabel, ___end, 0)
                            (loop-when-recur [#_"ISeq" ___lbs (.seq (:argLocals this))] (some? ___lbs) [(next ___lbs)]
                                (let [#_"LocalBinding" ___lb (cast' LocalBinding (first ___lbs))]
                                    (.visitLocalVariable ___gen, (:name ___lb), "Ljava/lang/Object;", nil, ___loopLabel, ___end, (:idx ___lb))
                                )
                            )
                        )
                        (finally
                            (Var'popThreadBindings)
                        )
                    )

                    (.returnValue ___gen)
                    (.endMethod ___gen)
                    nil
                )
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emitClearLocals) [#_"ObjMethod" this, #_"GeneratorAdapter" ___gen]
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emitClearLocalsOld) [#_"ObjMethod" this, #_"GeneratorAdapter" ___gen]
        (loop-when-recur [#_"int" ___i 0] (ร ___i < (:argLocals this).count()) [(inc ___i)]
            (let [#_"LocalBinding" ___lb (cast' LocalBinding (.nth (:argLocals this), ___i))]
                (when (and (not (.contains (:localsUsedInCatchFinally this), (:idx ___lb))) (nil? (.getPrimitiveType ___lb)))
                    (.visitInsn ___gen, Opcodes/ACONST_NULL)
                    (ร ___gen.storeArg((:idx ___lb) - 1))
                )
            )
        )
        (loop-when-recur [#_"int" ___i (ร (.numParams this) + 1)] (ร ___i < (:maxLocal this) + 1) [(inc ___i)]
            (when (not (.contains (:localsUsedInCatchFinally this), ___i))
                (let [#_"LocalBinding" ___b (cast' LocalBinding (RT'get-2 (:indexlocals this), ___i))]
                    (when (or (nil? ___b) (nil? (Compiler'maybePrimitiveType (:init ___b))))
                        (.visitInsn ___gen, Opcodes/ACONST_NULL)
                        (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ISTORE), ___i))
                    )
                )
            )
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emitClearThis) [#_"ObjMethod" this, #_"GeneratorAdapter" ___gen]
        (.visitInsn ___gen, Opcodes/ACONST_NULL)
        (.visitVarInsn ___gen, Opcodes/ASTORE, 0)
        nil
    )
)

(class-ns LocalBinding
    (defn- #_"LocalBinding" LocalBinding'init []
        (hash-map
            #_"Symbol" :sym nil
            #_"Symbol" :tag nil
            #_"Expr" :init nil
            #_"int" :idx 0
            #_"String" :name nil
            #_"boolean" :isArg false
            #_"PathNode" :clearPathRoot nil
            #_"boolean" :canBeCleared (.not (RT'booleanCast-1o (Compiler'getCompilerOption Compiler'disableLocalsClearingKey)))
            #_"boolean" :recurMistmatch false
            #_"boolean" :used false

            #_"Boolean" :hjc nil

            #_"Class" :jc nil
        )
    )

    (defn #_"LocalBinding" LocalBinding'new [#_"int" ___num, #_"Symbol" ___sym, #_"Symbol" ___tag, #_"Expr" ___init, #_"boolean" ___isArg, #_"PathNode" ___clearPathRoot]
        (let [this (LocalBinding'init)]
            (when (and (some? (Compiler'maybePrimitiveType ___init)) (some? ___tag))
                (throw (UnsupportedOperationException. "Can't type hint a local with a primitive initializer"))
            )
            (ยง ass (:idx this) ___num)
            (ยง ass (:sym this) ___sym)
            (ยง ass (:tag this) ___tag)
            (ยง ass (:init this) ___init)
            (ยง ass (:isArg this) ___isArg)
            (ยง ass (:clearPathRoot this) ___clearPathRoot)
            (ยง ass (:name this) (Compiler'munge (:name ___sym)))
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"LocalBinding" this]
        (when (nil? (:hjc this))
            (if (and (some? (:init this)) (.hasJavaClass (:init this)) (Util'isPrimitive (.getJavaClass (:init this))) (not (ยง instance? MaybePrimitiveExpr (:init this))))
                (do
                    (ยง ass (:hjc this) false)
                )
                (do
                    (ยง ass (:hjc this) (or (some? (:tag this)) (and (some? (:init this)) (.hasJavaClass (:init this)))))
                )
            )
        )
        (:hjc this)
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"LocalBinding" this]
        (when (nil? (:jc this))
            (ยง ass (:jc this) (if (some? (:tag this)) (HostExpr'tagToClass (:tag this)) (.getJavaClass (:init this))))
        )
        (:jc this)
    )

    #_method
    (ยง defn #_"Class" (ยง method getPrimitiveType) [#_"LocalBinding" this]
        (Compiler'maybePrimitiveType (:init this))
    )
)

(class-ns LocalBindingExpr (ยง implements Expr, MaybePrimitiveExpr, AssignableExpr)
    (defn- #_"LocalBindingExpr" LocalBindingExpr'init []
        (hash-map
            #_"LocalBinding" :b nil
            #_"Symbol" :tag nil

            #_"PathNode" :clearPath nil
            #_"PathNode" :clearRoot nil
            #_"boolean" :shouldClear false

            #_"Class" :jc nil
        )
    )

    (defn #_"LocalBindingExpr" LocalBindingExpr'new [#_"LocalBinding" ___b, #_"Symbol" ___tag]
        (let [this (LocalBindingExpr'init)]
            (when (and (some? (.getPrimitiveType ___b)) (some? ___tag))
                (throw (UnsupportedOperationException. "Can't type hint a primitive local"))
            )
            (ยง ass (:b this) ___b)
            (ยง ass (:tag this) ___tag)

            (ยง ass (:clearPath this) (cast' PathNode (.get Compiler'CLEAR_PATH)))
            (ยง ass (:clearRoot this) (cast' PathNode (.get Compiler'CLEAR_ROOT)))
            (let [#_"IPersistentCollection" ___sites (cast' IPersistentCollection (ร RT'get-2(Compiler'CLEAR_SITES.get(), ___b)))]
                (ยง ass (:used ___b) true)

                (when (pos? (:idx ___b))
                    (when (some? ___sites)
                        (loop-when-recur [#_"ISeq" ___s (.seq ___sites)] (some? ___s) [(next ___s)]
                            (let [#_"LocalBindingExpr" ___o (cast' LocalBindingExpr (first ___s))]
                                (let [#_"PathNode" ___common (ร Compiler'commonPath((:clearPath this), (:clearPath ___o)))]
                                    (when (and (some? ___common) (= (:type ___common) :PathType'PATH))
                                        (ยง ass (:shouldClear ___o) false)
                                    )
                                )
                            )
                        )
                    )

                    (when (ร (:clearRoot this) == (:clearPathRoot ___b))
                        (ยง ass (:shouldClear this) true)
                        (ยง ass ___sites (RT'conj ___sites, this))
                        (ร Compiler'CLEAR_SITES.set(RT'assoc(Compiler'CLEAR_SITES.get(), ___b, ___sites)))
                    )
                )
                this
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"LocalBindingExpr" this]
        (throw (UnsupportedOperationException. "Can't eval locals"))
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"LocalBindingExpr" this]
        (some? (.getPrimitiveType (:b this)))
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"LocalBindingExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.emitUnboxedLocal ___objx, ___gen, (:b this))
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"LocalBindingExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (when (ร ___context != :Context'STATEMENT)
            (.emitLocal ___objx, ___gen, (:b this), (:shouldClear this))
        )
        nil
    )

    #_method
    (ยง defn #_"Object" (ยง method evalAssign) [#_"LocalBindingExpr" this, #_"Expr" ___val]
        (throw (UnsupportedOperationException. "Can't eval locals"))
    )

    #_method
    (ยง defn #_"void" (ยง method emitAssign) [#_"LocalBindingExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Expr" ___val]
        (.emitAssignLocal ___objx, ___gen, (:b this), ___val)
        (when (ร ___context != :Context'STATEMENT)
            (.emitLocal ___objx, ___gen, (:b this), false)
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"LocalBindingExpr" this]
        (or (some? (:tag this)) (.hasJavaClass (:b this)))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"LocalBindingExpr" this]
        (when (nil? (:jc this))
            (if (some? (:tag this))
                (do
                    (ยง ass (:jc this) (HostExpr'tagToClass (:tag this)))
                )
                (do
                    (ยง ass (:jc this) (.getJavaClass (:b this)))
                )
            )
        )
        (:jc this)
    )
)

#_closure
(class-ns BodyParser (ยง implements IParser)
    (defn #_"BodyParser" BodyParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"BodyParser" this, #_"Context" ___context, #_"Object" ___frms]
        (let [#_"ISeq" ___forms (cast' ISeq ___frms)]
            (when (ร Util'equals(RT'first(___forms), Compiler'DO))
                (ยง ass ___forms (RT'next ___forms))
            )
            (let [#_"PersistentVector" ___exprs PersistentVector'EMPTY]
                (loop-when-recur [___forms ___forms] (some? ___forms) [(next ___forms)]
                    (let [#_"Expr" ___e (if (and (not= ___context :Context'EVAL) (or (= ___context :Context'STATEMENT) (some? (next ___forms)))) (Compiler'analyze-2 :Context'STATEMENT, (first ___forms)) (Compiler'analyze-2 ___context, (first ___forms)))]
                        (ยง ass ___exprs (.cons ___exprs, ___e))
                    )
                )
                (when (zero? (count ___exprs))
                    (ยง ass ___exprs (.cons ___exprs, Compiler'NIL_EXPR))
                )
                (BodyExpr'new ___exprs)
            )
        )
    )
)

(class-ns BodyExpr (ยง implements Expr, MaybePrimitiveExpr)
    (defn- #_"BodyExpr" BodyExpr'init []
        (hash-map
            #_"PersistentVector" :exprs nil
        )
    )

    (defn #_"BodyExpr" BodyExpr'new [#_"PersistentVector" ___exprs]
        (let [this (BodyExpr'init)]
            (ยง ass (:exprs this) ___exprs)
            this
        )
    )

    #_method
    (ยง defn #_"PersistentVector" (ยง method exprs) [#_"BodyExpr" this]
        (:exprs this)
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"BodyExpr" this]
        (let [#_"Object" ___ret nil]
            (doseq [#_"Object" ___o (:exprs this)]
                (let [#_"Expr" ___e (cast' Expr ___o)]
                    (ยง ass ___ret (.eval ___e))
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"BodyExpr" this]
        (and (ยง instance? MaybePrimitiveExpr (.lastExpr this)) (.canEmitPrimitive (cast' MaybePrimitiveExpr (.lastExpr this))))
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"BodyExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (loop-when-recur [#_"int" ___i 0] (ร ___i < (:exprs this).count() - 1) [(inc ___i)]
            (let [#_"Expr" ___e (cast' Expr (.nth (:exprs this), ___i))]
                (ร ___e.emit(:Context'STATEMENT, ___objx, ___gen))
            )
        )
        (let [#_"MaybePrimitiveExpr" ___last (cast' MaybePrimitiveExpr (ร (:exprs this).nth((:exprs this).count() - 1)))]
            (.emitUnboxed ___last, ___context, ___objx, ___gen)
            nil
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"BodyExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (loop-when-recur [#_"int" ___i 0] (ร ___i < (:exprs this).count() - 1) [(inc ___i)]
            (let [#_"Expr" ___e (cast' Expr (.nth (:exprs this), ___i))]
                (ร ___e.emit(:Context'STATEMENT, ___objx, ___gen))
            )
        )
        (let [#_"Expr" ___last (cast' Expr (ร (:exprs this).nth((:exprs this).count() - 1)))]
            (.emit ___last, ___context, ___objx, ___gen)
            nil
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"BodyExpr" this]
        (.hasJavaClass (.lastExpr this))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"BodyExpr" this]
        (.getJavaClass (.lastExpr this))
    )

    #_method
    (ยง defn- #_"Expr" (ยง method lastExpr) [#_"BodyExpr" this]
        (cast' Expr (ร (:exprs this).nth((:exprs this).count() - 1)))
    )
)

(class-ns BindingInit
    (defn- #_"BindingInit" BindingInit'init []
        (hash-map
            #_"LocalBinding" :binding nil
            #_"Expr" :init nil
        )
    )

    (defn #_"BindingInit" BindingInit'new [#_"LocalBinding" ___binding, #_"Expr" ___init]
        (let [this (BindingInit'init)]
            (ยง ass (:binding this) ___binding)
            (ยง ass (:init this) ___init)
            this
        )
    )

    #_method
    (ยง defn #_"LocalBinding" (ยง method binding) [#_"BindingInit" this]
        (:binding this)
    )

    #_method
    (ยง defn #_"Expr" (ยง method init) [#_"BindingInit" this]
        (:init this)
    )
)

#_closure
(class-ns LetFnParser (ยง implements IParser)
    (defn #_"LetFnParser" LetFnParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"LetFnParser" this, #_"Context" ___context, #_"Object" ___frm]
        (let [#_"ISeq" ___form (cast' ISeq ___frm)]
            ;; (letfns* [var (fn [args] body) ...] body...)
            (when (not (ยง instance? IPersistentVector (RT'second ___form)))
                (throw (IllegalArgumentException. "Bad binding form, expected vector"))
            )

            (let [#_"IPersistentVector" ___bindings (cast' IPersistentVector (RT'second ___form))]
                (when (ร ((count ___bindings) % 2) != 0)
                    (throw (IllegalArgumentException. "Bad binding form, expected matched symbol expression pairs"))
                )

                (let [#_"ISeq" ___body (ร RT'next(RT'next(___form)))]
                    (when (ร ___context == :Context'EVAL)
                        (ยง return (ร Compiler'analyze-2(___context, RT'list-1(RT'list-3(Compiler'FNONCE, PersistentVector'EMPTY, ___form)))))
                    )

                    (let [#_"IPersistentMap" ___dynamicBindings
                            (ร RT'map(
                                (object-array [
                                    Compiler'LOCAL_ENV      Compiler'LOCAL_ENV.deref()
                                    Compiler'NEXT_LOCAL_NUM Compiler'NEXT_LOCAL_NUM.deref()
                                ])
                            ))]
                        (try
                            (Var'pushThreadBindings ___dynamicBindings)

                            ;; pre-seed env (like Lisp labels)
                            (let [#_"PersistentVector" ___lbs PersistentVector'EMPTY]
                                (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___bindings)) [(+ ___i 2)]
                                    (when (not (ยง instance? Symbol (.nth ___bindings, ___i)))
                                        (throw (IllegalArgumentException. (str "Bad binding form, expected symbol, got: " (.nth ___bindings, ___i))))
                                    )
                                    (let [#_"Symbol" ___sym (cast' Symbol (.nth ___bindings, ___i))]
                                        (when (some? (.getNamespace ___sym))
                                            (throw (Util'runtimeException-1 (str "Can't let qualified name: " ___sym)))
                                        )
                                        (let [#_"LocalBinding" ___lb (ร Compiler'registerLocal(___sym, Compiler'tagOf(___sym), nil, false))]
                                            (ยง ass (:canBeCleared ___lb) false)
                                            (ยง ass ___lbs (.cons ___lbs, ___lb))
                                        )
                                    )
                                )
                                (let [#_"PersistentVector" ___bindingInits PersistentVector'EMPTY]
                                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___bindings)) [(+ ___i 2)]
                                        (let [#_"Symbol" ___sym (cast' Symbol (.nth ___bindings, ___i))]
                                            (let [#_"Expr" ___init (ร Compiler'analyze-3(:Context'EXPRESSION, ___bindings.nth(___i + 1), (:name ___sym)))]
                                                (let [#_"LocalBinding" ___lb (cast' LocalBinding (ร ___lbs.nth(___i / 2)))]
                                                    (ยง ass (:init ___lb) ___init)
                                                    (let [#_"BindingInit" ___bi (BindingInit'new ___lb, ___init)]
                                                        (ยง ass ___bindingInits (.cons ___bindingInits, ___bi))
                                                    )
                                                )
                                            )
                                        )
                                    )
                                    (ร LetFnExpr'new(___bindingInits, (BodyParser'new()).parse(___context, ___body)))
                                )
                            )
                            (finally
                                (Var'popThreadBindings)
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns LetFnExpr (ยง implements Expr)
    (defn- #_"LetFnExpr" LetFnExpr'init []
        (hash-map
            #_"PersistentVector" :bindingInits nil
            #_"Expr" :body nil
        )
    )

    (defn #_"LetFnExpr" LetFnExpr'new [#_"PersistentVector" ___bindingInits, #_"Expr" ___body]
        (let [this (LetFnExpr'init)]
            (ยง ass (:bindingInits this) ___bindingInits)
            (ยง ass (:body this) ___body)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"LetFnExpr" this]
        (throw (UnsupportedOperationException. "Can't eval letfns"))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"LetFnExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (loop-when-recur [#_"int" ___i 0] (ร ___i < (:bindingInits this).count()) [(inc ___i)]
            (let [#_"BindingInit" ___bi (cast' BindingInit (.nth (:bindingInits this), ___i))]
                (.visitInsn ___gen, Opcodes/ACONST_NULL)
                (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ISTORE), (:idx (:binding ___bi))))
            )
        )

        (let [#_"IPersistentSet" ___lbset PersistentHashSet'EMPTY]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:bindingInits this).count()) [(inc ___i)]
                (let [#_"BindingInit" ___bi (cast' BindingInit (.nth (:bindingInits this), ___i))]
                    (ยง ass ___lbset (cast' IPersistentSet (.cons ___lbset, (:binding ___bi))))
                    (ร (:init ___bi).emit(:Context'EXPRESSION, ___objx, ___gen))
                    (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ISTORE), (:idx (:binding ___bi))))
                )
            )

            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:bindingInits this).count()) [(inc ___i)]
                (let [#_"BindingInit" ___bi (cast' BindingInit (.nth (:bindingInits this), ___i))]
                    (let [#_"ObjExpr" ___fe (cast' ObjExpr (:init ___bi))]
                        (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ILOAD), (:idx (:binding ___bi))))
                        (.emitLetFnInits ___fe, ___gen, ___objx, ___lbset)
                    )
                )
            )

            (let [#_"Label" ___loopLabel (.mark ___gen)]
                (.emit (:body this), ___context, ___objx, ___gen)

                (let [#_"Label" ___end (.mark ___gen)]
                    (loop-when-recur [#_"ISeq" ___bis (.seq (:bindingInits this))] (some? ___bis) [(next ___bis)]
                        (let [#_"BindingInit" ___bi (cast' BindingInit (first ___bis))]
                            (let [#_"String" ___lname (:name (:binding ___bi))]
                                (when (.endsWith ___lname, "__auto__")
                                    (ยง ass ___lname (ร ___lname + RT'nextID()))
                                )
                                (let [#_"Class" ___primc (Compiler'maybePrimitiveType (:init ___bi))]
                                    (if (some? ___primc)
                                        (do
                                            (ร ___gen.visitLocalVariable(___lname, Type/getDescriptor(___primc), nil, ___loopLabel, ___end, (:idx (:binding ___bi))))
                                        )
                                        (do
                                            (ร ___gen.visitLocalVariable(___lname, "Ljava/lang/Object;", nil, ___loopLabel, ___end, (:idx (:binding ___bi))))
                                        )
                                    )
                                )
                            )
                        )
                    )
                    nil
                )
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"LetFnExpr" this]
        (.hasJavaClass (:body this))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"LetFnExpr" this]
        (.getJavaClass (:body this))
    )
)

#_closure
(class-ns LetParser (ยง implements IParser)
    (defn #_"LetParser" LetParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"LetParser" this, #_"Context" ___context, #_"Object" ___frm]
        (let [#_"ISeq" ___form (cast' ISeq ___frm)]
            ;; (let [var val var2 val2 ...] body...)
            (let [#_"boolean" ___isLoop (ร RT'first(___form).equals(Compiler'LOOP))]
                (when (not (ยง instance? IPersistentVector (RT'second ___form)))
                    (throw (IllegalArgumentException. "Bad binding form, expected vector"))
                )

                (let [#_"IPersistentVector" ___bindings (cast' IPersistentVector (RT'second ___form))]
                    (when (ร ((count ___bindings) % 2) != 0)
                        (throw (IllegalArgumentException. "Bad binding form, expected matched symbol expression pairs"))
                    )

                    (let [#_"ISeq" ___body (ร RT'next(RT'next(___form)))]
                        (when (or (ร ___context == :Context'EVAL) (and (ร ___context == :Context'EXPRESSION) ___isLoop))
                            (ยง return (ร Compiler'analyze-2(___context, RT'list-1(RT'list-3(Compiler'FNONCE, PersistentVector'EMPTY, ___form)))))
                        )

                        (let [#_"ObjMethod" ___method (cast' ObjMethod (.deref Compiler'METHOD))]
                            (let [#_"IPersistentMap" ___backupMethodLocals (:locals ___method)]
                                (let [#_"IPersistentMap" ___backupMethodIndexLocals (:indexlocals ___method)]
                                    (let [#_"IPersistentVector" ___recurMismatches PersistentVector'EMPTY]
                                        (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___bindings) / 2) [(inc ___i)]
                                            (ยง ass ___recurMismatches (.cons ___recurMismatches, RT'F))
                                        )

                                        ;; may repeat once for each binding with a mismatch, return breaks
                                        (while true
                                            (let [#_"IPersistentMap" ___dynamicBindings
                                                    (ร RT'map(
                                                        (object-array [
                                                            Compiler'LOCAL_ENV      Compiler'LOCAL_ENV.deref()
                                                            Compiler'NEXT_LOCAL_NUM Compiler'NEXT_LOCAL_NUM.deref()
                                                        ])
                                                    ))]
                                                (ยง ass (:locals ___method) ___backupMethodLocals)
                                                (ยง ass (:indexlocals ___method) ___backupMethodIndexLocals)

                                                (let [#_"PathNode" ___looproot (ร PathNode'new(:PathType'PATH, (cast' PathNode (.get Compiler'CLEAR_PATH))))]
                                                    (let [#_"PathNode" ___clearroot (ร PathNode'new(:PathType'PATH, ___looproot))]
                                                        (let [#_"PathNode" ___clearpath (ร PathNode'new(:PathType'PATH, ___looproot))]
                                                            (when ___isLoop
                                                                (ยง ass ___dynamicBindings (.assoc ___dynamicBindings, Compiler'LOOP_LOCALS, nil))
                                                            )

                                                            (try
                                                                (Var'pushThreadBindings ___dynamicBindings)

                                                                (let [#_"PersistentVector" ___bindingInits PersistentVector'EMPTY]
                                                                    (let [#_"PersistentVector" ___loopLocals PersistentVector'EMPTY]
                                                                        (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___bindings)) [(+ ___i 2)]
                                                                            (when (not (ยง instance? Symbol (.nth ___bindings, ___i)))
                                                                                (throw (IllegalArgumentException. (str "Bad binding form, expected symbol, got: " (.nth ___bindings, ___i))))
                                                                            )
                                                                            (let [#_"Symbol" ___sym (cast' Symbol (.nth ___bindings, ___i))]
                                                                                (when (some? (.getNamespace ___sym))
                                                                                    (throw (Util'runtimeException-1 (str "Can't let qualified name: " ___sym)))
                                                                                )
                                                                                (let [#_"Expr" ___init (ร Compiler'analyze-3(:Context'EXPRESSION, ___bindings.nth(___i + 1), (:name ___sym)))]
                                                                                    (when ___isLoop
                                                                                        (cond (and (some? ___recurMismatches) (RT'booleanCast-1o (ร ___recurMismatches.nth(___i / 2))))
                                                                                            (do
                                                                                                (ยง ass ___init (ร StaticMethodExpr'new("", 0, 0, nil, (ยง class RT), "box", RT'vector(___init), false)))
                                                                                                (when (ร RT'booleanCast-1o(RT'WARN_ON_REFLECTION.deref()))
                                                                                                    (.println (RT'errPrintWriter), (str "Auto-boxing loop arg: " ___sym))
                                                                                                )
                                                                                            )
                                                                                            (ร Compiler'maybePrimitiveType(___init) == Integer/TYPE)
                                                                                            (do
                                                                                                (ยง ass ___init (ร StaticMethodExpr'new("", 0, 0, nil, (ยง class RT), "longCast", RT'vector(___init), false)))
                                                                                            )
                                                                                            (ร Compiler'maybePrimitiveType(___init) == Float/TYPE)
                                                                                            (do
                                                                                                (ยง ass ___init (ร StaticMethodExpr'new("", 0, 0, nil, (ยง class RT), "doubleCast", RT'vector(___init), false)))
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                    ;; sequential enhancement of env (like Lisp let*)
                                                                                    (try
                                                                                        (when ___isLoop
                                                                                            (ร Var'pushThreadBindings(RT'map(
                                                                                                (object-array [
                                                                                                    Compiler'CLEAR_PATH ___clearpath
                                                                                                    Compiler'CLEAR_ROOT ___clearroot
                                                                                                    Compiler'NO_RECUR   nil
                                                                                                ])
                                                                                            )))
                                                                                        )
                                                                                        (let [#_"LocalBinding" ___lb (ร Compiler'registerLocal(___sym, Compiler'tagOf(___sym), ___init, false))]
                                                                                            (let [#_"BindingInit" ___bi (BindingInit'new ___lb, ___init)]
                                                                                                (ยง ass ___bindingInits (.cons ___bindingInits, ___bi))
                                                                                                (when ___isLoop
                                                                                                    (ยง ass ___loopLocals (.cons ___loopLocals, ___lb))
                                                                                                )
                                                                                            )
                                                                                        )
                                                                                        (finally
                                                                                            (when ___isLoop
                                                                                                (Var'popThreadBindings)
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                        (when ___isLoop
                                                                            (.set Compiler'LOOP_LOCALS, ___loopLocals)
                                                                        )
                                                                        (ยง let [#_"Expr" ___bodyExpr]
                                                                            (let [#_"boolean" ___moreMismatches false]
                                                                                (try
                                                                                    (when ___isLoop
                                                                                        (let [#_"Object" ___methodReturnContext (when (= ___context :Context'RETURN) (.deref Compiler'METHOD_RETURN_CONTEXT))]
                                                                                            (ร Var'pushThreadBindings(RT'map(
                                                                                                (object-array [
                                                                                                    Compiler'CLEAR_PATH            ___clearpath
                                                                                                    Compiler'CLEAR_ROOT            ___clearroot
                                                                                                    Compiler'NO_RECUR              nil
                                                                                                    Compiler'METHOD_RETURN_CONTEXT ___methodReturnContext
                                                                                                ])
                                                                                            )))
                                                                                        )
                                                                                    )
                                                                                    (ยง ass ___bodyExpr (.parse (BodyParser'new), (if ___isLoop :Context'RETURN ___context), ___body))
                                                                                    (finally
                                                                                        (when ___isLoop
                                                                                            (Var'popThreadBindings)
                                                                                            (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___loopLocals)) [(inc ___i)]
                                                                                                (let [#_"LocalBinding" ___lb (cast' LocalBinding (.nth ___loopLocals, ___i))]
                                                                                                    (when (:recurMistmatch ___lb)
                                                                                                        (ยง ass ___recurMismatches (cast' IPersistentVector (.assoc ___recurMismatches, ___i, RT'T)))
                                                                                                        (ยง ass ___moreMismatches true)
                                                                                                    )
                                                                                                )
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                )
                                                                                (when (not ___moreMismatches)
                                                                                    (ยง return (LetExpr'new ___bindingInits, ___bodyExpr, ___isLoop))
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                (finally
                                                                    (Var'popThreadBindings)
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns LetExpr (ยง implements Expr, MaybePrimitiveExpr)
    (defn- #_"LetExpr" LetExpr'init []
        (hash-map
            #_"PersistentVector" :bindingInits nil
            #_"Expr" :body nil
            #_"boolean" :isLoop false
        )
    )

    (defn #_"LetExpr" LetExpr'new [#_"PersistentVector" ___bindingInits, #_"Expr" ___body, #_"boolean" ___isLoop]
        (let [this (LetExpr'init)]
            (ยง ass (:bindingInits this) ___bindingInits)
            (ยง ass (:body this) ___body)
            (ยง ass (:isLoop this) ___isLoop)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"LetExpr" this]
        (throw (UnsupportedOperationException. "Can't eval let/loop"))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"LetExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.doEmit this, ___context, ___objx, ___gen, false)
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"LetExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.doEmit this, ___context, ___objx, ___gen, true)
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method doEmit) [#_"LetExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"boolean" ___emitUnboxed]
        (let [#_"HashMap<BindingInit, Label>" ___bindingLabels (HashMap.)]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:bindingInits this).count()) [(inc ___i)]
                (let [#_"BindingInit" ___bi (cast' BindingInit (.nth (:bindingInits this), ___i))]
                    (let [#_"Class" ___primc (Compiler'maybePrimitiveType (:init ___bi))]
                        (if (some? ___primc)
                            (do
                                (ร (cast' MaybePrimitiveExpr (:init ___bi)).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                                (ร ___gen.visitVarInsn(Type/getType(___primc).getOpcode(Opcodes/ISTORE), (:idx (:binding ___bi))))
                            )
                            (do
                                (ร (:init ___bi).emit(:Context'EXPRESSION, ___objx, ___gen))
                                (if (and (not (:used (:binding ___bi))) (:canBeCleared (:binding ___bi)))
                                    (do
                                        (.pop ___gen)
                                    )
                                    (do
                                        (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ISTORE), (:idx (:binding ___bi))))
                                    )
                                )
                            )
                        )
                        (ร ___bindingLabels.put(___bi, (.mark ___gen)))
                    )
                )
            )
            (let [#_"Label" ___loopLabel (.mark ___gen)]
                (if (:isLoop this)
                    (do
                        (try
                            (ร Var'pushThreadBindings(RT'map(Compiler'LOOP_LABEL, ___loopLabel)))
                            (if ___emitUnboxed
                                (do
                                    (ร (cast' MaybePrimitiveExpr (:body this)).emitUnboxed(___context, ___objx, ___gen))
                                )
                                (do
                                    (.emit (:body this), ___context, ___objx, ___gen)
                                )
                            )
                            (finally
                                (Var'popThreadBindings)
                            )
                        )
                    )
                    (do
                        (if ___emitUnboxed
                            (do
                                (ร (cast' MaybePrimitiveExpr (:body this)).emitUnboxed(___context, ___objx, ___gen))
                            )
                            (do
                                (.emit (:body this), ___context, ___objx, ___gen)
                            )
                        )
                    )
                )
                (let [#_"Label" ___end (.mark ___gen)]
                    (loop-when-recur [#_"ISeq" ___bis (.seq (:bindingInits this))] (some? ___bis) [(next ___bis)]
                        (let [#_"BindingInit" ___bi (cast' BindingInit (first ___bis))]
                            (let [#_"String" ___lname (:name (:binding ___bi))]
                                (when (.endsWith ___lname, "__auto__")
                                    (ยง ass ___lname (ร ___lname + RT'nextID()))
                                )
                                (let [#_"Class" ___primc (Compiler'maybePrimitiveType (:init ___bi))]
                                    (if (some? ___primc)
                                        (do
                                            (ร ___gen.visitLocalVariable(___lname, Type/getDescriptor(___primc), nil, ___bindingLabels.get(___bi), ___end, (:idx (:binding ___bi))))
                                        )
                                        (do
                                            (ร ___gen.visitLocalVariable(___lname, "Ljava/lang/Object;", nil, ___bindingLabels.get(___bi), ___end, (:idx (:binding ___bi))))
                                        )
                                    )
                                )
                            )
                        )
                    )
                    nil
                )
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"LetExpr" this]
        (.hasJavaClass (:body this))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"LetExpr" this]
        (.getJavaClass (:body this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"LetExpr" this]
        (and (ยง instance? MaybePrimitiveExpr (:body this)) (.canEmitPrimitive (cast' MaybePrimitiveExpr (:body this))))
    )
)

#_closure
(class-ns RecurParser (ยง implements IParser)
    (defn #_"RecurParser" RecurParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"RecurParser" this, #_"Context" ___context, #_"Object" ___frm]
        (let [#_"int" ___line (Compiler'lineDeref)]
            (let [#_"int" ___column (Compiler'columnDeref)]
                (let [#_"String" ___source (cast String (.deref Compiler'SOURCE))]
                    (let [#_"ISeq" ___form (cast' ISeq ___frm)]
                        (let [#_"IPersistentVector" ___loopLocals (cast' IPersistentVector (.deref Compiler'LOOP_LOCALS))]
                            (when (or (ร ___context != :Context'RETURN) (nil? ___loopLocals))
                                (throw (UnsupportedOperationException. "Can only recur from tail position"))
                            )
                            (when (some? (.deref Compiler'NO_RECUR))
                                (throw (UnsupportedOperationException. "Cannot recur across try"))
                            )
                            (let [#_"PersistentVector" ___args PersistentVector'EMPTY]
                                (loop-when-recur [#_"ISeq" ___s (RT'seq (next ___form))] (some? ___s) [(next ___s)]
                                    (ยง ass ___args (ร ___args.cons(Compiler'analyze-2(:Context'EXPRESSION, (first ___s)))))
                                )
                                (when (ร (count ___args) != (count ___loopLocals))
                                    (throw (IllegalArgumentException. (String/format "Mismatched argument count to recur, expected: %d args, got: %d", (object-array [ (count ___loopLocals), (count ___args) ]))))
                                )
                                (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___loopLocals)) [(inc ___i)]
                                    (let [#_"LocalBinding" ___lb (cast' LocalBinding (.nth ___loopLocals, ___i))]
                                        (let [#_"Class" ___primc (.getPrimitiveType ___lb)]
                                            (when (some? ___primc)
                                                (let [#_"boolean" ___mismatch false]
                                                    (let [#_"Class" ___pc (ร Compiler'maybePrimitiveType((cast' Expr (.nth ___args, ___i))))]
                                                        (cond (= ___primc Long/TYPE)
                                                            (do
                                                                (when (not (or (ร ___pc == Long/TYPE) (ร ___pc == Integer/TYPE) (ร ___pc == Short/TYPE) (ร ___pc == Character/TYPE) (ร ___pc == Byte/TYPE)))
                                                                    (ยง ass ___mismatch true)
                                                                )
                                                            )
                                                            (= ___primc Double/TYPE)
                                                            (do
                                                                (when (not (or (ร ___pc == Double/TYPE) (ร ___pc == Float/TYPE)))
                                                                    (ยง ass ___mismatch true)
                                                                )
                                                            )
                                                        )
                                                        (when ___mismatch
                                                            (ยง ass (:recurMistmatch ___lb) true)
                                                            (when (ร RT'booleanCast-1o(RT'WARN_ON_REFLECTION.deref()))
                                                                (.println (RT'errPrintWriter), (str ___source ":" ___line " recur arg for primitive local: " (:name ___lb) " is not matching primitive, had: " (if (some? ___pc) (.getName ___pc) "Object") ", needed: " (.getName ___primc)))
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                                (RecurExpr'new ___loopLocals, ___args, ___line, ___column, ___source)
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns RecurExpr (ยง implements Expr, MaybePrimitiveExpr)
    (defn- #_"RecurExpr" RecurExpr'init []
        (hash-map
            #_"IPersistentVector" :args nil
            #_"IPersistentVector" :loopLocals nil

            #_"int" :line 0
            #_"int" :column 0
            #_"String" :source nil
        )
    )

    (defn #_"RecurExpr" RecurExpr'new [#_"IPersistentVector" ___loopLocals, #_"IPersistentVector" ___args, #_"int" ___line, #_"int" ___column, #_"String" ___source]
        (let [this (RecurExpr'init)]
            (ยง ass (:loopLocals this) ___loopLocals)
            (ยง ass (:args this) ___args)
            (ยง ass (:line this) ___line)
            (ยง ass (:column this) ___column)
            (ยง ass (:source this) ___source)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"RecurExpr" this]
        (throw (UnsupportedOperationException. "Can't eval recur"))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"RecurExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (let [#_"Label" ___loopLabel (cast Label (.deref Compiler'LOOP_LABEL))]
            (when (nil? ___loopLabel)
                (throw (IllegalStateException.))
            )
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:loopLocals this).count()) [(inc ___i)]
                (let [#_"LocalBinding" ___lb (cast' LocalBinding (.nth (:loopLocals this), ___i))]
                    (let [#_"Expr" ___arg (cast' Expr (.nth (:args this), ___i))]
                        (if (some? (.getPrimitiveType ___lb))
                            (do
                                (let [#_"Class" ___primc (.getPrimitiveType ___lb)]
                                    (let [#_"Class" ___pc (Compiler'maybePrimitiveType ___arg)]
                                        (cond (= ___pc ___primc)
                                            (do
                                                (ร (cast' MaybePrimitiveExpr ___arg).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                                            )
                                            (and (ร ___primc == Long/TYPE) (ร ___pc == Integer/TYPE))
                                            (do
                                                (ร (cast' MaybePrimitiveExpr ___arg).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                                                (.visitInsn ___gen, Opcodes/I2L)
                                            )
                                            (and (ร ___primc == Double/TYPE) (ร ___pc == Float/TYPE))
                                            (do
                                                (ร (cast' MaybePrimitiveExpr ___arg).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                                                (.visitInsn ___gen, Opcodes/F2D)
                                            )
                                            (and (ร ___primc == Integer/TYPE) (ร ___pc == Long/TYPE))
                                            (do
                                                (ร (cast' MaybePrimitiveExpr ___arg).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                                                (ร ___gen.invokeStatic(Compiler'RT_TYPE, Method/getMethod("int intCast(long)")))
                                            )
                                            (and (ร ___primc == Float/TYPE) (ร ___pc == Double/TYPE))
                                            (do
                                                (ร (cast' MaybePrimitiveExpr ___arg).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                                                (.visitInsn ___gen, Opcodes/D2F)
                                            )
                                            :else
                                            (do
                                                (throw (IllegalArgumentException. (str "recur arg for primitive local: " (:name ___lb) " is not matching primitive, had: " (if (.hasJavaClass ___arg) (.getName (.getJavaClass ___arg)) "Object") ", needed: " (.getName ___primc))))
                                            )
                                        )
                                    )
                                )
                            )
                            (do
                                (ร ___arg.emit(:Context'EXPRESSION, ___objx, ___gen))
                            )
                        )
                    )
                )
            )

            (loop-when-recur [#_"int" ___i (ร (:loopLocals this).count() - 1)] (>= ___i 0) [(dec ___i)]
                (let [#_"LocalBinding" ___lb (cast' LocalBinding (.nth (:loopLocals this), ___i))]
                    (let [#_"Class" ___primc (.getPrimitiveType ___lb)]
                        (if (:isArg ___lb)
                            (do
                                (.storeArg ___gen, (- (:idx ___lb) (if (:canBeDirect ___objx) 0 1)))
                            )
                            (do
                                (if (some? ___primc)
                                    (do
                                        (ร ___gen.visitVarInsn(Type/getType(___primc).getOpcode(Opcodes/ISTORE), (:idx ___lb)))
                                    )
                                    (do
                                        (ร ___gen.visitVarInsn(Compiler'OBJECT_TYPE.getOpcode(Opcodes/ISTORE), (:idx ___lb)))
                                    )
                                )
                            )
                        )
                    )
                )
            )

            (.goTo ___gen, ___loopLabel)
            nil
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"RecurExpr" this]
        true
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"RecurExpr" this]
        Compiler'RECUR_CLASS
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"RecurExpr" this]
        true
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"RecurExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.emit this, ___context, ___objx, ___gen)
        nil
    )
)

(class-ns CompilerException (ยง extends RuntimeException)
    (defn- #_"CompilerException" CompilerException'init []
        (hash-map
            #_"String" :source nil
            #_"int" :line 0
        )
    )

    (defn #_"CompilerException" CompilerException'new [#_"String" ___source, #_"int" ___line, #_"int" ___column, #_"Throwable" ___cause]
        (let [this (merge (ยง foreign RuntimeException'new (ร Compiler'errorMsg(___source, ___line, ___column, (.toString ___cause))), ___cause) (CompilerException'init))]
            (ยง ass (:source this) ___source)
            (ยง ass (:line this) ___line)
            this
        )
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"CompilerException" this]
        (.getMessage this)
    )
)

#_closure
(class-ns DeftypeParser (ยง implements IParser)
    (defn #_"DeftypeParser" DeftypeParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"DeftypeParser" this, #_"Context" ___context, #_"Object" ___frm]
        (let [#_"ISeq" ___rform (cast' ISeq ___frm)]
            ;; (deftype* tagname classname [fields] :implements [interfaces] :tag tagname methods*)
            (ยง ass ___rform (RT'next ___rform))
            (let [#_"String" ___tagname (.getName (cast' Symbol (first ___rform)))]
                (ยง ass ___rform (next ___rform))
                (let [#_"Symbol" ___classname (cast' Symbol (first ___rform))]
                    (ยง ass ___rform (next ___rform))
                    (let [#_"IPersistentVector" ___fields (cast' IPersistentVector (first ___rform))]
                        (ยง ass ___rform (next ___rform))
                        (let [#_"IPersistentMap" ___opts PersistentHashMap'EMPTY]
                            (while (and (some? ___rform) (ยง instance? Keyword (first ___rform)))
                                (ยง ass ___opts (ร ___opts.assoc((first ___rform), RT'second(___rform))))
                                (ยง ass ___rform (next (next ___rform)))
                            )

                            (let [#_"ObjExpr" ___ret (ร build((cast' IPersistentVector (RT'get-3 ___opts, Compiler'implementsKey, PersistentVector'EMPTY)), ___fields, nil, ___tagname, ___classname, (cast' Symbol (RT'get-2 ___opts, RT'TAG_KEY)), ___rform, ___frm, ___opts))]
                                ___ret
                            )
                        )
                    )
                )
            )
        )
    )
)

#_closure
(class-ns ReifyParser (ยง implements IParser)
    (defn #_"ReifyParser" ReifyParser'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"ReifyParser" this, #_"Context" ___context, #_"Object" ___frm]
        ;; (reify this-name? [interfaces] (method-name [args] body)*)
        (let [#_"ISeq" ___form (cast' ISeq ___frm)]
            (let [#_"ObjMethod" ___enclosingMethod (cast' ObjMethod (.deref Compiler'METHOD))]
                (let [#_"String" ___basename (str (if (some? ___enclosingMethod) (ร trimGenID((:name (:objx ___enclosingMethod)))) (ร Compiler'munge((:name (:name (.currentNS this)))))) "$")]
                    (let [#_"String" ___simpleName (str "reify__" (RT'nextID))]
                        (let [#_"String" ___classname (+ ___basename ___simpleName)]
                            (let [#_"ISeq" ___rform (RT'next ___form)]
                                (let [#_"IPersistentVector" ___interfaces (ร (cast' IPersistentVector (RT'first ___rform)).cons(Symbol'intern-1("cloiure.lang.IObj")))]
                                    (ยง ass ___rform (RT'next ___rform))

                                    (let [#_"ObjExpr" ___ret (ร build(___interfaces, nil, nil, ___classname, Symbol'intern-1(___classname), nil, ___rform, ___frm, nil))]
                                        (if (and (ยง instance? IObj ___frm) (some? (.meta (cast' IObj ___frm))))
                                            (do
                                                (MetaExpr'new ___ret, (MapExpr'parse (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), (.meta (cast' IObj ___frm))))
                                            )
                                            (do
                                                ___ret
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns NewInstanceExpr (ยง extends ObjExpr)
    (defn- #_"NewInstanceExpr" NewInstanceExpr'init []
        (hash-map
            #_"IPersistentCollection" :methods nil

            #_"Map<IPersistentVector, java.lang.reflect.Method>" :mmap nil
            #_"Map<IPersistentVector, Set<Class>>" :covariants nil
        )
    )

    (defn #_"NewInstanceExpr" NewInstanceExpr'new [#_"Object" ___tag]
        (merge (ObjExpr'new ___tag) (NewInstanceExpr'init))
    )

    (defn #_"ObjExpr" NewInstanceExpr'build [#_"IPersistentVector" ___interfaceSyms, #_"IPersistentVector" ___fieldSyms, #_"Symbol" ___thisSym, #_"String" ___tagName, #_"Symbol" ___className, #_"Symbol" ___typeTag, #_"ISeq" ___methodForms, #_"Object" ___frm, #_"IPersistentMap" ___opts]
        (let [#_"NewInstanceExpr" ___ret (NewInstanceExpr'new nil)]
            (ยง ass (:src ___ret) ___frm)
            (ยง ass (:name ___ret) (.toString ___className))
            (ยง ass (:classMeta ___ret) (RT'meta ___className))
            (ยง ass (:internalName ___ret) (ร (:name ___ret).replace(\., \/)))
            (ยง ass (:objtype ___ret) (Type/getObjectType (:internalName ___ret)))
            (ยง ass (:opts ___ret) ___opts)

            (when (some? ___thisSym)
                (ยง ass (:thisName ___ret) (:name ___thisSym))
            )

            (when (some? ___fieldSyms)
                (let [#_"IPersistentMap" ___fmap PersistentHashMap'EMPTY]
                    (let [#_"Object[]" ___closesvec (make-array Object (ร 2 * (count ___fieldSyms)))]
                        (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___fieldSyms)) [(inc ___i)]
                            (let [#_"Symbol" ___sym (cast' Symbol (.nth ___fieldSyms, ___i))]
                                (let [#_"LocalBinding" ___lb (ร LocalBinding'new(-1, ___sym, nil, MethodParamExpr'new(Compiler'tagClass(Compiler'tagOf(___sym))), false, nil))]
                                    (ยง ass ___fmap (.assoc ___fmap, ___sym, ___lb))
                                    (ยง ass (ยง aget ___closesvec (ร ___i * 2)) ___lb)
                                    (ยง ass (ยง aget ___closesvec (ร ___i * 2 + 1)) ___lb)
                                )
                            )
                        )

                        ;; todo - inject __meta et al into closes - when?
                        ;; use array map to preserve ctor order
                        (ยง ass (:closes ___ret) (PersistentArrayMap'new-1 ___closesvec))
                        (ยง ass (:fields ___ret) ___fmap)
                        (loop-when-recur [#_"int" ___i (dec (count ___fieldSyms))] (and (<= 0 ___i) (or (.equals (:name (cast' Symbol (.nth ___fieldSyms, ___i))), "__meta") (.equals (:name (cast' Symbol (.nth ___fieldSyms, ___i))), "__extmap") (.equals (:name (cast' Symbol (.nth ___fieldSyms, ___i))), "__hash") (.equals (:name (cast' Symbol (.nth ___fieldSyms, ___i))), "__hasheq"))) [(dec ___i)]
                            (ยง ass (:altCtorDrops ___ret) (inc (:altCtorDrops ___ret)))
                        )
                    )
                )
            )

            (let [#_"PersistentVector" ___interfaces PersistentVector'EMPTY]
                (loop-when-recur [#_"ISeq" ___s (RT'seq ___interfaceSyms)] (some? ___s) [(next ___s)]
                    (let [#_"Class" ___c (cast Class (ร resolve((cast' Symbol (first ___s)))))]
                        (when (not (.isInterface ___c))
                            (throw (IllegalArgumentException. (str "only interfaces are supported, had: " (.getName ___c))))
                        )
                        (ยง ass ___interfaces (.cons ___interfaces, ___c))
                    )
                )
                (let [#_"Class" ___superClass Object]
                    (let [#_"Map[]" ___mc (ร NewInstanceExpr'gatherMethods-2s(___superClass, RT'seq(___interfaces)))]
                        (let [#_"Map" ___overrideables (ยง aget ___mc (ร 0))]
                            (let [#_"Map" ___covariants (ยง aget ___mc (ร 1))]
                                (ยง ass (:mmap ___ret) ___overrideables)
                                (ยง ass (:covariants ___ret) ___covariants)

                                (let [#_"String[]" ___inames (NewInstanceExpr'interfaceNames ___interfaces)]
                                    (let [#_"Class" ___stub (ร compileStub(slashname(___superClass), ___ret, ___inames, ___frm))]
                                        (let [#_"Symbol" ___thistag (ร Symbol'intern-2(nil, (.getName ___stub)))]
                                            (try
                                                (ร Var'pushThreadBindings(RT'mapUniqueKeys(
                                                    (object-array [
                                                        Compiler'CONSTANTS          PersistentVector'EMPTY
                                                        Compiler'CONSTANT_IDS       (IdentityHashMap.)
                                                        Compiler'KEYWORDS           PersistentHashMap'EMPTY
                                                        Compiler'VARS               PersistentHashMap'EMPTY
                                                        Compiler'KEYWORD_CALLSITES  PersistentVector'EMPTY
                                                        Compiler'PROTOCOL_CALLSITES PersistentVector'EMPTY
                                                        Compiler'VAR_CALLSITES      (Compiler'emptyVarCallSites)
                                                        Compiler'NO_RECUR           nil
                                                    ])
                                                )))
                                                (when (.isDeftype ___ret)
                                                    (ร Var'pushThreadBindings(RT'mapUniqueKeys(
                                                        (object-array [
                                                            Compiler'METHOD             nil
                                                            Compiler'LOCAL_ENV          (:fields ___ret)
                                                            Compiler'COMPILE_STUB_SYM   (Symbol'intern-2 nil, ___tagName)
                                                            Compiler'COMPILE_STUB_CLASS ___stub
                                                        ])
                                                    )))

                                                    (ยง ass (:hintedFields ___ret) (ร RT'subvec(___fieldSyms, 0, (count ___fieldSyms) - (:altCtorDrops ___ret))))
                                                )

                                                ;; now (methodname [args] body)*
                                                (ยง ass (:line ___ret) (Compiler'lineDeref))
                                                (ยง ass (:column ___ret) (Compiler'columnDeref))
                                                (let [#_"IPersistentCollection" ___methods nil]
                                                    (loop-when-recur [#_"ISeq" ___s ___methodForms] (some? ___s) [(RT'next ___s)]
                                                        (let [#_"NewInstanceMethod" ___m (ร NewInstanceMethod'parse(___ret, (cast' ISeq (RT'first ___s)), ___thistag, ___overrideables))]
                                                            (ยง ass ___methods (RT'conj ___methods, ___m))
                                                        )
                                                    )

                                                    (ยง ass (:methods ___ret) ___methods)
                                                    (ยง ass (:keywords ___ret) (cast' IPersistentMap (.deref Compiler'KEYWORDS)))
                                                    (ยง ass (:vars ___ret) (cast' IPersistentMap (.deref Compiler'VARS)))
                                                    (ยง ass (:constants ___ret) (cast' PersistentVector (.deref Compiler'CONSTANTS)))
                                                    (ยง ass (:constantsID ___ret) (RT'nextID))
                                                    (ยง ass (:keywordCallsites ___ret) (cast' IPersistentVector (.deref Compiler'KEYWORD_CALLSITES)))
                                                    (ยง ass (:protocolCallsites ___ret) (cast' IPersistentVector (.deref Compiler'PROTOCOL_CALLSITES)))
                                                    (ยง ass (:varCallsites ___ret) (cast' IPersistentSet (.deref Compiler'VAR_CALLSITES)))
                                                )
                                                (finally
                                                    (when (.isDeftype ___ret)
                                                        (Var'popThreadBindings)
                                                    )
                                                    (Var'popThreadBindings)
                                                )
                                            )

                                            (try
                                                (ร ___ret.compile(slashname(___superClass), ___inames, false))
                                                (catch IOException ___e
                                                    (throw (Util'sneakyThrow ___e))
                                                )
                                            )
                                            (.getCompiledClass ___ret)
                                            ___ret
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )

    ;;;
     ; Current host interop uses reflection, which requires pre-existing classes
     ; Work around this by:
     ; Generate a stub class that has the same interfaces and fields as the class we are generating.
     ; Use it as a type hint for this, and bind the simple name of the class to this stub (in resolve etc)
     ; Unmunge the name (using a magic prefix) on any code gen for classes
     ;;
    (defn #_"Class" NewInstanceExpr'compileStub [#_"String" ___superName, #_"NewInstanceExpr" ___ret, #_"String[]" ___interfaceNames, #_"Object" ___frm]
        (let [#_"ClassWriter" ___cw (ClassWriter. ClassWriter/COMPUTE_MAXS)]
            (let [#_"ClassVisitor" ___cv ___cw]
                (.visit ___cv, Opcodes/V1_5, (+ Opcodes/ACC_PUBLIC Opcodes/ACC_SUPER), (str Compiler'COMPILE_STUB_PREFIX "/" (:internalName ___ret)), nil, ___superName, ___interfaceNames)

                ;; instance fields for closed-overs
                (loop-when-recur [#_"ISeq" ___s (RT'keys (:closes ___ret))] (some? ___s) [(next ___s)]
                    (let [#_"LocalBinding" ___lb (cast' LocalBinding (first ___s))]
                        (let [#_"int" ___access (+ Opcodes/ACC_PUBLIC (if (.isVolatile ___ret, ___lb) Opcodes/ACC_VOLATILE (if (.isMutable ___ret, ___lb) 0 Opcodes/ACC_FINAL)))]
                            (if (some? (.getPrimitiveType ___lb))
                                (do
                                    (ร ___cv.visitField(___access, (:name ___lb), Type/getType((.getPrimitiveType ___lb)).getDescriptor(), nil, nil))
                                )
                                (do
                                    ;; todo - when closed-overs are fields, use more specific types here and in ctor and emitLocal?
                                    (ร ___cv.visitField(___access, (:name ___lb), Compiler'OBJECT_TYPE.getDescriptor(), nil, nil))
                                )
                            )
                        )
                    )
                )

                ;; ctor that takes closed-overs and does nothing
                (let [#_"Method" ___m (Method. "<init>", Type/VOID_TYPE, (.ctorTypes ___ret))]
                    (let [#_"GeneratorAdapter" ___ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___m, nil, nil, ___cv)]
                        (.visitCode ___ctorgen)
                        (.loadThis ___ctorgen)
                        (ร ___ctorgen.invokeConstructor(Type/getObjectType(___superName), voidctor))
                        (.returnValue ___ctorgen)
                        (.endMethod ___ctorgen)

                        (when (pos? (:altCtorDrops ___ret))
                            (let [#_"Type[]" ___ctorTypes (.ctorTypes ___ret)]
                                (let [#_"Type[]" ___altCtorTypes (make-array Type (- (ยง alength ___ctorTypes) (:altCtorDrops ___ret)))]
                                    (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___altCtorTypes)) [(inc ___i)]
                                        (ยง ass (ยง aget ___altCtorTypes ___i) (ยง aget ___ctorTypes ___i))
                                    )
                                    (let [#_"Method" ___alt (Method. "<init>", Type/VOID_TYPE, ___altCtorTypes)]
                                        (ยง ass ___ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___alt, nil, nil, ___cv))
                                        (.visitCode ___ctorgen)
                                        (.loadThis ___ctorgen)
                                        (.loadArgs ___ctorgen)

                                        (.visitInsn ___ctorgen, Opcodes/ACONST_NULL) ;; __meta
                                        (.visitInsn ___ctorgen, Opcodes/ACONST_NULL) ;; __extmap
                                        (.visitInsn ___ctorgen, Opcodes/ICONST_0) ;; __hash
                                        (.visitInsn ___ctorgen, Opcodes/ICONST_0) ;; __hasheq

                                        (.invokeConstructor ___ctorgen, (Type/getObjectType (str Compiler'COMPILE_STUB_PREFIX "/" (:internalName ___ret))), (Method. "<init>", Type/VOID_TYPE, ___ctorTypes))

                                        (.returnValue ___ctorgen)
                                        (.endMethod ___ctorgen)

                                        ;; alt ctor no __hash, __hasheq
                                        (ยง ass ___altCtorTypes (make-array Type (- (ยง alength ___ctorTypes) 2)))
                                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___altCtorTypes)) [(inc ___i)]
                                            (ยง ass (ยง aget ___altCtorTypes ___i) (ยง aget ___ctorTypes ___i))
                                        )

                                        (ยง ass ___alt (Method. "<init>", Type/VOID_TYPE, ___altCtorTypes))
                                        (ยง ass ___ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___alt, nil, nil, ___cv))
                                        (.visitCode ___ctorgen)
                                        (.loadThis ___ctorgen)
                                        (.loadArgs ___ctorgen)

                                        (.visitInsn ___ctorgen, Opcodes/ICONST_0) ;; __hash
                                        (.visitInsn ___ctorgen, Opcodes/ICONST_0) ;; __hasheq

                                        (.invokeConstructor ___ctorgen, (Type/getObjectType (str Compiler'COMPILE_STUB_PREFIX "/" (:internalName ___ret))), (Method. "<init>", Type/VOID_TYPE, ___ctorTypes))

                                        (.returnValue ___ctorgen)
                                        (.endMethod ___ctorgen)
                                    )
                                )
                            )
                        )
                        ;; end of class
                        (.visitEnd ___cv)

                        (let [#_"byte[]" ___bytecode (.toByteArray ___cw)]
                            (let [#_"DynamicClassLoader" ___loader (cast' DynamicClassLoader (.deref Compiler'LOADER))]
                                (.defineClass ___loader, (str Compiler'COMPILE_STUB_PREFIX "." (:name ___ret)), ___bytecode, ___frm)
                            )
                        )
                    )
                )
            )
        )
    )

    (defn #_"String[]" NewInstanceExpr'interfaceNames [#_"IPersistentVector" ___interfaces]
        (let [#_"int" ___icnt (count ___interfaces)]
            (let [#_"String[]" ___inames (when (pos? ___icnt) (make-array String ___icnt))]
                (loop-when-recur [#_"int" ___i 0] (< ___i ___icnt) [(inc ___i)]
                    (ยง ass (ยง aget ___inames ___i) (ร slashname((cast Class (.nth ___interfaces, ___i)))))
                )
                ___inames
            )
        )
    )

    (defn #_"String" NewInstanceExpr'slashname [#_"Class" ___c]
        (ร (.getName ___c).replace(\., \/))
    )

    #_protected
    #_method
    (ยง defn #_"void" (ยง method emitStatics) [#_"NewInstanceExpr" this, #_"ClassVisitor" ___cv]
        (when (.isDeftype this)
            ;; getBasis()
            (let [#_"Method" ___meth (Method/getMethod "cloiure.lang.IPersistentVector getBasis()")]
                (let [#_"GeneratorAdapter" ___gen (GeneratorAdapter. (+ Opcodes/ACC_PUBLIC Opcodes/ACC_STATIC), ___meth, nil, nil, ___cv)]
                    (.emitValue this, (:hintedFields this), ___gen)
                    (.returnValue ___gen)
                    (.endMethod ___gen)

                    (when (and (.isDeftype this) (< (.count (:hintedFields this)) (.count (:fields this))))
                        ;; create(IPersistentMap)
                        (let [#_"String" ___className (ร (:name this).replace(\., \/))]
                            (let [#_"int" ___i 1]
                                (let [#_"int" ___fieldCount (count (:hintedFields this))]
                                    (let [#_"MethodVisitor" ___mv (.visitMethod ___cv, (+ Opcodes/ACC_PUBLIC Opcodes/ACC_STATIC), "create", (str "(Lcloiure/lang/IPersistentMap;)L" ___className ";"), nil, nil)]
                                        (.visitCode ___mv)

                                        (loop-when-recur [#_"ISeq" ___s (RT'seq (:hintedFields this)) ___i ___i] (some? ___s) [(next ___s) (inc ___i)]
                                            (let [#_"String" ___bName (:name (cast' Symbol (first ___s)))]
                                                (let [#_"Class" ___k (ร Compiler'tagClass(Compiler'tagOf((first ___s))))]
                                                    (.visitVarInsn ___mv, Opcodes/ALOAD, 0)
                                                    (.visitLdcInsn ___mv, ___bName)
                                                    (.visitMethodInsn ___mv, Opcodes/INVOKESTATIC, "cloiure/lang/Keyword", "intern", "(Ljava/lang/String;)Lcloiure/lang/Keyword;")
                                                    (.visitInsn ___mv, Opcodes/ACONST_NULL)
                                                    (.visitMethodInsn ___mv, Opcodes/INVOKEINTERFACE, "cloiure/lang/IPersistentMap", "valAt", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
                                                    (when (.isPrimitive ___k)
                                                        (ร ___mv.visitTypeInsn(Opcodes/CHECKCAST, Type/getType(Compiler'boxClass(___k)).getInternalName()))
                                                    )
                                                    (.visitVarInsn ___mv, Opcodes/ASTORE, ___i)
                                                    (.visitVarInsn ___mv, Opcodes/ALOAD, 0)
                                                    (.visitLdcInsn ___mv, ___bName)
                                                    (.visitMethodInsn ___mv, Opcodes/INVOKESTATIC, "cloiure/lang/Keyword", "intern", "(Ljava/lang/String;)Lcloiure/lang/Keyword;")
                                                    (.visitMethodInsn ___mv, Opcodes/INVOKEINTERFACE, "cloiure/lang/IPersistentMap", "without", "(Ljava/lang/Object;)Lcloiure/lang/IPersistentMap;")
                                                    (.visitVarInsn ___mv, Opcodes/ASTORE, 0)
                                                )
                                            )
                                        )

                                        (.visitTypeInsn ___mv, Opcodes/NEW, ___className)
                                        (.visitInsn ___mv, Opcodes/DUP)

                                        (let [#_"Method" ___ctor (Method. "<init>", Type/VOID_TYPE, (.ctorTypes this))]
                                            (when (pos? (.count (:hintedFields this)))
                                                (loop-when-recur [___i 1] (<= ___i ___fieldCount) [(inc ___i)]
                                                    (.visitVarInsn ___mv, Opcodes/ALOAD, ___i)
                                                    (let [#_"Class" ___k (ร Compiler'tagClass(Compiler'tagOf((:hintedFields this).nth(___i - 1))))]
                                                        (when (.isPrimitive ___k)
                                                            (let [#_"String" ___b (ร Type/getType(Compiler'boxClass(___k)).getInternalName())]
                                                                (let [#_"String" ___p (ร Type/getType(___k).getDescriptor())]
                                                                    (let [#_"String" ___n (.getName ___k)]
                                                                        (.visitMethodInsn ___mv, Opcodes/INVOKEVIRTUAL, ___b, (str ___n "Value"), (str "()" ___p))
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )

                                            (.visitInsn ___mv, Opcodes/ACONST_NULL) ;; __meta
                                            (.visitVarInsn ___mv, Opcodes/ALOAD, 0) ;; __extmap
                                            (.visitMethodInsn ___mv, Opcodes/INVOKESTATIC, "cloiure/lang/RT", "seqOrElse", "(Ljava/lang/Object;)Ljava/lang/Object;")
                                            (.visitInsn ___mv, Opcodes/ICONST_0) ;; __hash
                                            (.visitInsn ___mv, Opcodes/ICONST_0) ;; __hasheq
                                            (ร ___mv.visitMethodInsn(Opcodes/INVOKESPECIAL, ___className, "<init>", (.getDescriptor ___ctor)))
                                            (.visitInsn ___mv, Opcodes/ARETURN)
                                            (ร ___mv.visitMaxs(4 + ___fieldCount, 1 + ___fieldCount))
                                            (.visitEnd ___mv)
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    #_protected
    #_method
    (ยง defn #_"void" (ยง method emitMethods) [#_"NewInstanceExpr" this, #_"ClassVisitor" ___cv]
        (loop-when-recur [#_"ISeq" ___s (RT'seq (:methods this))] (some? ___s) [(next ___s)]
            (let [#_"ObjMethod" ___method (cast' ObjMethod (first ___s))]
                (.emit ___method, this, ___cv)
            )
        )
        ;; emit bridge methods
        (doseq [#_"Map$Entry<IPersistentVector, Set<Class>>" ___e (.entrySet (:covariants this))]
            (let [#_"java.lang.reflect.Method" ___m (.get (:mmap this), (.getKey ___e))]
                (let [#_"Class[]" ___params (.getParameterTypes ___m)]
                    (let [#_"Type[]" ___argTypes (make-array Type (ยง alength ___params))]
                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___params)) [(inc ___i)]
                            (ยง ass (ยง aget ___argTypes ___i) (Type/getType (ยง aget ___params ___i)))
                        )

                        (let [#_"Method" ___target (Method. (.getName ___m), (Type/getType (.getReturnType ___m)), ___argTypes)]
                            (doseq [#_"Class" ___retType (.getValue ___e)]
                                (let [#_"Method" ___meth (Method. (.getName ___m), (Type/getType ___retType), ___argTypes)]
                                    ;; todo don't hardwire EXCEPTION_TYPES
                                    (let [#_"GeneratorAdapter" ___gen (GeneratorAdapter. (+ Opcodes/ACC_PUBLIC Opcodes/ACC_BRIDGE), ___meth, nil, Compiler'EXCEPTION_TYPES, ___cv)]
                                        (.visitCode ___gen)
                                        (.loadThis ___gen)
                                        (.loadArgs ___gen)
                                        (ร ___gen.invokeInterface(Type/getType((.getDeclaringClass ___m)), ___target))
                                        (.returnValue ___gen)
                                        (.endMethod ___gen)
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    (defn #_"IPersistentVector" NewInstanceExpr'msig [#_"java.lang.reflect.Method" ___m]
        (ร RT'vector((.getName ___m), RT'seq((.getParameterTypes ___m)), (.getReturnType ___m)))
    )

    (defn #_"void" NewInstanceExpr'considerMethod [#_"java.lang.reflect.Method" ___m, #_"Map" ___mm]
        (let [#_"IPersistentVector" ___mk (NewInstanceExpr'msig ___m)]
            (let [#_"int" ___mods (.getModifiers ___m)]
                (when (not (or (.containsKey ___mm, ___mk) (not (or (Modifier/isPublic ___mods) (Modifier/isProtected ___mods))) (Modifier/isStatic ___mods) (Modifier/isFinal ___mods)))
                    (.put ___mm, ___mk, ___m)
                )
                nil
            )
        )
    )

    (defn #_"void" NewInstanceExpr'gatherMethods-2m [#_"Class" ___c, #_"Map" ___mm]
        (loop-when-recur [___c ___c] (some? ___c) [(.getSuperclass ___c)]
            (doseq [#_"java.lang.reflect.Method" ___m (.getDeclaredMethods ___c)]
                (NewInstanceExpr'considerMethod ___m, ___mm)
            )
            (doseq [#_"java.lang.reflect.Method" ___m (.getMethods ___c)]
                (NewInstanceExpr'considerMethod ___m, ___mm)
            )
        )
        nil
    )

    (defn #_"Map[]" NewInstanceExpr'gatherMethods-2s [#_"Class" ___sc, #_"ISeq" ___interfaces]
        (let [#_"Map" ___allm (HashMap.)]
            (NewInstanceExpr'gatherMethods-2m ___sc, ___allm)
            (loop-when-recur [___interfaces ___interfaces] (some? ___interfaces) [(next ___interfaces)]
                (ร NewInstanceExpr'gatherMethods-2m((cast Class (first ___interfaces)), ___allm))
            )

            (let [#_"Map<IPersistentVector, java.lang.reflect.Method>" ___mm (HashMap.)]
                (let [#_"Map<IPersistentVector, Set<Class>>" ___covariants (HashMap.)]
                    (doseq [#_"Object" ___o (.entrySet ___allm)]
                        (let [#_"Map$Entry" ___e (cast Map$Entry ___o)]
                            (let [#_"IPersistentVector" ___mk (cast' IPersistentVector (.getKey ___e))]
                                (ยง ass ___mk (cast' IPersistentVector (.pop ___mk)))
                                (let [#_"java.lang.reflect.Method" ___m (ร (java.lang.reflect.Method) (.getValue ___e))]
                                    (if (.containsKey ___mm, ___mk) ;; covariant return
                                        (do
                                            (let [#_"Set<Class>" ___cvs (.get ___covariants, ___mk)]
                                                (when (nil? ___cvs)
                                                    (ยง ass ___cvs (HashSet.))
                                                    (.put ___covariants, ___mk, ___cvs)
                                                )
                                                (let [#_"java.lang.reflect.Method" ___om (.get ___mm, ___mk)]
                                                    (if (.isAssignableFrom (.getReturnType ___om), (.getReturnType ___m))
                                                        (do
                                                            (.add ___cvs, (.getReturnType ___om))
                                                            (.put ___mm, ___mk, ___m)
                                                        )
                                                        (do
                                                            (.add ___cvs, (.getReturnType ___m))
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        (do
                                            (.put ___mm, ___mk, ___m)
                                        )
                                    )
                                )
                            )
                        )
                    )
                    (ร new Map[] (object-array [ ___mm, ___covariants ]))
                )
            )
        )
    )
)

(class-ns NewInstanceMethod (ยง extends ObjMethod)
    (ยง def #_"Symbol" NewInstanceMethod'dummyThis (Symbol'intern-2 nil, "dummy_this_dlskjsdfower"))

    (defn- #_"NewInstanceMethod" NewInstanceMethod'init []
        (hash-map
            #_"String" :name nil
            #_"Type[]" :argTypes nil
            #_"Type" :retType nil
            #_"Class" :retClass nil
            #_"Class[]" :exclasses nil

            #_"IPersistentVector" :parms nil
        )
    )

    (defn #_"NewInstanceMethod" NewInstanceMethod'new [#_"ObjExpr" ___objx, #_"ObjMethod" ___parent]
        (merge (ObjMethod'new ___objx, ___parent) (NewInstanceMethod'init))
    )

    #_method
    (ยง defn #_"int" (ยง method numParams) [#_"NewInstanceMethod" this]
        (count (:argLocals this))
    )

    #_method
    (ยง defn #_"String" (ยง method getMethodName) [#_"NewInstanceMethod" this]
        (:name this)
    )

    #_method
    (ยง defn #_"Type" (ยง method getReturnType) [#_"NewInstanceMethod" this]
        (:retType this)
    )

    #_method
    (ยง defn #_"Type[]" (ยง method getArgTypes) [#_"NewInstanceMethod" this]
        (:argTypes this)
    )

    (defn #_"IPersistentVector" NewInstanceMethod'msig [#_"String" ___name, #_"Class[]" ___paramTypes]
        (ร RT'vector(___name, RT'seq(___paramTypes)))
    )

    (defn #_"NewInstanceMethod" NewInstanceMethod'parse [#_"ObjExpr" ___objx, #_"ISeq" ___form, #_"Symbol" ___thistag, #_"Map" ___overrideables]
        ;; (methodname [this-name args*] body...)
        ;; this-name might be nil
        (let [#_"NewInstanceMethod" ___method (ร NewInstanceMethod'new(___objx, (cast' ObjMethod (.deref Compiler'METHOD))))]
            (let [#_"Symbol" ___dotname (cast' Symbol (RT'first ___form))]
                (let [#_"Symbol" ___name (cast' Symbol (ร Symbol'intern-2(nil, Compiler'munge((:name ___dotname))).withMeta(RT'meta(___dotname))))]
                    (let [#_"IPersistentVector" ___parms (cast' IPersistentVector (RT'second ___form))]
                        (when (zero? (count ___parms))
                            (throw (IllegalArgumentException. (str "Must supply at least one argument for 'this' in: " ___dotname)))
                        )
                        (let [#_"Symbol" ___thisName (cast' Symbol (.nth ___parms, 0))]
                            (ยง ass ___parms (ร RT'subvec(___parms, 1, (count ___parms))))
                            (let [#_"ISeq" ___body (ร RT'next(RT'next(___form)))]
                                (try
                                    (ยง ass (:line ___method) (Compiler'lineDeref))
                                    (ยง ass (:column ___method) (Compiler'columnDeref))
                                    ;; register as the current method and set up a new env frame
                                    (let [#_"PathNode" ___pnode (ร PathNode'new(:PathType'PATH, (cast' PathNode (.get Compiler'CLEAR_PATH))))]
                                        (ร Var'pushThreadBindings(RT'mapUniqueKeys(
                                            (object-array [
                                                Compiler'METHOD                ___method
                                                Compiler'LOCAL_ENV             (.deref Compiler'LOCAL_ENV)
                                                Compiler'LOOP_LOCALS           nil
                                                Compiler'NEXT_LOCAL_NUM        0
                                                Compiler'CLEAR_PATH            ___pnode
                                                Compiler'CLEAR_ROOT            ___pnode
                                                Compiler'CLEAR_SITES           PersistentHashMap'EMPTY
                                                Compiler'METHOD_RETURN_CONTEXT RT'T
                                            ])
                                        )))

                                        ;; register 'this' as local 0
                                        (if (some? ___thisName)
                                            (do
                                                (Compiler'registerLocal (or ___thisName NewInstanceMethod'dummyThis), ___thistag, nil, false)
                                            )
                                            (do
                                                (Compiler'getAndIncLocalNum)
                                            )
                                        )

                                        (let [#_"PersistentVector" ___argLocals PersistentVector'EMPTY]
                                            (ยง ass (:retClass ___method) (ร Compiler'tagClass(Compiler'tagOf(___name))))
                                            (ยง ass (:argTypes ___method) (make-array Type (count ___parms)))
                                            (let [#_"boolean" ___hinted (some? (Compiler'tagOf ___name))]
                                                (let [#_"Class[]" ___pclasses (make-array Class (count ___parms))]
                                                    (let [#_"Symbol[]" ___psyms (ยง typeless make-array Symbol (count ___parms))]
                                                        (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___parms)) [(inc ___i)]
                                                            (when (not (ยง instance? Symbol (.nth ___parms, ___i)))
                                                                (throw (IllegalArgumentException. "params must be Symbols"))
                                                            )
                                                            (let [#_"Symbol" ___p (cast' Symbol (.nth ___parms, ___i))]
                                                                (let [#_"Object" ___tag (Compiler'tagOf ___p)]
                                                                    (when (some? ___tag)
                                                                        (ยง ass ___hinted true)
                                                                    )
                                                                    (when (some? (.getNamespace ___p))
                                                                        (ยง ass ___p (ร Symbol'intern-1((:name ___p))))
                                                                    )
                                                                    (let [#_"Class" ___pclass (Compiler'tagClass ___tag)]
                                                                        (ยง ass (ยง aget ___pclasses ___i) ___pclass)
                                                                        (ยง ass (ยง aget ___psyms ___i) ___p)
                                                                    )
                                                                )
                                                            )
                                                        )
                                                        (let [#_"Map" ___matches (ร findMethodsWithNameAndArity((:name ___name), (count ___parms), ___overrideables))]
                                                            (let [#_"Object" ___mk (ร NewInstanceMethod'msig((:name ___name), ___pclasses))]
                                                                (let [#_"java.lang.reflect.Method" ___m nil]
                                                                    (if (pos? (.size ___matches))
                                                                        (do
                                                                            ;; multiple methods
                                                                            (cond (ร (.size ___matches) > 1)
                                                                                (do
                                                                                    ;; must be hinted and match one method
                                                                                    (when (not ___hinted)
                                                                                        (throw (IllegalArgumentException. (str "Must hint overloaded method: " (:name ___name))))
                                                                                    )
                                                                                    (ยง ass ___m (ร (java.lang.reflect.Method) ___matches.get(___mk)))
                                                                                    (when (nil? ___m)
                                                                                        (throw (IllegalArgumentException. (str "Can't find matching overloaded method: " (:name ___name))))
                                                                                    )
                                                                                    (when (ร (.getReturnType ___m) != (:retClass ___method))
                                                                                        (throw (IllegalArgumentException. (str "Mismatched return type: " (:name ___name) ", expected: " (.getName (.getReturnType ___m)) ", had: " (.getName (:retClass ___method)))))
                                                                                    )
                                                                                )
                                                                                :else ;; one match
                                                                                (do
                                                                                    ;; if hinted, validate match
                                                                                    (cond ___hinted
                                                                                        (do
                                                                                            (ยง ass ___m (ร (java.lang.reflect.Method) ___matches.get(___mk)))
                                                                                            (when (nil? ___m)
                                                                                                (throw (IllegalArgumentException. (str "Can't find matching method: " (:name ___name) ", leave off hints for auto match.")))
                                                                                            )
                                                                                            (when (ร (.getReturnType ___m) != (:retClass ___method))
                                                                                                (throw (IllegalArgumentException. (str "Mismatched return type: " (:name ___name) ", expected: " (.getName (.getReturnType ___m)) ", had: " (.getName (:retClass ___method)))))
                                                                                            )
                                                                                        )
                                                                                        :else ;; adopt found method sig
                                                                                        (do
                                                                                            (ยง ass ___m (ร (java.lang.reflect.Method) (.values ___matches).iterator().next()))
                                                                                            (ยง ass (:retClass ___method) (.getReturnType ___m))
                                                                                            (ยง ass ___pclasses (.getParameterTypes ___m))
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                        (do
                                                                            (throw (IllegalArgumentException. (str "Can't define method not in interfaces: " (:name ___name))))
                                                                        )
                                                                    )

                                                                    ;; validate unque name+arity among additional methods

                                                                    (ยง ass (:retType ___method) (Type/getType (:retClass ___method)))
                                                                    (ยง ass (:exclasses ___method) (.getExceptionTypes ___m))

                                                                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___parms)) [(inc ___i)]
                                                                        (let [#_"LocalBinding" ___lb (ร Compiler'registerLocal(___psyms[___i], nil, MethodParamExpr'new(___pclasses[___i]), true))]
                                                                            (ยง ass ___argLocals (.assocN ___argLocals, ___i, ___lb))
                                                                            (ยง ass (ยง aget (:argTypes ___method) ___i) (Type/getType (ยง aget ___pclasses ___i)))
                                                                        )
                                                                    )
                                                                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___parms)) [(inc ___i)]
                                                                        (when (or (ร ___pclasses[___i] == Long/TYPE) (ร ___pclasses[___i] == Double/TYPE))
                                                                            (Compiler'getAndIncLocalNum)
                                                                        )
                                                                    )
                                                                    (.set Compiler'LOOP_LOCALS, ___argLocals)
                                                                    (ยง ass (:name ___method) (:name ___name))
                                                                    (ยง ass (:methodMeta ___method) (RT'meta ___name))
                                                                    (ยง ass (:parms ___method) ___parms)
                                                                    (ยง ass (:argLocals ___method) ___argLocals)
                                                                    (ยง ass (:body ___method) (ร (BodyParser'new()).parse(:Context'RETURN, ___body)))
                                                                    ___method
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                    (finally
                                        (Var'popThreadBindings)
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )

    (defn- #_"Map" NewInstanceMethod'findMethodsWithNameAndArity [#_"String" ___name, #_"int" ___arity, #_"Map" ___mm]
        (let [#_"Map" ___ret (HashMap.)]
            (doseq [#_"Object" ___o (.entrySet ___mm)]
                (let [#_"Map$Entry" ___e (cast Map$Entry ___o)]
                    (let [#_"java.lang.reflect.Method" ___m (ร (java.lang.reflect.Method) (.getValue ___e))]
                        (when (and (.equals ___name, (.getName ___m)) (ร (ยง alength (.getParameterTypes ___m)) == ___arity))
                            (ร ___ret.put((.getKey ___e), (.getValue ___e)))
                        )
                    )
                )
            )
            ___ret
        )
    )

    (defn- #_"Map" NewInstanceMethod'findMethodsWithName [#_"String" ___name, #_"Map" ___mm]
        (let [#_"Map" ___ret (HashMap.)]
            (doseq [#_"Object" ___o (.entrySet ___mm)]
                (let [#_"Map$Entry" ___e (cast Map$Entry ___o)]
                    (let [#_"java.lang.reflect.Method" ___m (ร (java.lang.reflect.Method) (.getValue ___e))]
                        (when (.equals ___name, (.getName ___m))
                            (ร ___ret.put((.getKey ___e), (.getValue ___e)))
                        )
                    )
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"NewInstanceMethod" this, #_"ObjExpr" ___obj, #_"ClassVisitor" ___cv]
        (let [#_"Method" ___m (Method. (.getMethodName this), (.getReturnType this), (.getArgTypes this))]
            (let [#_"Type[]" ___extypes nil]
                (when (pos? (ยง alength (:exclasses this)))
                    (ยง ass ___extypes (make-array Type (ยง alength (:exclasses this))))
                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength (:exclasses this))) [(inc ___i)]
                        (ยง ass (ยง aget ___extypes ___i) (Type/getType (ยง aget (:exclasses this) ___i)))
                    )
                )
                (let [#_"GeneratorAdapter" ___gen (GeneratorAdapter. Opcodes/ACC_PUBLIC, ___m, nil, ___extypes, ___cv)]
                    (ร Compiler'addAnnotation(___gen, (:methodMeta this)))
                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (:parms this).count()) [(inc ___i)]
                        (let [#_"IPersistentMap" ___meta (ร RT'meta((:parms this).nth(___i)))]
                            (Compiler'addParameterAnnotation ___gen, ___meta, ___i)
                        )
                    )
                    (.visitCode ___gen)

                    (let [#_"Label" ___loopLabel (.mark ___gen)]
                        (.visitLineNumber ___gen, (:line this), ___loopLabel)
                        (try
                            (ร Var'pushThreadBindings(RT'map(Compiler'LOOP_LABEL, ___loopLabel, Compiler'METHOD, this)))

                            (ร emitBody((:objx this), ___gen, (:retClass this), (:body this)))
                            (let [#_"Label" ___end (.mark ___gen)]
                                (ร ___gen.visitLocalVariable("this", (:objtype ___obj).getDescriptor(), nil, ___loopLabel, ___end, 0))
                                (loop-when-recur [#_"ISeq" ___lbs (.seq (:argLocals this))] (some? ___lbs) [(next ___lbs)]
                                    (let [#_"LocalBinding" ___lb (cast' LocalBinding (first ___lbs))]
                                        (ร ___gen.visitLocalVariable((:name ___lb), (:argTypes this)[___lb.idx - 1].getDescriptor(), nil, ___loopLabel, ___end, (:idx ___lb)))
                                    )
                                )
                            )
                            (finally
                                (Var'popThreadBindings)
                            )
                        )

                        (.returnValue ___gen)
                        (.endMethod ___gen)
                        nil
                    )
                )
            )
        )
    )
)

(class-ns MethodParamExpr (ยง implements Expr, MaybePrimitiveExpr)
    (defn- #_"MethodParamExpr" MethodParamExpr'init []
        (hash-map
            #_"Class" :c nil
        )
    )

    (defn #_"MethodParamExpr" MethodParamExpr'new [#_"Class" ___c]
        (let [this (MethodParamExpr'init)]
            (ยง ass (:c this) ___c)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"MethodParamExpr" this]
        (throw (Util'runtimeException-1 "Can't eval"))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"MethodParamExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (throw (Util'runtimeException-1 "Can't emit"))
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"MethodParamExpr" this]
        (some? (:c this))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"MethodParamExpr" this]
        (:c this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"MethodParamExpr" this]
        (Util'isPrimitive (:c this))
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"MethodParamExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (throw (Util'runtimeException-1 "Can't emit"))
    )
)

#_closure
(class-ns CaseParser (ยง implements IParser)
    (defn #_"CaseParser" CaseParser'new []
        (hash-map)
    )

    ;; (case* expr shift mask default map<minhash, [test then]> table-type test-type skip-check?)
    ;; prepared by case macro and presumed correct
    ;; case macro binds actual expr in let so expr is always a local,
    ;; no need to worry about multiple evaluation
    #_method
    (ยง defn #_"Expr" (ยง method parse) [#_"CaseParser" this, #_"Context" ___context, #_"Object" ___frm]
        (let [#_"ISeq" ___form (cast' ISeq ___frm)]
            (when (ร ___context == :Context'EVAL)
                (ยง return (ร Compiler'analyze-2(___context, RT'list-1(RT'list-3(Compiler'FNONCE, PersistentVector'EMPTY, ___form)))))
            )
            (let [#_"IPersistentVector" ___args (LazilyPersistentVector'create (next ___form))]
                (let [#_"Object" ___exprForm (.nth ___args, 0)]
                    (let [#_"int" ___shift (.intValue (cast Number (.nth ___args, 1)))]
                        (let [#_"int" ___mask (.intValue (cast Number (.nth ___args, 2)))]
                            (let [#_"Object" ___defaultForm (.nth ___args, 3)]
                                (let [#_"Map" ___caseMap (cast Map (.nth ___args, 4))]
                                    (let [#_"Keyword" ___switchType (ร (cast' Keyword (.nth ___args, 5)))]
                                        (let [#_"Keyword" ___testType (ร (cast' Keyword (.nth ___args, 6)))]
                                            (let [#_"Set" ___skipCheck (if (< (RT'count ___args) 8) nil (cast Set (.nth ___args, 7)))]
                                                (let [#_"ISeq" ___keys (RT'keys ___caseMap)]
                                                    (let [#_"int" ___low (.intValue (cast Number (RT'first ___keys)))]
                                                        (let [#_"int" ___high (ร (cast Number (ร RT'nth-2(___keys, RT'count(___keys) - 1))).intValue())]
                                                            (let [#_"LocalBindingExpr" ___testexpr (cast' LocalBindingExpr (ร Compiler'analyze-2(:Context'EXPRESSION, ___exprForm)))]
                                                                (ยง ass (:shouldClear ___testexpr) false)

                                                                (let [#_"SortedMap<Integer, Expr>" ___tests (TreeMap.)]
                                                                    (let [#_"HashMap<Integer, Expr>" ___thens (HashMap.)]
                                                                        (let [#_"PathNode" ___branch (ร PathNode'new(:PathType'BRANCH, (cast' PathNode (.get Compiler'CLEAR_PATH))))]
                                                                            (doseq [#_"Object" ___o (.entrySet ___caseMap)]
                                                                                (let [#_"Map$Entry" ___e (cast Map$Entry ___o)]
                                                                                    (let [#_"Integer" ___minhash (.intValue (cast Number (.getKey ___e)))]
                                                                                        (let [#_"Object" ___pair (.getValue ___e)] ;; [test-val then-expr]
                                                                                            (let [#_"Expr" ___testExpr (if (= ___testType intKey) (NumberExpr'parse (.intValue (cast Number (RT'first ___pair)))) (ConstantExpr'new (RT'first ___pair)))]
                                                                                                (.put ___tests, ___minhash, ___testExpr)

                                                                                                (ยง let [#_"Expr" ___thenExpr]
                                                                                                    (try
                                                                                                        (ร Var'pushThreadBindings(RT'map(Compiler'CLEAR_PATH, PathNode'new(:PathType'PATH, ___branch))))
                                                                                                        (ยง ass ___thenExpr (ร Compiler'analyze-2(___context, RT'second(___pair))))
                                                                                                        (finally
                                                                                                            (Var'popThreadBindings)
                                                                                                        )
                                                                                                    )
                                                                                                    (.put ___thens, ___minhash, ___thenExpr)
                                                                                                )
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )

                                                                            (ยง let [#_"Expr" ___defaultExpr]
                                                                                (try
                                                                                    (ร Var'pushThreadBindings(RT'map(Compiler'CLEAR_PATH, PathNode'new(:PathType'PATH, ___branch))))
                                                                                    (ยง ass ___defaultExpr (ร Compiler'analyze-2(___context, ___args.nth(3))))
                                                                                    (finally
                                                                                        (Var'popThreadBindings)
                                                                                    )
                                                                                )

                                                                                (let [#_"int" ___line (.intValue (cast Number (.deref Compiler'LINE)))]
                                                                                    (let [#_"int" ___column (.intValue (cast Number (.deref Compiler'COLUMN)))]
                                                                                        (CaseExpr'new ___line, ___column, ___testexpr, ___shift, ___mask, ___low, ___high, ___defaultExpr, ___tests, ___thens, ___switchType, ___testType, ___skipCheck)
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns CaseExpr (ยง implements Expr, MaybePrimitiveExpr)
    (def #_"Type" CaseExpr'NUMBER_TYPE (Type/getType Number))
    (def #_"Method" CaseExpr'intValueMethod (Method/getMethod "int intValue()"))

    (def #_"Method" CaseExpr'hashMethod (Method/getMethod "int hash(Object)"))
    (def #_"Method" CaseExpr'hashCodeMethod (Method/getMethod "int hashCode()"))
    (def #_"Method" CaseExpr'equivMethod (Method/getMethod "boolean equiv(Object, Object)"))
    (ยง def #_"Keyword" CaseExpr'compactKey (Keyword'intern-2 nil, "compact"))
    (ยง def #_"Keyword" CaseExpr'sparseKey (Keyword'intern-2 nil, "sparse"))
    (ยง def #_"Keyword" CaseExpr'hashIdentityKey (Keyword'intern-2 nil, "hash-identity"))
    (ยง def #_"Keyword" CaseExpr'hashEquivKey (Keyword'intern-2 nil, "hash-equiv"))
    (ยง def #_"Keyword" CaseExpr'intKey (Keyword'intern-2 nil, "int"))

    (defn- #_"CaseExpr" CaseExpr'init []
        (hash-map
            #_"LocalBindingExpr" :expr nil
            #_"int" :shift 0
            #_"int" :mask 0
            #_"int" :low 0
            #_"int" :high 0
            #_"Expr" :defaultExpr nil
            #_"SortedMap<Integer, Expr>" :tests nil
            #_"HashMap<Integer, Expr>" :thens nil
            #_"Keyword" :switchType nil
            #_"Keyword" :testType nil
            #_"Set<Integer>" :skipCheck nil
            #_"Class" :returnType nil
            #_"int" :line 0
            #_"int" :column 0
        )
    )

    ;; (case* expr shift mask default map<minhash, [test then]> table-type test-type skip-check?)
    (defn #_"CaseExpr" CaseExpr'new [#_"int" ___line, #_"int" ___column, #_"LocalBindingExpr" ___expr, #_"int" ___shift, #_"int" ___mask, #_"int" ___low, #_"int" ___high, #_"Expr" ___defaultExpr, #_"SortedMap<Integer, Expr>" ___tests, #_"HashMap<Integer, Expr>" ___thens, #_"Keyword" ___switchType, #_"Keyword" ___testType, #_"Set<Integer>" ___skipCheck]
        (let [this (CaseExpr'init)]
            (ยง ass (:expr this) ___expr)
            (ยง ass (:shift this) ___shift)
            (ยง ass (:mask this) ___mask)
            (ยง ass (:low this) ___low)
            (ยง ass (:high this) ___high)
            (ยง ass (:defaultExpr this) ___defaultExpr)
            (ยง ass (:tests this) ___tests)
            (ยง ass (:thens this) ___thens)
            (ยง ass (:line this) ___line)
            (ยง ass (:column this) ___column)
            (when (and (ร ___switchType != compactKey) (ร ___switchType != sparseKey))
                (throw (IllegalArgumentException. (str "Unexpected switch type: " ___switchType)))
            )
            (ยง ass (:switchType this) ___switchType)
            (when (and (ร ___testType != intKey) (ร ___testType != hashEquivKey) (ร ___testType != hashIdentityKey))
                (throw (IllegalArgumentException. (str "Unexpected test type: " ___switchType)))
            )
            (ยง ass (:testType this) ___testType)
            (ยง ass (:skipCheck this) ___skipCheck)
            (let [#_"Collection<Expr>" ___returns (ArrayList. (.values ___thens))]
                (.add ___returns, ___defaultExpr)
                (ยง ass (:returnType this) (Compiler'maybeJavaClass ___returns))
                (when (and (pos? (RT'count ___skipCheck)) (RT'booleanCast-1o (.deref RT'WARN_ON_REFLECTION)))
                    (ร RT'errPrintWriter().format("Performance warning, %s:%d:%d - hash collision of some case test constants; if selected, those entries will be tested sequentially.\n", (object-array [ (.deref Compiler'SOURCE_PATH), ___line, ___column ])))
                )
                this
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasJavaClass) [#_"CaseExpr" this]
        (some? (:returnType this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method canEmitPrimitive) [#_"CaseExpr" this]
        (Util'isPrimitive (:returnType this))
    )

    #_method
    (ยง defn #_"Class" (ยง method getJavaClass) [#_"CaseExpr" this]
        (:returnType this)
    )

    #_method
    (ยง defn #_"Object" (ยง method eval) [#_"CaseExpr" this]
        (throw (UnsupportedOperationException. "Can't eval case"))
    )

    #_method
    (ยง defn #_"void" (ยง method emit) [#_"CaseExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.doEmit this, ___context, ___objx, ___gen, false)
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method emitUnboxed) [#_"CaseExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (.doEmit this, ___context, ___objx, ___gen, true)
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method doEmit) [#_"CaseExpr" this, #_"Context" ___context, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"boolean" ___emitUnboxed]
        (let [#_"Label" ___defaultLabel (.newLabel ___gen)]
            (let [#_"Label" ___endLabel (.newLabel ___gen)]
                (let [#_"SortedMap<Integer, Label>" ___labels (TreeMap.)]
                    (doseq [#_"Integer" ___i (.keySet (:tests this))]
                        (ร ___labels.put(___i, (.newLabel ___gen)))
                    )

                    (ร ___gen.visitLineNumber((:line this), (.mark ___gen)))

                    (let [#_"Class" ___primExprClass (Compiler'maybePrimitiveType (:expr this))]
                        (let [#_"Type" ___primExprType (when (some? ___primExprClass) (Type/getType ___primExprClass))]
                            (if (ร (:testType this) == intKey)
                                (do
                                    (.emitExprForInts this, ___objx, ___gen, ___primExprType, ___defaultLabel)
                                )
                                (do
                                    (.emitExprForHashes this, ___objx, ___gen)
                                )
                            )

                            (if (ร (:switchType this) == sparseKey)
                                (do
                                    (let [#_"Label[]" ___la (make-array Label (.size ___labels))]
                                        (ยง ass ___la (ร (.values ___labels).toArray(___la)))
                                        (let [#_"int[]" ___ints (ร Numbers'int_array-1((:tests this).keySet()))]
                                            (.visitLookupSwitchInsn ___gen, ___defaultLabel, ___ints, ___la)
                                        )
                                    )
                                )
                                (do
                                    (let [#_"Label[]" ___la (make-array Label (ร ((:high this) - (:low this)) + 1))]
                                        (loop-when-recur [#_"int" ___i (:low this)] (ร ___i <= (:high this)) [(inc ___i)]
                                            (ยง ass (ยง aget ___la (ร ___i - (:low this))) (if (.containsKey ___labels, ___i) (.get ___labels, ___i) ___defaultLabel))
                                        )
                                        (.visitTableSwitchInsn ___gen, (:low this), (:high this), ___defaultLabel, ___la)
                                    )
                                )
                            )

                            (doseq [#_"Integer" ___i (.keySet ___labels)]
                                (ร ___gen.mark(___labels.get(___i)))
                                (cond (ร (:testType this) == intKey)
                                    (do
                                        (ร this.emitThenForInts(___objx, ___gen, ___primExprType, (:tests this).get(___i), (:thens this).get(___i), ___defaultLabel, ___emitUnboxed))
                                    )
                                    (ร RT'contains((:skipCheck this), ___i) == RT'T)
                                    (do
                                        (ร CaseExpr'emitExpr(___objx, ___gen, (:thens this).get(___i), ___emitUnboxed))
                                    )
                                    :else
                                    (do
                                        (ร this.emitThenForHashes(___objx, ___gen, (:tests this).get(___i), (:thens this).get(___i), ___defaultLabel, ___emitUnboxed))
                                    )
                                )
                                (.goTo ___gen, ___endLabel)
                            )

                            (.mark ___gen, ___defaultLabel)
                            (CaseExpr'emitExpr ___objx, ___gen, (:defaultExpr this), ___emitUnboxed)
                            (.mark ___gen, ___endLabel)
                            (when (ร ___context == :Context'STATEMENT)
                                (.pop ___gen)
                            )
                            nil
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn- #_"boolean" (ยง method isShiftMasked) [#_"CaseExpr" this]
        (ร ((:mask this) != 0))
    )

    #_method
    (ยง defn- #_"void" (ยง method emitShiftMask) [#_"CaseExpr" this, #_"GeneratorAdapter" ___gen]
        (when (.isShiftMasked this)
            (.push ___gen, (:shift this))
            (.visitInsn ___gen, Opcodes/ISHR)
            (.push ___gen, (:mask this))
            (.visitInsn ___gen, Opcodes/IAND)
        )
        nil
    )

    #_method
    (ยง defn- #_"void" (ยง method emitExprForInts) [#_"CaseExpr" this, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Type" ___exprType, #_"Label" ___defaultLabel]
        (cond (nil? ___exprType)
            (do
                (when (ร RT'booleanCast-1o(RT'WARN_ON_REFLECTION.deref()))
                    (ร RT'errPrintWriter().format("Performance warning, %s:%d:%d - case has int tests, but tested expression is not primitive.\n", (object-array [ (.deref Compiler'SOURCE_PATH), (:line this), (:column this) ])))
                )
                (ร (:expr this).emit(:Context'EXPRESSION, ___objx, ___gen))
                (.instanceOf ___gen, CaseExpr'NUMBER_TYPE)
                (.ifZCmp ___gen, GeneratorAdapter/EQ, ___defaultLabel)
                (ร (:expr this).emit(:Context'EXPRESSION, ___objx, ___gen))
                (.checkCast ___gen, CaseExpr'NUMBER_TYPE)
                (.invokeVirtual ___gen, CaseExpr'NUMBER_TYPE, HostExpr'intValueMethod)
                (.emitShiftMask this, ___gen)
            )
            (or (ร ___exprType == Type/LONG_TYPE) (ร ___exprType == Type/INT_TYPE) (ร ___exprType == Type/SHORT_TYPE) (ร ___exprType == Type/BYTE_TYPE))
            (do
                (ร (:expr this).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                (.cast ___gen, ___exprType, Type/INT_TYPE)
                (.emitShiftMask this, ___gen)
            )
            :else
            (do
                (.goTo ___gen, ___defaultLabel)
            )
        )
        nil
    )

    #_method
    (ยง defn- #_"void" (ยง method emitThenForInts) [#_"CaseExpr" this, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Type" ___exprType, #_"Expr" ___test, #_"Expr" ___then, #_"Label" ___defaultLabel, #_"boolean" ___emitUnboxed]
        (cond (nil? ___exprType)
            (do
                (ร (:expr this).emit(:Context'EXPRESSION, ___objx, ___gen))
                (ร ___test.emit(:Context'EXPRESSION, ___objx, ___gen))
                (.invokeStatic ___gen, Compiler'UTIL_TYPE, equivMethod)
                (.ifZCmp ___gen, GeneratorAdapter/EQ, ___defaultLabel)
                (CaseExpr'emitExpr ___objx, ___gen, ___then, ___emitUnboxed)
            )
            (= ___exprType Type/LONG_TYPE)
            (do
                (ร (cast' NumberExpr ___test).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                (ร (:expr this).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                (.ifCmp ___gen, Type/LONG_TYPE, GeneratorAdapter/NE, ___defaultLabel)
                (CaseExpr'emitExpr ___objx, ___gen, ___then, ___emitUnboxed)
            )
            (or (ร ___exprType == Type/INT_TYPE) (ร ___exprType == Type/SHORT_TYPE) (ร ___exprType == Type/BYTE_TYPE))
            (do
                (when (.isShiftMasked this)
                    (ร (cast' NumberExpr ___test).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                    (ร (:expr this).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
                    (.cast ___gen, ___exprType, Type/LONG_TYPE)
                    (.ifCmp ___gen, Type/LONG_TYPE, GeneratorAdapter/NE, ___defaultLabel)
                )
                ;; else direct match
                (CaseExpr'emitExpr ___objx, ___gen, ___then, ___emitUnboxed)
            )
            :else
            (do
                (.goTo ___gen, ___defaultLabel)
            )
        )
        nil
    )

    #_method
    (ยง defn- #_"void" (ยง method emitExprForHashes) [#_"CaseExpr" this, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen]
        (ร (:expr this).emit(:Context'EXPRESSION, ___objx, ___gen))
        (.invokeStatic ___gen, Compiler'UTIL_TYPE, hashMethod)
        (.emitShiftMask this, ___gen)
        nil
    )

    #_method
    (ยง defn- #_"void" (ยง method emitThenForHashes) [#_"CaseExpr" this, #_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Expr" ___test, #_"Expr" ___then, #_"Label" ___defaultLabel, #_"boolean" ___emitUnboxed]
        (ร (:expr this).emit(:Context'EXPRESSION, ___objx, ___gen))
        (ร ___test.emit(:Context'EXPRESSION, ___objx, ___gen))
        (if (ร (:testType this) == hashIdentityKey)
            (do
                (.visitJumpInsn ___gen, Opcodes/IF_ACMPNE, ___defaultLabel)
            )
            (do
                (.invokeStatic ___gen, Compiler'UTIL_TYPE, equivMethod)
                (.ifZCmp ___gen, GeneratorAdapter/EQ, ___defaultLabel)
            )
        )
        (CaseExpr'emitExpr ___objx, ___gen, ___then, ___emitUnboxed)
        nil
    )

    (defn- #_"void" CaseExpr'emitExpr [#_"ObjExpr" ___objx, #_"GeneratorAdapter" ___gen, #_"Expr" ___expr, #_"boolean" ___emitUnboxed]
        (if (and ___emitUnboxed (ยง instance? MaybePrimitiveExpr ___expr))
            (do
                (ร (cast' MaybePrimitiveExpr ___expr).emitUnboxed(:Context'EXPRESSION, ___objx, ___gen))
            )
            (do
                (ร ___expr.emit(:Context'EXPRESSION, ___objx, ___gen))
            )
        )
        nil
    )
)

#_stateless
(class-ns Compiler (ยง implements Opcodes)
    (ยง def #_"Symbol" Compiler'DEF (Symbol'intern-1 "def"))
    (ยง def #_"Symbol" Compiler'LOOP (Symbol'intern-1 "loop*"))
    (ยง def #_"Symbol" Compiler'RECUR (Symbol'intern-1 "recur"))
    (ยง def #_"Symbol" Compiler'IF (Symbol'intern-1 "if"))
    (ยง def #_"Symbol" Compiler'LET (Symbol'intern-1 "let*"))
    (ยง def #_"Symbol" Compiler'LETFN (Symbol'intern-1 "letfn*"))
    (ยง def #_"Symbol" Compiler'DO (Symbol'intern-1 "do"))
    (ยง def #_"Symbol" Compiler'FN (Symbol'intern-1 "fn*"))
    (ยง def #_"Symbol" Compiler'FNONCE (cast' Symbol (ร Symbol'intern-1("fn*").withMeta(RT'map(Keyword'intern-2(nil, "once"), RT'T)))))
    (ยง def #_"Symbol" Compiler'QUOTE (Symbol'intern-1 "quote"))
    (ยง def #_"Symbol" Compiler'THE_VAR (Symbol'intern-1 "var"))
    (ยง def #_"Symbol" Compiler'DOT (Symbol'intern-1 "."))
    (ยง def #_"Symbol" Compiler'ASSIGN (Symbol'intern-1 "set!"))
    (ยง def #_"Symbol" Compiler'TRY (Symbol'intern-1 "try"))
    (ยง def #_"Symbol" Compiler'CATCH (Symbol'intern-1 "catch"))
    (ยง def #_"Symbol" Compiler'FINALLY (Symbol'intern-1 "finally"))
    (ยง def #_"Symbol" Compiler'THROW (Symbol'intern-1 "throw"))
    (ยง def #_"Symbol" Compiler'MONITOR_ENTER (Symbol'intern-1 "monitor-enter"))
    (ยง def #_"Symbol" Compiler'MONITOR_EXIT (Symbol'intern-1 "monitor-exit"))
    (ยง def #_"Symbol" Compiler'IMPORT (Symbol'intern-2 "cloiure.core", "import*"))
    (ยง def #_"Symbol" Compiler'DEFTYPE (Symbol'intern-1 "deftype*"))
    (ยง def #_"Symbol" Compiler'CASE (Symbol'intern-1 "case*"))

    (ยง def #_"Symbol" Compiler'CLASS (Symbol'intern-1 "Class"))
    (ยง def #_"Symbol" Compiler'NEW (Symbol'intern-1 "new"))
    (ยง def #_"Symbol" Compiler'THIS (Symbol'intern-1 "this"))
    (ยง def #_"Symbol" Compiler'REIFY (Symbol'intern-1 "reify*"))
    (ยง def #_"Symbol" Compiler'LIST (Symbol'intern-2 "cloiure.core", "list"))
    (ยง def #_"Symbol" Compiler'HASHMAP (Symbol'intern-2 "cloiure.core", "hash-map"))
    (ยง def #_"Symbol" Compiler'VECTOR (Symbol'intern-2 "cloiure.core", "vector"))
    (ยง def #_"Symbol" Compiler'IDENTITY (Symbol'intern-2 "cloiure.core", "identity"))

    (ยง def #_"Symbol" Compiler'_AMP_ (Symbol'intern-1 "&"))
    (ยง def #_"Symbol" Compiler'ISEQ (Symbol'intern-1 "cloiure.lang.ISeq"))

    (ยง def #_"Keyword" Compiler'loadNs (Keyword'intern-2 nil, "load-ns"))
    (ยง def #_"Keyword" Compiler'inlineKey (Keyword'intern-2 nil, "inline"))
    (ยง def #_"Keyword" Compiler'inlineAritiesKey (Keyword'intern-2 nil, "inline-arities"))
    (ยง def #_"Keyword" Compiler'staticKey (Keyword'intern-2 nil, "static"))
    (ยง def #_"Keyword" Compiler'arglistsKey (Keyword'intern-2 nil, "arglists"))
    (ยง def #_"Symbol" Compiler'INVOKE_STATIC (Symbol'intern-1 "invokeStatic"))

    (ยง def #_"Keyword" Compiler'volatileKey (Keyword'intern-2 nil, "volatile"))
    (ยง def #_"Keyword" Compiler'implementsKey (Keyword'intern-2 nil, "implements"))
    (def #_"String" Compiler'COMPILE_STUB_PREFIX "compile__stub")

    (ยง def #_"Keyword" Compiler'protocolKey (Keyword'intern-2 nil, "protocol"))
    (ยง def #_"Keyword" Compiler'onKey (Keyword'intern-2 nil, "on"))
    (ยง def #_"Keyword" Compiler'dynamicKey (Keyword'intern-1 "dynamic"))
    (ยง def #_"Keyword" Compiler'redefKey (Keyword'intern-2 nil, "redef"))

    (ยง def #_"Symbol" Compiler'NS (Symbol'intern-1 "ns"))
    (ยง def #_"Symbol" Compiler'IN_NS (Symbol'intern-1 "in-ns"))

    (def #_"IPersistentMap" Compiler'specials (ร PersistentHashMap'create-1a(
        (object-array [
            Compiler'DEF           (DefParser'new)
            Compiler'LOOP          (LetParser'new)
            Compiler'RECUR         (RecurParser'new)
            Compiler'IF            (IfParser'new)
            Compiler'CASE          (CaseParser'new)
            Compiler'LET           (LetParser'new)
            Compiler'LETFN         (LetFnParser'new)
            Compiler'DO            (BodyParser'new)
            Compiler'FN            nil
            Compiler'QUOTE         (ConstantParser'new)
            Compiler'THE_VAR       (TheVarParser'new)
            Compiler'IMPORT        (ImportParser'new)
            Compiler'DOT           (HostParser'new)
            Compiler'ASSIGN        (AssignParser'new)
            Compiler'DEFTYPE       (DeftypeParser'new)
            Compiler'REIFY         (ReifyParser'new)
            Compiler'TRY           (TryParser'new)
            Compiler'THROW         (ThrowParser'new)
            Compiler'MONITOR_ENTER (MonitorEnterParser'new)
            Compiler'MONITOR_EXIT  (MonitorExitParser'new)
            Compiler'CATCH         nil
            Compiler'FINALLY       nil
            Compiler'NEW           (NewParser'new)
            Compiler'_AMP_         nil
        ])
    )))

    (def- #_"int" Compiler'MAX_POSITIONAL_ARITY 20)

    (def #_"Type" Compiler'CLASS_TYPE (Type/getType Class))
    (def #_"Type" Compiler'OBJECT_TYPE (Type/getType Object))
    (def #_"Type" Compiler'BOOLEAN_OBJECT_TYPE (Type/getType Boolean))
    (def #_"Type" Compiler'THROWABLE_TYPE (Type/getType Throwable))

    (ยง def- #_"Type" Compiler'KEYWORD_TYPE (Type/getType (ยง class Keyword)))
    (ยง def- #_"Type" Compiler'VAR_TYPE (Type/getType (ยง class Var)))
    (ยง def- #_"Type" Compiler'SYMBOL_TYPE (Type/getType (ยง class Symbol)))
    (ยง def- #_"Type" Compiler'IFN_TYPE (Type/getType (ยง class IFn)))
    (ยง def- #_"Type" Compiler'AFUNCTION_TYPE (Type/getType (ยง class AFunction)))
    (ยง def- #_"Type" Compiler'RT_TYPE (Type/getType (ยง class RT)))
    (ยง def- #_"Type" Compiler'NUMBERS_TYPE (Type/getType (ยง class Numbers)))

    (ยง def #_"Type" Compiler'NS_TYPE (Type/getType (ยง class Namespace)))
    (ยง def #_"Type" Compiler'UTIL_TYPE (Type/getType (ยง class Util)))
    (ยง def #_"Type" Compiler'REFLECTOR_TYPE (Type/getType (ยง class Reflector)))
    (ยง def #_"Type" Compiler'IPERSISTENTMAP_TYPE (Type/getType (ยง class IPersistentMap)))
    (ยง def #_"Type" Compiler'IOBJ_TYPE (Type/getType (ยง class IObj)))
    (ยง def #_"Type" Compiler'TUPLE_TYPE (Type/getType (ยง class Tuple)))

    (def #_"Method[]" Compiler'createTupleMethods
        (object-array [
            (Method/getMethod "cloiure.lang.IPersistentVector create()")
            (Method/getMethod "cloiure.lang.IPersistentVector create(Object)")
            (Method/getMethod "cloiure.lang.IPersistentVector create(Object, Object)")
            (Method/getMethod "cloiure.lang.IPersistentVector create(Object, Object, Object)")
            (Method/getMethod "cloiure.lang.IPersistentVector create(Object, Object, Object, Object)")
            (Method/getMethod "cloiure.lang.IPersistentVector create(Object, Object, Object, Object, Object)")
            (Method/getMethod "cloiure.lang.IPersistentVector create(Object, Object, Object, Object, Object, Object)")
        ])
    )

    (def- #_"Type[][]" Compiler'ARG_TYPES nil)
    (def- #_"Type[]" Compiler'EXCEPTION_TYPES (object-array 0))

    (ยง static
        (ยง ass Compiler'ARG_TYPES (ร new Type[Compiler'MAX_POSITIONAL_ARITY + 2][]))
        (loop-when-recur [#_"int" ___i 0] (<= ___i Compiler'MAX_POSITIONAL_ARITY) [(inc ___i)]
            (let [#_"Type[]" ___a (make-array Type ___i)]
                (loop-when-recur [#_"int" ___j 0] (< ___j ___i) [(inc ___j)]
                    (ยง ass (ยง aget ___a ___j) Compiler'OBJECT_TYPE)
                )
                (ยง ass (ร Compiler'ARG_TYPES[___i]) ___a)
            )
        )
        (let [#_"Type[]" ___a (make-array Type (ร Compiler'MAX_POSITIONAL_ARITY + 1))]
            (loop-when-recur [#_"int" ___j 0] (< ___j Compiler'MAX_POSITIONAL_ARITY) [(inc ___j)]
                (ยง ass (ยง aget ___a ___j) Compiler'OBJECT_TYPE)
            )
            (ยง ass (ยง aget ___a Compiler'MAX_POSITIONAL_ARITY) (Type/getType "[Ljava/lang/Object;"))
            (ยง ass (ร Compiler'ARG_TYPES[Compiler'MAX_POSITIONAL_ARITY + 1]) ___a)
        )
    )

    ;; symbol->localbinding
    (ยง def #_"Var" Compiler'LOCAL_ENV (ร Var'create-1(nil).setDynamic()))

    ;; vector<localbinding>
    (ยง def #_"Var" Compiler'LOOP_LOCALS (ร Var'create-0().setDynamic()))

    ;; Label
    (ยง def #_"Var" Compiler'LOOP_LABEL (ร Var'create-0().setDynamic()))

    ;; vector<object>
    (ยง def #_"Var" Compiler'CONSTANTS (ร Var'create-0().setDynamic()))

    ;; IdentityHashMap
    (ยง def #_"Var" Compiler'CONSTANT_IDS (ร Var'create-0().setDynamic()))

    ;; vector<keyword>
    (ยง def #_"Var" Compiler'KEYWORD_CALLSITES (ร Var'create-0().setDynamic()))

    ;; vector<var>
    (ยง def #_"Var" Compiler'PROTOCOL_CALLSITES (ร Var'create-0().setDynamic()))

    ;; set<var>
    (ยง def #_"Var" Compiler'VAR_CALLSITES (ร Var'create-0().setDynamic()))

    ;; keyword->constid
    (ยง def #_"Var" Compiler'KEYWORDS (ร Var'create-0().setDynamic()))

    ;; var->constid
    (ยง def #_"Var" Compiler'VARS (ร Var'create-0().setDynamic()))

    ;; FnFrame
    (ยง def #_"Var" Compiler'METHOD (ร Var'create-1(nil).setDynamic()))

    ;; nil or not
    (ยง def #_"Var" Compiler'IN_CATCH_FINALLY (ร Var'create-1(nil).setDynamic()))

    (ยง def #_"Var" Compiler'METHOD_RETURN_CONTEXT (ร Var'create-1(nil).setDynamic()))

    (ยง def #_"Var" Compiler'NO_RECUR (ร Var'create-1(nil).setDynamic()))

    ;; DynamicClassLoader
    (ยง def #_"Var" Compiler'LOADER (ร Var'create-0().setDynamic()))

    ;; String
    (ยง def #_"Var" Compiler'SOURCE (ร Var'intern-3(Namespace'findOrCreate(Symbol'intern-1("cloiure.core")), Symbol'intern-1("*source-path*"), "NO_SOURCE_FILE").setDynamic()))

    ;; String
    (ยง def #_"Var" Compiler'SOURCE_PATH (ร Var'intern-3(Namespace'findOrCreate(Symbol'intern-1("cloiure.core")), Symbol'intern-1("*file*"), "NO_SOURCE_PATH").setDynamic()))

    ;; String
    (ยง def #_"Var" Compiler'COMPILE_PATH (ร Var'intern-3(Namespace'findOrCreate(Symbol'intern-1("cloiure.core")), Symbol'intern-1("*compile-path*"), nil).setDynamic()))
    ;; boolean
    (ยง def #_"Var" Compiler'COMPILE_FILES (ร Var'intern-3(Namespace'findOrCreate(Symbol'intern-1("cloiure.core")), Symbol'intern-1("*compile-files*"), Boolean/FALSE).setDynamic()))

    (ยง def #_"Var" Compiler'INSTANCE (ร Var'intern-2n(Namespace'findOrCreate(Symbol'intern-1("cloiure.core")), Symbol'intern-1("instance?"))))

    (ยง def #_"Var" Compiler'ADD_ANNOTATIONS (ร Var'intern-2n(Namespace'findOrCreate(Symbol'intern-1("cloiure.core")), Symbol'intern-1("add-annotations"))))

    (ยง def #_"Keyword" Compiler'disableLocalsClearingKey (Keyword'intern-1 "disable-locals-clearing"))
    (ยง def #_"Keyword" Compiler'directLinkingKey (Keyword'intern-1 "direct-linking"))
    (ยง def #_"Keyword" Compiler'elideMetaKey (Keyword'intern-1 "elide-meta"))

    (def #_"Var" Compiler'COMPILER_OPTIONS nil)

    (defn #_"Object" Compiler'getCompilerOption [#_"Keyword" ___k]
        (ร RT'get-2(Compiler'COMPILER_OPTIONS.deref(), ___k))
    )

    (ยง static
        (let [#_"Object" ___compilerOptions nil]
            (doseq [#_"Map$Entry" ___e (ร System/getProperties().entrySet())]
                (let [#_"String" ___name (cast String (.getKey ___e))]
                    (let [#_"String" ___v (cast String (.getValue ___e))]
                        (when (.startsWith ___name, "cloiure.compiler.")
                            (ยง ass ___compilerOptions (ร RT'assoc(___compilerOptions, RT'keyword(nil, ___name.substring(1 + ___name.lastIndexOf(\.))), RT'readString-1(___v))))
                        )
                    )
                )
            )

            (ยง ass Compiler'COMPILER_OPTIONS (ร Var'intern-3(Namespace'findOrCreate(Symbol'intern-1("cloiure.core")), Symbol'intern-1("*compiler-options*"), ___compilerOptions).setDynamic()))
        )
    )

    (defn #_"Object" Compiler'elideMeta [#_"Object" ___m]
        (let [#_"Collection<Object>" ___elides (ร (Collection<Object>) Compiler'getCompilerOption(Compiler'elideMetaKey))]
            (when (some? ___elides)
                (doseq [#_"Object" ___k ___elides]
                    (ยง ass ___m (RT'dissoc ___m, ___k))
                )
            )
            ___m
        )
    )

    ;; Integer
    (ยง def #_"Var" Compiler'LINE (ร Var'create-1(0).setDynamic()))
    (ยง def #_"Var" Compiler'COLUMN (ร Var'create-1(0).setDynamic()))

    (defn #_"int" Compiler'lineDeref []
        (.intValue (cast Number (.deref Compiler'LINE)))
    )

    (defn #_"int" Compiler'columnDeref []
        (.intValue (cast Number (.deref Compiler'COLUMN)))
    )

    ;; Integer
    (ยง def #_"Var" Compiler'LINE_BEFORE (ร Var'create-1(0).setDynamic()))
    (ยง def #_"Var" Compiler'COLUMN_BEFORE (ร Var'create-1(0).setDynamic()))
    (ยง def #_"Var" Compiler'LINE_AFTER (ร Var'create-1(0).setDynamic()))
    (ยง def #_"Var" Compiler'COLUMN_AFTER (ร Var'create-1(0).setDynamic()))

    ;; Integer
    (ยง def #_"Var" Compiler'NEXT_LOCAL_NUM (ร Var'create-1(0).setDynamic()))

    ;; Integer
    (ยง def #_"Var" Compiler'RET_LOCAL_NUM (ร Var'create-0().setDynamic()))

    (ยง def #_"Var" Compiler'COMPILE_STUB_SYM (ร Var'create-1(nil).setDynamic()))
    (ยง def #_"Var" Compiler'COMPILE_STUB_CLASS (ร Var'create-1(nil).setDynamic()))

    ;; PathNode chain
    (ยง def #_"Var" Compiler'CLEAR_PATH (ร Var'create-1(nil).setDynamic()))

    ;; tail of PathNode chain
    (ยง def #_"Var" Compiler'CLEAR_ROOT (ร Var'create-1(nil).setDynamic()))

    ;; LocalBinding -> Set<LocalBindingExpr>
    (ยง def #_"Var" Compiler'CLEAR_SITES (ร Var'create-1(nil).setDynamic()))

    (def #_"Class" Compiler'RECUR_CLASS (ยง class Recur))

    (defn #_"boolean" Compiler'isSpecial [#_"Object" ___sym]
        (.containsKey Compiler'specials, ___sym)
    )

    (defn #_"boolean" Compiler'inTailCall [#_"Context" ___context]
        (and (= ___context :Context'RETURN) (some? (.deref Compiler'METHOD_RETURN_CONTEXT)) (nil? (.deref Compiler'IN_CATCH_FINALLY)))
    )

    (defn #_"Symbol" Compiler'resolveSymbol [#_"Symbol" ___sym]
        ;; already qualified or classname?
        (when (pos? (.indexOf (:name ___sym), \.))
            (ยง return ___sym)
        )
        (when (ร (some? (:ns ___sym)))
            (let [#_"Namespace" ___ns (Compiler'namespaceFor-1 ___sym)]
                (when (or (nil? ___ns) (if (nil? (:name (:name ___ns))) (nil? (:ns ___sym)) (.equals (:name (:name ___ns)), (:ns ___sym))))
                    (ยง return ___sym)
                )
                (ยง return (ร Symbol'intern-2((:name (:name ___ns)), (:name ___sym))))
            )
        )
        (let [#_"Object" ___o (ร (.currentNS this).getMapping(___sym))]
            (cond (nil? ___o)
                (do
                    (ยง return (ร Symbol'intern-2((:name (:name (.currentNS this))), (:name ___sym))))
                )
                (instance? Class ___o)
                (do
                    (ยง return (ร Symbol'intern-2(nil, (cast Class ___o).getName())))
                )
                (ยง instance? Var ___o)
                (do
                    (let [#_"Var" ___v (cast' Var ___o)]
                        (ยง return (ร Symbol'intern-2((:name (:name (:ns ___v))), (:name (:sym ___v)))))
                    )
                )
            )
            nil
        )
    )

    (defn #_"Class" Compiler'maybePrimitiveType [#_"Expr" ___e]
        (when (and (ยง instance? MaybePrimitiveExpr ___e) (.hasJavaClass ___e) (.canEmitPrimitive (cast' MaybePrimitiveExpr ___e)))
            (let [#_"Class" ___c (.getJavaClass ___e)]
                (when (Util'isPrimitive ___c)
                    (ยง return ___c)
                )
            )
        )
        nil
    )

    (defn #_"Class" Compiler'maybeJavaClass [#_"Collection<Expr>" ___exprs]
        (let [#_"Class" ___match nil]
            (try
                (doseq [#_"Expr" ___e ___exprs]
                    (when (ยง instance? ThrowExpr ___e)
                        (ยง continue )
                    )
                    (when (not (.hasJavaClass ___e))
                        (ยง return nil)
                    )
                    (let [#_"Class" ___c (.getJavaClass ___e)]
                        (cond (nil? ___match)
                            (do
                                (ยง ass ___match ___c)
                            )
                            (not= ___match ___c)
                            (do
                                (ยง return nil)
                            )
                        )
                    )
                )
                (catch Exception ___e
                    (ยง return nil)
                )
            )
            ___match
        )
    )

    (ยง def #_"NilExpr" Compiler'NIL_EXPR (NilExpr'new))

    (ยง def #_"BooleanExpr" Compiler'TRUE_EXPR (BooleanExpr'new true))
    (ยง def #_"BooleanExpr" Compiler'FALSE_EXPR (BooleanExpr'new false))

    (defn #_"boolean" Compiler'subsumes [#_"Class[]" ___c1, #_"Class[]" ___c2]
        ;; presumes matching lengths
        (let [#_"Boolean" ___better false]
            (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___c1)) [(inc ___i)]
                (when (ร ___c1[___i] != ___c2[___i]) ;; || c2[i].isPrimitive() && c1[i] == Object.class
                    (if (or (and (not (ร ___c1[___i].isPrimitive())) (ร ___c2[___i].isPrimitive())) (ร ___c2[___i].isAssignableFrom(___c1[___i])))
                        (do
                            (ยง ass ___better true)
                        )
                        (do
                            (ยง return false)
                        )
                    )
                )
            )
            ___better
        )
    )

    (defn #_"String" Compiler'getTypeStringForArgs [#_"IPersistentVector" ___args]
        (let [#_"StringBuilder" ___sb (StringBuilder.)]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___args)) [(inc ___i)]
                (let [#_"Expr" ___arg (cast' Expr (.nth ___args, ___i))]
                    (when (> ___i 0)
                        (.append ___sb, ", ")
                    )
                    (.append ___sb, (if (and (.hasJavaClass ___arg) (some? (.getJavaClass ___arg))) (.getName (.getJavaClass ___arg)) "unknown"))
                )
            )
            (.toString ___sb)
        )
    )

    (defn #_"int" Compiler'getMatchingParams [#_"String" ___methodName, #_"ArrayList<Class[]>" ___paramlists, #_"IPersistentVector" ___argexprs, #_"List<Class>" ___rets]
        ;; presumes matching lengths
        (let [#_"int" ___matchIdx -1]
            (let [#_"boolean" ___tied false]
                (let [#_"boolean" ___foundExact false]
                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (.size ___paramlists)) [(inc ___i)]
                        (let [#_"boolean" ___match true]
                            (let [#_"ISeq" ___aseq (.seq ___argexprs)]
                                (let [#_"int" ___exact 0]
                                    (loop-when-recur [#_"int" ___p 0 ___aseq ___aseq] (and ___match (< ___p (count ___argexprs)) (some? ___aseq)) [(inc ___p) (next ___aseq)]
                                        (let [#_"Expr" ___arg (cast' Expr (first ___aseq))]
                                            (let [#_"Class" ___aclass (if (.hasJavaClass ___arg) (.getJavaClass ___arg) Object)]
                                                (let [#_"Class" ___pclass (ร ___paramlists.get(___i)[___p])]
                                                    (if (and (.hasJavaClass ___arg) (ร ___aclass == ___pclass))
                                                        (do
                                                            (ยง ass ___exact (inc ___exact))
                                                        )
                                                        (do
                                                            (ยง ass ___match (Reflector'paramArgTypeMatch ___pclass, ___aclass))
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                    (cond (ร ___exact == (count ___argexprs))
                                        (do
                                            (when (or (not ___foundExact) (ร ___matchIdx == -1) (ร ___rets.get(___matchIdx).isAssignableFrom(___rets.get(___i))))
                                                (ยง ass ___matchIdx ___i)
                                            )
                                            (ยง ass ___tied false)
                                            (ยง ass ___foundExact true)
                                        )
                                        (and ___match (not ___foundExact))
                                        (do
                                            (if (= ___matchIdx -1)
                                                (do
                                                    (ยง ass ___matchIdx ___i)
                                                )
                                                (do
                                                    (cond (ร Compiler'subsumes(___paramlists.get(___i), ___paramlists.get(___matchIdx)))
                                                        (do
                                                            (ยง ass ___matchIdx ___i)
                                                            (ยง ass ___tied false)
                                                        )
                                                        (ร Arrays/equals(___paramlists.get(___matchIdx), ___paramlists.get(___i)))
                                                        (do
                                                            (when (ร ___rets.get(___matchIdx).isAssignableFrom(___rets.get(___i)))
                                                                (ยง ass ___matchIdx ___i)
                                                            )
                                                        )
                                                        (not (ร Compiler'subsumes(___paramlists.get(___matchIdx), ___paramlists.get(___i))))
                                                        (do
                                                            (ยง ass ___tied true)
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                    (when ___tied
                        (throw (IllegalArgumentException. (str "More than one matching method found: " ___methodName)))
                    )

                    ___matchIdx
                )
            )
        )
    )

    (def #_"IPersistentMap" Compiler'CHAR_MAP (ร PersistentHashMap'create-1a(
        (object-array [
            \- "_"
            \: "_COLON_"
            \+ "_PLUS_"
            \> "_GT_"
            \< "_LT_"
            \= "_EQ_"
            \~ "_TILDE_"
            \! "_BANG_"
            \@ "_CIRCA_"
            \# "_SHARP_"
            \' "_SINGLEQUOTE_"
            \" "_DOUBLEQUOTE_" ;; oops! "
            \% "_PERCENT_"
            \^ "_CARET_"
            \& "_AMPERSAND_"
            \* "_STAR_"
            \| "_BAR_"
            \{ "_LBRACE_"
            \} "_RBRACE_"
            \[ "_LBRACK_"
            \] "_RBRACK_"
            \/ "_SLASH_"
            \\ "_BSLASH_"
            \? "_QMARK_"
        ])
    )))

    (def #_"IPersistentMap" Compiler'DEMUNGE_MAP nil)
    (def #_"Pattern" Compiler'DEMUNGE_PATTERN nil)

    (ยง static
        ;; DEMUNGE_MAP maps strings to characters in the opposite
        ;; direction that CHAR_MAP does, plus it maps "$" to '/'
        (let [#_"IPersistentMap" ___m (ร RT'map("$", \/))]
            (loop-when-recur [#_"ISeq" ___s (RT'seq Compiler'CHAR_MAP)] (some? ___s) [(next ___s)]
                (let [#_"IMapEntry" ___e (cast' IMapEntry (first ___s))]
                    (let [#_"Character" ___origCh (cast Character (.key ___e))]
                        (let [#_"String" ___escapeStr (cast String (.val ___e))]
                            (ยง ass ___m (.assoc ___m, ___escapeStr, ___origCh))
                        )
                    )
                )
            )
            (ยง ass Compiler'DEMUNGE_MAP ___m)

            ;; DEMUNGE_PATTERN searches for the first of any occurrence of
            ;; the strings that are keys of DEMUNGE_MAP.
            ;; Note: Regex matching rules mean that #"_|_COLON_" "_COLON_"
            ;; returns "_", but #"_COLON_|_" "_COLON_" returns "_COLON_"
            ;; as desired. Sorting string keys of DEMUNGE_MAP from longest to
            ;; shortest ensures correct matching behavior, even if some strings are
            ;; prefixes of others.
            (let [#_"Object[]" ___mungeStrs (ร RT'toArray(RT'keys(___m)))]
                (ร Arrays/sort(___mungeStrs,
                        (ยง reify Comparator()
                            #_method
                            (ยง defn #_"int" (ยง method compare) [#_"Comparator" this, #_"Object" ___s1, #_"Object" ___s2]
                                (ร (cast String ___s2).length() - (cast String ___s1).length())
                            )
                        )
                    )
                )
                (let [#_"StringBuilder" ___sb (StringBuilder.)]
                    (let [#_"boolean" ___first true]
                        (doseq [#_"Object" ___s ___mungeStrs]
                            (let [#_"String" ___escapeStr (cast String ___s)]
                                (when (not ___first)
                                    (.append ___sb, "|")
                                )
                                (ยง ass ___first false)
                                (.append ___sb, "\\Q")
                                (.append ___sb, ___escapeStr)
                                (.append ___sb, "\\E")
                            )
                        )
                        (ยง ass Compiler'DEMUNGE_PATTERN (Pattern/compile (.toString ___sb)))
                    )
                )
            )
        )
    )

    (defn #_"String" Compiler'munge [#_"String" ___name]
        (let [#_"StringBuilder" ___sb (StringBuilder.)]
            (doseq [#_"char" ___c (.toCharArray ___name)]
                (let [#_"String" ___sub (cast String (.valAt Compiler'CHAR_MAP, ___c))]
                    (if (some? ___sub)
                        (do
                            (.append ___sb, ___sub)
                        )
                        (do
                            (.append ___sb, ___c)
                        )
                    )
                )
            )
            (.toString ___sb)
        )
    )

    (defn #_"String" Compiler'demunge [#_"String" ___mungedName]
        (let [#_"StringBuilder" ___sb (StringBuilder.)]
            (let [#_"Matcher" ___m (.matcher Compiler'DEMUNGE_PATTERN, ___mungedName)]
                (let [#_"int" ___lastMatchEnd 0]
                    (while (.find ___m)
                        (let [#_"int" ___start (.start ___m)]
                            (let [#_"int" ___end (.end ___m)]
                                ;; Keep everything before the match
                                (ร ___sb.append(___mungedName.substring(___lastMatchEnd, ___start)))
                                (ยง ass ___lastMatchEnd ___end)
                                ;; Replace the match with DEMUNGE_MAP result
                                (let [#_"Character" ___origCh (cast Character (.valAt Compiler'DEMUNGE_MAP, (.group ___m)))]
                                    (.append ___sb, ___origCh)
                                )
                            )
                        )
                    )
                    ;; Keep everything after the last match
                    (ร ___sb.append(___mungedName.substring(___lastMatchEnd)))
                    (.toString ___sb)
                )
            )
        )
    )

    (defn #_"PathNode" Compiler'clearPathRoot []
        (cast' PathNode (.get Compiler'CLEAR_ROOT))
    )

    (defn- #_"LocalBinding" Compiler'registerLocal [#_"Symbol" ___sym, #_"Symbol" ___tag, #_"Expr" ___init, #_"boolean" ___isArg]
        (let [#_"int" ___num (Compiler'getAndIncLocalNum)]
            (let [#_"LocalBinding" ___b (ร LocalBinding'new(___num, ___sym, ___tag, ___init, ___isArg, Compiler'clearPathRoot()))]
                (let [#_"IPersistentMap" ___localsMap (cast' IPersistentMap (.deref Compiler'LOCAL_ENV))]
                    (ร Compiler'LOCAL_ENV.set(RT'assoc(___localsMap, (:sym ___b), ___b)))
                    (let [#_"ObjMethod" ___method (cast' ObjMethod (.deref Compiler'METHOD))]
                        (ยง ass (:locals ___method) (cast' IPersistentMap (ร RT'assoc((:locals ___method), ___b, ___b))))
                        (ยง ass (:indexlocals ___method) (cast' IPersistentMap (ร RT'assoc((:indexlocals ___method), ___num, ___b))))
                        ___b
                    )
                )
            )
        )
    )

    (defn- #_"int" Compiler'getAndIncLocalNum []
        (let [#_"int" ___num (.intValue (cast Number (.deref Compiler'NEXT_LOCAL_NUM)))]
            (let [#_"ObjMethod" ___m (cast' ObjMethod (.deref Compiler'METHOD))]
                (when (ร ___num > (:maxLocal ___m))
                    (ยง ass (:maxLocal ___m) ___num)
                )
                (ร Compiler'NEXT_LOCAL_NUM.set(___num + 1))
                ___num
            )
        )
    )

    (defn #_"Expr" Compiler'analyze-2 [#_"Context" ___context, #_"Object" ___form]
        (Compiler'analyze-3 ___context, ___form, nil)
    )

    (defn- #_"Expr" Compiler'analyze-3 [#_"Context" ___context, #_"Object" ___form, #_"String" ___name]
        ;; todo symbol macro expansion?
        (try
            (when (ยง instance? LazySeq ___form)
                (let [#_"Object" ___mform ___form]
                    (ยง ass ___form (RT'seq ___form))
                    (when (nil? ___form)
                        (ยง ass ___form PersistentList'EMPTY)
                    )
                    (ยง ass ___form (ร (cast' IObj ___form).withMeta(RT'meta(___mform))))
                )
            )
            (cond (nil? ___form)
                (do
                    (ยง return Compiler'NIL_EXPR)
                )
                (= ___form Boolean/TRUE)
                (do
                    (ยง return Compiler'TRUE_EXPR)
                )
                (= ___form Boolean/FALSE)
                (do
                    (ยง return Compiler'FALSE_EXPR)
                )
            )
            (let [#_"Class" ___fclass (.getClass ___form)]
                (cond (ร ___fclass == (ยง class Symbol))
                    (do
                        (ยง return (Compiler'analyzeSymbol (cast' Symbol ___form)))
                    )
                    (ร ___fclass == (ยง class Keyword))
                    (do
                        (ยง return (Compiler'registerKeyword (cast' Keyword ___form)))
                    )
                    (instance? Number ___form)
                    (do
                        (ยง return (NumberExpr'parse (cast Number ___form)))
                    )
                    (= ___fclass String)
                    (do
                        (ยง return (StringExpr'new (.intern (cast String ___form))))
                    )
                    (and (ยง instance? IPersistentCollection ___form) (not (ยง instance? IRecord ___form)) (not (ยง instance? IType ___form)) (zero? (.count (cast' IPersistentCollection ___form))))
                    (do
                        (let [#_"Expr" ___ret (EmptyExpr'new ___form)]
                            (when (some? (RT'meta ___form))
                                (ยง ass ___ret (MetaExpr'new ___ret, (MapExpr'parse (if (= ___context :Context'EVAL) ___context :Context'EXPRESSION), (.meta (cast' IObj ___form)))))
                            )
                            (ยง return ___ret)
                        )
                    )
                    (ยง instance? ISeq ___form)
                    (do
                        (ยง return (ร Compiler'analyzeSeq(___context, (cast' ISeq ___form), ___name)))
                    )
                    (ยง instance? IPersistentVector ___form)
                    (do
                        (ยง return (ร VectorExpr'parse(___context, (cast' IPersistentVector ___form))))
                    )
                    (ยง instance? IRecord ___form)
                    (do
                        (ยง return (ConstantExpr'new ___form))
                    )
                    (ยง instance? IType ___form)
                    (do
                        (ยง return (ConstantExpr'new ___form))
                    )
                    (ยง instance? IPersistentMap ___form)
                    (do
                        (ยง return (ร MapExpr'parse(___context, (cast' IPersistentMap ___form))))
                    )
                    (ยง instance? IPersistentSet ___form)
                    (do
                        (ยง return (ร SetExpr'parse(___context, (cast' IPersistentSet ___form))))
                    )
                )

                (ConstantExpr'new ___form)
            )
            (catch Throwable ___e
                (if (not (ยง instance? CompilerException ___e))
                    (do
                        (throw (ร CompilerException'new((cast String (.deref Compiler'SOURCE_PATH)), Compiler'lineDeref(), Compiler'columnDeref(), ___e)))
                    )
                    (do
                        (throw (cast' CompilerException ___e))
                    )
                )
            )
        )
    )

    (defn #_"Var" Compiler'isMacro [#_"Object" ___op]
        ;; no local macros for now
        (when (and (ยง instance? Symbol ___op) (some? (Compiler'referenceLocal (cast' Symbol ___op))))
            (ยง return nil)
        )
        (when (or (ยง instance? Symbol ___op) (ยง instance? Var ___op))
            (let [#_"Var" ___v (if (ยง instance? Var ___op) (cast' Var ___op) (Compiler'lookupVar-3 (cast' Symbol ___op), false, false))]
                (when (and (some? ___v) (.isMacro ___v))
                    (when (and (ร (:ns ___v) != (.currentNS this)) (not (.isPublic ___v)))
                        (throw (IllegalStateException. (str "var: " ___v " is not public")))
                    )
                    (ยง return ___v)
                )
            )
        )
        nil
    )

    (defn #_"IFn" Compiler'isInline [#_"Object" ___op, #_"int" ___arity]
        ;; no local inlines for now
        (when (and (ยง instance? Symbol ___op) (some? (Compiler'referenceLocal (cast' Symbol ___op))))
            (ยง return nil)
        )
        (when (or (ยง instance? Symbol ___op) (ยง instance? Var ___op))
            (let [#_"Var" ___v (if (ยง instance? Var ___op) (cast' Var ___op) (Compiler'lookupVar-2 (cast' Symbol ___op), false))]
                (when (some? ___v)
                    (when (and (ร (:ns ___v) != (.currentNS this)) (not (.isPublic ___v)))
                        (throw (IllegalStateException. (str "var: " ___v " is not public")))
                    )
                    (let [#_"IFn" ___ret (cast' IFn (ร RT'get-2((.meta ___v), Compiler'inlineKey)))]
                        (when (some? ___ret)
                            (let [#_"IFn" ___arityPred (cast' IFn (ร RT'get-2((.meta ___v), Compiler'inlineAritiesKey)))]
                                (when (or (nil? ___arityPred) (ร RT'booleanCast-1o(___arityPred.invoke(___arity))))
                                    (ยง return ___ret)
                                )
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    (defn #_"boolean" Compiler'namesStaticMember [#_"Symbol" ___sym]
        (and (some? (:ns ___sym)) (nil? (Compiler'namespaceFor-1 ___sym)))
    )

    (defn #_"Object" Compiler'preserveTag [#_"ISeq" ___src, #_"Object" ___dst]
        (let [#_"Symbol" ___tag (Compiler'tagOf ___src)]
            (when (and (some? ___tag) (ยง instance? IObj ___dst))
                (let [#_"IPersistentMap" ___meta (RT'meta ___dst)]
                    (ยง return (ร (cast' IObj ___dst).withMeta((cast' IPersistentMap (RT'assoc ___meta, RT'TAG_KEY, ___tag)))))
                )
            )
            ___dst
        )
    )

    #_volatile
    (def- #_"Var" Compiler'MACRO_CHECK nil)
    #_volatile
    (def- #_"boolean" Compiler'MACRO_CHECK_LOADING false)
    (def- #_"Object" Compiler'MACRO_CHECK_LOCK (Object.))

    (defn- #_"Var" Compiler'ensureMacroCheck [] #_(ยง throws ClassNotFoundException, IOException)
        (when (nil? Compiler'MACRO_CHECK)
            (ยง sync Compiler'MACRO_CHECK_LOCK
                (when (nil? Compiler'MACRO_CHECK)
                    (ยง ass Compiler'MACRO_CHECK_LOADING true)
                    (RT'load-1 "cloiure/spec/alpha")
                    (RT'load-1 "cloiure/core/specs/alpha")
                    (ยง ass Compiler'MACRO_CHECK (ร Var'find(Symbol'intern-2("cloiure.spec.alpha", "macroexpand-check"))))
                    (ยง ass Compiler'MACRO_CHECK_LOADING false)
                )
            )
        )
        Compiler'MACRO_CHECK
    )

    (defn #_"void" Compiler'checkSpecs [#_"Var" ___v, #_"ISeq" ___form]
        (when (and RT'CHECK_SPECS (not Compiler'MACRO_CHECK_LOADING))
            (try
                (ร Compiler'ensureMacroCheck().applyTo(RT'cons(___v, RT'list-1((next ___form)))))
                (catch Exception ___e
                    (throw (ร CompilerException'new((cast String (.deref Compiler'SOURCE_PATH)), Compiler'lineDeref(), Compiler'columnDeref(), ___e)))
                )
            )
        )
        nil
    )

    (defn #_"Object" Compiler'macroexpand1 [#_"Object" ___x]
        (when (ยง instance? ISeq ___x)
            (let [#_"ISeq" ___form (cast' ISeq ___x)]
                (let [#_"Object" ___op (RT'first ___form)]
                    (when (Compiler'isSpecial ___op)
                        (ยง return ___x)
                    )
                    ;; macro expansion
                    (let [#_"Var" ___v (Compiler'isMacro ___op)]
                        (if (some? ___v)
                            (do
                                (Compiler'checkSpecs ___v, ___form)

                                (try
                                    (let [#_"ISeq" ___args (ร RT'cons(___form, RT'cons(Compiler'LOCAL_ENV.get(), (next ___form))))]
                                        (ยง return (.applyTo ___v, ___args))
                                    )
                                    (ยง catch ArityException ___e
                                        ;; hide the 2 extra params for a macro
                                        (throw (ร ArityException'new-2((:actual ___e) - 2, (:name ___e))))
                                    )
                                )
                            )
                            (do
                                (when (ยง instance? Symbol ___op)
                                    (let [#_"Symbol" ___sym (cast' Symbol ___op)]
                                        (let [#_"String" ___sname (:name ___sym)]
                                            ;; (.substring s 2 5) => (. s substring 2 5)
                                            (cond (ร (:name ___sym).charAt(0) == \.)
                                                (do
                                                    (when (ร RT'length(___form) < 2)
                                                        (throw (IllegalArgumentException. "Malformed member expression, expecting (.member target ...)"))
                                                    )
                                                    (let [#_"Symbol" ___meth (ร Symbol'intern-1(___sname.substring(1)))]
                                                        (let [#_"Object" ___target (RT'second ___form)]
                                                            (when (some? (HostExpr'maybeClass ___target, false))
                                                                (ยง ass ___target (ร (cast' IObj (RT'list-2 Compiler'IDENTITY, ___target)).withMeta(RT'map(RT'TAG_KEY, Compiler'CLASS))))
                                                            )
                                                            (ยง return (ร Compiler'preserveTag(___form, RT'listStar-4(Compiler'DOT, ___target, ___meth, (next ___form).next()))))
                                                        )
                                                    )
                                                )
                                                (Compiler'namesStaticMember ___sym)
                                                (do
                                                    (let [#_"Symbol" ___target (ร Symbol'intern-1((:ns ___sym)))]
                                                        (let [#_"Class" ___c (HostExpr'maybeClass ___target, false)]
                                                            (when (some? ___c)
                                                                (let [#_"Symbol" ___meth (ร Symbol'intern-1((:name ___sym)))]
                                                                    (ยง return (ร Compiler'preserveTag(___form, RT'listStar-4(Compiler'DOT, ___target, ___meth, (next ___form)))))
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                                :else
                                                (do
                                                    ;; (s.substring 2 5) => (. s substring 2 5)
                                                    ;; also (package.class.name ...) (. package.class name ...)
                                                    (let [#_"int" ___idx (.lastIndexOf ___sname, \.)]
                                                        ;; (StringBuilder. "foo") => (new StringBuilder "foo")
                                                        (when (ร ___idx == (.length ___sname) - 1)
                                                            (ยง return (ร RT'listStar-3(Compiler'NEW, Symbol'intern-1(___sname.substring(0, ___idx)), (next ___form))))
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
        ___x
    )

    (defn #_"Object" Compiler'macroexpand [#_"Object" ___form]
        (let [#_"Object" ___exf (Compiler'macroexpand1 ___form)]
            (when (not= ___exf ___form)
                (ยง return (Compiler'macroexpand ___exf))
            )
            ___form
        )
    )

    (defn- #_"Expr" Compiler'analyzeSeq [#_"Context" ___context, #_"ISeq" ___form, #_"String" ___name]
        (let [#_"Object" ___line (Compiler'lineDeref)]
            (let [#_"Object" ___column (Compiler'columnDeref)]
                (when (and (some? (RT'meta ___form)) (ร RT'meta(___form).containsKey(RT'LINE_KEY)))
                    (ยง ass ___line (ร RT'meta(___form).valAt(RT'LINE_KEY)))
                )
                (when (and (some? (RT'meta ___form)) (ร RT'meta(___form).containsKey(RT'COLUMN_KEY)))
                    (ยง ass ___column (ร RT'meta(___form).valAt(RT'COLUMN_KEY)))
                )
                (ร Var'pushThreadBindings(RT'map(Compiler'LINE, ___line, Compiler'COLUMN, ___column)))
                (try
                    (let [#_"Object" ___me (Compiler'macroexpand1 ___form)]
                        (when (not= ___me ___form)
                            (ยง return (Compiler'analyze-3 ___context, ___me, ___name))
                        )

                        (let [#_"Object" ___op (RT'first ___form)]
                            (when (nil? ___op)
                                (throw (IllegalArgumentException. (str "Can't call nil, form: " ___form)))
                            )
                            (let [#_"IFn" ___inline (ร Compiler'isInline(___op, RT'count(RT'next(___form))))]
                                (when (some? ___inline)
                                    (ยง return (ร Compiler'analyze-2(___context, Compiler'preserveTag(___form, ___inline.applyTo(RT'next(___form))))))
                                )
                                (ยง let [#_"IParser" ___p]
                                    (cond (.equals ___op, Compiler'FN)
                                        (do
                                            (FnExpr'parse ___context, ___form, ___name)
                                        )
                                        (some? (ยง ass ___p (cast' IParser (.valAt Compiler'specials, ___op))))
                                        (do
                                            (.parse ___p, ___context, ___form)
                                        )
                                        :else
                                        (do
                                            (InvokeExpr'parse ___context, ___form)
                                        )
                                    )
                                )
                            )
                        )
                    )
                    (catch Throwable ___e
                        (if (not (ยง instance? CompilerException ___e))
                            (do
                                (throw (ร CompilerException'new((cast String (.deref Compiler'SOURCE_PATH)), Compiler'lineDeref(), Compiler'columnDeref(), ___e)))
                            )
                            (do
                                (throw (cast' CompilerException ___e))
                            )
                        )
                    )
                    (finally
                        (Var'popThreadBindings)
                    )
                )
            )
        )
    )

    (defn #_"String" Compiler'errorMsg [#_"String" ___source, #_"int" ___line, #_"int" ___column, #_"String" ___s]
        (String/format "%s, compiling:(%s:%d:%d)", (object-array [ ___s, ___source, ___line, ___column ]))
    )

    (defn #_"Object" Compiler'eval-1 [#_"Object" ___form]
        (Compiler'eval-2 ___form, true)
    )

    (defn #_"Object" Compiler'eval-2 [#_"Object" ___form, #_"boolean" ___freshLoader]
        (let [#_"boolean" ___createdLoader false]
            (when true ;; !LOADER.isBound()
                (ร Var'pushThreadBindings(RT'map(Compiler'LOADER, RT'makeClassLoader())))
                (ยง ass ___createdLoader true)
            )
            (try
                (let [#_"Object" ___line (Compiler'lineDeref)]
                    (let [#_"Object" ___column (Compiler'columnDeref)]
                        (when (and (some? (RT'meta ___form)) (.containsKey (RT'meta ___form), RT'LINE_KEY))
                            (ยง ass ___line (ร RT'meta(___form).valAt(RT'LINE_KEY)))
                        )
                        (when (and (some? (RT'meta ___form)) (.containsKey (RT'meta ___form), RT'COLUMN_KEY))
                            (ยง ass ___column (ร RT'meta(___form).valAt(RT'COLUMN_KEY)))
                        )
                        (ร Var'pushThreadBindings(RT'map(Compiler'LINE, ___line, Compiler'COLUMN, ___column)))
                        (try
                            (ยง ass ___form (Compiler'macroexpand ___form))
                            (cond (and (ยง instance? ISeq ___form) (Util'equals (RT'first ___form), Compiler'DO))
                                (do
                                    (let [#_"ISeq" ___s (RT'next ___form)]
                                        (loop-when-recur [___s ___s] (some? (RT'next ___s)) [(RT'next ___s)]
                                            (ร Compiler'eval-2(RT'first(___s), false))
                                        )
                                        (ร Compiler'eval-2(RT'first(___s), false))
                                    )
                                )
                                (or (ยง instance? IType ___form) (and (ยง instance? IPersistentCollection ___form) (not (and (ยง instance? Symbol (RT'first ___form)) (.startsWith (:name (cast' Symbol (RT'first ___form))), "def")))))
                                (do
                                    (let [#_"ObjExpr" ___fexpr (cast' ObjExpr (ร Compiler'analyze-3(:Context'EXPRESSION, RT'list-3(Compiler'FN, PersistentVector'EMPTY, ___form), (str "eval" (RT'nextID)))))]
                                        (let [#_"IFn" ___fn (cast' IFn (.eval ___fexpr))]
                                            (.invoke ___fn)
                                        )
                                    )
                                )
                                :else
                                (do
                                    (let [#_"Expr" ___expr (ร Compiler'analyze-2(:Context'EVAL, ___form))]
                                        (.eval ___expr)
                                    )
                                )
                            )
                            (finally
                                (Var'popThreadBindings)
                            )
                        )
                    )
                )
                (finally
                    (when ___createdLoader
                        (Var'popThreadBindings)
                    )
                )
            )
        )
    )

    (defn- #_"int" Compiler'registerConstant [#_"Object" ___o]
        (when (not (.isBound Compiler'CONSTANTS))
            (ยง return -1)
        )
        (let [#_"PersistentVector" ___v (cast' PersistentVector (.deref Compiler'CONSTANTS))]
            (let [#_"IdentityHashMap<Object, Integer>" ___ids (ร (IdentityHashMap<Object, Integer>) Compiler'CONSTANT_IDS.deref())]
                (let [#_"Integer" ___i (.get ___ids, ___o)]
                    (when (some? ___i)
                        (ยง return ___i)
                    )
                    (ร Compiler'CONSTANTS.set(RT'conj(___v, ___o)))
                    (ร ___ids.put(___o, (count ___v)))
                    (count ___v)
                )
            )
        )
    )

    (defn- #_"KeywordExpr" Compiler'registerKeyword [#_"Keyword" ___keyword]
        (when (not (.isBound Compiler'KEYWORDS))
            (ยง return (KeywordExpr'new ___keyword))
        )

        (let [#_"IPersistentMap" ___keywordsMap (cast' IPersistentMap (.deref Compiler'KEYWORDS))]
            (let [#_"Object" ___id (RT'get-2 ___keywordsMap, ___keyword)]
                (when (nil? ___id)
                    (ร Compiler'KEYWORDS.set(RT'assoc(___keywordsMap, ___keyword, Compiler'registerConstant(___keyword))))
                )
                (KeywordExpr'new ___keyword)
            )
        )
    )

    (defn- #_"int" Compiler'registerKeywordCallsite [#_"Keyword" ___keyword]
        (when (not (.isBound Compiler'KEYWORD_CALLSITES))
            (throw (IllegalAccessError. "KEYWORD_CALLSITES is not bound"))
        )

        (let [#_"IPersistentVector" ___keywordCallsites (cast' IPersistentVector (.deref Compiler'KEYWORD_CALLSITES))]
            (ยง ass ___keywordCallsites (.cons ___keywordCallsites, ___keyword))
            (.set Compiler'KEYWORD_CALLSITES, ___keywordCallsites)
            (ร (count ___keywordCallsites) - 1)
        )
    )

    (defn- #_"int" Compiler'registerProtocolCallsite [#_"Var" ___v]
        (when (not (.isBound Compiler'PROTOCOL_CALLSITES))
            (throw (IllegalAccessError. "PROTOCOL_CALLSITES is not bound"))
        )

        (let [#_"IPersistentVector" ___protocolCallsites (cast' IPersistentVector (.deref Compiler'PROTOCOL_CALLSITES))]
            (ยง ass ___protocolCallsites (.cons ___protocolCallsites, ___v))
            (.set Compiler'PROTOCOL_CALLSITES, ___protocolCallsites)
            (ร (count ___protocolCallsites) - 1)
        )
    )

    (defn- #_"void" Compiler'registerVarCallsite [#_"Var" ___v]
        (when (not (.isBound Compiler'VAR_CALLSITES))
            (throw (IllegalAccessError. "VAR_CALLSITES is not bound"))
        )

        (let [#_"IPersistentCollection" ___varCallsites (cast' IPersistentCollection (.deref Compiler'VAR_CALLSITES))]
            (ยง ass ___varCallsites (.cons ___varCallsites, ___v))
            (.set Compiler'VAR_CALLSITES, ___varCallsites)
            nil
        )
    )

    (defn #_"ISeq" Compiler'fwdPath [#_"PathNode" ___p1]
        (let [#_"ISeq" ___ret nil]
            (loop-when-recur [___p1 ___p1] (some? ___p1) [(:parent ___p1)]
                (ยง ass ___ret (RT'cons ___p1, ___ret))
            )
            ___ret
        )
    )

    (defn #_"PathNode" Compiler'commonPath [#_"PathNode" ___n1, #_"PathNode" ___n2]
        (let [#_"ISeq" ___xp (Compiler'fwdPath ___n1)]
            (let [#_"ISeq" ___yp (Compiler'fwdPath ___n2)]
                (when (ร RT'first(___xp) != RT'first(___yp))
                    (ยง return nil)
                )
                (while (and (some? (RT'second ___xp)) (ร (RT'second ___xp) == (RT'second ___yp)))
                    (ยง ass ___xp (next ___xp))
                    (ยง ass ___yp (next ___yp))
                )
                (cast' PathNode (RT'first ___xp))
            )
        )
    )

    (defn #_"void" Compiler'addAnnotation [#_"Object" ___visitor, #_"IPersistentMap" ___meta]
        (when (and (some? ___meta) (.isBound Compiler'ADD_ANNOTATIONS))
            (.invoke Compiler'ADD_ANNOTATIONS, ___visitor, ___meta)
        )
        nil
    )

    (defn #_"void" Compiler'addParameterAnnotation [#_"Object" ___visitor, #_"IPersistentMap" ___meta, #_"int" ___i]
        (when (and (some? ___meta) (.isBound Compiler'ADD_ANNOTATIONS))
            (.invoke Compiler'ADD_ANNOTATIONS, ___visitor, ___meta, ___i)
        )
        nil
    )

    (defn- #_"Expr" Compiler'analyzeSymbol [#_"Symbol" ___sym]
        (let [#_"Symbol" ___tag (Compiler'tagOf ___sym)]
            (cond (ร (nil? (:ns ___sym))) ;; ns-qualified syms are always Vars
                (do
                    (let [#_"LocalBinding" ___b (Compiler'referenceLocal ___sym)]
                        (when (some? ___b)
                            (ยง return (LocalBindingExpr'new ___b, ___tag))
                        )
                    )
                )
                (nil? (ร Compiler'namespaceFor-1(___sym)))
                (do
                    (let [#_"Symbol" ___nsSym (ร Symbol'intern-1((:ns ___sym)))]
                        (let [#_"Class" ___c (HostExpr'maybeClass ___nsSym, false)]
                            (when (some? ___c)
                                (when (some? (Reflector'getField ___c, (:name ___sym), true))
                                    (ยง return (ร StaticFieldExpr'new(Compiler'lineDeref(), Compiler'columnDeref(), ___c, (:name ___sym), ___tag)))
                                )
                                (throw (Util'runtimeException-1 (str "Unable to find static field: " (:name ___sym) " in " ___c)))
                            )
                        )
                    )
                )
            )
            (let [#_"Object" ___o (resolve ___sym)]
                (cond (ยง instance? Var ___o)
                    (do
                        (let [#_"Var" ___v (cast' Var ___o)]
                            (when (some? (Compiler'isMacro ___v))
                                (throw (Util'runtimeException-1 (str "Can't take value of a macro: " ___v)))
                            )
                            (when (ร RT'booleanCast-1o(RT'get-2((.meta ___v), RT'CONST_KEY)))
                                (ยง return (ร Compiler'analyze-2(:Context'EXPRESSION, RT'list-2(Compiler'QUOTE, (.get ___v)))))
                            )
                            (Compiler'registerVar ___v)
                            (ยง return (VarExpr'new ___v, ___tag))
                        )
                    )
                    (instance? Class ___o)
                    (do
                        (ยง return (ConstantExpr'new ___o))
                    )
                    (ยง instance? Symbol ___o)
                    (do
                        (ยง return (UnresolvedVarExpr'new (cast' Symbol ___o)))
                    )
                )

                (throw (Util'runtimeException-1 (str "Unable to resolve symbol: " ___sym " in this context")))
            )
        )
    )

    (defn #_"String" Compiler'destubClassName [#_"String" ___className]
        ;; skip over prefix + '.' or '/'
        (when (.startsWith ___className, Compiler'COMPILE_STUB_PREFIX)
            (ยง return (.substring ___className, (inc (.length Compiler'COMPILE_STUB_PREFIX))))
        )
        ___className
    )

    (defn #_"Type" Compiler'getType [#_"Class" ___c]
        (let [#_"String" ___descriptor (ร Type/getType(___c).getDescriptor())]
            (when (.startsWith ___descriptor, "L")
                (ยง ass ___descriptor (str "L" (ร Compiler'destubClassName(___descriptor.substring(1)))))
            )
            (ยง unsure Type/getType ___descriptor)
        )
    )

    (defn #_"Object" Compiler'resolve-2 [#_"Symbol" ___sym, #_"boolean" ___allowPrivate]
        (ร Compiler'resolveIn((.currentNS this), ___sym, ___allowPrivate))
    )

    (defn #_"Object" Compiler'resolve-1 [#_"Symbol" ___sym]
        (ร Compiler'resolveIn((.currentNS this), ___sym, false))
    )

    (defn #_"Namespace" Compiler'namespaceFor-1 [#_"Symbol" ___sym]
        (ร Compiler'namespaceFor-2((.currentNS this), ___sym))
    )

    (defn #_"Namespace" Compiler'namespaceFor-2 [#_"Namespace" ___inns, #_"Symbol" ___sym]
        ;; note, presumes non-nil sym.ns
        ;; first check against currentNS' aliases...
        (let [#_"Symbol" ___nsSym (ร Symbol'intern-1((:ns ___sym)))]
            (let [#_"Namespace" ___ns (.lookupAlias ___inns, ___nsSym)]
                (when (nil? ___ns)
                    ;; ...otherwise check the Namespaces map.
                    (ยง ass ___ns (Namespace'find ___nsSym))
                )
                ___ns
            )
        )
    )

    (defn #_"Object" Compiler'resolveIn [#_"Namespace" ___n, #_"Symbol" ___sym, #_"boolean" ___allowPrivate]
        ;; note - ns-qualified vars must already exist
        (cond (ร (some? (:ns ___sym)))
            (do
                (let [#_"Namespace" ___ns (Compiler'namespaceFor-2 ___n, ___sym)]
                    (when (nil? ___ns)
                        (throw (Util'runtimeException-1 (str "No such namespace: " (:ns ___sym))))
                    )

                    (let [#_"Var" ___v (ร ___ns.findInternedVar(Symbol'intern-1((:name ___sym))))]
                        (cond (nil? ___v)
                            (do
                                (throw (Util'runtimeException-1 (str "No such var: " ___sym)))
                            )
                            (and (ร (:ns ___v) != (.currentNS this)) (not (.isPublic ___v)) (not ___allowPrivate))
                            (do
                                (throw (IllegalStateException. (str "var: " ___sym " is not public")))
                            )
                        )
                        ___v
                    )
                )
            )
            (or (pos? (.indexOf (:name ___sym), \.)) (ร (:name ___sym).charAt(0) == \[))
            (do
                (ร RT'classForName-1((:name ___sym)))
            )
            (.equals ___sym, Compiler'NS)
            (do
                RT'NS_VAR
            )
            (.equals ___sym, Compiler'IN_NS)
            (do
                RT'IN_NS_VAR
            )
            :else
            (do
                (when (ร Util'equals(___sym, Compiler'COMPILE_STUB_SYM.get()))
                    (ยง return (.get Compiler'COMPILE_STUB_CLASS))
                )
                (let [#_"Object" ___o (.getMapping ___n, ___sym)]
                    (when (nil? ___o)
                        (if (ร RT'booleanCast-1o(RT'ALLOW_UNRESOLVED_VARS.deref()))
                            (do
                                (ยง return ___sym)
                            )
                            (do
                                (throw (Util'runtimeException-1 (str "Unable to resolve symbol: " ___sym " in this context")))
                            )
                        )
                    )
                    ___o
                )
            )
        )
    )

    (defn #_"Object" Compiler'maybeResolveIn [#_"Namespace" ___n, #_"Symbol" ___sym]
        ;; note - ns-qualified vars must already exist
        (cond (ร (some? (:ns ___sym)))
            (do
                (let [#_"Namespace" ___ns (Compiler'namespaceFor-2 ___n, ___sym)]
                    (when (nil? ___ns)
                        (ยง return nil)
                    )
                    (let [#_"Var" ___v (ร ___ns.findInternedVar(Symbol'intern-1((:name ___sym))))]
                        (when (nil? ___v)
                            (ยง return nil)
                        )
                        ___v
                    )
                )
            )
            (or (and (pos? (.indexOf (:name ___sym), \.)) (not (.endsWith (:name ___sym), "."))) (ร (:name ___sym).charAt(0) == \[))
            (do
                (ร RT'classForName-1((:name ___sym)))
            )
            (.equals ___sym, Compiler'NS)
            (do
                RT'NS_VAR
            )
            (.equals ___sym, Compiler'IN_NS)
            (do
                RT'IN_NS_VAR
            )
            :else
            (do
                (let [#_"Object" ___o (.getMapping ___n, ___sym)]
                    ___o
                )
            )
        )
    )

    (defn #_"Var" Compiler'lookupVar-3 [#_"Symbol" ___sym, #_"boolean" ___internNew, #_"boolean" ___registerMacro]
        (let [#_"Var" ___var nil]
            ;; note - ns-qualified vars in other namespaces must already exist
            (cond (ร (some? (:ns ___sym)))
                (do
                    (let [#_"Namespace" ___ns (Compiler'namespaceFor-1 ___sym)]
                        (when (nil? ___ns)
                            (ยง return nil)
                        )
                        (let [#_"Symbol" ___name (ร Symbol'intern-1((:name ___sym)))]
                            (if (and ___internNew (ร ___ns == (.currentNS this)))
                                (do
                                    (ยง ass ___var (.intern (.currentNS this), ___name))
                                )
                                (do
                                    (ยง ass ___var (.findInternedVar ___ns, ___name))
                                )
                            )
                        )
                    )
                )
                (.equals ___sym, Compiler'NS)
                (do
                    (ยง ass ___var RT'NS_VAR)
                )
                (.equals ___sym, Compiler'IN_NS)
                (do
                    (ยง ass ___var RT'IN_NS_VAR)
                )
                :else
                (do
                    ;; is it mapped?
                    (let [#_"Object" ___o (ร (.currentNS this).getMapping(___sym))]
                        (cond (nil? ___o)
                            (do
                                ;; introduce a new var in the current ns
                                (when ___internNew
                                    (ยง ass ___var (.intern (.currentNS this), (Symbol'intern-1 (:name ___sym))))
                                )
                            )
                            (ยง instance? Var ___o)
                            (do
                                (ยง ass ___var (cast' Var ___o))
                            )
                            :else
                            (do
                                (throw (Util'runtimeException-1 (str "Expecting var, but " ___sym " is mapped to " ___o)))
                            )
                        )
                    )
                )
            )
            (when (and (some? ___var) (or (not (.isMacro ___var)) ___registerMacro))
                (Compiler'registerVar ___var)
            )
            ___var
        )
    )

    (defn #_"Var" Compiler'lookupVar-2 [#_"Symbol" ___sym, #_"boolean" ___internNew]
        (Compiler'lookupVar-3 ___sym, ___internNew, true)
    )

    (defn- #_"void" Compiler'registerVar [#_"Var" ___var]
        (when (not (.isBound Compiler'VARS))
            (ยง return nil)
        )
        (let [#_"IPersistentMap" ___varsMap (cast' IPersistentMap (.deref Compiler'VARS))]
            (let [#_"Object" ___id (RT'get-2 ___varsMap, ___var)]
                (when (nil? ___id)
                    (ร Compiler'VARS.set(RT'assoc(___varsMap, ___var, Compiler'registerConstant(___var))))
                )
                nil
            )
        )
    )

    (defn #_"Namespace" Compiler'currentNS []
        (cast' Namespace (.deref RT'CURRENT_NS))
    )

    (defn #_"void" Compiler'closeOver [#_"LocalBinding" ___b, #_"ObjMethod" ___method]
        (when (and (some? ___b) (some? ___method))
            (let [#_"LocalBinding" ___lb (cast' LocalBinding (ร RT'get-2((:locals ___method), ___b)))]
                (if (nil? ___lb)
                    (do
                        (ยง ass (:closes (:objx ___method)) (cast' IPersistentMap (ร RT'assoc((:closes (:objx ___method)), ___b, ___b))))
                        (ร Compiler'closeOver(___b, (:parent ___method)))
                    )
                    (do
                        (when (zero? (:idx ___lb))
                            (ยง ass (:usesThis ___method) true)
                        )
                        (when (some? (.deref Compiler'IN_CATCH_FINALLY))
                            (ยง ass (:localsUsedInCatchFinally ___method) (cast' PersistentHashSet (.cons (:localsUsedInCatchFinally ___method), (:idx ___b))))
                        )
                    )
                )
            )
        )
        nil
    )

    (defn #_"LocalBinding" Compiler'referenceLocal [#_"Symbol" ___sym]
        (when (not (.isBound Compiler'LOCAL_ENV))
            (ยง return nil)
        )
        (let [#_"LocalBinding" ___b (cast' LocalBinding (ร RT'get-2(Compiler'LOCAL_ENV.deref(), ___sym)))]
            (when (some? ___b)
                (let [#_"ObjMethod" ___method (cast' ObjMethod (.deref Compiler'METHOD))]
                    (when (zero? (:idx ___b))
                        (ยง ass (:usesThis ___method) true)
                    )
                    (Compiler'closeOver ___b, ___method)
                )
            )
            ___b
        )
    )

    (defn- #_"Symbol" Compiler'tagOf [#_"Object" ___o]
        (let [#_"Object" ___tag (ร RT'get-2(RT'meta(___o), RT'TAG_KEY))]
            (cond (ยง instance? Symbol ___tag)
                (do
                    (ยง return (cast' Symbol ___tag))
                )
                (instance? String ___tag)
                (do
                    (ยง return (ร Symbol'intern-2(nil, (cast String ___tag))))
                )
            )
            nil
        )
    )

    (defn #_"Object" Compiler'loadFile [#_"String" ___file] #_(ยง throws IOException)
        (let [#_"FileInputStream" ___f (FileInputStream. ___file)]
            (try
                (Compiler'load-3 (InputStreamReader. ___f, RT'UTF8), (.getAbsolutePath (File. ___file)), (.getName (File. ___file)))
                (finally
                    (.close ___f)
                )
            )
        )
    )

    (defn #_"Object" Compiler'load-1 [#_"Reader" ___rdr]
        (Compiler'load-3 ___rdr, nil, "NO_SOURCE_FILE")
    )

    (defn #_"void" Compiler'consumeWhitespaces [#_"LineNumberingPushbackReader" ___pushbackReader]
        (let [#_"int" ___ch (LispReader'read1 ___pushbackReader)]
            (while (LispReader'isWhitespace ___ch)
                (ยง ass ___ch (LispReader'read1 ___pushbackReader))
            )
            (LispReader'unread ___pushbackReader, ___ch)
            nil
        )
    )

    (ยง def- #_"Object" Compiler'OPTS_COND_ALLOWED (RT'mapUniqueKeys LispReader'OPT_READ_COND, LispReader'COND_ALLOW))

    (defn- #_"Object" Compiler'readerOpts [#_"String" ___sourceName]
        (if (and (some? ___sourceName) (.endsWith ___sourceName, ".clic"))
            (do
                Compiler'OPTS_COND_ALLOWED
            )
            (do
                nil
            )
        )
    )

    (defn #_"Object" Compiler'load-3 [#_"Reader" ___rdr, #_"String" ___sourcePath, #_"String" ___sourceName]
        (let [#_"Object" ___EOF (Object.)]
            (let [#_"Object" ___ret nil]
                (let [#_"LineNumberingPushbackReader" ___pushbackReader (if (ยง instance? LineNumberingPushbackReader ___rdr) (cast' LineNumberingPushbackReader ___rdr) (LineNumberingPushbackReader'new-1 ___rdr))]
                    (Compiler'consumeWhitespaces ___pushbackReader)
                    (ร Var'pushThreadBindings(RT'mapUniqueKeys(
                        (object-array [
                            Compiler'LOADER         (RT'makeClassLoader)
                            Compiler'SOURCE_PATH    ___sourcePath
                            Compiler'SOURCE         ___sourceName
                            Compiler'METHOD         nil
                            Compiler'LOCAL_ENV      nil
                            Compiler'LOOP_LOCALS    nil
                            Compiler'NEXT_LOCAL_NUM 0
                            RT'READEVAL             RT'T
                            RT'CURRENT_NS           (.deref RT'CURRENT_NS)
                            Compiler'LINE_BEFORE    (.getLineNumber ___pushbackReader)
                            Compiler'COLUMN_BEFORE  (.getColumnNumber ___pushbackReader)
                            Compiler'LINE_AFTER     (.getLineNumber ___pushbackReader)
                            Compiler'COLUMN_AFTER   (.getColumnNumber ___pushbackReader)
                            RT'UNCHECKED_MATH       (.deref RT'UNCHECKED_MATH)
                            RT'WARN_ON_REFLECTION   (.deref RT'WARN_ON_REFLECTION)
                            RT'DATA_READERS         (.deref RT'DATA_READERS)
                        ])
                    )))

                    (let [#_"Object" ___readerOpts (Compiler'readerOpts ___sourceName)]
                        (try
                            (loop-when-recur [#_"Object" ___r (LispReader'read-5 ___pushbackReader, false, ___EOF, false, ___readerOpts)] (not= ___r ___EOF) [(LispReader'read-5 ___pushbackReader, false, ___EOF, false, ___readerOpts)]
                                (Compiler'consumeWhitespaces ___pushbackReader)
                                (.set Compiler'LINE_AFTER, (.getLineNumber ___pushbackReader))
                                (.set Compiler'COLUMN_AFTER, (.getColumnNumber ___pushbackReader))
                                (ยง ass ___ret (Compiler'eval-2 ___r, false))
                                (.set Compiler'LINE_BEFORE, (.getLineNumber ___pushbackReader))
                                (.set Compiler'COLUMN_BEFORE, (.getColumnNumber ___pushbackReader))
                            )
                            (ยง catch LispReaderException ___e
                                (throw (ร CompilerException'new(___sourcePath, (:line ___e), (:column ___e), (.getCause ___e))))
                            )
                            (catch Throwable ___e
                                (if (not (ยง instance? CompilerException ___e))
                                    (do
                                        (throw (ร CompilerException'new(___sourcePath, (cast Integer (.deref Compiler'LINE_BEFORE)), (cast Integer (.deref Compiler'COLUMN_BEFORE)), ___e)))
                                    )
                                    (do
                                        (throw (cast' CompilerException ___e))
                                    )
                                )
                            )
                            (finally
                                (Var'popThreadBindings)
                            )
                        )
                        ___ret
                    )
                )
            )
        )
    )

    (defn #_"void" Compiler'writeClassFile [#_"String" ___internalName, #_"byte[]" ___bytecode] #_(ยง throws IOException)
        (let [#_"String" ___genPath (cast String (.deref Compiler'COMPILE_PATH))]
            (when (nil? ___genPath)
                (throw (Util'runtimeException-1 "*compile-path* not set"))
            )
            (let [#_"String[]" ___dirs (.split ___internalName, "/")]
                (let [#_"String" ___p ___genPath]
                    (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength ___dirs) - 1) [(inc ___i)]
                        (ยง ass ___p (ร ___p + File/separator + ___dirs[___i]))
                        (.mkdir (File. ___p))
                    )
                    (let [#_"String" ___path (str ___genPath File/separator ___internalName ".class")]
                        (let [#_"File" ___cf (ยง unsure File. ___path)]
                            (.createNewFile ___cf)
                            (let [#_"FileOutputStream" ___cfs (ยง unsure FileOutputStream. ___cf)]
                                (try
                                    (.write ___cfs, ___bytecode)
                                    (.flush ___cfs)
                                    (finally
                                        (.close ___cfs)
                                    )
                                )
                                nil
                            )
                        )
                    )
                )
            )
        )
    )

    (defn #_"void" Compiler'pushNS []
        (ร Var'pushThreadBindings(PersistentHashMap'create-1a(
            (object-array [
                Var'intern-2s(Symbol'intern-1("cloiure.core"), Symbol'intern-1("*ns*")).setDynamic() nil
            ])
        )))
        nil
    )

    (defn #_"void" Compiler'pushNSandLoader [#_"ClassLoader" ___loader]
        (ร Var'pushThreadBindings(RT'map(
            (object-array [
                Var'intern-2s(Symbol'intern-1("cloiure.core"), Symbol'intern-1("*ns*")).setDynamic() nil
                RT'FN_LOADER_VAR                                                                    ___loader
                RT'READEVAL                                                                         RT'T
            ])
        )))
        nil
    )

    (defn #_"ILookupThunk" Compiler'getLookupThunk [#_"Object" ___target, #_"Keyword" ___k]
        nil
    )

    (defn #_"void" Compiler'compile1 [#_"GeneratorAdapter" ___gen, #_"ObjExpr" ___objx, #_"Object" ___form]
        (let [#_"Object" ___line (Compiler'lineDeref)]
            (let [#_"Object" ___column (Compiler'columnDeref)]
                (when (and (some? (RT'meta ___form)) (.containsKey (RT'meta ___form), RT'LINE_KEY))
                    (ยง ass ___line (ร RT'meta(___form).valAt(RT'LINE_KEY)))
                )
                (when (and (some? (RT'meta ___form)) (.containsKey (RT'meta ___form), RT'COLUMN_KEY))
                    (ยง ass ___column (ร RT'meta(___form).valAt(RT'COLUMN_KEY)))
                )
                (ร Var'pushThreadBindings(RT'map(
                    (object-array [
                        Compiler'LINE   ___line
                        Compiler'COLUMN ___column
                        Compiler'LOADER (RT'makeClassLoader)
                    ])
                )))
                (try
                    (ยง ass ___form (Compiler'macroexpand ___form))
                    (if (and (ยง instance? ISeq ___form) (Util'equals (RT'first ___form), Compiler'DO))
                        (do
                            (loop-when-recur [#_"ISeq" ___s (RT'next ___form)] (some? ___s) [(RT'next ___s)]
                                (ร Compiler'compile1(___gen, ___objx, RT'first(___s)))
                            )
                        )
                        (do
                            (let [#_"Expr" ___expr (ร Compiler'analyze-2(:Context'EVAL, ___form))]
                                (ยง ass (:keywords ___objx) (cast' IPersistentMap (.deref Compiler'KEYWORDS)))
                                (ยง ass (:vars ___objx) (cast' IPersistentMap (.deref Compiler'VARS)))
                                (ยง ass (:constants ___objx) (cast' PersistentVector (.deref Compiler'CONSTANTS)))
                                (ร ___expr.emit(:Context'EXPRESSION, ___objx, ___gen))
                                (.eval ___expr)
                            )
                        )
                    )
                    (finally
                        (Var'popThreadBindings)
                    )
                )
                nil
            )
        )
    )

    (defn #_"Object" Compiler'compile [#_"Reader" ___rdr, #_"String" ___sourcePath, #_"String" ___sourceName] #_(ยง throws IOException)
        (when (nil? (.deref Compiler'COMPILE_PATH))
            (throw (Util'runtimeException-1 "*compile-path* not set"))
        )

        (let [#_"Object" ___EOF (Object.)]
            (let [#_"Object" ___ret nil]
                (let [#_"LineNumberingPushbackReader" ___pushbackReader (if (ยง instance? LineNumberingPushbackReader ___rdr) (cast' LineNumberingPushbackReader ___rdr) (LineNumberingPushbackReader'new-1 ___rdr))]
                    (ร Var'pushThreadBindings(RT'mapUniqueKeys(
                        (object-array [
                            Compiler'SOURCE_PATH    ___sourcePath
                            Compiler'SOURCE         ___sourceName
                            Compiler'METHOD         nil
                            Compiler'LOCAL_ENV      nil
                            Compiler'LOOP_LOCALS    nil
                            Compiler'NEXT_LOCAL_NUM 0
                            RT'READEVAL             RT'T
                            RT'CURRENT_NS           (.deref RT'CURRENT_NS)
                            Compiler'LINE_BEFORE    (.getLineNumber ___pushbackReader)
                            Compiler'COLUMN_BEFORE  (.getColumnNumber ___pushbackReader)
                            Compiler'LINE_AFTER     (.getLineNumber ___pushbackReader)
                            Compiler'COLUMN_AFTER   (.getColumnNumber ___pushbackReader)
                            Compiler'CONSTANTS      PersistentVector'EMPTY
                            Compiler'CONSTANT_IDS   (IdentityHashMap.)
                            Compiler'KEYWORDS       PersistentHashMap'EMPTY
                            Compiler'VARS           PersistentHashMap'EMPTY
                            RT'UNCHECKED_MATH       (.deref RT'UNCHECKED_MATH)
                            RT'WARN_ON_REFLECTION   (.deref RT'WARN_ON_REFLECTION)
                            RT'DATA_READERS         (.deref RT'DATA_READERS)
                        ])
                    )))

                    (try
                        ;; generate loader class
                        (let [#_"ObjExpr" ___objx (ObjExpr'new nil)]
                            (ยง ass (:internalName ___objx) (str (ร ___sourcePath.replace(File/separator, "/").substring(0, ___sourcePath.lastIndexOf(\.))) RT'LOADER_SUFFIX))

                            (ยง ass (:objtype ___objx) (Type/getObjectType (:internalName ___objx)))
                            (let [#_"ClassWriter" ___cw (ClassWriter. ClassWriter/COMPUTE_MAXS)]
                                (let [#_"ClassVisitor" ___cv ___cw]
                                    (ร ___cv.visit(Opcodes/V1_5, (+ Opcodes/ACC_PUBLIC Opcodes/ACC_SUPER), (:internalName ___objx), nil, "java/lang/Object", nil))

                                    ;; static load method
                                    (let [#_"GeneratorAdapter" ___gen (GeneratorAdapter. (+ Opcodes/ACC_PUBLIC Opcodes/ACC_STATIC), (Method/getMethod "void load ()"), nil, nil, ___cv)]
                                        (.visitCode ___gen)

                                        (let [#_"Object" ___readerOpts (Compiler'readerOpts ___sourceName)]
                                            (loop-when-recur [#_"Object" ___r (LispReader'read-5 ___pushbackReader, false, ___EOF, false, ___readerOpts)] (not= ___r ___EOF) [(LispReader'read-5 ___pushbackReader, false, ___EOF, false, ___readerOpts)]
                                                (.set Compiler'LINE_AFTER, (.getLineNumber ___pushbackReader))
                                                (.set Compiler'COLUMN_AFTER, (.getColumnNumber ___pushbackReader))
                                                (Compiler'compile1 ___gen, ___objx, ___r)
                                                (.set Compiler'LINE_BEFORE, (.getLineNumber ___pushbackReader))
                                                (.set Compiler'COLUMN_BEFORE, (.getColumnNumber ___pushbackReader))
                                            )
                                            ;; end of load
                                            (.returnValue ___gen)
                                            (.endMethod ___gen)

                                            ;; static fields for constants
                                            (loop-when-recur [#_"int" ___i 0] (ร ___i < (:constants ___objx).count()) [(inc ___i)]
                                                (when (.contains (:usedConstants ___objx), ___i)
                                                    (ร ___cv.visitField((+ Opcodes/ACC_PUBLIC Opcodes/ACC_FINAL Opcodes/ACC_STATIC), ___objx.constantName(___i), ___objx.constantType(___i).getDescriptor(), nil, nil))
                                                )
                                            )

                                            (let [#_"int" ___INITS_PER 100]
                                                (let [#_"int" ___numInits (ร (:constants ___objx).count() / ___INITS_PER)]
                                                    (when (ร (:constants ___objx).count() % ___INITS_PER != 0)
                                                        (ยง ass ___numInits (inc ___numInits))
                                                    )

                                                    (loop-when-recur [#_"int" ___n 0] (< ___n ___numInits) [(inc ___n)]
                                                        (let [#_"GeneratorAdapter" ___clinitgen (GeneratorAdapter. (+ Opcodes/ACC_PUBLIC Opcodes/ACC_STATIC), (Method/getMethod (str "void __init" ___n"()")), nil, nil, ___cv)]
                                                            (.visitCode ___clinitgen)
                                                            (try
                                                                (ร Var'pushThreadBindings(RT'map(RT'PRINT_DUP, RT'T)))

                                                                (loop-when-recur [#_"int" ___i (* ___n ___INITS_PER)] (and (ร ___i < (:constants ___objx).count()) (ร ___i < (___n + 1) * ___INITS_PER)) [(inc ___i)]
                                                                    (when (.contains (:usedConstants ___objx), ___i)
                                                                        (ร ___objx.emitValue((:constants ___objx).nth(___i), ___clinitgen))
                                                                        (ร ___clinitgen.checkCast(___objx.constantType(___i)))
                                                                        (ร ___clinitgen.putStatic((:objtype ___objx), ___objx.constantName(___i), ___objx.constantType(___i)))
                                                                    )
                                                                )
                                                                (finally
                                                                    (Var'popThreadBindings)
                                                                )
                                                            )
                                                            (.returnValue ___clinitgen)
                                                            (.endMethod ___clinitgen)
                                                        )
                                                    )

                                                    ;; static init for constants, keywords and vars
                                                    (let [#_"GeneratorAdapter" ___clinitgen (GeneratorAdapter. (+ Opcodes/ACC_PUBLIC Opcodes/ACC_STATIC), (Method/getMethod "void <clinit> ()"), nil, nil, ___cv)]
                                                        (.visitCode ___clinitgen)
                                                        (let [#_"Label" ___startTry (.newLabel ___clinitgen)]
                                                            (let [#_"Label" ___endTry (.newLabel ___clinitgen)]
                                                                (let [#_"Label" ___end (.newLabel ___clinitgen)]
                                                                    (let [#_"Label" ___finallyLabel (.newLabel ___clinitgen)]
                                                                        (loop-when-recur [#_"int" ___n 0] (< ___n ___numInits) [(inc ___n)]
                                                                            (.invokeStatic ___clinitgen, (:objtype ___objx), (Method/getMethod (str "void __init" ___n "()")))
                                                                        )

                                                                        (ร ___clinitgen.push((:internalName ___objx).replace(\/, \.)))
                                                                        (ร ___clinitgen.invokeStatic(Compiler'RT_TYPE, Method/getMethod("Class classForName(String)")))
                                                                        (ร ___clinitgen.invokeVirtual(Compiler'CLASS_TYPE, Method/getMethod("ClassLoader getClassLoader()")))
                                                                        (ร ___clinitgen.invokeStatic(Type/getType((ยง class Compiler)), Method/getMethod("void pushNSandLoader(ClassLoader)")))
                                                                        (.mark ___clinitgen, ___startTry)
                                                                        (ร ___clinitgen.invokeStatic((:objtype ___objx), Method/getMethod("void load()")))
                                                                        (.mark ___clinitgen, ___endTry)
                                                                        (ร ___clinitgen.invokeStatic(Compiler'VAR_TYPE, Method/getMethod("void popThreadBindings()")))
                                                                        (.goTo ___clinitgen, ___end)

                                                                        (.mark ___clinitgen, ___finallyLabel)
                                                                        ;; exception should be on stack
                                                                        (ร ___clinitgen.invokeStatic(Compiler'VAR_TYPE, Method/getMethod("void popThreadBindings()")))
                                                                        (.throwException ___clinitgen)
                                                                        (.mark ___clinitgen, ___end)
                                                                        (.visitTryCatchBlock ___clinitgen, ___startTry, ___endTry, ___finallyLabel, nil)

                                                                        ;; end of static init
                                                                        (.returnValue ___clinitgen)
                                                                        (.endMethod ___clinitgen)

                                                                        ;; end of class
                                                                        (.visitEnd ___cv)

                                                                        (ร Compiler'writeClassFile((:internalName ___objx), (.toByteArray ___cw)))
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        (ยง catch LispReaderException ___e
                            (throw (ร CompilerException'new(___sourcePath, (:line ___e), (:column ___e), (.getCause ___e))))
                        )
                        (finally
                            (Var'popThreadBindings)
                        )
                    )
                    ___ret
                )
            )
        )
    )

    (defn #_"boolean" Compiler'inty [#_"Class" ___c]
        (or (ร ___c == Integer/TYPE) (ร ___c == Short/TYPE) (ร ___c == Byte/TYPE) (ร ___c == Character/TYPE))
    )

    (defn #_"Class" Compiler'retType [#_"Class" ___tc, #_"Class" ___ret]
        (when (nil? ___tc)
            (ยง return ___ret)
        )
        (when (nil? ___ret)
            (ยง return ___tc)
        )
        (when (and (.isPrimitive ___ret) (.isPrimitive ___tc))
            (when (or (and (Compiler'inty ___ret) (Compiler'inty ___tc)) (ร ___ret == ___tc))
                (ยง return ___tc)
            )
            (throw (UnsupportedOperationException. (str "Cannot coerce " ___ret " to " ___tc ", use a cast instead")))
        )
        ___tc
    )

    (defn #_"Class" Compiler'primClass-1s [#_"Symbol" ___sym]
        (when (nil? ___sym)
            (ยง return nil)
        )
        (let [#_"Class" ___c nil]
            (cond (.equals (:name ___sym), "int")
                (do
                    (ยง ass ___c Integer/TYPE)
                )
                (.equals (:name ___sym), "long")
                (do
                    (ยง ass ___c Long/TYPE)
                )
                (.equals (:name ___sym), "float")
                (do
                    (ยง ass ___c Float/TYPE)
                )
                (.equals (:name ___sym), "double")
                (do
                    (ยง ass ___c Double/TYPE)
                )
                (.equals (:name ___sym), "char")
                (do
                    (ยง ass ___c Character/TYPE)
                )
                (.equals (:name ___sym), "short")
                (do
                    (ยง ass ___c Short/TYPE)
                )
                (.equals (:name ___sym), "byte")
                (do
                    (ยง ass ___c Byte/TYPE)
                )
                (.equals (:name ___sym), "boolean")
                (do
                    (ยง ass ___c Boolean/TYPE)
                )
                (.equals (:name ___sym), "void")
                (do
                    (ยง ass ___c Void/TYPE)
                )
            )
            ___c
        )
    )

    (defn #_"Class" Compiler'tagClass [#_"Object" ___tag]
        (when (nil? ___tag)
            (ยง return Object)
        )
        (let [#_"Class" ___c nil]
            (when (ยง instance? Symbol ___tag)
                (ยง ass ___c (ร Compiler'primClass-1s((cast' Symbol ___tag))))
            )
            (when (nil? ___c)
                (ยง ass ___c (HostExpr'tagToClass ___tag))
            )
            ___c
        )
    )

    (defn #_"Class" Compiler'primClass-1c [#_"Class" ___c]
        (if (.isPrimitive ___c) ___c Object)
    )

    (defn #_"Class" Compiler'boxClass [#_"Class" ___p]
        (when (not (.isPrimitive ___p))
            (ยง return ___p)
        )

        (let [#_"Class" ___c nil]
            (cond (= ___p Integer/TYPE)
                (do
                    (ยง ass ___c Integer)
                )
                (= ___p Long/TYPE)
                (do
                    (ยง ass ___c Long)
                )
                (= ___p Float/TYPE)
                (do
                    (ยง ass ___c Float)
                )
                (= ___p Double/TYPE)
                (do
                    (ยง ass ___c Double)
                )
                (= ___p Character/TYPE)
                (do
                    (ยง ass ___c Character)
                )
                (= ___p Short/TYPE)
                (do
                    (ยง ass ___c Short)
                )
                (= ___p Byte/TYPE)
                (do
                    (ยง ass ___c Byte)
                )
                (= ___p Boolean/TYPE)
                (do
                    (ยง ass ___c Boolean)
                )
            )

            ___c
        )
    )

    (defn #_"IPersistentCollection" Compiler'emptyVarCallSites []
        PersistentHashSet'EMPTY
    )
)
)

(java-ns cloiure.lang.Cons

(class-ns Cons (ยง extends ASeq)
    (defn- #_"Cons" Cons'init []
        (hash-map
            #_"Object" :_first nil
            #_"ISeq" :_more nil
        )
    )

    (defn #_"Cons" Cons'new-2 [#_"Object" ___first, #_"ISeq" ____more]
        (let [this (merge (ASeq'new) (Cons'init))]
            (ยง ass (:_first this) ___first)
            (ยง ass (:_more this) ____more)
            this
        )
    )

    (defn #_"Cons" Cons'new-3 [#_"IPersistentMap" ___meta, #_"Object" ____first, #_"ISeq" ____more]
        (let [this (merge (ASeq'new ___meta) (Cons'init))]
            (ยง ass (:_first this) ____first)
            (ยง ass (:_more this) ____more)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"Cons" this]
        (:_first this)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"Cons" this]
        (.seq (.more this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method more) [#_"Cons" this]
        (when (nil? (:_more this))
            (ยง return PersistentList'EMPTY)
        )
        (:_more this)
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"Cons" this]
        (ร 1 + RT'count((:_more this)))
    )

    #_method
    (ยง defn #_"Cons" (ยง method withMeta) [#_"Cons" this, #_"IPersistentMap" ___meta]
        (Cons'new-3 ___meta, (:_first this), (:_more this))
    )
)
)

(java-ns cloiure.lang.Counted

;;;
 ; A class that implements Counted promises that it is a collection
 ; that implement a constant-time count()
 ;;
(ยง defprotocol Counted
    #_abstract
    (#_"int" Counted'''(ยง method count) [#_"Counted" this])
)
)

(java-ns cloiure.lang.Cycle

(class-ns Cycle (ยง extends ASeq) (ยง implements IReduce, IPending)
    (defn- #_"Cycle" Cycle'init []
        (hash-map
            #_"ISeq" :all nil ;; never nil
            #_"ISeq" :prev nil
            #_volatile
            #_"ISeq" :_current nil ;; lazily realized
            #_volatile
            #_"ISeq" :_next nil ;; cached
        )
    )

    (defn- #_"Cycle" Cycle'new-3 [#_"ISeq" ___all, #_"ISeq" ___prev, #_"ISeq" ___current]
        (let [this (merge (ASeq'new) (Cycle'init))]
            (ยง ass (:all this) ___all)
            (ยง ass (:prev this) ___prev)
            (ยง ass (:_current this) ___current)
            this
        )
    )

    (defn- #_"Cycle" Cycle'new-5 [#_"IPersistentMap" ___meta, #_"ISeq" ___all, #_"ISeq" ___prev, #_"ISeq" ___current, #_"ISeq" ___next]
        (let [this (merge (ASeq'new ___meta) (Cycle'init))]
            (ยง ass (:all this) ___all)
            (ยง ass (:prev this) ___prev)
            (ยง ass (:_current this) ___current)
            (ยง ass (:_next this) ___next)
            this
        )
    )

    (defn #_"ISeq" Cycle'create [#_"ISeq" ___vals]
        (when (nil? ___vals)
            (ยง return PersistentList'EMPTY)
        )
        (Cycle'new-3 ___vals, nil, ___vals)
    )

    ;; realization for use of current
    #_method
    (ยง defn- #_"ISeq" (ยง method current) [#_"Cycle" this]
        (when (nil? (:_current this))
            (let [#_"ISeq" ___current (next (:prev this))]
                (ยง ass (:_current this) (or ___current (:all this)))
            )
        )
        (:_current this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method isRealized) [#_"Cycle" this]
        (some? (:_current this))
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"Cycle" this]
        (first (.current this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"Cycle" this]
        (when (nil? (:_next this))
            (ยง ass (:_next this) (ร Cycle'new-3((:all this), (.current this), nil)))
        )
        (:_next this)
    )

    #_method
    (ยง defn #_"Cycle" (ยง method withMeta) [#_"Cycle" this, #_"IPersistentMap" ___meta]
        (Cycle'new-5 ___meta, (:all this), (:prev this), (:_current this), (:_next this))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"Cycle" this, #_"IFn" ___f]
        (let [#_"ISeq" ___s (.current this)]
            (let [#_"Object" ___ret (first ___s)]
                (while true
                    (ยง ass ___s (next ___s))
                    (when (nil? ___s)
                        (ยง ass ___s (:all this))
                    )
                    (ยง ass ___ret (ร ___f.invoke(___ret, (first ___s))))
                    (when (RT'isReduced ___ret)
                        (ยง return (.deref (cast' IDeref ___ret)))
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"Cycle" this, #_"IFn" ___f, #_"Object" ___start]
        (let [#_"Object" ___ret ___start]
            (let [#_"ISeq" ___s (.current this)]
                (while true
                    (ยง ass ___ret (ร ___f.invoke(___ret, (first ___s))))
                    (when (RT'isReduced ___ret)
                        (ยง return (.deref (cast' IDeref ___ret)))
                    )
                    (ยง ass ___s (next ___s))
                    (when (nil? ___s)
                        (ยง ass ___s (:all this))
                    )
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.Delay

(class-ns Delay (ยง implements IDeref, IPending)
    (defn- #_"Delay" Delay'init []
        (hash-map
            #_volatile
            #_"Object" :val nil
            #_volatile
            #_"Throwable" :exception nil
            #_volatile
            #_"IFn" :fn nil
        )
    )

    (defn #_"Delay" Delay'new [#_"IFn" ___fn]
        (let [this (Delay'init)]
            (ยง ass (:fn this) ___fn)
            (ยง ass (:val this) nil)
            (ยง ass (:exception this) nil)
            this
        )
    )

    (defn #_"Object" Delay'force [#_"Object" ___x]
        (if (ยง instance? Delay ___x) (.deref (cast' Delay ___x)) ___x)
    )

    #_method
    (ยง defn #_"Object" (ยง method deref) [#_"Delay" this]
        (when (some? (:fn this))
            (ยง sync this
                ;; double check
                (when (some? (:fn this))
                    (try
                        (ยง ass (:val this) (.invoke (:fn this)))
                        (catch Throwable ___t
                            (ยง ass (:exception this) ___t)
                        )
                    )
                    (ยง ass (:fn this) nil)
                )
            )
        )
        (when (some? (:exception this))
            (throw (Util'sneakyThrow (:exception this)))
        )
        (:val this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method isRealized) [#_"Delay" this]
        (ยง sync this
            (nil? (:fn this))
        )
    )
)
)

(java-ns cloiure.lang.DynamicClassLoader

(ยง import java.lang.ref.Reference)
(ยง import java.util.HashMap)
(ยง import java.util.Map)
(ยง import java.util.concurrent.ConcurrentHashMap)
(ยง import java.net.URLClassLoader)
(ยง import java.net.URL)
(ยง import java.lang.ref.ReferenceQueue)
(ยง import java.lang.ref.SoftReference)

(class-ns DynamicClassLoader (ยง extends URLClassLoader)
    (def #_"ConcurrentHashMap<String, Reference<Class>>" DynamicClassLoader'classCache (ConcurrentHashMap.))

    (def #_"URL[]" DynamicClassLoader'EMPTY_URLS (make-array URL 0))

    (def #_"ReferenceQueue" DynamicClassLoader'RQ (ReferenceQueue.))

    (defn- #_"DynamicClassLoader" DynamicClassLoader'init []
        (hash-map
            #_"HashMap<Integer, Object[]>" :constantVals (HashMap.)
        )
    )

    (defn #_"DynamicClassLoader" DynamicClassLoader'new-0 []
        ;; pseudo test in lieu of hasContextClassLoader()
        (merge (URLClassLoader'new DynamicClassLoader'EMPTY_URLS, (if (or (nil? (ร Thread/currentThread().getContextClassLoader())) (ร Thread/currentThread().getContextClassLoader() == ClassLoader/getSystemClassLoader())) (.getClassLoader (ยง class Compiler)) (ร Thread/currentThread().getContextClassLoader()))) (DynamicClassLoader'init))
    )

    (defn #_"DynamicClassLoader" DynamicClassLoader'new-1 [#_"ClassLoader" ___parent]
        (merge (URLClassLoader'new DynamicClassLoader'EMPTY_URLS, ___parent) (DynamicClassLoader'init))
    )

    #_method
    (ยง defn #_"Class" (ยง method defineClass) [#_"DynamicClassLoader" this, #_"String" ___name, #_"byte[]" ___bytes, #_"Object" ___srcForm]
        (Util'clearCache DynamicClassLoader'RQ, DynamicClassLoader'classCache)
        (let [#_"Class" ___c (ร this.defineClass(___name, ___bytes, 0, (ยง alength ___bytes)))]
            (ร DynamicClassLoader'classCache.put(___name, (SoftReference. ___c, DynamicClassLoader'RQ)))
            ___c
        )
    )

    (defn #_"Class<?>" DynamicClassLoader'findInMemoryClass [#_"String" ___name]
        (let [#_"Reference<Class>" ___cr (.get DynamicClassLoader'classCache, ___name)]
            (when (some? ___cr)
                (let [#_"Class" ___c (.get ___cr)]
                    (if (some? ___c)
                        (do
                            (ยง return ___c)
                        )
                        (do
                            (.remove DynamicClassLoader'classCache, ___name, ___cr)
                        )
                    )
                )
            )
            nil
        )
    )

    #_protected
    #_method
    (ยง defn #_"Class<?>" (ยง method findClass) [#_"DynamicClassLoader" this, #_"String" ___name] #_(ยง throws ClassNotFoundException)
        (let [#_"Class" ___c (DynamicClassLoader'findInMemoryClass ___name)]
            (if (some? ___c)
                (do
                    ___c
                )
                (do
                    (.findClass super, ___name)
                )
            )
        )
    )

    #_protected
    #_method
    (ยง defn #_"Class<?>" (ยง method loadClass) [#_"DynamicClassLoader" this, #_"String" ___name, #_"boolean" ___resolve] #_(ยง throws ClassNotFoundException)
        (ยง sync this
            (let [#_"Class" ___c (findLoadedClass ___name)]
                (when (nil? ___c)
                    (ยง ass ___c (DynamicClassLoader'findInMemoryClass ___name))
                    (when (nil? ___c)
                        (ยง ass ___c (.loadClass super, ___name, false))
                    )
                )
                (when ___resolve
                    (.resolveClass this, ___c)
                )
                ___c
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method registerConstants) [#_"DynamicClassLoader" this, #_"int" ___id, #_"Object[]" ___val]
        (.put (:constantVals this), ___id, ___val)
        nil
    )

    #_method
    (ยง defn #_"Object[]" (ยง method getConstants) [#_"DynamicClassLoader" this, #_"int" ___id]
        (.get (:constantVals this), ___id)
    )

    #_method
    (ยง defn #_"void" (ยง method addURL) [#_"DynamicClassLoader" this, #_"URL" ___url]
        (.addURL super, ___url)
        nil
    )
)
)

(java-ns cloiure.lang.EdnReader

(ยง import java.io.IOException)
(ยง import java.io.PushbackReader)
(ยง import java.io.Reader)
(ยง import java.math.BigDecimal)
(ยง import java.math.BigInteger)
(ยง import java.util.ArrayList)
(ยง import java.util.Iterator)
(ยง import java.util.List)
(ยง import java.util.regex.Matcher)
(ยง import java.util.regex.Pattern)

(class-ns EdnReaderException (ยง extends RuntimeException)
    (defn- #_"EdnReaderException" EdnReaderException'init []
        (hash-map
            #_"int" :line 0
            #_"int" :column 0
        )
    )

    (defn #_"EdnReaderException" EdnReaderException'new [#_"int" ___line, #_"int" ___column, #_"Throwable" ___cause]
        (let [this (merge (ยง foreign RuntimeException'new ___cause) (EdnReaderException'init))]
            (ยง ass (:line this) ___line)
            (ยง ass (:column this) ___column)
            this
        )
    )
)

#_closure
(class-ns EdnStringReader (ยง extends AFn)
    (defn #_"EdnStringReader" EdnStringReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnStringReader" this, #_"Object" ___reader, #_"Object" ___doublequote, #_"Object" ___opts]
        (let [#_"StringBuilder" ___sb (StringBuilder.)]
            (let [#_"Reader" ___r (cast Reader ___reader)]
                (loop-when-recur [#_"int" ___ch (EdnReader'read1 ___r)] (ร ___ch != \") [(EdnReader'read1 ___r)] ;; oops! "
                    (when (= ___ch -1)
                        (throw (Util'runtimeException-1 "EOF while reading string"))
                    )
                    (when (= ___ch \\) ;; escape
                        (ยง ass ___ch (EdnReader'read1 ___r))
                        (when (= ___ch -1)
                            (throw (Util'runtimeException-1 "EOF while reading string"))
                        )
                        (ยง switch ___ch
                            (ยง case \t)
                            (do
                                (ยง ass ___ch \tab)
                                (ยง break )
                            )
                            (ยง case \r)
                            (do
                                (ยง ass ___ch \return)
                                (ยง break )
                            )
                            (ยง case \n)
                            (do
                                (ยง ass ___ch \newline)
                                (ยง break )
                            )
                            (ยง case \\)
                            (do
                                (ยง break )
                            )
                            (ยง case \") ;; oops! "
                            (do
                                (ยง break )
                            )
                            (ยง case \b)
                            (do
                                (ยง ass ___ch \backspace)
                                (ยง break )
                            )
                            (ยง case \f)
                            (do
                                (ยง ass ___ch \formfeed)
                                (ยง break )
                            )
                            (ยง case \u)
                            (do
                                (ยง ass ___ch (EdnReader'read1 ___r))
                                (when (ร Character/digit(___ch, 16) == -1)
                                    (throw (Util'runtimeException-1 (str "Invalid unicode escape: \\u" (ร (char) ___ch))))
                                )
                                (ยง ass ___ch (ร readUnicodeChar((cast PushbackReader ___r), ___ch, 16, 4, true)))
                                (ยง break )
                            )
                            (ยง default )
                            (do
                                (if (Character/isDigit ___ch)
                                    (do
                                        (ยง ass ___ch (ร readUnicodeChar((cast PushbackReader ___r), ___ch, 8, 3, false)))
                                        (when (> ___ch 0377)
                                            (throw (Util'runtimeException-1 "Octal escape sequence must be in range [0, 377]."))
                                        )
                                    )
                                    (do
                                        (throw (Util'runtimeException-1 (str "Unsupported escape character: \\" (ร (char) ___ch))))
                                    )
                                )
                                (ยง break )
                            )
                        )
                    )
                    (ร ___sb.append((char) ___ch))
                )
                (.toString ___sb)
            )
        )
    )
)

#_closure
(class-ns EdnCommentReader (ยง extends AFn)
    (defn #_"EdnCommentReader" EdnCommentReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnCommentReader" this, #_"Object" ___reader, #_"Object" ___semicolon, #_"Object" ___opts]
        (let [#_"Reader" ___r (cast Reader ___reader)]
            (ยง let [#_"int" ___ch]
                (ยง loop
                    (ยง ass ___ch (EdnReader'read1 ___r))
                    (ยง recur-if (and (ร ___ch != -1) (ร ___ch != \newline) (ร ___ch != \return)))
                )
                ___r
            )
        )
    )
)

#_closure
(class-ns EdnDiscardReader (ยง extends AFn)
    (defn #_"EdnDiscardReader" EdnDiscardReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnDiscardReader" this, #_"Object" ___reader, #_"Object" ___underscore, #_"Object" ___opts]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (EdnReader'read-5 ___r, true, nil, true, ___opts)
            ___r
        )
    )
)

#_closure
(class-ns EdnNamespaceMapReader (ยง extends AFn)
    (defn #_"EdnNamespaceMapReader" EdnNamespaceMapReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnNamespaceMapReader" this, #_"Object" ___reader, #_"Object" ___colon, #_"Object" ___opts]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            ;; Read ns symbol
            (let [#_"Object" ___sym (EdnReader'read-5 ___r, true, nil, false, ___opts)]
                (when (or (not (ยง instance? Symbol ___sym)) (some? (.getNamespace (cast' Symbol ___sym))))
                    (throw (RuntimeException. (str "Namespaced map must specify a valid namespace: " ___sym)))
                )
                (let [#_"String" ___ns (.getName (cast' Symbol ___sym))]
                    ;; Read map
                    (let [#_"int" ___nextChar (EdnReader'read1 ___r)]
                        (while (EdnReader'isWhitespace ___nextChar)
                            (ยง ass ___nextChar (EdnReader'read1 ___r))
                        )
                        (when (ร \{ != ___nextChar)
                            (throw (RuntimeException. "Namespaced map must specify a map"))
                        )
                        (let [#_"List" ___kvs (ร readDelimitedList(\}, ___r, true, ___opts))]
                            (when (ร ((.size ___kvs) & 1) == 1)
                                (throw (Util'runtimeException-1 "Namespaced map literal must contain an even number of forms"))
                            )

                            ;; Construct output map
                            (let [#_"Object[]" ___a (make-array Object (.size ___kvs))]
                                (let [#_"Iterator" ___iter (.iterator ___kvs)]
                                    (loop-when-recur [#_"int" ___i 0] (.hasNext ___iter) [(+ ___i 2)]
                                        (let [#_"Object" ___key (next ___iter)]
                                            (let [#_"Object" ___val (next ___iter)]
                                                (cond (ยง instance? Keyword ___key)
                                                    (do
                                                        (let [#_"Keyword" ___kw (cast' Keyword ___key)]
                                                            (cond (nil? (.getNamespace ___kw))
                                                                (do
                                                                    (ยง ass ___key (ร Keyword'intern-2(___ns, (.getName ___kw))))
                                                                )
                                                                (ร (.getNamespace ___kw).equals("_"))
                                                                (do
                                                                    (ยง ass ___key (ร Keyword'intern-2(nil, (.getName ___kw))))
                                                                )
                                                            )
                                                        )
                                                    )
                                                    (ยง instance? Symbol ___key)
                                                    (do
                                                        (let [#_"Symbol" ___s (cast' Symbol ___key)]
                                                            (cond (nil? (.getNamespace ___s))
                                                                (do
                                                                    (ยง ass ___key (ร Symbol'intern-2(___ns, (.getName ___s))))
                                                                )
                                                                (ร (.getNamespace ___s).equals("_"))
                                                                (do
                                                                    (ยง ass ___key (ร Symbol'intern-2(nil, (.getName ___s))))
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                                (ยง ass (ยง aget ___a ___i) ___key)
                                                (ยง ass (ยง aget ___a (ร ___i + 1)) ___val)
                                            )
                                        )
                                    )
                                    (RT'map ___a)
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

#_closure
(class-ns EdnDispatchReader (ยง extends AFn)
    (defn #_"EdnDispatchReader" EdnDispatchReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnDispatchReader" this, #_"Object" ___reader, #_"Object" ___hash, #_"Object" ___opts]
        (let [#_"int" ___ch (EdnReader'read1 (cast Reader ___reader))]
            (when (= ___ch -1)
                (throw (Util'runtimeException-1 "EOF while reading character"))
            )
            (let [#_"IFn" ___fn (ยง aget dispatchMacros ___ch)]
                (when (nil? ___fn)
                    ;; try tagged reader
                    (when (Character/isLetter ___ch)
                        (EdnReader'unread (cast PushbackReader ___reader), ___ch)
                        (ยง return (.invoke taggedReader, ___reader, ___ch, ___opts))
                    )

                    (throw (ร Util'runtimeException-1(String/format("No dispatch macro for: %c", (object-array [ (ร (char) ___ch) ])))))
                )
                (.invoke ___fn, ___reader, ___ch, ___opts)
            )
        )
    )
)

#_closure
(class-ns EdnMetaReader (ยง extends AFn)
    (defn #_"EdnMetaReader" EdnMetaReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnMetaReader" this, #_"Object" ___reader, #_"Object" ___caret, #_"Object" ___opts]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"int" ___line -1]
                (let [#_"int" ___column -1]
                    (when (ยง instance? LineNumberingPushbackReader ___r)
                        (ยง ass ___line (.getLineNumber (cast' LineNumberingPushbackReader ___r)))
                        (ยง ass ___column (ร (cast' LineNumberingPushbackReader ___r).getColumnNumber()-1))
                    )
                    (let [#_"Object" ___meta (EdnReader'read-5 ___r, true, nil, true, ___opts)]
                        (cond (or (ยง instance? Symbol ___meta) (instance? String ___meta))
                            (do
                                (ยง ass ___meta (RT'map RT'TAG_KEY, ___meta))
                            )
                            (ยง instance? Keyword ___meta)
                            (do
                                (ยง ass ___meta (RT'map ___meta, RT'T))
                            )
                            (not (ยง instance? IPersistentMap ___meta))
                            (do
                                (throw (IllegalArgumentException. "Metadata must be Symbol, Keyword, String or Map"))
                            )
                        )

                        (let [#_"Object" ___o (EdnReader'read-5 ___r, true, nil, true, ___opts)]
                            (if (ยง instance? IMeta ___o)
                                (do
                                    (when (and (ร ___line != -1) (ยง instance? ISeq ___o))
                                        (ยง ass ___meta (ร (cast' IPersistentMap ___meta).assoc(RT'LINE_KEY, ___line).assoc(RT'COLUMN_KEY, ___column)))
                                    )
                                    (when (ยง instance? IReference ___o)
                                        (.resetMeta (cast' IReference ___o), (cast' IPersistentMap ___meta))
                                        (ยง return ___o)
                                    )
                                    (let [#_"Object" ___ometa (RT'meta ___o)]
                                        (loop-when-recur [#_"ISeq" ___s (RT'seq ___meta)] (some? ___s) [(next ___s)]
                                            (let [#_"IMapEntry" ___kv (cast' IMapEntry (first ___s))]
                                                (ยง ass ___ometa (ร RT'assoc(___ometa, (.getKey ___kv), (.getValue ___kv))))
                                            )
                                        )
                                        (.withMeta (cast' IObj ___o), (cast' IPersistentMap ___ometa))
                                    )
                                )
                                (do
                                    (throw (IllegalArgumentException. "Metadata can only be applied to IMetas"))
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

#_closure
(class-ns EdnCharacterReader (ยง extends AFn)
    (defn #_"EdnCharacterReader" EdnCharacterReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnCharacterReader" this, #_"Object" ___reader, #_"Object" ___backslash, #_"Object" ___opts]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"int" ___ch (EdnReader'read1 ___r)]
                (when (= ___ch -1)
                    (throw (Util'runtimeException-1 "EOF while reading character"))
                )
                (let [#_"String" ___token (ร readToken(___r, (char) ___ch, false))]
                    (cond (ร (.length ___token) == 1)
                        (do
                            (ยง return (ร Character/valueOf(___token.charAt(0))))
                        )
                        (.equals ___token, "newline")
                        (do
                            (ยง return \newline)
                        )
                        (.equals ___token, "space")
                        (do
                            (ยง return \space)
                        )
                        (.equals ___token, "tab")
                        (do
                            (ยง return \tab)
                        )
                        (.equals ___token, "backspace")
                        (do
                            (ยง return \backspace)
                        )
                        (.equals ___token, "formfeed")
                        (do
                            (ยง return \formfeed)
                        )
                        (.equals ___token, "return")
                        (do
                            (ยง return \return)
                        )
                        (.startsWith ___token, "u")
                        (do
                            (let [#_"char" ___c (ร (char) readUnicodeChar(___token, 1, 4, 16))]
                                (when (and (ร ___c >= (ยง char "\ud800")) (ร ___c <= (ยง char "\udfff"))) ;; surrogate code unit?
                                    (throw (Util'runtimeException-1 (str "Invalid character constant: \\u" (Integer/toString ___c, 16))))
                                )
                                (ยง return ___c)
                            )
                        )
                        (.startsWith ___token, "o")
                        (do
                            (let [#_"int" ___len (ร (.length ___token) - 1)]
                                (when (> ___len 3)
                                    (throw (Util'runtimeException-1 (str "Invalid octal escape sequence length: " ___len)))
                                )
                                (let [#_"int" ___uc (readUnicodeChar ___token, 1, ___len, 8)]
                                    (when (> ___uc 0377)
                                        (throw (Util'runtimeException-1 "Octal escape sequence must be in range [0, 377]."))
                                    )
                                    (ยง return (ร (char) ___uc))
                                )
                            )
                        )
                    )
                    (throw (Util'runtimeException-1 (str "Unsupported character: \\" ___token)))
                )
            )
        )
    )
)

#_closure
(class-ns EdnListReader (ยง extends AFn)
    (defn #_"EdnListReader" EdnListReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnListReader" this, #_"Object" ___reader, #_"Object" ___leftparen, #_"Object" ___opts]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"int" ___line -1]
                (let [#_"int" ___column -1]
                    (when (ยง instance? LineNumberingPushbackReader ___r)
                        (ยง ass ___line (.getLineNumber (cast' LineNumberingPushbackReader ___r)))
                        (ยง ass ___column (ร (cast' LineNumberingPushbackReader ___r).getColumnNumber()-1))
                    )
                    (let [#_"List" ___list (ร readDelimitedList(\), ___r, true, ___opts))]
                        (when (.isEmpty ___list)
                            (ยง return PersistentList'EMPTY)
                        )
                        (let [#_"IObj" ___s (cast' IObj (PersistentList'create ___list))]
                            ___s
                        )
                    )
                )
            )
        )
    )
)

#_closure
(class-ns EdnVectorReader (ยง extends AFn)
    (defn #_"EdnVectorReader" EdnVectorReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnVectorReader" this, #_"Object" ___reader, #_"Object" ___leftparen, #_"Object" ___opts]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (ร LazilyPersistentVector'create(readDelimitedList(\], ___r, true, ___opts)))
        )
    )
)

#_closure
(class-ns EdnMapReader (ยง extends AFn)
    (defn #_"EdnMapReader" EdnMapReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnMapReader" this, #_"Object" ___reader, #_"Object" ___leftparen, #_"Object" ___opts]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"Object[]" ___a (ร readDelimitedList(\}, ___r, true, ___opts).toArray())]
                (when (ร ((ยง alength ___a) & 1) == 1)
                    (throw (Util'runtimeException-1 "Map literal must contain an even number of forms"))
                )
                (RT'map ___a)
            )
        )
    )
)

#_closure
(class-ns EdnSetReader (ยง extends AFn)
    (defn #_"EdnSetReader" EdnSetReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnSetReader" this, #_"Object" ___reader, #_"Object" ___leftbracket, #_"Object" ___opts]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (ร PersistentHashSet'createWithCheck-1l(readDelimitedList(\}, ___r, true, ___opts)))
        )
    )
)

#_closure
(class-ns EdnUnmatchedDelimiterReader (ยง extends AFn)
    (defn #_"EdnUnmatchedDelimiterReader" EdnUnmatchedDelimiterReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnUnmatchedDelimiterReader" this, #_"Object" ___reader, #_"Object" ___rightdelim, #_"Object" ___opts]
        (throw (Util'runtimeException-1 (str "Unmatched delimiter: " ___rightdelim)))
    )
)

#_closure
(class-ns EdnUnreadableReader (ยง extends AFn)
    (defn #_"EdnUnreadableReader" EdnUnreadableReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnUnreadableReader" this, #_"Object" ___reader, #_"Object" ___leftangle, #_"Object" ___opts]
        (throw (Util'runtimeException-1 "Unreadable form"))
    )
)

#_closure
(class-ns EdnSymbolicValueReader (ยง extends AFn)
    (defn #_"EdnSymbolicValueReader" EdnSymbolicValueReader'new []
        (AFn'new)
    )

    (def #_"IPersistentMap" EdnSymbolicValueReader'specials (ร PersistentHashMap'create-1a(
        (object-array [
            (Symbol'intern-1 "Inf")  Double/POSITIVE_INFINITY
            (Symbol'intern-1 "-Inf") Double/NEGATIVE_INFINITY
            (Symbol'intern-1 "NaN")  Double/NaN
        ])
    )))

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EdnSymbolicValueReader" this, #_"Object" ___reader, #_"Object" ___quote, #_"Object" ___opts]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"Object" ___o (EdnReader'read-5 ___r, true, nil, true, ___opts)]
                (when (not (ยง instance? Symbol ___o))
                    (throw (Util'runtimeException-1 (str "Invalid token: ##" ___o)))
                )
                (when (not (.containsKey EdnSymbolicValueReader'specials, ___o))
                    (throw (Util'runtimeException-1 (str "Unknown symbolic value: ##" ___o)))
                )

                (.valAt EdnSymbolicValueReader'specials, ___o)
            )
        )
    )
)

#_closure
(class-ns TaggedReader (ยง extends AFn)
    (defn #_"TaggedReader" TaggedReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"TaggedReader" this, #_"Object" ___reader, #_"Object" ___firstChar, #_"Object" ___opts]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"Object" ___name (EdnReader'read-5 ___r, true, nil, false, ___opts)]
                (when (not (ยง instance? Symbol ___name))
                    (throw (RuntimeException. "Reader tag must be a symbol"))
                )
                (let [#_"Symbol" ___sym (cast' Symbol ___name)]
                    (ร this.readTagged(___r, ___sym, (cast' IPersistentMap ___opts)))
                )
            )
        )
    )

    (ยง def #_"Keyword" TaggedReader'READERS (Keyword'intern-2 nil, "readers"))
    (ยง def #_"Keyword" TaggedReader'DEFAULT (Keyword'intern-2 nil, "default"))

    #_method
    (ยง defn- #_"Object" (ยง method readTagged) [#_"TaggedReader" this, #_"PushbackReader" ___reader, #_"Symbol" ___tag, #_"IPersistentMap" ___opts]
        (let [#_"Object" ___o (EdnReader'read-5 ___reader, true, nil, true, ___opts)]
            (let [#_"ILookup" ___readers (cast' ILookup (RT'get-2 ___opts, TaggedReader'READERS))]
                (let [#_"IFn" ___dataReader (cast' IFn (RT'get-2 ___readers, ___tag))]
                    (when (nil? ___dataReader)
                        (ยง ass ___dataReader (cast' IFn (ร RT'get-2(RT'DEFAULT_DATA_READERS.deref(), ___tag))))
                    )
                    (if (nil? ___dataReader)
                        (do
                            (let [#_"IFn" ___defaultReader (cast' IFn (RT'get-2 ___opts, TaggedReader'DEFAULT))]
                                (if (some? ___defaultReader)
                                    (do
                                        (.invoke ___defaultReader, ___tag, ___o)
                                    )
                                    (do
                                        (throw (RuntimeException. (str "No reader function for tag " (.toString ___tag))))
                                    )
                                )
                            )
                        )
                        (do
                            (.invoke ___dataReader, ___o)
                        )
                    )
                )
            )
        )
    )
)

#_stateless
(class-ns EdnReader
    (def #_"IFn[]" EdnReader'macros (ยง typeless make-array IFn 256))
    (def #_"IFn[]" EdnReader'dispatchMacros (ยง typeless make-array IFn 256))
    (def #_"Pattern" EdnReader'symbolPat (Pattern/compile "[:]?([\\D&&[^/]].*/)?(/|[\\D&&[^/]][^/]*)"))
    (def #_"Pattern" EdnReader'intPat (Pattern/compile "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?"))
    (def #_"Pattern" EdnReader'ratioPat (Pattern/compile "([-+]?[0-9]+)/([0-9]+)"))
    (def #_"Pattern" EdnReader'floatPat (Pattern/compile "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?"))

    (ยง def #_"IFn" EdnReader'taggedReader (TaggedReader'new))

    (ยง static
        (ยง ass (ร macros[\"]) (EdnStringReader'new)) ;; oops! "
        (ยง ass (ร macros[\;]) (EdnCommentReader'new))
        (ยง ass (ร macros[\^]) (EdnMetaReader'new))
        (ยง ass (ร macros[\(]) (EdnListReader'new))
        (ยง ass (ร macros[\)]) (EdnUnmatchedDelimiterReader'new))
        (ยง ass (ร macros[\[]) (EdnVectorReader'new))
        (ยง ass (ร macros[\]]) (EdnUnmatchedDelimiterReader'new))
        (ยง ass (ร macros[\{]) (EdnMapReader'new))
        (ยง ass (ร macros[\}]) (EdnUnmatchedDelimiterReader'new))
        (ยง ass (ร macros[\\]) (EdnCharacterReader'new))
        (ยง ass (ร macros[\#]) (EdnDispatchReader'new))

        (ยง ass (ร dispatchMacros[\#]) (EdnSymbolicValueReader'new))
        (ยง ass (ร dispatchMacros[\^]) (EdnMetaReader'new))
        (ยง ass (ร dispatchMacros[\{]) (EdnSetReader'new))
        (ยง ass (ร dispatchMacros[\<]) (EdnUnreadableReader'new))
        (ยง ass (ร dispatchMacros[\_]) (EdnDiscardReader'new))
        (ยง ass (ร dispatchMacros[\:]) (EdnNamespaceMapReader'new))
    )

    (defn #_"boolean" EdnReader'nonConstituent [#_"int" ___ch]
        (or (ร ___ch == \@) (ร ___ch == \`) (ร ___ch == \~))
    )

    (defn #_"Object" EdnReader'readString [#_"String" ___s, #_"IPersistentMap" ___opts]
        (let [#_"PushbackReader" ___r (PushbackReader. (java.io.StringReader. ___s))]
            (EdnReader'read-2 ___r, ___opts)
        )
    )

    (defn #_"boolean" EdnReader'isWhitespace [#_"int" ___ch]
        (or (Character/isWhitespace ___ch) (ร ___ch == \,))
    )

    (defn #_"void" EdnReader'unread [#_"PushbackReader" ___r, #_"int" ___ch]
        (when (not= ___ch -1)
            (try
                (.unread ___r, ___ch)
                (catch IOException ___e
                    (throw (Util'sneakyThrow ___e))
                )
            )
        )
        nil
    )

    (defn #_"int" EdnReader'read1 [#_"Reader" ___r]
        (try
            (.read ___r)
            (catch IOException ___e
                (throw (Util'sneakyThrow ___e))
            )
        )
    )

    (ยง def #_"Keyword" EdnReader'EOF (Keyword'intern-2 nil, "eof"))

    (defn #_"Object" EdnReader'read-2 [#_"PushbackReader" ___r, #_"IPersistentMap" ___opts]
        (EdnReader'read-5 ___r, (not (.containsKey ___opts, EdnReader'EOF)), (.valAt ___opts, EdnReader'EOF), false, ___opts)
    )

    (defn #_"Object" EdnReader'read-5 [#_"PushbackReader" ___r, #_"boolean" ___eofIsError, #_"Object" ___eofValue, #_"boolean" ___isRecursive, #_"Object" ___opts]
        (try
            (while true
                (let [#_"int" ___ch (EdnReader'read1 ___r)]
                    (while (EdnReader'isWhitespace ___ch)
                        (ยง ass ___ch (EdnReader'read1 ___r))
                    )

                    (when (= ___ch -1)
                        (when ___eofIsError
                            (throw (Util'runtimeException-1 "EOF while reading"))
                        )
                        (ยง return ___eofValue)
                    )

                    (when (Character/isDigit ___ch)
                        (let [#_"Object" ___n (ร readNumber(___r, (char) ___ch))]
                            (when (RT'suppressRead)
                                (ยง return nil)
                            )
                            (ยง return ___n)
                        )
                    )

                    (let [#_"IFn" ___macroFn (EdnReader'getMacro ___ch)]
                        (when (some? ___macroFn)
                            (let [#_"Object" ___ret (ร ___macroFn.invoke(___r, (char) ___ch, ___opts))]
                                (when (RT'suppressRead)
                                    (ยง return nil)
                                )
                                ;; no op macros return the reader
                                (when (= ___ret ___r)
                                    (ยง continue )
                                )
                                (ยง return ___ret)
                            )
                        )

                        (when (or (ร ___ch == \+) (ร ___ch == \-))
                            (let [#_"int" ___ch2 (EdnReader'read1 ___r)]
                                (when (Character/isDigit ___ch2)
                                    (EdnReader'unread ___r, ___ch2)
                                    (let [#_"Object" ___n (ร readNumber(___r, (char) ___ch))]
                                        (when (RT'suppressRead)
                                            (ยง return nil)
                                        )
                                        (ยง return ___n)
                                    )
                                )
                                (EdnReader'unread ___r, ___ch2)
                            )
                        )

                        (let [#_"String" ___token (ร readToken(___r, (char) ___ch, true))]
                            (when (RT'suppressRead)
                                (ยง return nil)
                            )
                            (ยง return (interpretToken ___token))
                        )
                    )
                )
            )
            (catch Exception ___e
                (when (or ___isRecursive (not (ยง instance? LineNumberingPushbackReader ___r)))
                    (throw (Util'sneakyThrow ___e))
                )
                (let [#_"LineNumberingPushbackReader" ___rdr (cast' LineNumberingPushbackReader ___r)]
                    (throw (ร EdnReaderException'new((.getLineNumber ___rdr), (.getColumnNumber ___rdr), ___e)))
                )
            )
        )
    )

    (defn- #_"String" EdnReader'readToken [#_"PushbackReader" ___r, #_"char" ___initch, #_"boolean" ___leadConstituent]
        (let [#_"StringBuilder" ___sb (StringBuilder.)]
            (when (and ___leadConstituent (EdnReader'nonConstituent ___initch))
                (throw (Util'runtimeException-1 (str "Invalid leading character: " (ร (char)___initch))))
            )

            (.append ___sb, ___initch)

            (while true
                (let [#_"int" ___ch (EdnReader'read1 ___r)]
                    (cond (or (ร ___ch == -1) (EdnReader'isWhitespace ___ch) (EdnReader'isTerminatingMacro ___ch))
                        (do
                            (EdnReader'unread ___r, ___ch)
                            (ยง return (.toString ___sb))
                        )
                        (EdnReader'nonConstituent ___ch)
                        (do
                            (throw (Util'runtimeException-1 (str "Invalid constituent character: " (ร (char)___ch))))
                        )
                    )
                    (ร ___sb.append((char) ___ch))
                )
            )
        )
    )

    (defn- #_"Object" EdnReader'readNumber [#_"PushbackReader" ___r, #_"char" ___initch]
        (let [#_"StringBuilder" ___sb (StringBuilder.)]
            (.append ___sb, ___initch)

            (while true
                (let [#_"int" ___ch (EdnReader'read1 ___r)]
                    (when (or (ร ___ch == -1) (EdnReader'isWhitespace ___ch) (EdnReader'isMacro ___ch))
                        (EdnReader'unread ___r, ___ch)
                        (ยง break )
                    )
                    (ร ___sb.append((char) ___ch))
                )
            )

            (let [#_"String" ___s (.toString ___sb)]
                (let [#_"Object" ___n (EdnReader'matchNumber ___s)]
                    (when (nil? ___n)
                        (throw (NumberFormatException. (str "Invalid number: " ___s)))
                    )
                    ___n
                )
            )
        )
    )

    (defn- #_"int" EdnReader'readUnicodeChar-4 [#_"String" ___token, #_"int" ___offset, #_"int" ___length, #_"int" ___base]
        (when (ร (.length ___token) != ___offset + ___length)
            (throw (IllegalArgumentException. (str "Invalid unicode character: \\" ___token)))
        )
        (let [#_"int" ___uc 0]
            (loop-when-recur [#_"int" ___i ___offset] (ร ___i < ___offset + ___length) [(inc ___i)]
                (let [#_"int" ___d (ร Character/digit(___token.charAt(___i), ___base))]
                    (when (= ___d -1)
                        (throw (IllegalArgumentException. (str "Invalid digit: " (.charAt ___token, ___i))))
                    )
                    (ยง ass ___uc (ร ___uc * ___base + ___d))
                )
            )
            (ร (char) ___uc)
        )
    )

    (defn- #_"int" EdnReader'readUnicodeChar-5 [#_"PushbackReader" ___r, #_"int" ___initch, #_"int" ___base, #_"int" ___length, #_"boolean" ___exact]
        (let [#_"int" ___uc (Character/digit ___initch, ___base)]
            (when (= ___uc -1)
                (throw (IllegalArgumentException. (str "Invalid digit: " (ร (char) ___initch))))
            )
            (let [#_"int" ___i 1]
                (loop-when-recur [___i ___i] (< ___i ___length) [(inc ___i)]
                    (let [#_"int" ___ch (EdnReader'read1 ___r)]
                        (when (or (ร ___ch == -1) (EdnReader'isWhitespace ___ch) (EdnReader'isMacro ___ch))
                            (EdnReader'unread ___r, ___ch)
                            (ยง break )
                        )
                        (let [#_"int" ___d (Character/digit ___ch, ___base)]
                            (when (= ___d -1)
                                (throw (IllegalArgumentException. (str "Invalid digit: " (ร (char) ___ch))))
                            )
                            (ยง ass ___uc (ร ___uc * ___base + ___d))
                        )
                    )
                )
                (when (and (ร ___i != ___length) ___exact)
                    (throw (IllegalArgumentException. (str "Invalid character length: " ___i ", should be: " ___length)))
                )
                ___uc
            )
        )
    )

    (defn- #_"Object" EdnReader'interpretToken [#_"String" ___s]
        (cond (.equals ___s, "nil")
            (do
                (ยง return nil)
            )
            (.equals ___s, "true")
            (do
                (ยง return RT'T)
            )
            (.equals ___s, "false")
            (do
                (ยง return RT'F)
            )
        )

        (let [#_"Object" ___ret nil]
            (ยง ass ___ret (matchSymbol ___s))
            (when (some? ___ret)
                (ยง return ___ret)
            )

            (throw (Util'runtimeException-1 (str "Invalid token: " ___s)))
        )
    )

    (defn- #_"Object" EdnReader'matchSymbol [#_"String" ___s]
        (let [#_"Matcher" ___m (.matcher EdnReader'symbolPat, ___s)]
            (when (.matches ___m)
                (let [#_"int" ___gc (.groupCount ___m)]
                    (let [#_"String" ___ns (.group ___m, 1)]
                        (let [#_"String" ___name (.group ___m, 2)]
                            (when (or (and (some? ___ns) (.endsWith ___ns, ":/")) (.endsWith ___name, ":") (ร (.indexOf ___s, "::", 1) != -1))
                                (ยง return nil)
                            )
                            (when (.startsWith ___s, "::")
                                (ยง return nil)
                            )
                            (let [#_"boolean" ___isKeyword (ร ___s.charAt(0) == \:)]
                                (let [#_"Symbol" ___sym (Symbol'intern-1 (.substring ___s, (if ___isKeyword 1 0)))]
                                    (when ___isKeyword
                                        (ยง return (Keyword'intern ___sym))
                                    )
                                    (ยง return ___sym)
                                )
                            )
                        )
                    )
                )
            )
            nil
        )
    )

    (defn- #_"Object" EdnReader'matchNumber [#_"String" ___s]
        (let [#_"Matcher" ___m (.matcher EdnReader'intPat, ___s)]
            (when (.matches ___m)
                (when (some? (.group ___m, 2))
                    (when (some? (.group ___m, 8))
                        (ยง return BigInt'ZERO)
                    )
                    (ยง return (Numbers'num-1l 0))
                )
                (let [#_"boolean" ___negate (ร ___m.group(1).equals("-"))]
                    (ยง let [#_"String" ___n]
                        (let [#_"int" ___radix 10]
                            (cond (some? (ยง ass ___n (.group ___m, 3)))
                                (do
                                    (ยง ass ___radix 10)
                                )
                                (some? (ยง ass ___n (.group ___m, 4)))
                                (do
                                    (ยง ass ___radix 16)
                                )
                                (some? (ยง ass ___n (.group ___m, 5)))
                                (do
                                    (ยง ass ___radix 8)
                                )
                                (some? (ยง ass ___n (.group ___m, 7)))
                                (do
                                    (ยง ass ___radix (ร Integer/parseInt(___m.group(6))))
                                )
                            )
                            (when (nil? ___n)
                                (ยง return nil)
                            )
                            (let [#_"BigInteger" ___bn (BigInteger. ___n, ___radix)]
                                (when ___negate
                                    (ยง ass ___bn (.negate ___bn))
                                )
                                (when (some? (.group ___m, 8))
                                    (ยง return (BigInt'fromBigInteger ___bn))
                                )
                                (ยง return (if (< (.bitLength ___bn) 64) (Numbers'num-1l (.longValue ___bn)) (BigInt'fromBigInteger ___bn)))
                            )
                        )
                    )
                )
            )
            (ยง ass ___m (.matcher EdnReader'floatPat, ___s))
            (when (.matches ___m)
                (when (some? (.group ___m, 4))
                    (ยง return (ยง unsure BigDecimal. (.group ___m, 1)))
                )
                (ยง return (Double/parseDouble ___s))
            )
            (ยง ass ___m (.matcher EdnReader'ratioPat, ___s))
            (when (.matches ___m)
                (let [#_"String" ___numerator (.group ___m, 1)]
                    (when (.startsWith ___numerator, "+")
                        (ยง ass ___numerator (.substring ___numerator, 1))
                    )

                    (ยง return (Numbers'divide-2oo (Numbers'reduceBigInt (BigInt'fromBigInteger (BigInteger. ___numerator))), (Numbers'reduceBigInt (BigInt'fromBigInteger (BigInteger. (.group ___m, 2))))))
                )
            )
            nil
        )
    )

    (defn- #_"IFn" EdnReader'getMacro [#_"int" ___ch]
        (when (< ___ch (ยง alength macros))
            (ยง return (ยง aget macros ___ch))
        )
        nil
    )

    (defn- #_"boolean" EdnReader'isMacro [#_"int" ___ch]
        (and (< ___ch (ยง alength macros)) (some? (ยง aget macros ___ch)))
    )

    (defn- #_"boolean" EdnReader'isTerminatingMacro [#_"int" ___ch]
        (and (ร ___ch != \#) (ร ___ch != \') (EdnReader'isMacro ___ch))
    )

    (defn #_"List" EdnReader'readDelimitedList [#_"char" ___delim, #_"PushbackReader" ___r, #_"boolean" ___isRecursive, #_"Object" ___opts]
        (let [#_"int" ___firstline (if (ยง instance? LineNumberingPushbackReader ___r) (.getLineNumber (cast' LineNumberingPushbackReader ___r)) -1)]
            (let [#_"ArrayList" ___a (ArrayList.)]
                (while true
                    (let [#_"int" ___ch (EdnReader'read1 ___r)]
                        (while (EdnReader'isWhitespace ___ch)
                            (ยง ass ___ch (EdnReader'read1 ___r))
                        )

                        (when (= ___ch -1)
                            (if (< ___firstline 0)
                                (do
                                    (throw (Util'runtimeException-1 "EOF while reading"))
                                )
                                (do
                                    (throw (Util'runtimeException-1 (str "EOF while reading, starting at line " ___firstline)))
                                )
                            )
                        )

                        (when (= ___ch ___delim)
                            (ยง break )
                        )

                        (let [#_"IFn" ___macroFn (EdnReader'getMacro ___ch)]
                            (if (some? ___macroFn)
                                (do
                                    (let [#_"Object" ___mret (ร ___macroFn.invoke(___r, (char) ___ch, ___opts))]
                                        ;; no op macros return the reader
                                        (when (not= ___mret ___r)
                                            (.add ___a, ___mret)
                                        )
                                    )
                                )
                                (do
                                    (EdnReader'unread ___r, ___ch)

                                    (let [#_"Object" ___o (EdnReader'read-5 ___r, true, nil, ___isRecursive, ___opts)]
                                        (when (not= ___o ___r)
                                            (.add ___a, ___o)
                                        )
                                    )
                                )
                            )
                        )
                    )
                )

                ___a
            )
        )
    )
)
)

(java-ns cloiure.lang.EnumerationSeq

(ยง import java.io.IOException)
(ยง import java.util.Enumeration)

(class-ns EnumerationSeqState
    (defn- #_"EnumerationSeqState" EnumerationSeqState'init []
        (hash-map
            #_volatile
            #_"Object" :val nil
            #_volatile
            #_"Object" :_rest nil
        )
    )

    (defn #_"EnumerationSeqState" EnumerationSeqState'new []
        (EnumerationSeqState'init)
    )
)

(class-ns EnumerationSeq (ยง extends ASeq)
    (defn #_"EnumerationSeq" EnumerationSeq'create [#_"Enumeration" ___iter]
        (when (.hasMoreElements ___iter)
            (ยง return (EnumerationSeq'new-1 ___iter))
        )
        nil
    )

    (defn- #_"EnumerationSeq" EnumerationSeq'init []
        (hash-map
            #_"Enumeration" :iter nil
            #_"EnumerationSeqState" :state nil
        )
    )

    (defn #_"EnumerationSeq" EnumerationSeq'new-1 [#_"Enumeration" ___iter]
        (let [this (merge (ASeq'new) (EnumerationSeq'init))]
            (ยง ass (:iter this) ___iter)
            (ยง ass (:state this) (EnumerationSeqState'new))
            (ยง ass (:val (:state this)) (:state this))
            (ยง ass (:_rest (:state this)) (:state this))
            this
        )
    )

    (defn #_"EnumerationSeq" EnumerationSeq'new-3 [#_"IPersistentMap" ___meta, #_"Enumeration" ___iter, #_"EnumerationSeqState" ___state]
        (let [this (merge (ASeq'new ___meta) (EnumerationSeq'init))]
            (ยง ass (:iter this) ___iter)
            (ยง ass (:state this) ___state)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"EnumerationSeq" this]
        (when (ร (:val (:state this)) == (:state this))
            (ยง sync (:state this)
                (when (ร (:val (:state this)) == (:state this))
                    (ยง ass (:val (:state this)) (.nextElement (:iter this)))
                )
            )
        )
        (:val (:state this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"EnumerationSeq" this]
        (when (ร (:_rest (:state this)) == (:state this))
            (ยง sync (:state this)
                (when (ร (:_rest (:state this)) == (:state this))
                    (first this)
                    (ยง ass (:_rest (:state this)) (EnumerationSeq'create (:iter this)))
                )
            )
        )
        (cast' ISeq (:_rest (:state this)))
    )

    #_method
    (ยง defn #_"EnumerationSeq" (ยง method withMeta) [#_"EnumerationSeq" this, #_"IPersistentMap" ___meta]
        (EnumerationSeq'new-3 ___meta, (:iter this), (:state this))
    )
)
)

(java-ns cloiure.lang.ExceptionInfo

;;;
 ; Exception that carries data (a map) as additional payload. Cloiure programs that need
 ; richer semantics for exceptions should use this in lieu of defining project-specific
 ; exception classes.
 ;;
(class-ns ExceptionInfo (ยง extends RuntimeException) (ยง implements IExceptionInfo)
    (defn- #_"ExceptionInfo" ExceptionInfo'init []
        (hash-map
            #_"IPersistentMap" :data nil
        )
    )

    (defn #_"ExceptionInfo" ExceptionInfo'new-2 [#_"String" ___s, #_"IPersistentMap" ___data]
        (ExceptionInfo'new-3 ___s, ___data, nil)
    )

    (defn #_"ExceptionInfo" ExceptionInfo'new-3 [#_"String" ___s, #_"IPersistentMap" ___data, #_"Throwable" ___throwable]
        (let [this (merge (ยง foreign RuntimeException'new ___s, ___throwable) (ExceptionInfo'init))]
            ;; nil cause is equivalent to not passing a cause
            (if (some? ___data)
                (do
                    (ยง ass (:data this) ___data)
                )
                (do
                    (throw (IllegalArgumentException. "Additional data must be non-nil."))
                )
            )
            this
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method getData) [#_"ExceptionInfo" this]
        (:data this)
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"ExceptionInfo" this]
        (str "cloiure.lang.ExceptionInfo: " (.getMessage this) " " (.toString (:data this)))
    )
)
)

(java-ns cloiure.lang.Fn

(ยง defprotocol Fn
)
)

(java-ns cloiure.lang.FnLoaderThunk

(class-ns FnLoaderThunk (ยง extends RestFn)
    (defn- #_"FnLoaderThunk" FnLoaderThunk'init []
        (hash-map
            #_"Var" :v nil
            #_"ClassLoader" :loader nil
            #_"String" :fnClassName nil
            #_"IFn" :fn nil
        )
    )

    (defn #_"FnLoaderThunk" FnLoaderThunk'new [#_"Var" ___v, #_"String" ___fnClassName]
        (let [this (merge (RestFn'new) (FnLoaderThunk'init))]
            (ยง ass (:v this) ___v)
            (ยง ass (:loader this) (cast ClassLoader (.get RT'FN_LOADER_VAR)))
            (ยง ass (:fnClassName this) ___fnClassName)
            (ยง ass (:fn this) nil)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"FnLoaderThunk" this, #_"Object" ___arg1]
        (.load this)
        (.invoke (:fn this), ___arg1)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"FnLoaderThunk" this, #_"Object" ___arg1, #_"Object" ___arg2]
        (.load this)
        (.invoke (:fn this), ___arg1, ___arg2)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"FnLoaderThunk" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3]
        (.load this)
        (.invoke (:fn this), ___arg1, ___arg2, ___arg3)
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"FnLoaderThunk" this, #_"Object" ___args]
        (.load this)
        (.applyTo (:fn this), (cast' ISeq ___args))
    )

    #_method
    (ยง defn- #_"void" (ยง method load) [#_"FnLoaderThunk" this]
        (when (nil? (:fn this))
            (try
                (ยง ass (:fn this) (cast' IFn (ร Class/forName((:fnClassName this), true, (:loader this)).newInstance())))
                (catch Exception ___e
                    (throw (Util'sneakyThrow ___e))
                )
            )
            (ยง ass (:root (:v this)) (:fn this))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method getRequiredArity) [#_"FnLoaderThunk" this]
        0
    )

    #_method
    (ยง defn #_"IObj" (ยง method withMeta) [#_"FnLoaderThunk" this, #_"IPersistentMap" ___meta]
        this
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method meta) [#_"FnLoaderThunk" this]
        nil
    )
)
)

(java-ns cloiure.lang.IAtom

(ยง defprotocol IAtom
    #_abstract
    (#_"Object" IAtom'''(ยง method swap-2) [#_"IAtom" this, #_"IFn" ___f])
    #_abstract
    (#_"Object" IAtom'''(ยง method swap-3) [#_"IAtom" this, #_"IFn" ___f, #_"Object" ___arg])
    #_abstract
    (#_"Object" IAtom'''(ยง method swap-4) [#_"IAtom" this, #_"IFn" ___f, #_"Object" ___arg1, #_"Object" ___arg2])
    #_abstract
    (#_"Object" IAtom'''(ยง method swap-5) [#_"IAtom" this, #_"IFn" ___f, #_"Object" ___x, #_"Object" ___y, #_"ISeq" ___args])
    #_abstract
    (#_"boolean" IAtom'''(ยง method compareAndSet) [#_"IAtom" this, #_"Object" ___oldv, #_"Object" ___newv])
    #_abstract
    (#_"Object" IAtom'''(ยง method reset) [#_"IAtom" this, #_"Object" ___newval])
)
)

(java-ns cloiure.lang.IAtom2

(ยง defprotocol IAtom2 #_(ยง extends IAtom)
    #_abstract
    (#_"IPersistentVector" IAtom2'''(ยง method swapVals-2) [#_"IAtom2" this, #_"IFn" ___f])
    #_abstract
    (#_"IPersistentVector" IAtom2'''(ยง method swapVals-3) [#_"IAtom2" this, #_"IFn" ___f, #_"Object" ___arg])
    #_abstract
    (#_"IPersistentVector" IAtom2'''(ยง method swapVals-4) [#_"IAtom2" this, #_"IFn" ___f, #_"Object" ___arg1, #_"Object" ___arg2])
    #_abstract
    (#_"IPersistentVector" IAtom2'''(ยง method swapVals-5) [#_"IAtom2" this, #_"IFn" ___f, #_"Object" ___x, #_"Object" ___y, #_"ISeq" ___args])
    #_abstract
    (#_"IPersistentVector" IAtom2'''(ยง method resetVals) [#_"IAtom2" this, #_"Object" ___newv])
)
)

(java-ns cloiure.lang.IBlockingDeref

(ยง defprotocol IBlockingDeref
    #_abstract
    (#_"Object" IBlockingDeref'''(ยง method deref) [#_"IBlockingDeref" this, #_"long" ___ms, #_"Object" ___timeoutValue])
)
)

(java-ns cloiure.lang.IChunk

(ยง defprotocol IChunk #_(ยง extends Indexed)
    #_abstract
    (#_"IChunk" IChunk'''(ยง method dropFirst) [#_"IChunk" this])
    #_abstract
    (#_"Object" IChunk'''(ยง method reduce) [#_"IChunk" this, #_"IFn" ___f, #_"Object" ___start])
)
)

(java-ns cloiure.lang.IChunkedSeq

(ยง defprotocol IChunkedSeq #_(ยง extends ISeq, Sequential)
    #_abstract
    (#_"IChunk" IChunkedSeq'''(ยง method chunkedFirst) [#_"IChunkedSeq" this])
    #_abstract
    (#_"ISeq" IChunkedSeq'''(ยง method chunkedNext) [#_"IChunkedSeq" this])
    #_abstract
    (#_"ISeq" IChunkedSeq'''(ยง method chunkedMore) [#_"IChunkedSeq" this])
)
)

(java-ns cloiure.lang.IDeref

(ยง defprotocol IDeref
    #_abstract
    (#_"Object" IDeref'''(ยง method deref) [#_"IDeref" this])
)
)

(java-ns cloiure.lang.IEditableCollection

(ยง defprotocol IEditableCollection
    #_abstract
    (#_"ITransientCollection" IEditableCollection'''(ยง method asTransient) [#_"IEditableCollection" this])
)
)

(java-ns cloiure.lang.IExceptionInfo

;;;
 ; Interface for exceptions that carry data (a map) as additional payload. Cloiure
 ; programs that need richer semantics for exceptions should use this in lieu of
 ; defining project-specific exception classes.
 ;;
(ยง defprotocol IExceptionInfo
    #_abstract
    (#_"IPersistentMap" IExceptionInfo'''(ยง method getData) [#_"IExceptionInfo" this])
)
)

(java-ns cloiure.lang.IFn

(ยง import java.util.concurrent.Callable)

(ยง defprotocol L
    #_abstract
    (#_"long" L'''(ยง method invokePrim) [#_"L" this])
)

(ยง defprotocol D
    #_abstract
    (#_"double" D'''(ยง method invokePrim) [#_"D" this])
)

(ยง defprotocol OL
    #_abstract
    (#_"long" OL'''(ยง method invokePrim) [#_"OL" this, #_"Object" ___arg0])
)

(ยง defprotocol OD
    #_abstract
    (#_"double" OD'''(ยง method invokePrim) [#_"OD" this, #_"Object" ___arg0])
)

(ยง defprotocol LO
    #_abstract
    (#_"Object" LO'''(ยง method invokePrim) [#_"LO" this, #_"long" ___arg0])
)

(ยง defprotocol LL
    #_abstract
    (#_"long" LL'''(ยง method invokePrim) [#_"LL" this, #_"long" ___arg0])
)

(ยง defprotocol LD
    #_abstract
    (#_"double" LD'''(ยง method invokePrim) [#_"LD" this, #_"long" ___arg0])
)

(ยง defprotocol DO
    #_abstract
    (#_"Object" DO'''(ยง method invokePrim) [#_"DO" this, #_"double" ___arg0])
)

(ยง defprotocol DL
    #_abstract
    (#_"long" DL'''(ยง method invokePrim) [#_"DL" this, #_"double" ___arg0])
)

(ยง defprotocol DD
    #_abstract
    (#_"double" DD'''(ยง method invokePrim) [#_"DD" this, #_"double" ___arg0])
)

(ยง defprotocol OOL
    #_abstract
    (#_"long" OOL'''(ยง method invokePrim) [#_"OOL" this, #_"Object" ___arg0, #_"Object" ___arg1])
)

(ยง defprotocol OOD
    #_abstract
    (#_"double" OOD'''(ยง method invokePrim) [#_"OOD" this, #_"Object" ___arg0, #_"Object" ___arg1])
)

(ยง defprotocol OLO
    #_abstract
    (#_"Object" OLO'''(ยง method invokePrim) [#_"OLO" this, #_"Object" ___arg0, #_"long" ___arg1])
)

(ยง defprotocol OLL
    #_abstract
    (#_"long" OLL'''(ยง method invokePrim) [#_"OLL" this, #_"Object" ___arg0, #_"long" ___arg1])
)

(ยง defprotocol OLD
    #_abstract
    (#_"double" OLD'''(ยง method invokePrim) [#_"OLD" this, #_"Object" ___arg0, #_"long" ___arg1])
)

(ยง defprotocol ODO
    #_abstract
    (#_"Object" ODO'''(ยง method invokePrim) [#_"ODO" this, #_"Object" ___arg0, #_"double" ___arg1])
)

(ยง defprotocol ODL
    #_abstract
    (#_"long" ODL'''(ยง method invokePrim) [#_"ODL" this, #_"Object" ___arg0, #_"double" ___arg1])
)

(ยง defprotocol ODD
    #_abstract
    (#_"double" ODD'''(ยง method invokePrim) [#_"ODD" this, #_"Object" ___arg0, #_"double" ___arg1])
)

(ยง defprotocol LOO
    #_abstract
    (#_"Object" LOO'''(ยง method invokePrim) [#_"LOO" this, #_"long" ___arg0, #_"Object" ___arg1])
)

(ยง defprotocol LOL
    #_abstract
    (#_"long" LOL'''(ยง method invokePrim) [#_"LOL" this, #_"long" ___arg0, #_"Object" ___arg1])
)

(ยง defprotocol LOD
    #_abstract
    (#_"double" LOD'''(ยง method invokePrim) [#_"LOD" this, #_"long" ___arg0, #_"Object" ___arg1])
)

(ยง defprotocol LLO
    #_abstract
    (#_"Object" LLO'''(ยง method invokePrim) [#_"LLO" this, #_"long" ___arg0, #_"long" ___arg1])
)

(ยง defprotocol LLL
    #_abstract
    (#_"long" LLL'''(ยง method invokePrim) [#_"LLL" this, #_"long" ___arg0, #_"long" ___arg1])
)

(ยง defprotocol LLD
    #_abstract
    (#_"double" LLD'''(ยง method invokePrim) [#_"LLD" this, #_"long" ___arg0, #_"long" ___arg1])
)

(ยง defprotocol LDO
    #_abstract
    (#_"Object" LDO'''(ยง method invokePrim) [#_"LDO" this, #_"long" ___arg0, #_"double" ___arg1])
)

(ยง defprotocol LDL
    #_abstract
    (#_"long" LDL'''(ยง method invokePrim) [#_"LDL" this, #_"long" ___arg0, #_"double" ___arg1])
)

(ยง defprotocol LDD
    #_abstract
    (#_"double" LDD'''(ยง method invokePrim) [#_"LDD" this, #_"long" ___arg0, #_"double" ___arg1])
)

(ยง defprotocol DOO
    #_abstract
    (#_"Object" DOO'''(ยง method invokePrim) [#_"DOO" this, #_"double" ___arg0, #_"Object" ___arg1])
)

(ยง defprotocol DOL
    #_abstract
    (#_"long" DOL'''(ยง method invokePrim) [#_"DOL" this, #_"double" ___arg0, #_"Object" ___arg1])
)

(ยง defprotocol DOD
    #_abstract
    (#_"double" DOD'''(ยง method invokePrim) [#_"DOD" this, #_"double" ___arg0, #_"Object" ___arg1])
)

(ยง defprotocol DLO
    #_abstract
    (#_"Object" DLO'''(ยง method invokePrim) [#_"DLO" this, #_"double" ___arg0, #_"long" ___arg1])
)

(ยง defprotocol DLL
    #_abstract
    (#_"long" DLL'''(ยง method invokePrim) [#_"DLL" this, #_"double" ___arg0, #_"long" ___arg1])
)

(ยง defprotocol DLD
    #_abstract
    (#_"double" DLD'''(ยง method invokePrim) [#_"DLD" this, #_"double" ___arg0, #_"long" ___arg1])
)

(ยง defprotocol DDO
    #_abstract
    (#_"Object" DDO'''(ยง method invokePrim) [#_"DDO" this, #_"double" ___arg0, #_"double" ___arg1])
)

(ยง defprotocol DDL
    #_abstract
    (#_"long" DDL'''(ยง method invokePrim) [#_"DDL" this, #_"double" ___arg0, #_"double" ___arg1])
)

(ยง defprotocol DDD
    #_abstract
    (#_"double" DDD'''(ยง method invokePrim) [#_"DDD" this, #_"double" ___arg0, #_"double" ___arg1])
)

(ยง defprotocol OOOL
    #_abstract
    (#_"long" OOOL'''(ยง method invokePrim) [#_"OOOL" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol OOOD
    #_abstract
    (#_"double" OOOD'''(ยง method invokePrim) [#_"OOOD" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol OOLO
    #_abstract
    (#_"Object" OOLO'''(ยง method invokePrim) [#_"OOLO" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol OOLL
    #_abstract
    (#_"long" OOLL'''(ยง method invokePrim) [#_"OOLL" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol OOLD
    #_abstract
    (#_"double" OOLD'''(ยง method invokePrim) [#_"OOLD" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol OODO
    #_abstract
    (#_"Object" OODO'''(ยง method invokePrim) [#_"OODO" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol OODL
    #_abstract
    (#_"long" OODL'''(ยง method invokePrim) [#_"OODL" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol OODD
    #_abstract
    (#_"double" OODD'''(ยง method invokePrim) [#_"OODD" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol OLOO
    #_abstract
    (#_"Object" OLOO'''(ยง method invokePrim) [#_"OLOO" this, #_"Object" ___arg0, #_"long" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol OLOL
    #_abstract
    (#_"long" OLOL'''(ยง method invokePrim) [#_"OLOL" this, #_"Object" ___arg0, #_"long" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol OLOD
    #_abstract
    (#_"double" OLOD'''(ยง method invokePrim) [#_"OLOD" this, #_"Object" ___arg0, #_"long" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol OLLO
    #_abstract
    (#_"Object" OLLO'''(ยง method invokePrim) [#_"OLLO" this, #_"Object" ___arg0, #_"long" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol OLLL
    #_abstract
    (#_"long" OLLL'''(ยง method invokePrim) [#_"OLLL" this, #_"Object" ___arg0, #_"long" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol OLLD
    #_abstract
    (#_"double" OLLD'''(ยง method invokePrim) [#_"OLLD" this, #_"Object" ___arg0, #_"long" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol OLDO
    #_abstract
    (#_"Object" OLDO'''(ยง method invokePrim) [#_"OLDO" this, #_"Object" ___arg0, #_"long" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol OLDL
    #_abstract
    (#_"long" OLDL'''(ยง method invokePrim) [#_"OLDL" this, #_"Object" ___arg0, #_"long" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol OLDD
    #_abstract
    (#_"double" OLDD'''(ยง method invokePrim) [#_"OLDD" this, #_"Object" ___arg0, #_"long" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol ODOO
    #_abstract
    (#_"Object" ODOO'''(ยง method invokePrim) [#_"ODOO" this, #_"Object" ___arg0, #_"double" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol ODOL
    #_abstract
    (#_"long" ODOL'''(ยง method invokePrim) [#_"ODOL" this, #_"Object" ___arg0, #_"double" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol ODOD
    #_abstract
    (#_"double" ODOD'''(ยง method invokePrim) [#_"ODOD" this, #_"Object" ___arg0, #_"double" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol ODLO
    #_abstract
    (#_"Object" ODLO'''(ยง method invokePrim) [#_"ODLO" this, #_"Object" ___arg0, #_"double" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol ODLL
    #_abstract
    (#_"long" ODLL'''(ยง method invokePrim) [#_"ODLL" this, #_"Object" ___arg0, #_"double" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol ODLD
    #_abstract
    (#_"double" ODLD'''(ยง method invokePrim) [#_"ODLD" this, #_"Object" ___arg0, #_"double" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol ODDO
    #_abstract
    (#_"Object" ODDO'''(ยง method invokePrim) [#_"ODDO" this, #_"Object" ___arg0, #_"double" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol ODDL
    #_abstract
    (#_"long" ODDL'''(ยง method invokePrim) [#_"ODDL" this, #_"Object" ___arg0, #_"double" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol ODDD
    #_abstract
    (#_"double" ODDD'''(ยง method invokePrim) [#_"ODDD" this, #_"Object" ___arg0, #_"double" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol LOOO
    #_abstract
    (#_"Object" LOOO'''(ยง method invokePrim) [#_"LOOO" this, #_"long" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol LOOL
    #_abstract
    (#_"long" LOOL'''(ยง method invokePrim) [#_"LOOL" this, #_"long" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol LOOD
    #_abstract
    (#_"double" LOOD'''(ยง method invokePrim) [#_"LOOD" this, #_"long" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol LOLO
    #_abstract
    (#_"Object" LOLO'''(ยง method invokePrim) [#_"LOLO" this, #_"long" ___arg0, #_"Object" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol LOLL
    #_abstract
    (#_"long" LOLL'''(ยง method invokePrim) [#_"LOLL" this, #_"long" ___arg0, #_"Object" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol LOLD
    #_abstract
    (#_"double" LOLD'''(ยง method invokePrim) [#_"LOLD" this, #_"long" ___arg0, #_"Object" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol LODO
    #_abstract
    (#_"Object" LODO'''(ยง method invokePrim) [#_"LODO" this, #_"long" ___arg0, #_"Object" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol LODL
    #_abstract
    (#_"long" LODL'''(ยง method invokePrim) [#_"LODL" this, #_"long" ___arg0, #_"Object" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol LODD
    #_abstract
    (#_"double" LODD'''(ยง method invokePrim) [#_"LODD" this, #_"long" ___arg0, #_"Object" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol LLOO
    #_abstract
    (#_"Object" LLOO'''(ยง method invokePrim) [#_"LLOO" this, #_"long" ___arg0, #_"long" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol LLOL
    #_abstract
    (#_"long" LLOL'''(ยง method invokePrim) [#_"LLOL" this, #_"long" ___arg0, #_"long" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol LLOD
    #_abstract
    (#_"double" LLOD'''(ยง method invokePrim) [#_"LLOD" this, #_"long" ___arg0, #_"long" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol LLLO
    #_abstract
    (#_"Object" LLLO'''(ยง method invokePrim) [#_"LLLO" this, #_"long" ___arg0, #_"long" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol LLLL
    #_abstract
    (#_"long" LLLL'''(ยง method invokePrim) [#_"LLLL" this, #_"long" ___arg0, #_"long" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol LLLD
    #_abstract
    (#_"double" LLLD'''(ยง method invokePrim) [#_"LLLD" this, #_"long" ___arg0, #_"long" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol LLDO
    #_abstract
    (#_"Object" LLDO'''(ยง method invokePrim) [#_"LLDO" this, #_"long" ___arg0, #_"long" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol LLDL
    #_abstract
    (#_"long" LLDL'''(ยง method invokePrim) [#_"LLDL" this, #_"long" ___arg0, #_"long" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol LLDD
    #_abstract
    (#_"double" LLDD'''(ยง method invokePrim) [#_"LLDD" this, #_"long" ___arg0, #_"long" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol LDOO
    #_abstract
    (#_"Object" LDOO'''(ยง method invokePrim) [#_"LDOO" this, #_"long" ___arg0, #_"double" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol LDOL
    #_abstract
    (#_"long" LDOL'''(ยง method invokePrim) [#_"LDOL" this, #_"long" ___arg0, #_"double" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol LDOD
    #_abstract
    (#_"double" LDOD'''(ยง method invokePrim) [#_"LDOD" this, #_"long" ___arg0, #_"double" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol LDLO
    #_abstract
    (#_"Object" LDLO'''(ยง method invokePrim) [#_"LDLO" this, #_"long" ___arg0, #_"double" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol LDLL
    #_abstract
    (#_"long" LDLL'''(ยง method invokePrim) [#_"LDLL" this, #_"long" ___arg0, #_"double" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol LDLD
    #_abstract
    (#_"double" LDLD'''(ยง method invokePrim) [#_"LDLD" this, #_"long" ___arg0, #_"double" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol LDDO
    #_abstract
    (#_"Object" LDDO'''(ยง method invokePrim) [#_"LDDO" this, #_"long" ___arg0, #_"double" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol LDDL
    #_abstract
    (#_"long" LDDL'''(ยง method invokePrim) [#_"LDDL" this, #_"long" ___arg0, #_"double" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol LDDD
    #_abstract
    (#_"double" LDDD'''(ยง method invokePrim) [#_"LDDD" this, #_"long" ___arg0, #_"double" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol DOOO
    #_abstract
    (#_"Object" DOOO'''(ยง method invokePrim) [#_"DOOO" this, #_"double" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol DOOL
    #_abstract
    (#_"long" DOOL'''(ยง method invokePrim) [#_"DOOL" this, #_"double" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol DOOD
    #_abstract
    (#_"double" DOOD'''(ยง method invokePrim) [#_"DOOD" this, #_"double" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol DOLO
    #_abstract
    (#_"Object" DOLO'''(ยง method invokePrim) [#_"DOLO" this, #_"double" ___arg0, #_"Object" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol DOLL
    #_abstract
    (#_"long" DOLL'''(ยง method invokePrim) [#_"DOLL" this, #_"double" ___arg0, #_"Object" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol DOLD
    #_abstract
    (#_"double" DOLD'''(ยง method invokePrim) [#_"DOLD" this, #_"double" ___arg0, #_"Object" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol DODO
    #_abstract
    (#_"Object" DODO'''(ยง method invokePrim) [#_"DODO" this, #_"double" ___arg0, #_"Object" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol DODL
    #_abstract
    (#_"long" DODL'''(ยง method invokePrim) [#_"DODL" this, #_"double" ___arg0, #_"Object" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol DODD
    #_abstract
    (#_"double" DODD'''(ยง method invokePrim) [#_"DODD" this, #_"double" ___arg0, #_"Object" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol DLOO
    #_abstract
    (#_"Object" DLOO'''(ยง method invokePrim) [#_"DLOO" this, #_"double" ___arg0, #_"long" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol DLOL
    #_abstract
    (#_"long" DLOL'''(ยง method invokePrim) [#_"DLOL" this, #_"double" ___arg0, #_"long" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol DLOD
    #_abstract
    (#_"double" DLOD'''(ยง method invokePrim) [#_"DLOD" this, #_"double" ___arg0, #_"long" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol DLLO
    #_abstract
    (#_"Object" DLLO'''(ยง method invokePrim) [#_"DLLO" this, #_"double" ___arg0, #_"long" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol DLLL
    #_abstract
    (#_"long" DLLL'''(ยง method invokePrim) [#_"DLLL" this, #_"double" ___arg0, #_"long" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol DLLD
    #_abstract
    (#_"double" DLLD'''(ยง method invokePrim) [#_"DLLD" this, #_"double" ___arg0, #_"long" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol DLDO
    #_abstract
    (#_"Object" DLDO'''(ยง method invokePrim) [#_"DLDO" this, #_"double" ___arg0, #_"long" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol DLDL
    #_abstract
    (#_"long" DLDL'''(ยง method invokePrim) [#_"DLDL" this, #_"double" ___arg0, #_"long" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol DLDD
    #_abstract
    (#_"double" DLDD'''(ยง method invokePrim) [#_"DLDD" this, #_"double" ___arg0, #_"long" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol DDOO
    #_abstract
    (#_"Object" DDOO'''(ยง method invokePrim) [#_"DDOO" this, #_"double" ___arg0, #_"double" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol DDOL
    #_abstract
    (#_"long" DDOL'''(ยง method invokePrim) [#_"DDOL" this, #_"double" ___arg0, #_"double" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol DDOD
    #_abstract
    (#_"double" DDOD'''(ยง method invokePrim) [#_"DDOD" this, #_"double" ___arg0, #_"double" ___arg1, #_"Object" ___arg2])
)

(ยง defprotocol DDLO
    #_abstract
    (#_"Object" DDLO'''(ยง method invokePrim) [#_"DDLO" this, #_"double" ___arg0, #_"double" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol DDLL
    #_abstract
    (#_"long" DDLL'''(ยง method invokePrim) [#_"DDLL" this, #_"double" ___arg0, #_"double" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol DDLD
    #_abstract
    (#_"double" DDLD'''(ยง method invokePrim) [#_"DDLD" this, #_"double" ___arg0, #_"double" ___arg1, #_"long" ___arg2])
)

(ยง defprotocol DDDO
    #_abstract
    (#_"Object" DDDO'''(ยง method invokePrim) [#_"DDDO" this, #_"double" ___arg0, #_"double" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol DDDL
    #_abstract
    (#_"long" DDDL'''(ยง method invokePrim) [#_"DDDL" this, #_"double" ___arg0, #_"double" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol DDDD
    #_abstract
    (#_"double" DDDD'''(ยง method invokePrim) [#_"DDDD" this, #_"double" ___arg0, #_"double" ___arg1, #_"double" ___arg2])
)

(ยง defprotocol OOOOL
    #_abstract
    (#_"long" OOOOL'''(ยง method invokePrim) [#_"OOOOL" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OOOOD
    #_abstract
    (#_"double" OOOOD'''(ยง method invokePrim) [#_"OOOOD" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OOOLO
    #_abstract
    (#_"Object" OOOLO'''(ยง method invokePrim) [#_"OOOLO" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OOOLL
    #_abstract
    (#_"long" OOOLL'''(ยง method invokePrim) [#_"OOOLL" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OOOLD
    #_abstract
    (#_"double" OOOLD'''(ยง method invokePrim) [#_"OOOLD" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OOODO
    #_abstract
    (#_"Object" OOODO'''(ยง method invokePrim) [#_"OOODO" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OOODL
    #_abstract
    (#_"long" OOODL'''(ยง method invokePrim) [#_"OOODL" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OOODD
    #_abstract
    (#_"double" OOODD'''(ยง method invokePrim) [#_"OOODD" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OOLOO
    #_abstract
    (#_"Object" OOLOO'''(ยง method invokePrim) [#_"OOLOO" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OOLOL
    #_abstract
    (#_"long" OOLOL'''(ยง method invokePrim) [#_"OOLOL" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OOLOD
    #_abstract
    (#_"double" OOLOD'''(ยง method invokePrim) [#_"OOLOD" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OOLLO
    #_abstract
    (#_"Object" OOLLO'''(ยง method invokePrim) [#_"OOLLO" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OOLLL
    #_abstract
    (#_"long" OOLLL'''(ยง method invokePrim) [#_"OOLLL" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OOLLD
    #_abstract
    (#_"double" OOLLD'''(ยง method invokePrim) [#_"OOLLD" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OOLDO
    #_abstract
    (#_"Object" OOLDO'''(ยง method invokePrim) [#_"OOLDO" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OOLDL
    #_abstract
    (#_"long" OOLDL'''(ยง method invokePrim) [#_"OOLDL" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OOLDD
    #_abstract
    (#_"double" OOLDD'''(ยง method invokePrim) [#_"OOLDD" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OODOO
    #_abstract
    (#_"Object" OODOO'''(ยง method invokePrim) [#_"OODOO" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OODOL
    #_abstract
    (#_"long" OODOL'''(ยง method invokePrim) [#_"OODOL" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OODOD
    #_abstract
    (#_"double" OODOD'''(ยง method invokePrim) [#_"OODOD" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OODLO
    #_abstract
    (#_"Object" OODLO'''(ยง method invokePrim) [#_"OODLO" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OODLL
    #_abstract
    (#_"long" OODLL'''(ยง method invokePrim) [#_"OODLL" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OODLD
    #_abstract
    (#_"double" OODLD'''(ยง method invokePrim) [#_"OODLD" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OODDO
    #_abstract
    (#_"Object" OODDO'''(ยง method invokePrim) [#_"OODDO" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OODDL
    #_abstract
    (#_"long" OODDL'''(ยง method invokePrim) [#_"OODDL" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OODDD
    #_abstract
    (#_"double" OODDD'''(ยง method invokePrim) [#_"OODDD" this, #_"Object" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OLOOO
    #_abstract
    (#_"Object" OLOOO'''(ยง method invokePrim) [#_"OLOOO" this, #_"Object" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OLOOL
    #_abstract
    (#_"long" OLOOL'''(ยง method invokePrim) [#_"OLOOL" this, #_"Object" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OLOOD
    #_abstract
    (#_"double" OLOOD'''(ยง method invokePrim) [#_"OLOOD" this, #_"Object" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OLOLO
    #_abstract
    (#_"Object" OLOLO'''(ยง method invokePrim) [#_"OLOLO" this, #_"Object" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OLOLL
    #_abstract
    (#_"long" OLOLL'''(ยง method invokePrim) [#_"OLOLL" this, #_"Object" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OLOLD
    #_abstract
    (#_"double" OLOLD'''(ยง method invokePrim) [#_"OLOLD" this, #_"Object" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OLODO
    #_abstract
    (#_"Object" OLODO'''(ยง method invokePrim) [#_"OLODO" this, #_"Object" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OLODL
    #_abstract
    (#_"long" OLODL'''(ยง method invokePrim) [#_"OLODL" this, #_"Object" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OLODD
    #_abstract
    (#_"double" OLODD'''(ยง method invokePrim) [#_"OLODD" this, #_"Object" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OLLOO
    #_abstract
    (#_"Object" OLLOO'''(ยง method invokePrim) [#_"OLLOO" this, #_"Object" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OLLOL
    #_abstract
    (#_"long" OLLOL'''(ยง method invokePrim) [#_"OLLOL" this, #_"Object" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OLLOD
    #_abstract
    (#_"double" OLLOD'''(ยง method invokePrim) [#_"OLLOD" this, #_"Object" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OLLLO
    #_abstract
    (#_"Object" OLLLO'''(ยง method invokePrim) [#_"OLLLO" this, #_"Object" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OLLLL
    #_abstract
    (#_"long" OLLLL'''(ยง method invokePrim) [#_"OLLLL" this, #_"Object" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OLLLD
    #_abstract
    (#_"double" OLLLD'''(ยง method invokePrim) [#_"OLLLD" this, #_"Object" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OLLDO
    #_abstract
    (#_"Object" OLLDO'''(ยง method invokePrim) [#_"OLLDO" this, #_"Object" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OLLDL
    #_abstract
    (#_"long" OLLDL'''(ยง method invokePrim) [#_"OLLDL" this, #_"Object" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OLLDD
    #_abstract
    (#_"double" OLLDD'''(ยง method invokePrim) [#_"OLLDD" this, #_"Object" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OLDOO
    #_abstract
    (#_"Object" OLDOO'''(ยง method invokePrim) [#_"OLDOO" this, #_"Object" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OLDOL
    #_abstract
    (#_"long" OLDOL'''(ยง method invokePrim) [#_"OLDOL" this, #_"Object" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OLDOD
    #_abstract
    (#_"double" OLDOD'''(ยง method invokePrim) [#_"OLDOD" this, #_"Object" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol OLDLO
    #_abstract
    (#_"Object" OLDLO'''(ยง method invokePrim) [#_"OLDLO" this, #_"Object" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OLDLL
    #_abstract
    (#_"long" OLDLL'''(ยง method invokePrim) [#_"OLDLL" this, #_"Object" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OLDLD
    #_abstract
    (#_"double" OLDLD'''(ยง method invokePrim) [#_"OLDLD" this, #_"Object" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol OLDDO
    #_abstract
    (#_"Object" OLDDO'''(ยง method invokePrim) [#_"OLDDO" this, #_"Object" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OLDDL
    #_abstract
    (#_"long" OLDDL'''(ยง method invokePrim) [#_"OLDDL" this, #_"Object" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol OLDDD
    #_abstract
    (#_"double" OLDDD'''(ยง method invokePrim) [#_"OLDDD" this, #_"Object" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol ODOOO
    #_abstract
    (#_"Object" ODOOO'''(ยง method invokePrim) [#_"ODOOO" this, #_"Object" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol ODOOL
    #_abstract
    (#_"long" ODOOL'''(ยง method invokePrim) [#_"ODOOL" this, #_"Object" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol ODOOD
    #_abstract
    (#_"double" ODOOD'''(ยง method invokePrim) [#_"ODOOD" this, #_"Object" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol ODOLO
    #_abstract
    (#_"Object" ODOLO'''(ยง method invokePrim) [#_"ODOLO" this, #_"Object" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol ODOLL
    #_abstract
    (#_"long" ODOLL'''(ยง method invokePrim) [#_"ODOLL" this, #_"Object" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol ODOLD
    #_abstract
    (#_"double" ODOLD'''(ยง method invokePrim) [#_"ODOLD" this, #_"Object" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol ODODO
    #_abstract
    (#_"Object" ODODO'''(ยง method invokePrim) [#_"ODODO" this, #_"Object" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol ODODL
    #_abstract
    (#_"long" ODODL'''(ยง method invokePrim) [#_"ODODL" this, #_"Object" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol ODODD
    #_abstract
    (#_"double" ODODD'''(ยง method invokePrim) [#_"ODODD" this, #_"Object" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol ODLOO
    #_abstract
    (#_"Object" ODLOO'''(ยง method invokePrim) [#_"ODLOO" this, #_"Object" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol ODLOL
    #_abstract
    (#_"long" ODLOL'''(ยง method invokePrim) [#_"ODLOL" this, #_"Object" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol ODLOD
    #_abstract
    (#_"double" ODLOD'''(ยง method invokePrim) [#_"ODLOD" this, #_"Object" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol ODLLO
    #_abstract
    (#_"Object" ODLLO'''(ยง method invokePrim) [#_"ODLLO" this, #_"Object" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol ODLLL
    #_abstract
    (#_"long" ODLLL'''(ยง method invokePrim) [#_"ODLLL" this, #_"Object" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol ODLLD
    #_abstract
    (#_"double" ODLLD'''(ยง method invokePrim) [#_"ODLLD" this, #_"Object" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol ODLDO
    #_abstract
    (#_"Object" ODLDO'''(ยง method invokePrim) [#_"ODLDO" this, #_"Object" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol ODLDL
    #_abstract
    (#_"long" ODLDL'''(ยง method invokePrim) [#_"ODLDL" this, #_"Object" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol ODLDD
    #_abstract
    (#_"double" ODLDD'''(ยง method invokePrim) [#_"ODLDD" this, #_"Object" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol ODDOO
    #_abstract
    (#_"Object" ODDOO'''(ยง method invokePrim) [#_"ODDOO" this, #_"Object" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol ODDOL
    #_abstract
    (#_"long" ODDOL'''(ยง method invokePrim) [#_"ODDOL" this, #_"Object" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol ODDOD
    #_abstract
    (#_"double" ODDOD'''(ยง method invokePrim) [#_"ODDOD" this, #_"Object" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol ODDLO
    #_abstract
    (#_"Object" ODDLO'''(ยง method invokePrim) [#_"ODDLO" this, #_"Object" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol ODDLL
    #_abstract
    (#_"long" ODDLL'''(ยง method invokePrim) [#_"ODDLL" this, #_"Object" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol ODDLD
    #_abstract
    (#_"double" ODDLD'''(ยง method invokePrim) [#_"ODDLD" this, #_"Object" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol ODDDO
    #_abstract
    (#_"Object" ODDDO'''(ยง method invokePrim) [#_"ODDDO" this, #_"Object" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol ODDDL
    #_abstract
    (#_"long" ODDDL'''(ยง method invokePrim) [#_"ODDDL" this, #_"Object" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol ODDDD
    #_abstract
    (#_"double" ODDDD'''(ยง method invokePrim) [#_"ODDDD" this, #_"Object" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LOOOO
    #_abstract
    (#_"Object" LOOOO'''(ยง method invokePrim) [#_"LOOOO" this, #_"long" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LOOOL
    #_abstract
    (#_"long" LOOOL'''(ยง method invokePrim) [#_"LOOOL" this, #_"long" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LOOOD
    #_abstract
    (#_"double" LOOOD'''(ยง method invokePrim) [#_"LOOOD" this, #_"long" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LOOLO
    #_abstract
    (#_"Object" LOOLO'''(ยง method invokePrim) [#_"LOOLO" this, #_"long" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LOOLL
    #_abstract
    (#_"long" LOOLL'''(ยง method invokePrim) [#_"LOOLL" this, #_"long" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LOOLD
    #_abstract
    (#_"double" LOOLD'''(ยง method invokePrim) [#_"LOOLD" this, #_"long" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LOODO
    #_abstract
    (#_"Object" LOODO'''(ยง method invokePrim) [#_"LOODO" this, #_"long" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LOODL
    #_abstract
    (#_"long" LOODL'''(ยง method invokePrim) [#_"LOODL" this, #_"long" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LOODD
    #_abstract
    (#_"double" LOODD'''(ยง method invokePrim) [#_"LOODD" this, #_"long" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LOLOO
    #_abstract
    (#_"Object" LOLOO'''(ยง method invokePrim) [#_"LOLOO" this, #_"long" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LOLOL
    #_abstract
    (#_"long" LOLOL'''(ยง method invokePrim) [#_"LOLOL" this, #_"long" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LOLOD
    #_abstract
    (#_"double" LOLOD'''(ยง method invokePrim) [#_"LOLOD" this, #_"long" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LOLLO
    #_abstract
    (#_"Object" LOLLO'''(ยง method invokePrim) [#_"LOLLO" this, #_"long" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LOLLL
    #_abstract
    (#_"long" LOLLL'''(ยง method invokePrim) [#_"LOLLL" this, #_"long" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LOLLD
    #_abstract
    (#_"double" LOLLD'''(ยง method invokePrim) [#_"LOLLD" this, #_"long" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LOLDO
    #_abstract
    (#_"Object" LOLDO'''(ยง method invokePrim) [#_"LOLDO" this, #_"long" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LOLDL
    #_abstract
    (#_"long" LOLDL'''(ยง method invokePrim) [#_"LOLDL" this, #_"long" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LOLDD
    #_abstract
    (#_"double" LOLDD'''(ยง method invokePrim) [#_"LOLDD" this, #_"long" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LODOO
    #_abstract
    (#_"Object" LODOO'''(ยง method invokePrim) [#_"LODOO" this, #_"long" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LODOL
    #_abstract
    (#_"long" LODOL'''(ยง method invokePrim) [#_"LODOL" this, #_"long" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LODOD
    #_abstract
    (#_"double" LODOD'''(ยง method invokePrim) [#_"LODOD" this, #_"long" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LODLO
    #_abstract
    (#_"Object" LODLO'''(ยง method invokePrim) [#_"LODLO" this, #_"long" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LODLL
    #_abstract
    (#_"long" LODLL'''(ยง method invokePrim) [#_"LODLL" this, #_"long" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LODLD
    #_abstract
    (#_"double" LODLD'''(ยง method invokePrim) [#_"LODLD" this, #_"long" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LODDO
    #_abstract
    (#_"Object" LODDO'''(ยง method invokePrim) [#_"LODDO" this, #_"long" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LODDL
    #_abstract
    (#_"long" LODDL'''(ยง method invokePrim) [#_"LODDL" this, #_"long" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LODDD
    #_abstract
    (#_"double" LODDD'''(ยง method invokePrim) [#_"LODDD" this, #_"long" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LLOOO
    #_abstract
    (#_"Object" LLOOO'''(ยง method invokePrim) [#_"LLOOO" this, #_"long" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LLOOL
    #_abstract
    (#_"long" LLOOL'''(ยง method invokePrim) [#_"LLOOL" this, #_"long" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LLOOD
    #_abstract
    (#_"double" LLOOD'''(ยง method invokePrim) [#_"LLOOD" this, #_"long" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LLOLO
    #_abstract
    (#_"Object" LLOLO'''(ยง method invokePrim) [#_"LLOLO" this, #_"long" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LLOLL
    #_abstract
    (#_"long" LLOLL'''(ยง method invokePrim) [#_"LLOLL" this, #_"long" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LLOLD
    #_abstract
    (#_"double" LLOLD'''(ยง method invokePrim) [#_"LLOLD" this, #_"long" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LLODO
    #_abstract
    (#_"Object" LLODO'''(ยง method invokePrim) [#_"LLODO" this, #_"long" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LLODL
    #_abstract
    (#_"long" LLODL'''(ยง method invokePrim) [#_"LLODL" this, #_"long" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LLODD
    #_abstract
    (#_"double" LLODD'''(ยง method invokePrim) [#_"LLODD" this, #_"long" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LLLOO
    #_abstract
    (#_"Object" LLLOO'''(ยง method invokePrim) [#_"LLLOO" this, #_"long" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LLLOL
    #_abstract
    (#_"long" LLLOL'''(ยง method invokePrim) [#_"LLLOL" this, #_"long" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LLLOD
    #_abstract
    (#_"double" LLLOD'''(ยง method invokePrim) [#_"LLLOD" this, #_"long" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LLLLO
    #_abstract
    (#_"Object" LLLLO'''(ยง method invokePrim) [#_"LLLLO" this, #_"long" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LLLLL
    #_abstract
    (#_"long" LLLLL'''(ยง method invokePrim) [#_"LLLLL" this, #_"long" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LLLLD
    #_abstract
    (#_"double" LLLLD'''(ยง method invokePrim) [#_"LLLLD" this, #_"long" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LLLDO
    #_abstract
    (#_"Object" LLLDO'''(ยง method invokePrim) [#_"LLLDO" this, #_"long" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LLLDL
    #_abstract
    (#_"long" LLLDL'''(ยง method invokePrim) [#_"LLLDL" this, #_"long" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LLLDD
    #_abstract
    (#_"double" LLLDD'''(ยง method invokePrim) [#_"LLLDD" this, #_"long" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LLDOO
    #_abstract
    (#_"Object" LLDOO'''(ยง method invokePrim) [#_"LLDOO" this, #_"long" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LLDOL
    #_abstract
    (#_"long" LLDOL'''(ยง method invokePrim) [#_"LLDOL" this, #_"long" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LLDOD
    #_abstract
    (#_"double" LLDOD'''(ยง method invokePrim) [#_"LLDOD" this, #_"long" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LLDLO
    #_abstract
    (#_"Object" LLDLO'''(ยง method invokePrim) [#_"LLDLO" this, #_"long" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LLDLL
    #_abstract
    (#_"long" LLDLL'''(ยง method invokePrim) [#_"LLDLL" this, #_"long" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LLDLD
    #_abstract
    (#_"double" LLDLD'''(ยง method invokePrim) [#_"LLDLD" this, #_"long" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LLDDO
    #_abstract
    (#_"Object" LLDDO'''(ยง method invokePrim) [#_"LLDDO" this, #_"long" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LLDDL
    #_abstract
    (#_"long" LLDDL'''(ยง method invokePrim) [#_"LLDDL" this, #_"long" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LLDDD
    #_abstract
    (#_"double" LLDDD'''(ยง method invokePrim) [#_"LLDDD" this, #_"long" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LDOOO
    #_abstract
    (#_"Object" LDOOO'''(ยง method invokePrim) [#_"LDOOO" this, #_"long" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LDOOL
    #_abstract
    (#_"long" LDOOL'''(ยง method invokePrim) [#_"LDOOL" this, #_"long" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LDOOD
    #_abstract
    (#_"double" LDOOD'''(ยง method invokePrim) [#_"LDOOD" this, #_"long" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LDOLO
    #_abstract
    (#_"Object" LDOLO'''(ยง method invokePrim) [#_"LDOLO" this, #_"long" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LDOLL
    #_abstract
    (#_"long" LDOLL'''(ยง method invokePrim) [#_"LDOLL" this, #_"long" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LDOLD
    #_abstract
    (#_"double" LDOLD'''(ยง method invokePrim) [#_"LDOLD" this, #_"long" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LDODO
    #_abstract
    (#_"Object" LDODO'''(ยง method invokePrim) [#_"LDODO" this, #_"long" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LDODL
    #_abstract
    (#_"long" LDODL'''(ยง method invokePrim) [#_"LDODL" this, #_"long" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LDODD
    #_abstract
    (#_"double" LDODD'''(ยง method invokePrim) [#_"LDODD" this, #_"long" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LDLOO
    #_abstract
    (#_"Object" LDLOO'''(ยง method invokePrim) [#_"LDLOO" this, #_"long" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LDLOL
    #_abstract
    (#_"long" LDLOL'''(ยง method invokePrim) [#_"LDLOL" this, #_"long" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LDLOD
    #_abstract
    (#_"double" LDLOD'''(ยง method invokePrim) [#_"LDLOD" this, #_"long" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LDLLO
    #_abstract
    (#_"Object" LDLLO'''(ยง method invokePrim) [#_"LDLLO" this, #_"long" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LDLLL
    #_abstract
    (#_"long" LDLLL'''(ยง method invokePrim) [#_"LDLLL" this, #_"long" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LDLLD
    #_abstract
    (#_"double" LDLLD'''(ยง method invokePrim) [#_"LDLLD" this, #_"long" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LDLDO
    #_abstract
    (#_"Object" LDLDO'''(ยง method invokePrim) [#_"LDLDO" this, #_"long" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LDLDL
    #_abstract
    (#_"long" LDLDL'''(ยง method invokePrim) [#_"LDLDL" this, #_"long" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LDLDD
    #_abstract
    (#_"double" LDLDD'''(ยง method invokePrim) [#_"LDLDD" this, #_"long" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LDDOO
    #_abstract
    (#_"Object" LDDOO'''(ยง method invokePrim) [#_"LDDOO" this, #_"long" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LDDOL
    #_abstract
    (#_"long" LDDOL'''(ยง method invokePrim) [#_"LDDOL" this, #_"long" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LDDOD
    #_abstract
    (#_"double" LDDOD'''(ยง method invokePrim) [#_"LDDOD" this, #_"long" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol LDDLO
    #_abstract
    (#_"Object" LDDLO'''(ยง method invokePrim) [#_"LDDLO" this, #_"long" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LDDLL
    #_abstract
    (#_"long" LDDLL'''(ยง method invokePrim) [#_"LDDLL" this, #_"long" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LDDLD
    #_abstract
    (#_"double" LDDLD'''(ยง method invokePrim) [#_"LDDLD" this, #_"long" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol LDDDO
    #_abstract
    (#_"Object" LDDDO'''(ยง method invokePrim) [#_"LDDDO" this, #_"long" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LDDDL
    #_abstract
    (#_"long" LDDDL'''(ยง method invokePrim) [#_"LDDDL" this, #_"long" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol LDDDD
    #_abstract
    (#_"double" LDDDD'''(ยง method invokePrim) [#_"LDDDD" this, #_"long" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DOOOO
    #_abstract
    (#_"Object" DOOOO'''(ยง method invokePrim) [#_"DOOOO" this, #_"double" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DOOOL
    #_abstract
    (#_"long" DOOOL'''(ยง method invokePrim) [#_"DOOOL" this, #_"double" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DOOOD
    #_abstract
    (#_"double" DOOOD'''(ยง method invokePrim) [#_"DOOOD" this, #_"double" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DOOLO
    #_abstract
    (#_"Object" DOOLO'''(ยง method invokePrim) [#_"DOOLO" this, #_"double" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DOOLL
    #_abstract
    (#_"long" DOOLL'''(ยง method invokePrim) [#_"DOOLL" this, #_"double" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DOOLD
    #_abstract
    (#_"double" DOOLD'''(ยง method invokePrim) [#_"DOOLD" this, #_"double" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DOODO
    #_abstract
    (#_"Object" DOODO'''(ยง method invokePrim) [#_"DOODO" this, #_"double" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DOODL
    #_abstract
    (#_"long" DOODL'''(ยง method invokePrim) [#_"DOODL" this, #_"double" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DOODD
    #_abstract
    (#_"double" DOODD'''(ยง method invokePrim) [#_"DOODD" this, #_"double" ___arg0, #_"Object" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DOLOO
    #_abstract
    (#_"Object" DOLOO'''(ยง method invokePrim) [#_"DOLOO" this, #_"double" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DOLOL
    #_abstract
    (#_"long" DOLOL'''(ยง method invokePrim) [#_"DOLOL" this, #_"double" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DOLOD
    #_abstract
    (#_"double" DOLOD'''(ยง method invokePrim) [#_"DOLOD" this, #_"double" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DOLLO
    #_abstract
    (#_"Object" DOLLO'''(ยง method invokePrim) [#_"DOLLO" this, #_"double" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DOLLL
    #_abstract
    (#_"long" DOLLL'''(ยง method invokePrim) [#_"DOLLL" this, #_"double" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DOLLD
    #_abstract
    (#_"double" DOLLD'''(ยง method invokePrim) [#_"DOLLD" this, #_"double" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DOLDO
    #_abstract
    (#_"Object" DOLDO'''(ยง method invokePrim) [#_"DOLDO" this, #_"double" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DOLDL
    #_abstract
    (#_"long" DOLDL'''(ยง method invokePrim) [#_"DOLDL" this, #_"double" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DOLDD
    #_abstract
    (#_"double" DOLDD'''(ยง method invokePrim) [#_"DOLDD" this, #_"double" ___arg0, #_"Object" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DODOO
    #_abstract
    (#_"Object" DODOO'''(ยง method invokePrim) [#_"DODOO" this, #_"double" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DODOL
    #_abstract
    (#_"long" DODOL'''(ยง method invokePrim) [#_"DODOL" this, #_"double" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DODOD
    #_abstract
    (#_"double" DODOD'''(ยง method invokePrim) [#_"DODOD" this, #_"double" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DODLO
    #_abstract
    (#_"Object" DODLO'''(ยง method invokePrim) [#_"DODLO" this, #_"double" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DODLL
    #_abstract
    (#_"long" DODLL'''(ยง method invokePrim) [#_"DODLL" this, #_"double" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DODLD
    #_abstract
    (#_"double" DODLD'''(ยง method invokePrim) [#_"DODLD" this, #_"double" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DODDO
    #_abstract
    (#_"Object" DODDO'''(ยง method invokePrim) [#_"DODDO" this, #_"double" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DODDL
    #_abstract
    (#_"long" DODDL'''(ยง method invokePrim) [#_"DODDL" this, #_"double" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DODDD
    #_abstract
    (#_"double" DODDD'''(ยง method invokePrim) [#_"DODDD" this, #_"double" ___arg0, #_"Object" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DLOOO
    #_abstract
    (#_"Object" DLOOO'''(ยง method invokePrim) [#_"DLOOO" this, #_"double" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DLOOL
    #_abstract
    (#_"long" DLOOL'''(ยง method invokePrim) [#_"DLOOL" this, #_"double" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DLOOD
    #_abstract
    (#_"double" DLOOD'''(ยง method invokePrim) [#_"DLOOD" this, #_"double" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DLOLO
    #_abstract
    (#_"Object" DLOLO'''(ยง method invokePrim) [#_"DLOLO" this, #_"double" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DLOLL
    #_abstract
    (#_"long" DLOLL'''(ยง method invokePrim) [#_"DLOLL" this, #_"double" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DLOLD
    #_abstract
    (#_"double" DLOLD'''(ยง method invokePrim) [#_"DLOLD" this, #_"double" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DLODO
    #_abstract
    (#_"Object" DLODO'''(ยง method invokePrim) [#_"DLODO" this, #_"double" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DLODL
    #_abstract
    (#_"long" DLODL'''(ยง method invokePrim) [#_"DLODL" this, #_"double" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DLODD
    #_abstract
    (#_"double" DLODD'''(ยง method invokePrim) [#_"DLODD" this, #_"double" ___arg0, #_"long" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DLLOO
    #_abstract
    (#_"Object" DLLOO'''(ยง method invokePrim) [#_"DLLOO" this, #_"double" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DLLOL
    #_abstract
    (#_"long" DLLOL'''(ยง method invokePrim) [#_"DLLOL" this, #_"double" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DLLOD
    #_abstract
    (#_"double" DLLOD'''(ยง method invokePrim) [#_"DLLOD" this, #_"double" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DLLLO
    #_abstract
    (#_"Object" DLLLO'''(ยง method invokePrim) [#_"DLLLO" this, #_"double" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DLLLL
    #_abstract
    (#_"long" DLLLL'''(ยง method invokePrim) [#_"DLLLL" this, #_"double" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DLLLD
    #_abstract
    (#_"double" DLLLD'''(ยง method invokePrim) [#_"DLLLD" this, #_"double" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DLLDO
    #_abstract
    (#_"Object" DLLDO'''(ยง method invokePrim) [#_"DLLDO" this, #_"double" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DLLDL
    #_abstract
    (#_"long" DLLDL'''(ยง method invokePrim) [#_"DLLDL" this, #_"double" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DLLDD
    #_abstract
    (#_"double" DLLDD'''(ยง method invokePrim) [#_"DLLDD" this, #_"double" ___arg0, #_"long" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DLDOO
    #_abstract
    (#_"Object" DLDOO'''(ยง method invokePrim) [#_"DLDOO" this, #_"double" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DLDOL
    #_abstract
    (#_"long" DLDOL'''(ยง method invokePrim) [#_"DLDOL" this, #_"double" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DLDOD
    #_abstract
    (#_"double" DLDOD'''(ยง method invokePrim) [#_"DLDOD" this, #_"double" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DLDLO
    #_abstract
    (#_"Object" DLDLO'''(ยง method invokePrim) [#_"DLDLO" this, #_"double" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DLDLL
    #_abstract
    (#_"long" DLDLL'''(ยง method invokePrim) [#_"DLDLL" this, #_"double" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DLDLD
    #_abstract
    (#_"double" DLDLD'''(ยง method invokePrim) [#_"DLDLD" this, #_"double" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DLDDO
    #_abstract
    (#_"Object" DLDDO'''(ยง method invokePrim) [#_"DLDDO" this, #_"double" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DLDDL
    #_abstract
    (#_"long" DLDDL'''(ยง method invokePrim) [#_"DLDDL" this, #_"double" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DLDDD
    #_abstract
    (#_"double" DLDDD'''(ยง method invokePrim) [#_"DLDDD" this, #_"double" ___arg0, #_"long" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DDOOO
    #_abstract
    (#_"Object" DDOOO'''(ยง method invokePrim) [#_"DDOOO" this, #_"double" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DDOOL
    #_abstract
    (#_"long" DDOOL'''(ยง method invokePrim) [#_"DDOOL" this, #_"double" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DDOOD
    #_abstract
    (#_"double" DDOOD'''(ยง method invokePrim) [#_"DDOOD" this, #_"double" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DDOLO
    #_abstract
    (#_"Object" DDOLO'''(ยง method invokePrim) [#_"DDOLO" this, #_"double" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DDOLL
    #_abstract
    (#_"long" DDOLL'''(ยง method invokePrim) [#_"DDOLL" this, #_"double" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DDOLD
    #_abstract
    (#_"double" DDOLD'''(ยง method invokePrim) [#_"DDOLD" this, #_"double" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DDODO
    #_abstract
    (#_"Object" DDODO'''(ยง method invokePrim) [#_"DDODO" this, #_"double" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DDODL
    #_abstract
    (#_"long" DDODL'''(ยง method invokePrim) [#_"DDODL" this, #_"double" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DDODD
    #_abstract
    (#_"double" DDODD'''(ยง method invokePrim) [#_"DDODD" this, #_"double" ___arg0, #_"double" ___arg1, #_"Object" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DDLOO
    #_abstract
    (#_"Object" DDLOO'''(ยง method invokePrim) [#_"DDLOO" this, #_"double" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DDLOL
    #_abstract
    (#_"long" DDLOL'''(ยง method invokePrim) [#_"DDLOL" this, #_"double" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DDLOD
    #_abstract
    (#_"double" DDLOD'''(ยง method invokePrim) [#_"DDLOD" this, #_"double" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DDLLO
    #_abstract
    (#_"Object" DDLLO'''(ยง method invokePrim) [#_"DDLLO" this, #_"double" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DDLLL
    #_abstract
    (#_"long" DDLLL'''(ยง method invokePrim) [#_"DDLLL" this, #_"double" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DDLLD
    #_abstract
    (#_"double" DDLLD'''(ยง method invokePrim) [#_"DDLLD" this, #_"double" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DDLDO
    #_abstract
    (#_"Object" DDLDO'''(ยง method invokePrim) [#_"DDLDO" this, #_"double" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DDLDL
    #_abstract
    (#_"long" DDLDL'''(ยง method invokePrim) [#_"DDLDL" this, #_"double" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DDLDD
    #_abstract
    (#_"double" DDLDD'''(ยง method invokePrim) [#_"DDLDD" this, #_"double" ___arg0, #_"double" ___arg1, #_"long" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DDDOO
    #_abstract
    (#_"Object" DDDOO'''(ยง method invokePrim) [#_"DDDOO" this, #_"double" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DDDOL
    #_abstract
    (#_"long" DDDOL'''(ยง method invokePrim) [#_"DDDOL" this, #_"double" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DDDOD
    #_abstract
    (#_"double" DDDOD'''(ยง method invokePrim) [#_"DDDOD" this, #_"double" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"Object" ___arg3])
)

(ยง defprotocol DDDLO
    #_abstract
    (#_"Object" DDDLO'''(ยง method invokePrim) [#_"DDDLO" this, #_"double" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DDDLL
    #_abstract
    (#_"long" DDDLL'''(ยง method invokePrim) [#_"DDDLL" this, #_"double" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DDDLD
    #_abstract
    (#_"double" DDDLD'''(ยง method invokePrim) [#_"DDDLD" this, #_"double" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"long" ___arg3])
)

(ยง defprotocol DDDDO
    #_abstract
    (#_"Object" DDDDO'''(ยง method invokePrim) [#_"DDDDO" this, #_"double" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DDDDL
    #_abstract
    (#_"long" DDDDL'''(ยง method invokePrim) [#_"DDDDL" this, #_"double" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

(ยง defprotocol DDDDD
    #_abstract
    (#_"double" DDDDD'''(ยง method invokePrim) [#_"DDDDD" this, #_"double" ___arg0, #_"double" ___arg1, #_"double" ___arg2, #_"double" ___arg3])
)

;;;
 ; <code>IFn</code> provides complete access to invoking
 ; any of Cloiure's <a href="http://clojure.github.io/clojure/">API</a>s.
 ; You can also access any other library written in Cloiure, after adding
 ; either its source or compiled form to the classpath.
 ;;
(ยง defprotocol IFn #_(ยง extends Callable, Runnable)
    #_abstract
    (#_"Object" IFn'''(ยง method invoke-1) [#_"IFn" this])
    #_abstract
    (#_"Object" IFn'''(ยง method invoke-2) [#_"IFn" this, #_"Object" ___arg1])
    #_abstract
    (#_"Object" IFn'''(ยง method invoke-3) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2])
    #_abstract
    (#_"Object" IFn'''(ยง method invoke-4) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3])
    #_abstract
    (#_"Object" IFn'''(ยง method invoke-5) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4])
    #_abstract
    (#_"Object" IFn'''(ยง method invoke-6) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5])
    #_abstract
    (#_"Object" IFn'''(ยง method invoke-7) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6])
    #_abstract
    (#_"Object" IFn'''(ยง method invoke-8) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7])
    #_abstract
    (#_"Object" IFn'''(ยง method invoke-9) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8])

    #_abstract
    (#_"Object" IFn'''(ยง method invoke-10) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9])

    #_abstract
    (#_"Object" IFn'''(ยง method invoke-11) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10])

    #_abstract
    (#_"Object" IFn'''(ยง method invoke-12) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11])

    #_abstract
    (#_"Object" IFn'''(ยง method invoke-13) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12])

    #_abstract
    (#_"Object" IFn'''(ยง method invoke-14) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13])

    #_abstract
    (#_"Object" IFn'''(ยง method invoke-15) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14])

    #_abstract
    (#_"Object" IFn'''(ยง method invoke-16) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15])

    #_abstract
    (#_"Object" IFn'''(ยง method invoke-17) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16])

    #_abstract
    (#_"Object" IFn'''(ยง method invoke-18) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17])

    #_abstract
    (#_"Object" IFn'''(ยง method invoke-19) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18])

    #_abstract
  #_(#_"Object" IFn'''(ยง method invoke-20) [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19])

    #_abstract
  #_(#_"Object" IFn'''(ยง method invoke-21) [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20])

    #_abstract
    (#_"Object" IFn'''(ยง method invoke-22) [#_"IFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" #_arg19, #_"Object" #_arg20, #_"Object..." ___args])

    #_abstract
    (#_"Object" IFn'''(ยง method applyTo) [#_"IFn" this, #_"ISeq" ___arglist])
)
)

(java-ns cloiure.lang.IHashEq

(ยง defprotocol IHashEq
    #_abstract
    (#_"int" IHashEq'''(ยง method hasheq) [#_"IHashEq" this])
)
)

(java-ns cloiure.lang.IKeywordLookup

(ยง defprotocol IKeywordLookup
    #_abstract
    (#_"ILookupThunk" IKeywordLookup'''(ยง method getLookupThunk) [#_"IKeywordLookup" this, #_"Keyword" ___k])
)
)

(java-ns cloiure.lang.IKVReduce

(ยง defprotocol IKVReduce
    #_abstract
    (#_"Object" IKVReduce'''(ยง method kvreduce) [#_"IKVReduce" this, #_"IFn" ___f, #_"Object" ___init])
)
)

(java-ns cloiure.lang.ILookup

(ยง defprotocol ILookup
    #_abstract
    (#_"Object" ILookup'''(ยง method valAt-2) [#_"ILookup" this, #_"Object" ___key])
    #_abstract
    (#_"Object" ILookup'''(ยง method valAt-3) [#_"ILookup" this, #_"Object" ___key, #_"Object" ___notFound])
)
)

(java-ns cloiure.lang.ILookupSite

(ยง defprotocol ILookupSite
    #_abstract
    (#_"ILookupThunk" ILookupSite'''(ยง method fault) [#_"ILookupSite" this, #_"Object" ___target])
)
)

(java-ns cloiure.lang.ILookupThunk

(ยง defprotocol ILookupThunk
    #_abstract
    (#_"Object" ILookupThunk'''(ยง method get) [#_"ILookupThunk" this, #_"Object" ___target])
)
)

(java-ns cloiure.lang.IMapEntry

(ยง import java.util.Map)

(ยง defprotocol IMapEntry #_(ยง extends Map$Entry)
    #_abstract
    (#_"Object" IMapEntry'''(ยง method key) [#_"IMapEntry" this])
    #_abstract
    (#_"Object" IMapEntry'''(ยง method val) [#_"IMapEntry" this])
)
)

(java-ns cloiure.lang.IMapIterable

(ยง import java.util.Iterator)

;;;
 ; Indicate a map can provide more efficient key and val iterators.
 ;;
(ยง defprotocol IMapIterable
    #_abstract
    (#_"Iterator" IMapIterable'''(ยง method keyIterator) [#_"IMapIterable" this])
    #_abstract
    (#_"Iterator" IMapIterable'''(ยง method valIterator) [#_"IMapIterable" this])
)
)

(java-ns cloiure.lang.IMeta

(ยง defprotocol IMeta
    #_abstract
    (#_"IPersistentMap" IMeta'''(ยง method meta) [#_"IMeta" this])
)
)

(java-ns cloiure.lang.Indexed

(ยง defprotocol Indexed #_(ยง extends Counted)
    #_abstract
    (#_"Object" Indexed'''(ยง method nth-2) [#_"Indexed" this, #_"int" ___i])
    #_abstract
    (#_"Object" Indexed'''(ยง method nth-3) [#_"Indexed" this, #_"int" ___i, #_"Object" ___notFound])
)
)

(java-ns cloiure.lang.IndexedSeq

(ยง defprotocol IndexedSeq #_(ยง extends ISeq, Sequential, Counted)
    #_abstract
    (#_"int" IndexedSeq'''(ยง method index) [#_"IndexedSeq" this])
)
)

(java-ns cloiure.lang.Intrinsics

(ยง import cloiure.asm.Opcodes)

#_stateless
(class-ns Intrinsics (ยง implements Opcodes)
    (defn- #_"Object[]" Intrinsics'oa [#_"Object..." ___arr]
        ___arr
    )

    (def #_"IPersistentMap" Intrinsics'ops (ร RT'map(
        (object-array [
            "public static double cloiure.lang.Numbers.add(double,double)"                Opcodes/DADD
            "public static long cloiure.lang.Numbers.and(long,long)"                      Opcodes/LAND
            "public static long cloiure.lang.Numbers.or(long,long)"                       Opcodes/LOR
            "public static long cloiure.lang.Numbers.xor(long,long)"                      Opcodes/LXOR
            "public static double cloiure.lang.Numbers.multiply(double,double)"           Opcodes/DMUL
            "public static double cloiure.lang.Numbers.divide(double,double)"             Opcodes/DDIV
            "public static long cloiure.lang.Numbers.remainder(long,long)"                Opcodes/LREM
            "public static long cloiure.lang.Numbers.shiftLeft(long,long)"                (oa Opcodes/L2I, Opcodes/LSHL)
            "public static long cloiure.lang.Numbers.shiftRight(long,long)"               (oa Opcodes/L2I, Opcodes/LSHR)
            "public static long cloiure.lang.Numbers.unsignedShiftRight(long,long)"       (oa Opcodes/L2I, Opcodes/LUSHR)
            "public static double cloiure.lang.Numbers.minus(double)"                     Opcodes/DNEG
            "public static double cloiure.lang.Numbers.minus(double,double)"              Opcodes/DSUB
            "public static double cloiure.lang.Numbers.inc(double)"                       (oa Opcodes/DCONST_1, Opcodes/DADD)
            "public static double cloiure.lang.Numbers.dec(double)"                       (oa Opcodes/DCONST_1, Opcodes/DSUB)
            "public static long cloiure.lang.Numbers.quotient(long,long)"                 Opcodes/LDIV
            "public static int cloiure.lang.Numbers.shiftLeftInt(int,int)"                Opcodes/ISHL
            "public static int cloiure.lang.Numbers.shiftRightInt(int,int)"               Opcodes/ISHR
            "public static int cloiure.lang.Numbers.unsignedShiftRightInt(int,int)"       Opcodes/IUSHR
            "public static int cloiure.lang.Numbers.unchecked_int_add(int,int)"           Opcodes/IADD
            "public static int cloiure.lang.Numbers.unchecked_int_subtract(int,int)"      Opcodes/ISUB
            "public static int cloiure.lang.Numbers.unchecked_int_negate(int)"            Opcodes/INEG
            "public static int cloiure.lang.Numbers.unchecked_int_inc(int)"               (oa Opcodes/ICONST_1, Opcodes/IADD)
            "public static int cloiure.lang.Numbers.unchecked_int_dec(int)"               (oa Opcodes/ICONST_1, Opcodes/ISUB)
            "public static int cloiure.lang.Numbers.unchecked_int_multiply(int,int)"      Opcodes/IMUL
            "public static int cloiure.lang.Numbers.unchecked_int_divide(int,int)"        Opcodes/IDIV
            "public static int cloiure.lang.Numbers.unchecked_int_remainder(int,int)"     Opcodes/IREM
            "public static long cloiure.lang.Numbers.unchecked_add(long,long)"            Opcodes/LADD
            "public static double cloiure.lang.Numbers.unchecked_add(double,double)"      Opcodes/DADD
            "public static long cloiure.lang.Numbers.unchecked_minus(long)"               Opcodes/LNEG
            "public static double cloiure.lang.Numbers.unchecked_minus(double)"           Opcodes/DNEG
            "public static double cloiure.lang.Numbers.unchecked_minus(double,double)"    Opcodes/DSUB
            "public static long cloiure.lang.Numbers.unchecked_minus(long,long)"          Opcodes/LSUB
            "public static long cloiure.lang.Numbers.unchecked_multiply(long,long)"       Opcodes/LMUL
            "public static double cloiure.lang.Numbers.unchecked_multiply(double,double)" Opcodes/DMUL
            "public static double cloiure.lang.Numbers.unchecked_inc(double)"             (oa Opcodes/DCONST_1, Opcodes/DADD)
            "public static long cloiure.lang.Numbers.unchecked_inc(long)"                 (oa Opcodes/LCONST_1, Opcodes/LADD)
            "public static double cloiure.lang.Numbers.unchecked_dec(double)"             (oa Opcodes/DCONST_1, Opcodes/DSUB)
            "public static long cloiure.lang.Numbers.unchecked_dec(long)"                 (oa Opcodes/LCONST_1, Opcodes/LSUB)

            "public static short cloiure.lang.RT.aget(short[],int)"                       Opcodes/SALOAD
            "public static float cloiure.lang.RT.aget(float[],int)"                       Opcodes/FALOAD
            "public static double cloiure.lang.RT.aget(double[],int)"                     Opcodes/DALOAD
            "public static int cloiure.lang.RT.aget(int[],int)"                           Opcodes/IALOAD
            "public static long cloiure.lang.RT.aget(long[],int)"                         Opcodes/LALOAD
            "public static char cloiure.lang.RT.aget(char[],int)"                         Opcodes/CALOAD
            "public static byte cloiure.lang.RT.aget(byte[],int)"                         Opcodes/BALOAD
            "public static boolean cloiure.lang.RT.aget(boolean[],int)"                   Opcodes/BALOAD
            "public static java.lang.Object cloiure.lang.RT.aget(java.lang.Object[],int)" Opcodes/AALOAD
            "public static int cloiure.lang.RT.alength(int[])"                            Opcodes/ARRAYLENGTH
            "public static int cloiure.lang.RT.alength(long[])"                           Opcodes/ARRAYLENGTH
            "public static int cloiure.lang.RT.alength(char[])"                           Opcodes/ARRAYLENGTH
            "public static int cloiure.lang.RT.alength(java.lang.Object[])"               Opcodes/ARRAYLENGTH
            "public static int cloiure.lang.RT.alength(byte[])"                           Opcodes/ARRAYLENGTH
            "public static int cloiure.lang.RT.alength(float[])"                          Opcodes/ARRAYLENGTH
            "public static int cloiure.lang.RT.alength(short[])"                          Opcodes/ARRAYLENGTH
            "public static int cloiure.lang.RT.alength(boolean[])"                        Opcodes/ARRAYLENGTH
            "public static int cloiure.lang.RT.alength(double[])"                         Opcodes/ARRAYLENGTH

            "public static double cloiure.lang.RT.doubleCast(long)"            Opcodes/L2D
            "public static double cloiure.lang.RT.doubleCast(double)"          Opcodes/NOP
            "public static double cloiure.lang.RT.doubleCast(float)"           Opcodes/F2D
            "public static double cloiure.lang.RT.doubleCast(int)"             Opcodes/I2D
            "public static double cloiure.lang.RT.doubleCast(short)"           Opcodes/I2D
            "public static double cloiure.lang.RT.doubleCast(byte)"            Opcodes/I2D
            "public static double cloiure.lang.RT.uncheckedDoubleCast(double)" Opcodes/NOP
            "public static double cloiure.lang.RT.uncheckedDoubleCast(float)"  Opcodes/F2D
            "public static double cloiure.lang.RT.uncheckedDoubleCast(long)"   Opcodes/L2D
            "public static double cloiure.lang.RT.uncheckedDoubleCast(int)"    Opcodes/I2D
            "public static double cloiure.lang.RT.uncheckedDoubleCast(short)"  Opcodes/I2D
            "public static double cloiure.lang.RT.uncheckedDoubleCast(byte)"   Opcodes/I2D
            "public static long cloiure.lang.RT.longCast(long)"                Opcodes/NOP
            "public static long cloiure.lang.RT.longCast(short)"               Opcodes/I2L
            "public static long cloiure.lang.RT.longCast(byte)"                Opcodes/I2L
            "public static long cloiure.lang.RT.longCast(int)"                 Opcodes/I2L
            "public static int cloiure.lang.RT.uncheckedIntCast(long)"         Opcodes/L2I
            "public static int cloiure.lang.RT.uncheckedIntCast(double)"       Opcodes/D2I
            "public static int cloiure.lang.RT.uncheckedIntCast(byte)"         Opcodes/NOP
            "public static int cloiure.lang.RT.uncheckedIntCast(short)"        Opcodes/NOP
            "public static int cloiure.lang.RT.uncheckedIntCast(char)"         Opcodes/NOP
            "public static int cloiure.lang.RT.uncheckedIntCast(int)"          Opcodes/NOP
            "public static int cloiure.lang.RT.uncheckedIntCast(float)"        Opcodes/F2I
            "public static long cloiure.lang.RT.uncheckedLongCast(short)"      Opcodes/I2L
            "public static long cloiure.lang.RT.uncheckedLongCast(float)"      Opcodes/F2L
            "public static long cloiure.lang.RT.uncheckedLongCast(double)"     D2
            "public static long cloiure.lang.RT.uncheckedLongCast(byte)"       Opcodes/I2L
            "public static long cloiure.lang.RT.uncheckedLongCast(long)"       Opcodes/NOP
            "public static long cloiure.lang.RT.uncheckedLongCast(int)"        Opcodes/I2L
        ])
    )))

    ;; map to instructions terminated with comparator for branch to false
    (def #_"IPersistentMap" Intrinsics'preds (ร RT'map(
        (object-array [
            "public static boolean cloiure.lang.Numbers.lt(double,double)"    (oa Opcodes/DCMPG, Opcodes/IFGE)
            "public static boolean cloiure.lang.Numbers.lt(long,long)"        (oa Opcodes/LCMP, Opcodes/IFGE)
            "public static boolean cloiure.lang.Numbers.equiv(double,double)" (oa Opcodes/DCMPL, Opcodes/IFNE)
            "public static boolean cloiure.lang.Numbers.equiv(long,long)"     (oa Opcodes/LCMP, Opcodes/IFNE)
            "public static boolean cloiure.lang.Numbers.lte(double,double)"   (oa Opcodes/DCMPG, Opcodes/IFGT)
            "public static boolean cloiure.lang.Numbers.lte(long,long)"       (oa Opcodes/LCMP, Opcodes/IFGT)
            "public static boolean cloiure.lang.Numbers.gt(long,long)"        (oa Opcodes/LCMP, Opcodes/IFLE)
            "public static boolean cloiure.lang.Numbers.gt(double,double)"    (oa Opcodes/DCMPL, Opcodes/IFLE)
            "public static boolean cloiure.lang.Numbers.gte(long,long)"       (oa Opcodes/LCMP, Opcodes/IFLT)
            "public static boolean cloiure.lang.Numbers.gte(double,double)"   (oa Opcodes/DCMPL, Opcodes/IFLT)
            "public static boolean cloiure.lang.Util.equiv(long,long)"        (oa Opcodes/LCMP, Opcodes/IFNE)
            "public static boolean cloiure.lang.Util.equiv(boolean,boolean)"  (oa Opcodes/IF_ICMPNE)
            "public static boolean cloiure.lang.Util.equiv(double,double)"    (oa Opcodes/DCMPL, Opcodes/IFNE)

            "public static boolean cloiure.lang.Numbers.isZero(double)"       (oa Opcodes/DCONST_0, Opcodes/DCMPL, Opcodes/IFNE)
            "public static boolean cloiure.lang.Numbers.isZero(long)"         (oa Opcodes/LCONST_0, Opcodes/LCMP, Opcodes/IFNE)
            "public static boolean cloiure.lang.Numbers.isPos(long)"          (oa Opcodes/LCONST_0, Opcodes/LCMP, Opcodes/IFLE)
            "public static boolean cloiure.lang.Numbers.isPos(double)"        (oa Opcodes/DCONST_0, Opcodes/DCMPL, Opcodes/IFLE)
            "public static boolean cloiure.lang.Numbers.isNeg(long)"          (oa Opcodes/LCONST_0, Opcodes/LCMP, Opcodes/IFGE)
            "public static boolean cloiure.lang.Numbers.isNeg(double)"        (oa Opcodes/DCONST_0, Opcodes/DCMPG, Opcodes/IFGE)
        ])
    )))
)
)

(java-ns cloiure.lang.IObj

(ยง defprotocol IObj #_(ยง extends IMeta)
    #_abstract
    (#_"IObj" IObj'''(ยง method withMeta) [#_"IObj" this, #_"IPersistentMap" ___meta])
)
)

(java-ns cloiure.lang.IPending

(ยง defprotocol IPending
    #_abstract
    (#_"boolean" IPending'''(ยง method isRealized) [#_"IPending" this])
)
)

(java-ns cloiure.lang.IPersistentCollection

(ยง defprotocol IPersistentCollection #_(ยง extends Seqable)
    #_abstract
    (#_"int" IPersistentCollection'''(ยง method count) [#_"IPersistentCollection" this])
    #_abstract
    (#_"IPersistentCollection" IPersistentCollection'''(ยง method cons) [#_"IPersistentCollection" this, #_"Object" ___o])
    #_abstract
    (#_"IPersistentCollection" IPersistentCollection'''(ยง method empty) [#_"IPersistentCollection" this])
    #_abstract
    (#_"boolean" IPersistentCollection'''(ยง method equiv) [#_"IPersistentCollection" this, #_"Object" ___o])
)
)

(java-ns cloiure.lang.IPersistentList

(ยง defprotocol IPersistentList #_(ยง extends Sequential, IPersistentStack)
)
)

(java-ns cloiure.lang.IPersistentMap

(ยง defprotocol IPersistentMap #_(ยง extends Iterable, Associative, Counted)
    #_abstract
    (#_"IPersistentMap" IPersistentMap'''(ยง method assoc) [#_"IPersistentMap" this, #_"Object" ___key, #_"Object" ___val])
    #_abstract
    (#_"IPersistentMap" IPersistentMap'''(ยง method assocEx) [#_"IPersistentMap" this, #_"Object" ___key, #_"Object" ___val])
    #_abstract
    (#_"IPersistentMap" IPersistentMap'''(ยง method without) [#_"IPersistentMap" this, #_"Object" ___key])
)
)

(java-ns cloiure.lang.IPersistentSet

(ยง defprotocol IPersistentSet #_(ยง extends IPersistentCollection, Counted)
    #_abstract
    (#_"IPersistentSet" IPersistentSet'''(ยง method disjoin) [#_"IPersistentSet" this, #_"Object" ___key])
    #_abstract
    (#_"boolean" IPersistentSet'''(ยง method contains) [#_"IPersistentSet" this, #_"Object" ___key])
    #_abstract
    (#_"Object" IPersistentSet'''(ยง method get) [#_"IPersistentSet" this, #_"Object" ___key])
)
)

(java-ns cloiure.lang.IPersistentStack

(ยง defprotocol IPersistentStack #_(ยง extends IPersistentCollection)
    #_abstract
    (#_"Object" IPersistentStack'''(ยง method peek) [#_"IPersistentStack" this])
    #_abstract
    (#_"IPersistentStack" IPersistentStack'''(ยง method pop) [#_"IPersistentStack" this])
)
)

(java-ns cloiure.lang.IPersistentVector

(ยง defprotocol IPersistentVector #_(ยง extends Associative, Sequential, IPersistentStack, Reversible, Indexed)
    #_abstract
    (#_"int" IPersistentVector'''(ยง method length) [#_"IPersistentVector" this])
    #_abstract
    (#_"IPersistentVector" IPersistentVector'''(ยง method assocN) [#_"IPersistentVector" this, #_"int" ___i, #_"Object" ___val])
    #_abstract
    (#_"IPersistentVector" IPersistentVector'''(ยง method cons) [#_"IPersistentVector" this, #_"Object" ___o])
)
)

(java-ns cloiure.lang.IProxy

(ยง defprotocol IProxy
    #_abstract
    (#_"void" IProxy'''(ยง method __initCloiureFnMappings) [#_"IProxy" this, #_"IPersistentMap" ___m])
    #_abstract
    (#_"void" IProxy'''(ยง method __updateCloiureFnMappings) [#_"IProxy" this, #_"IPersistentMap" ___m])
    #_abstract
    (#_"IPersistentMap" IProxy'''(ยง method __getCloiureFnMappings) [#_"IProxy" this])
)
)

(java-ns cloiure.lang.IRecord

(ยง defprotocol IRecord
)
)

(java-ns cloiure.lang.IReduce

(ยง defprotocol IReduce #_(ยง extends IReduceInit)
    #_abstract
    (#_"Object" IReduce'''(ยง method reduce) [#_"IReduce" this, #_"IFn" ___f])
)
)

(java-ns cloiure.lang.IReduceInit

(ยง defprotocol IReduceInit
    #_abstract
    (#_"Object" IReduceInit'''(ยง method reduce) [#_"IReduceInit" this, #_"IFn" ___f, #_"Object" ___start])
)
)

(java-ns cloiure.lang.IRef

(ยง defprotocol IRef #_(ยง extends IDeref)
    #_abstract
    (#_"void" IRef'''(ยง method setValidator) [#_"IRef" this, #_"IFn" ___vf])
    #_abstract
    (#_"IFn" IRef'''(ยง method getValidator) [#_"IRef" this])
    #_abstract
    (#_"IPersistentMap" IRef'''(ยง method getWatches) [#_"IRef" this])
    #_abstract
    (#_"IRef" IRef'''(ยง method addWatch) [#_"IRef" this, #_"Object" ___key, #_"IFn" ___callback])
    #_abstract
    (#_"IRef" IRef'''(ยง method removeWatch) [#_"IRef" this, #_"Object" ___key])
)
)

(java-ns cloiure.lang.IReference

(ยง defprotocol IReference #_(ยง extends IMeta)
    #_abstract
    (#_"IPersistentMap" IReference'''(ยง method alterMeta) [#_"IReference" this, #_"IFn" ___alter, #_"ISeq" ___args])
    #_abstract
    (#_"IPersistentMap" IReference'''(ยง method resetMeta) [#_"IReference" this, #_"IPersistentMap" ___m])
)
)

(java-ns cloiure.lang.ISeq

;;;
 ; A persistent, functional, sequence interface
 ;
 ; ISeqs are immutable values, i.e. neither first(), nor rest() changes
 ; or invalidates the ISeq
 ;;
(ยง defprotocol ISeq #_(ยง extends IPersistentCollection)
    #_abstract
    (#_"Object" ISeq'''(ยง method first) [#_"ISeq" this])
    #_abstract
    (#_"ISeq" ISeq'''(ยง method next) [#_"ISeq" this])
    #_abstract
    (#_"ISeq" ISeq'''(ยง method more) [#_"ISeq" this])
    #_abstract
    (#_"ISeq" ISeq'''(ยง method cons) [#_"ISeq" this, #_"Object" ___o])
)
)

(java-ns cloiure.lang.Iterate

(class-ns Iterate (ยง extends ASeq) (ยง implements IReduce, IPending)
    (def- #_"Object" Iterate'UNREALIZED_SEED (Object.))

    (defn- #_"Iterate" Iterate'init []
        (hash-map
            #_"IFn" :f nil ;; never nil
            #_"Object" :prevSeed nil
            #_volatile
            #_"Object" :_seed nil ;; lazily realized
            #_volatile
            #_"ISeq" :_next nil ;; cached
        )
    )

    (defn- #_"Iterate" Iterate'new-3 [#_"IFn" ___f, #_"Object" ___prevSeed, #_"Object" ___seed]
        (let [this (merge (ASeq'new) (Iterate'init))]
            (ยง ass (:f this) ___f)
            (ยง ass (:prevSeed this) ___prevSeed)
            (ยง ass (:_seed this) ___seed)
            this
        )
    )

    (defn- #_"Iterate" Iterate'new-5 [#_"IPersistentMap" ___meta, #_"IFn" ___f, #_"Object" ___prevSeed, #_"Object" ___seed, #_"ISeq" ___next]
        (let [this (merge (ASeq'new ___meta) (Iterate'init))]
            (ยง ass (:f this) ___f)
            (ยง ass (:prevSeed this) ___prevSeed)
            (ยง ass (:_seed this) ___seed)
            (ยง ass (:_next this) ___next)
            this
        )
    )

    (defn #_"ISeq" Iterate'create [#_"IFn" ___f, #_"Object" ___seed]
        (Iterate'new-3 ___f, nil, ___seed)
    )

    #_method
    (ยง defn #_"boolean" (ยง method isRealized) [#_"Iterate" this]
        (ร ((:_seed this) != Iterate'UNREALIZED_SEED))
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"Iterate" this]
        (when (ร (:_seed this) == Iterate'UNREALIZED_SEED)
            (ยง ass (:_seed this) (.invoke (:f this), (:prevSeed this)))
        )
        (:_seed this)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"Iterate" this]
        (when (nil? (:_next this))
            (ยง ass (:_next this) (ร Iterate'new-3((:f this), (first this), Iterate'UNREALIZED_SEED)))
        )
        (:_next this)
    )

    #_method
    (ยง defn #_"Iterate" (ยง method withMeta) [#_"Iterate" this, #_"IPersistentMap" ___meta]
        (Iterate'new-5 ___meta, (:f this), (:prevSeed this), (:_seed this), (:_next this))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"Iterate" this, #_"IFn" ___rf]
        (let [#_"Object" ___first (first this)]
            (let [#_"Object" ___ret ___first]
                (let [#_"Object" ___v (.invoke (:f this), ___first)]
                    (while true
                        (ยง ass ___ret (.invoke ___rf, ___ret, ___v))
                        (when (RT'isReduced ___ret)
                            (ยง return (.deref (cast' IDeref ___ret)))
                        )
                        (ยง ass ___v (.invoke (:f this), ___v))
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"Iterate" this, #_"IFn" ___rf, #_"Object" ___start]
        (let [#_"Object" ___ret ___start]
            (let [#_"Object" ___v (first this)]
                (while true
                    (ยง ass ___ret (.invoke ___rf, ___ret, ___v))
                    (when (RT'isReduced ___ret)
                        (ยง return (.deref (cast' IDeref ___ret)))
                    )
                    (ยง ass ___v (.invoke (:f this), ___v))
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.IteratorSeq

(ยง import java.io.IOException)
(ยง import java.util.Iterator)

(class-ns IteratorSeqState
    (defn- #_"IteratorSeqState" IteratorSeqState'init []
        (hash-map
            #_volatile
            #_"Object" :val nil
            #_volatile
            #_"Object" :_rest nil
        )
    )

    (defn #_"IteratorSeqState" IteratorSeqState'new []
        (IteratorSeqState'init)
    )
)

(class-ns IteratorSeq (ยง extends ASeq)
    (defn #_"IteratorSeq" IteratorSeq'create [#_"Iterator" ___iter]
        (when (.hasNext ___iter)
            (ยง return (IteratorSeq'new-1 ___iter))
        )
        nil
    )

    (defn- #_"IteratorSeq" IteratorSeq'init []
        (hash-map
            #_"Iterator" :iter nil
            #_"IteratorSeqState" :state nil
        )
    )

    (defn #_"IteratorSeq" IteratorSeq'new-1 [#_"Iterator" ___iter]
        (let [this (merge (ASeq'new) (IteratorSeq'init))]
            (ยง ass (:iter this) ___iter)
            (ยง ass (:state this) (IteratorSeqState'new))
            (ยง ass (:val (:state this)) (:state this))
            (ยง ass (:_rest (:state this)) (:state this))
            this
        )
    )

    (defn #_"IteratorSeq" IteratorSeq'new-3 [#_"IPersistentMap" ___meta, #_"Iterator" ___iter, #_"IteratorSeqState" ___state]
        (let [this (merge (ASeq'new ___meta) (IteratorSeq'init))]
            (ยง ass (:iter this) ___iter)
            (ยง ass (:state this) ___state)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"IteratorSeq" this]
        (when (ร (:val (:state this)) == (:state this))
            (ยง sync (:state this)
                (when (ร (:val (:state this)) == (:state this))
                    (ยง ass (:val (:state this)) (next (:iter this)))
                )
            )
        )
        (:val (:state this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"IteratorSeq" this]
        (when (ร (:_rest (:state this)) == (:state this))
            (ยง sync (:state this)
                (when (ร (:_rest (:state this)) == (:state this))
                    (first this)
                    (ยง ass (:_rest (:state this)) (IteratorSeq'create (:iter this)))
                )
            )
        )
        (cast' ISeq (:_rest (:state this)))
    )

    #_method
    (ยง defn #_"IteratorSeq" (ยง method withMeta) [#_"IteratorSeq" this, #_"IPersistentMap" ___meta]
        (IteratorSeq'new-3 ___meta, (:iter this), (:state this))
    )
)
)

(java-ns cloiure.lang.ITransientAssociative

(ยง defprotocol ITransientAssociative #_(ยง extends ITransientCollection, ILookup)
    #_abstract
    (#_"ITransientAssociative" ITransientAssociative'''(ยง method assoc) [#_"ITransientAssociative" this, #_"Object" ___key, #_"Object" ___val])
)
)

(java-ns cloiure.lang.ITransientAssociative2

(ยง defprotocol ITransientAssociative2 #_(ยง extends ITransientAssociative)
    #_abstract
    (#_"boolean" ITransientAssociative2'''(ยง method containsKey) [#_"ITransientAssociative2" this, #_"Object" ___key])
    #_abstract
    (#_"IMapEntry" ITransientAssociative2'''(ยง method entryAt) [#_"ITransientAssociative2" this, #_"Object" ___key])
)
)

(java-ns cloiure.lang.ITransientCollection

(ยง defprotocol ITransientCollection
    #_abstract
    (#_"ITransientCollection" ITransientCollection'''(ยง method conj) [#_"ITransientCollection" this, #_"Object" ___val])
    #_abstract
    (#_"IPersistentCollection" ITransientCollection'''(ยง method persistent) [#_"ITransientCollection" this])
)
)

(java-ns cloiure.lang.ITransientMap

(ยง defprotocol ITransientMap #_(ยง extends ITransientAssociative, Counted)
    #_abstract
    (#_"ITransientMap" ITransientMap'''(ยง method assoc) [#_"ITransientMap" this, #_"Object" ___key, #_"Object" ___val])
    #_abstract
    (#_"ITransientMap" ITransientMap'''(ยง method without) [#_"ITransientMap" this, #_"Object" ___key])
    #_abstract
    (#_"IPersistentMap" ITransientMap'''(ยง method persistent) [#_"ITransientMap" this])
)
)

(java-ns cloiure.lang.ITransientSet

(ยง defprotocol ITransientSet #_(ยง extends ITransientCollection, Counted)
    #_abstract
    (#_"ITransientSet" ITransientSet'''(ยง method disjoin) [#_"ITransientSet" this, #_"Object" ___key])
    #_abstract
    (#_"boolean" ITransientSet'''(ยง method contains) [#_"ITransientSet" this, #_"Object" ___key])
    #_abstract
    (#_"Object" ITransientSet'''(ยง method get) [#_"ITransientSet" this, #_"Object" ___key])
)
)

(java-ns cloiure.lang.ITransientVector

(ยง defprotocol ITransientVector #_(ยง extends ITransientAssociative, Indexed)
    #_abstract
    (#_"ITransientVector" ITransientVector'''(ยง method assocN) [#_"ITransientVector" this, #_"int" ___i, #_"Object" ___val])
    #_abstract
    (#_"ITransientVector" ITransientVector'''(ยง method pop) [#_"ITransientVector" this])
)
)

(java-ns cloiure.lang.IType

(ยง defprotocol IType
)
)

(java-ns cloiure.lang.Keyword

(ยง import java.lang.ref.Reference)
(ยง import java.lang.ref.WeakReference)
(ยง import java.util.concurrent.ConcurrentHashMap)
(ยง import java.lang.ref.ReferenceQueue)
(ยง import java.lang.ref.SoftReference)

(class-ns Keyword (ยง implements IFn, Comparable, Named, IHashEq)
    (def- #_"ConcurrentHashMap<Symbol, Reference<Keyword>>" Keyword'TABLE (ConcurrentHashMap.))

    (def #_"ReferenceQueue" Keyword'RQ (ReferenceQueue.))

    (defn #_"Keyword" Keyword'intern [#_"Symbol" ___sym]
        (let [#_"Keyword" ___k nil]
            (let [#_"Reference<Keyword>" ___existingRef (.get Keyword'TABLE, ___sym)]
                (when (nil? ___existingRef)
                    (Util'clearCache Keyword'RQ, Keyword'TABLE)
                    (when (some? (.meta ___sym))
                        (ยง ass ___sym (cast' Symbol (.withMeta ___sym, nil)))
                    )
                    (ยง ass ___k (Keyword'new ___sym))
                    (ยง ass ___existingRef (ร Keyword'TABLE.putIfAbsent(___sym, new WeakReference<Keyword>(___k, Keyword'RQ))))
                )
                (when (nil? ___existingRef)
                    (ยง return ___k)
                )
                (let [#_"Keyword" ___existingk (.get ___existingRef)]
                    (when (some? ___existingk)
                        (ยง return ___existingk)
                    )
                    ;; entry died in the interim, do over
                    (.remove Keyword'TABLE, ___sym, ___existingRef)
                    (Keyword'intern ___sym)
                )
            )
        )
    )

    (defn #_"Keyword" Keyword'intern-2 [#_"String" ___ns, #_"String" ___name]
        (Keyword'intern (Symbol'intern-2 ___ns, ___name))
    )

    (defn #_"Keyword" Keyword'intern-1 [#_"String" ___nsname]
        (Keyword'intern (Symbol'intern-1 ___nsname))
    )

    (defn- #_"Keyword" Keyword'init []
        (hash-map
            #_"Symbol" :sym nil
            #_"int" :hasheq 0
            #_transient
            #_"String" :_str nil
        )
    )

    (defn- #_"Keyword" Keyword'new [#_"Symbol" ___sym]
        (let [this (Keyword'init)]
            (ยง ass (:sym this) ___sym)
            (ยง ass (:hasheq this) (ร (.hasheq ___sym) + 0x9e3779b9))
            this
        )
    )

    (defn #_"Keyword" Keyword'find [#_"Symbol" ___sym]
        (let [#_"Reference<Keyword>" ___ref (.get Keyword'TABLE, ___sym)]
            (if (some? ___ref)
                (do
                    (.get ___ref)
                )
                (do
                    nil
                )
            )
        )
    )

    (defn #_"Keyword" Keyword'find-2 [#_"String" ___ns, #_"String" ___name]
        (Keyword'find (Symbol'intern-2 ___ns, ___name))
    )

    (defn #_"Keyword" Keyword'find-1 [#_"String" ___nsname]
        (Keyword'find (Symbol'intern-1 ___nsname))
    )

    #_method
    (ยง defn #_"int" (ยง method hashCode) [#_"Keyword" this]
        (ร (:sym this).hashCode() + 0x9e3779b9)
    )

    #_method
    (ยง defn #_"int" (ยง method hasheq) [#_"Keyword" this]
        (:hasheq this)
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"Keyword" this]
        (when (nil? (:_str this))
            (ยง ass (:_str this) (str ":" (:sym this)))
        )
        (:_str this)
    )

    #_method
    (ยง defn #_"Object" (ยง method throwArity) [#_"Keyword" this]
        (throw (IllegalArgumentException. (str "Wrong number of args passed to keyword: " (.toString this))))
    )

    #_method
    (ยง defn #_"Object" (ยง method call) [#_"Keyword" this]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"void" (ยง method run) [#_"Keyword" this]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"int" (ยง method compareTo) [#_"Keyword" this, #_"Object" ___o]
        (ร (:sym this).compareTo((:sym (cast' Keyword ___o))))
    )

    #_method
    (ยง defn #_"String" (ยง method getNamespace) [#_"Keyword" this]
        (.getNamespace (:sym this))
    )

    #_method
    (ยง defn #_"String" (ยง method getName) [#_"Keyword" this]
        (.getName (:sym this))
    )

    ;;;
     ; Indexer implements IFn for attr access
     ;
     ; @param obj - must be IPersistentMap
     ; @return the value at the key or nil if not found
     ;;
    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___obj]
        (when (ยง instance? ILookup ___obj)
            (ยง return (.valAt (cast' ILookup ___obj), this))
        )
        (RT'get-2 ___obj, this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___obj, #_"Object" ___notFound]
        (when (ยง instance? ILookup ___obj)
            (ยง return (.valAt (cast' ILookup ___obj), this, ___notFound))
        )
        (RT'get-3 ___obj, this, ___notFound)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___arg20]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Keyword" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___arg20, #_"Object..." ___args]
        (.throwArity this)
    )

    #_method
    (ยง defn #_"Object" (ยง method applyTo) [#_"Keyword" this, #_"ISeq" ___arglist]
        (AFn'applyToHelper this, ___arglist)
    )
)
)

(java-ns cloiure.lang.KeywordLookupSite

(class-ns KeywordLookupSite (ยง implements ILookupSite, ILookupThunk)
    (defn- #_"KeywordLookupSite" KeywordLookupSite'init []
        (hash-map
            #_"Keyword" :k nil
        )
    )

    (defn #_"KeywordLookupSite" KeywordLookupSite'new [#_"Keyword" ___k]
        (let [this (KeywordLookupSite'init)]
            (ยง ass (:k this) ___k)
            this
        )
    )

    #_method
    (ยง defn #_"ILookupThunk" (ยง method fault) [#_"KeywordLookupSite" this, #_"Object" ___target]
        (cond (ยง instance? IKeywordLookup ___target)
            (do
                (ยง return (.install this, ___target))
            )
            (ยง instance? ILookup ___target)
            (do
                (ยง return (.ilookupThunk this, (.getClass ___target)))
            )
        )
        this
    )

    #_method
    (ยง defn #_"Object" (ยง method get) [#_"KeywordLookupSite" this, #_"Object" ___target]
        (when (or (ยง instance? IKeywordLookup ___target) (ยง instance? ILookup ___target))
            (ยง return this)
        )
        (RT'get-2 ___target, (:k this))
    )

    #_method
    (ยง defn- #_"ILookupThunk" (ยง method ilookupThunk) [#_"KeywordLookupSite" this, #_"Class" ___c]
        (ยง reify ILookupThunk()
            #_method
            (ยง defn #_"Object" (ยง method get) [#_"ILookupThunk" this, #_"Object" ___target]
                (when (and (some? ___target) (ร (.getClass ___target) == ___c))
                    (ยง return (.valAt (cast' ILookup ___target), (:k this)))
                )
                this
            )
        )
    )

    #_method
    (ยง defn- #_"ILookupThunk" (ยง method install) [#_"KeywordLookupSite" this, #_"Object" ___target]
        (let [#_"ILookupThunk" ___t (.getLookupThunk (cast' IKeywordLookup ___target), (:k this))]
            (when (some? ___t)
                (ยง return ___t)
            )
            (.ilookupThunk this, (.getClass ___target))
        )
    )
)
)

(java-ns cloiure.lang.LazilyPersistentVector

(ยง import java.util.Collection)
(ยง import java.util.RandomAccess)

#_stateless
(class-ns LazilyPersistentVector
    (defn #_"IPersistentVector" LazilyPersistentVector'createOwning [#_"Object..." ___items]
        (when (<= (ยง alength ___items) 32)
            (ยง return (ร PersistentVector'new-4((ยง alength ___items), 5, PersistentVector'EMPTY_NODE, ___items)))
        )
        (PersistentVector'create-1a ___items)
    )

    (defn #_"int" LazilyPersistentVector'fcount [#_"Object" ___c]
        (when (ยง instance? Counted ___c)
            (ยง return (.count (cast' Counted ___c)))
        )
        (.size (cast Collection ___c))
    )

    (defn #_"IPersistentVector" LazilyPersistentVector'create [#_"Object" ___obj]
        (cond (ยง instance? IReduceInit ___obj)
            (do
                (ร PersistentVector'create-1r((cast' IReduceInit ___obj)))
            )
            (ยง instance? ISeq ___obj)
            (do
                (ร PersistentVector'create-1s(RT'seq(___obj)))
            )
            (instance? Iterable ___obj)
            (do
                (ร PersistentVector'create-1i((cast Iterable ___obj)))
            )
            :else
            (do
                (ร createOwning(RT'toArray(___obj)))
            )
        )
    )
)
)

(java-ns cloiure.lang.LazySeq

(ยง import java.util.*)

(class-ns LazySeq (ยง extends Obj) (ยง implements ISeq, Sequential, List, IPending, IHashEq)
    (defn- #_"LazySeq" LazySeq'init []
        (hash-map
            #_"IFn" :fn nil
            #_"Object" :sv nil
            #_"ISeq" :s nil
        )
    )

    (defn #_"LazySeq" LazySeq'new-1 [#_"IFn" ___fn]
        (let [this (merge (Obj'new) (LazySeq'init))]
            (ยง ass (:fn this) ___fn)
            this
        )
    )

    (defn- #_"LazySeq" LazySeq'new-2 [#_"IPersistentMap" ___meta, #_"ISeq" ___s]
        (let [this (merge (Obj'new ___meta) (LazySeq'init))]
            (ยง ass (:fn this) nil)
            (ยง ass (:s this) ___s)
            this
        )
    )

    #_method
    (ยง defn #_"Obj" (ยง method withMeta) [#_"LazySeq" this, #_"IPersistentMap" ___meta]
        (ร LazySeq'new-2(___meta, (.seq this)))
    )

    #_method
    (ยง defn #_"Object" (ยง method sval) [#_"LazySeq" this]
        (ยง sync this
            (when (some? (:fn this))
                (ยง ass (:sv this) (.invoke (:fn this)))
                (ยง ass (:fn this) nil)
            )
            (when (some? (:sv this))
                (ยง return (:sv this))
            )
            (:s this)
        )
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seq) [#_"LazySeq" this]
        (ยง sync this
            (.sval this)
            (when (some? (:sv this))
                (let [#_"Object" ___ls (:sv this)]
                    (ยง ass (:sv this) nil)
                    (while (ยง instance? LazySeq ___ls)
                        (ยง ass ___ls (.sval (cast' LazySeq ___ls)))
                    )
                    (ยง ass (:s this) (RT'seq ___ls))
                )
            )
            (:s this)
        )
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"LazySeq" this]
        (let [#_"int" ___c 0]
            (loop-when-recur [#_"ISeq" ___s (.seq this)] (some? ___s) [(next ___s)]
                (ยง ass ___c (inc ___c))
            )
            ___c
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"LazySeq" this]
        (.seq this)
        (when (nil? (:s this))
            (ยง return nil)
        )
        (first (:s this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"LazySeq" this]
        (.seq this)
        (when (nil? (:s this))
            (ยง return nil)
        )
        (next (:s this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method more) [#_"LazySeq" this]
        (.seq this)
        (when (nil? (:s this))
            (ยง return PersistentList'EMPTY)
        )
        (.more (:s this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method cons) [#_"LazySeq" this, #_"Object" ___o]
        (ร RT'cons(___o, (.seq this)))
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method empty) [#_"LazySeq" this]
        PersistentList'EMPTY
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"LazySeq" this, #_"Object" ___o]
        (let [#_"ISeq" ___s (.seq this)]
            (if (some? ___s)
                (do
                    (.equiv ___s, ___o)
                )
                (do
                    (and (or (ยง instance? Sequential ___o) (instance? List ___o)) (nil? (RT'seq ___o)))
                )
            )
        )
    )

    #_method
    (ยง defn #_"int" (ยง method hashCode) [#_"LazySeq" this]
        (let [#_"ISeq" ___s (.seq this)]
            (when (nil? ___s)
                (ยง return 1)
            )
            (Util'hash ___s)
        )
    )

    #_method
    (ยง defn #_"int" (ยง method hasheq) [#_"LazySeq" this]
        (Murmur3'hashOrdered this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"LazySeq" this, #_"Object" ___o]
        (let [#_"ISeq" ___s (.seq this)]
            (if (some? ___s)
                (do
                    (.equals ___s, ___o)
                )
                (do
                    (and (or (ยง instance? Sequential ___o) (instance? List ___o)) (nil? (RT'seq ___o)))
                )
            )
        )
    )

    #_method
    (ยง defn #_"Object[]" (ยง method toArray) [#_"LazySeq" this]
        (RT'seqToArray (.seq this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method add) [#_"LazySeq" this, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method remove) [#_"LazySeq" this, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method addAll) [#_"LazySeq" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"void" (ยง method clear) [#_"LazySeq" this]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method retainAll) [#_"LazySeq" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method removeAll) [#_"LazySeq" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method containsAll) [#_"LazySeq" this, #_"Collection" ___c]
        (doseq [#_"Object" ___o ___c]
            (when (not (.contains this, ___o))
                (ยง return false)
            )
        )
        true
    )

    #_method
    (ยง defn #_"Object[]" (ยง method toArray) [#_"LazySeq" this, #_"Object[]" ___a]
        (ร RT'seqToPassedArray((.seq this), ___a))
    )

    #_method
    (ยง defn #_"int" (ยง method size) [#_"LazySeq" this]
        (count this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method isEmpty) [#_"LazySeq" this]
        (nil? (.seq this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method contains) [#_"LazySeq" this, #_"Object" ___o]
        (loop-when-recur [#_"ISeq" ___s (.seq this)] (some? ___s) [(next ___s)]
            (when (ร Util'equiv-2oo((first ___s), ___o))
                (ยง return true)
            )
        )
        false
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"LazySeq" this]
        (SeqIterator'new this)
    )

    #_method
    (ยง defn- #_"List" (ยง method reify) [#_"LazySeq" this]
        (ArrayList. this)
    )

    #_method
    (ยง defn #_"List" (ยง method subList) [#_"LazySeq" this, #_"int" ___fromIndex, #_"int" ___toIndex]
        (ร (.reify this).subList(___fromIndex, ___toIndex))
    )

    #_method
    (ยง defn #_"Object" (ยง method set) [#_"LazySeq" this, #_"int" ___index, #_"Object" ___element]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"Object" (ยง method remove) [#_"LazySeq" this, #_"int" ___index]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"int" (ยง method indexOf) [#_"LazySeq" this, #_"Object" ___o]
        (loop-when-recur [#_"ISeq" ___s (.seq this) #_"int" ___i 0] (some? ___s) [(next ___s) (inc ___i)]
            (when (ร Util'equiv-2oo((first ___s), ___o))
                (ยง return ___i)
            )
        )
        -1
    )

    #_method
    (ยง defn #_"int" (ยง method lastIndexOf) [#_"LazySeq" this, #_"Object" ___o]
        (ร (.reify this).lastIndexOf(___o))
    )

    #_method
    (ยง defn #_"ListIterator" (ยง method listIterator) [#_"LazySeq" this]
        (.listIterator (.reify this))
    )

    #_method
    (ยง defn #_"ListIterator" (ยง method listIterator) [#_"LazySeq" this, #_"int" ___index]
        (ร (.reify this).listIterator(___index))
    )

    #_method
    (ยง defn #_"Object" (ยง method get) [#_"LazySeq" this, #_"int" ___index]
        (RT'nth-2 this, ___index)
    )

    #_method
    (ยง defn #_"void" (ยง method add) [#_"LazySeq" this, #_"int" ___index, #_"Object" ___element]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method addAll) [#_"LazySeq" this, #_"int" ___index, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method isRealized) [#_"LazySeq" this]
        (ยง sync this
            (nil? (:fn this))
        )
    )
)
)

(java-ns cloiure.lang.LineNumberingPushbackReader

(ยง import java.io.PushbackReader)
(ยง import java.io.Reader)
(ยง import java.io.LineNumberReader)
(ยง import java.io.IOException)

(class-ns LineNumberingPushbackReader (ยง extends PushbackReader)
    ;; This class is a PushbackReader that wraps a LineNumberReader. The code
    ;; here to handle line terminators only mentions '\n' because
    ;; LineNumberReader collapses all occurrences of CR, LF, and CRLF into a
    ;; single '\n'.
    (def- #_"int" LineNumberingPushbackReader'newline (ร (int) \newline))

    (defn- #_"LineNumberingPushbackReader" LineNumberingPushbackReader'init []
        (hash-map
            #_"boolean" :_atLineStart true
            #_"boolean" :_prev false
            #_"int" :_columnNumber 1
        )
    )

    (defn #_"LineNumberingPushbackReader" LineNumberingPushbackReader'new-1 [#_"Reader" ___r]
        (merge (PushbackReader'new (LineNumberReader. ___r)) (LineNumberingPushbackReader'init))
    )

    (defn #_"LineNumberingPushbackReader" LineNumberingPushbackReader'new-2 [#_"Reader" ___r, #_"int" ___size]
        (merge (PushbackReader'new (LineNumberReader. ___r, ___size)) (LineNumberingPushbackReader'init))
    )

    #_method
    (ยง defn #_"int" (ยง method getLineNumber) [#_"LineNumberingPushbackReader" this]
        (ร (cast LineNumberReader in).getLineNumber() + 1)
    )

    #_method
    (ยง defn #_"void" (ยง method setLineNumber) [#_"LineNumberingPushbackReader" this, #_"int" ___line]
        (ร (cast LineNumberReader in).setLineNumber(___line - 1))
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method getColumnNumber) [#_"LineNumberingPushbackReader" this]
        (:_columnNumber this)
    )

    #_method
    (ยง defn #_"int" (ยง method read) [#_"LineNumberingPushbackReader" this] #_(ยง throws IOException)
        (let [#_"int" ___c (.read super)]
            (ยง ass (:_prev this) (:_atLineStart this))
            (if (or (ร ___c == LineNumberingPushbackReader'newline) (ร ___c == -1))
                (do
                    (ยง ass (:_atLineStart this) true)
                    (ยง ass (:_columnNumber this) 1)
                )
                (do
                    (ยง ass (:_atLineStart this) false)
                    (ยง ass (:_columnNumber this) (inc (:_columnNumber this)))
                )
            )
            ___c
        )
    )

    #_method
    (ยง defn #_"void" (ยง method unread) [#_"LineNumberingPushbackReader" this, #_"int" ___c] #_(ยง throws IOException)
        (.unread super, ___c)
        (ยง ass (:_atLineStart this) (:_prev this))
        (ยง ass (:_columnNumber this) (dec (:_columnNumber this)))
        nil
    )

    #_method
    (ยง defn #_"String" (ยง method readLine) [#_"LineNumberingPushbackReader" this] #_(ยง throws IOException)
        (let [#_"int" ___c (.read this)]
            (ยง let [#_"String" ___line]
                (ยง switch ___c
                    (ยง case -1)
                    (do
                        (ยง ass ___line nil)
                        (ยง break )
                    )
                    (ยง case LineNumberingPushbackReader'newline)
                    (do
                        (ยง ass ___line "")
                        (ยง break )
                    )
                    (ยง default )
                    (do
                        (let [#_"String" ___first (ร String/valueOf((char) ___c))]
                            (let [#_"String" ___rest (.readLine (cast LineNumberReader in))]
                                (ยง ass ___line (if (nil? ___rest) ___first (str ___first ___rest)))
                                (ยง ass (:_prev this) false)
                                (ยง ass (:_atLineStart this) true)
                                (ยง ass (:_columnNumber this) 1)
                                (ยง break )
                            )
                        )
                    )
                )
                ___line
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method atLineStart) [#_"LineNumberingPushbackReader" this]
        (:_atLineStart this)
    )
)
)

(java-ns cloiure.lang.LispReader

(ยง import java.io.IOException)
(ยง import java.io.PushbackReader)
(ยง import java.io.Reader)
(ยง import java.lang.Character)
(ยง import java.lang.Class)
(ยง import java.lang.Exception)
(ยง import java.lang.IllegalArgumentException)
(ยง import java.lang.IllegalStateException)
(ยง import java.lang.Integer)
(ยง import java.lang.Number)
(ยง import java.lang.NumberFormatException)
(ยง import java.lang.Object)
(ยง import java.lang.RuntimeException)
(ยง import java.lang.String)
(ยง import java.lang.StringBuilder)
(ยง import java.lang.Throwable)
(ยง import java.lang.UnsupportedOperationException)
(ยง import java.lang.reflect.Constructor)
(ยง import java.math.BigDecimal)
(ยง import java.math.BigInteger)
(ยง import java.util.ArrayList)
(ยง import java.util.Iterator)
(ยง import java.util.LinkedList)
(ยง import java.util.List)
(ยง import java.util.Map)
(ยง import java.util.regex.Matcher)
(ยง import java.util.regex.Pattern)

(ยง defprotocol Resolver
    #_abstract
    (#_"Symbol" Resolver'''(ยง method currentNS) [#_"Resolver" this])
    #_abstract
    (#_"Symbol" Resolver'''(ยง method resolveClass) [#_"Resolver" this, #_"Symbol" ___sym])
    #_abstract
    (#_"Symbol" Resolver'''(ยง method resolveAlias) [#_"Resolver" this, #_"Symbol" ___sym])
    #_abstract
    (#_"Symbol" Resolver'''(ยง method resolveVar) [#_"Resolver" this, #_"Symbol" ___sym])
)

(class-ns LispReaderException (ยง extends RuntimeException)
    (defn- #_"LispReaderException" LispReaderException'init []
        (hash-map
            #_"int" :line 0
            #_"int" :column 0
        )
    )

    (defn #_"LispReaderException" LispReaderException'new [#_"int" ___line, #_"int" ___column, #_"Throwable" ___cause]
        (let [this (merge (ยง foreign RuntimeException'new ___cause) (LispReaderException'init))]
            (ยง ass (:line this) ___line)
            (ยง ass (:column this) ___column)
            this
        )
    )
)

#_closure
(class-ns RegexReader (ยง extends AFn)
    (defn #_"RegexReader" RegexReader'new []
        (AFn'new)
    )

    (ยง def #_"LispStringReader" RegexReader'stringrdr (LispStringReader'new))

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RegexReader" this, #_"Object" ___reader, #_"Object" ___doublequote, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"StringBuilder" ___sb (StringBuilder.)]
            (let [#_"Reader" ___r (cast Reader ___reader)]
                (loop-when-recur [#_"int" ___ch (LispReader'read1 ___r)] (ร ___ch != \") [(LispReader'read1 ___r)] ;; oops! "
                    (when (= ___ch -1)
                        (throw (Util'runtimeException-1 "EOF while reading regex"))
                    )
                    (ร ___sb.append((char) ___ch))
                    (when (= ___ch \\) ;; escape
                        (ยง ass ___ch (LispReader'read1 ___r))
                        (when (= ___ch -1)
                            (throw (Util'runtimeException-1 "EOF while reading regex"))
                        )
                        (ร ___sb.append((char) ___ch))
                    )
                )
                (Pattern/compile (.toString ___sb))
            )
        )
    )
)

#_closure
(class-ns LispStringReader (ยง extends AFn)
    (defn #_"LispStringReader" LispStringReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispStringReader" this, #_"Object" ___reader, #_"Object" ___doublequote, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"StringBuilder" ___sb (StringBuilder.)]
            (let [#_"Reader" ___r (cast Reader ___reader)]
                (loop-when-recur [#_"int" ___ch (LispReader'read1 ___r)] (ร ___ch != \") [(LispReader'read1 ___r)] ;; oops! "
                    (when (= ___ch -1)
                        (throw (Util'runtimeException-1 "EOF while reading string"))
                    )
                    (when (= ___ch \\) ;; escape
                        (ยง ass ___ch (LispReader'read1 ___r))
                        (when (= ___ch -1)
                            (throw (Util'runtimeException-1 "EOF while reading string"))
                        )
                        (ยง switch ___ch
                            (ยง case \t)
                            (do
                                (ยง ass ___ch \tab)
                                (ยง break )
                            )
                            (ยง case \r)
                            (do
                                (ยง ass ___ch \return)
                                (ยง break )
                            )
                            (ยง case \n)
                            (do
                                (ยง ass ___ch \newline)
                                (ยง break )
                            )
                            (ยง case \\)
                            (do
                                (ยง break )
                            )
                            (ยง case \") ;; oops! "
                            (do
                                (ยง break )
                            )
                            (ยง case \b)
                            (do
                                (ยง ass ___ch \backspace)
                                (ยง break )
                            )
                            (ยง case \f)
                            (do
                                (ยง ass ___ch \formfeed)
                                (ยง break )
                            )
                            (ยง case \u)
                            (do
                                (ยง ass ___ch (LispReader'read1 ___r))
                                (when (ร Character/digit(___ch, 16) == -1)
                                    (throw (Util'runtimeException-1 (str "Invalid unicode escape: \\u" (ร (char) ___ch))))
                                )
                                (ยง ass ___ch (ร readUnicodeChar((cast PushbackReader ___r), ___ch, 16, 4, true)))
                                (ยง break )
                            )
                            (ยง default )
                            (do
                                (if (Character/isDigit ___ch)
                                    (do
                                        (ยง ass ___ch (ร readUnicodeChar((cast PushbackReader ___r), ___ch, 8, 3, false)))
                                        (when (> ___ch 0377)
                                            (throw (Util'runtimeException-1 "Octal escape sequence must be in range [0, 377]."))
                                        )
                                    )
                                    (do
                                        (throw (Util'runtimeException-1 (str "Unsupported escape character: \\" (ร (char) ___ch))))
                                    )
                                )
                                (ยง break )
                            )
                        )
                    )
                    (ร ___sb.append((char) ___ch))
                )
                (.toString ___sb)
            )
        )
    )
)

#_closure
(class-ns LispCommentReader (ยง extends AFn)
    (defn #_"LispCommentReader" LispCommentReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispCommentReader" this, #_"Object" ___reader, #_"Object" ___semicolon, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"Reader" ___r (cast Reader ___reader)]
            (ยง let [#_"int" ___ch]
                (ยง loop
                    (ยง ass ___ch (LispReader'read1 ___r))
                    (ยง recur-if (and (ร ___ch != -1) (ร ___ch != \newline) (ร ___ch != \return)))
                )
                ___r
            )
        )
    )
)

#_closure
(class-ns LispDiscardReader (ยง extends AFn)
    (defn #_"LispDiscardReader" LispDiscardReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispDiscardReader" this, #_"Object" ___reader, #_"Object" ___underscore, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (LispReader'read-6 ___r, true, nil, true, ___opts, (LispReader'ensurePending ___pendingForms))
            ___r
        )
    )
)

;; :a.b{:c 1} => {:a.b/c 1}
;; ::{:c 1}   => {:a.b/c 1}  (where *ns* = a.b)
;; ::a{:c 1}  => {:a.b/c 1}  (where a is aliased to a.b)
#_closure
(class-ns LispNamespaceMapReader (ยง extends AFn)
    (defn #_"LispNamespaceMapReader" LispNamespaceMapReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispNamespaceMapReader" this, #_"Object" ___reader, #_"Object" ___colon, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"boolean" ___auto false]
                (let [#_"int" ___autoChar (LispReader'read1 ___r)]
                    (if (ร ___autoChar == \:)
                        (do
                            (ยง ass ___auto true)
                        )
                        (do
                            (LispReader'unread ___r, ___autoChar)
                        )
                    )

                    (let [#_"Object" ___sym nil]
                        (let [#_"int" ___nextChar (LispReader'read1 ___r)]
                            (cond (LispReader'isWhitespace ___nextChar) ;; the #:: { } case or an error
                                (do
                                    (if ___auto
                                        (do
                                            (while (LispReader'isWhitespace ___nextChar)
                                                (ยง ass ___nextChar (LispReader'read1 ___r))
                                            )
                                            (when (ร ___nextChar != \{)
                                                (LispReader'unread ___r, ___nextChar)
                                                (throw (Util'runtimeException-1 "Namespaced map must specify a namespace"))
                                            )
                                        )
                                        (do
                                            (LispReader'unread ___r, ___nextChar)
                                            (throw (Util'runtimeException-1 "Namespaced map must specify a namespace"))
                                        )
                                    )
                                )
                                (ร ___nextChar != \{) ;; #:foo { } or #::foo { }
                                (do
                                    (LispReader'unread ___r, ___nextChar)
                                    (ยง ass ___sym (LispReader'read-6 ___r, true, nil, false, ___opts, ___pendingForms))
                                    (ยง ass ___nextChar (LispReader'read1 ___r))
                                    (while (LispReader'isWhitespace ___nextChar)
                                        (ยง ass ___nextChar (LispReader'read1 ___r))
                                    )
                                )
                            )
                            (when (ร ___nextChar != \{)
                                (throw (Util'runtimeException-1 "Namespaced map must specify a map"))
                            )

                            ;; Resolve autoresolved ns
                            (ยง let [#_"String" ___ns]
                                (cond ___auto
                                    (do
                                        (let [#_"Resolver" ___resolver (cast' Resolver (.deref RT'READER_RESOLVER))]
                                            (cond (nil? ___sym)
                                                (do
                                                    (if (some? ___resolver)
                                                        (do
                                                            (ยง ass ___ns (:name (.currentNS ___resolver)))
                                                        )
                                                        (do
                                                            (ยง ass ___ns (ร Compiler'currentNS().getName().getName()))
                                                        )
                                                    )
                                                )
                                                (or (not (ยง instance? Symbol ___sym)) (some? (.getNamespace (cast' Symbol ___sym))))
                                                (do
                                                    (throw (Util'runtimeException-1 (str "Namespaced map must specify a valid namespace: " ___sym)))
                                                )
                                                :else
                                                (do
                                                    (ยง let [#_"Symbol" ___resolvedNS]
                                                        (if (some? ___resolver)
                                                            (do
                                                                (ยง ass ___resolvedNS (.resolveAlias ___resolver, (cast' Symbol ___sym)))
                                                            )
                                                            (do
                                                                (let [#_"Namespace" ___rns (ร Compiler'currentNS().lookupAlias((cast' Symbol ___sym)))]
                                                                    (ยง ass ___resolvedNS (when (some? ___rns) (.getName ___rns)))
                                                                )
                                                            )
                                                        )

                                                        (if (nil? ___resolvedNS)
                                                            (do
                                                                (throw (Util'runtimeException-1 (str "Unknown auto-resolved namespace alias: " ___sym)))
                                                            )
                                                            (do
                                                                (ยง ass ___ns (.getName ___resolvedNS))
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                    (or (not (ยง instance? Symbol ___sym)) (some? (.getNamespace (cast' Symbol ___sym))))
                                    (do
                                        (throw (Util'runtimeException-1 (str "Namespaced map must specify a valid namespace: " ___sym)))
                                    )
                                    :else
                                    (do
                                        (ยง ass ___ns (.getName (cast' Symbol ___sym)))
                                    )
                                )

                                ;; Read map
                                (let [#_"List" ___kvs (ร readDelimitedList(\}, ___r, true, ___opts, LispReader'ensurePending(___pendingForms)))]
                                    (when (ร ((.size ___kvs) & 1) == 1)
                                        (throw (Util'runtimeException-1 "Namespaced map literal must contain an even number of forms"))
                                    )

                                    ;; Construct output map
                                    (let [#_"Object[]" ___a (make-array Object (.size ___kvs))]
                                        (let [#_"Iterator" ___iter (.iterator ___kvs)]
                                            (loop-when-recur [#_"int" ___i 0] (.hasNext ___iter) [(+ ___i 2)]
                                                (let [#_"Object" ___key (next ___iter)]
                                                    (let [#_"Object" ___val (next ___iter)]
                                                        (cond (ยง instance? Keyword ___key)
                                                            (do
                                                                (let [#_"Keyword" ___kw (cast' Keyword ___key)]
                                                                    (cond (nil? (.getNamespace ___kw))
                                                                        (do
                                                                            (ยง ass ___key (ร Keyword'intern-2(___ns, (.getName ___kw))))
                                                                        )
                                                                        (ร (.getNamespace ___kw).equals("_"))
                                                                        (do
                                                                            (ยง ass ___key (ร Keyword'intern-2(nil, (.getName ___kw))))
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                            (ยง instance? Symbol ___key)
                                                            (do
                                                                (let [#_"Symbol" ___s (cast' Symbol ___key)]
                                                                    (cond (nil? (.getNamespace ___s))
                                                                        (do
                                                                            (ยง ass ___key (ร Symbol'intern-2(___ns, (.getName ___s))))
                                                                        )
                                                                        (ร (.getNamespace ___s).equals("_"))
                                                                        (do
                                                                            (ยง ass ___key (ร Symbol'intern-2(nil, (.getName ___s))))
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                        (ยง ass (ยง aget ___a ___i) ___key)
                                                        (ยง ass (ยง aget ___a (ร ___i + 1)) ___val)
                                                    )
                                                )
                                            )
                                            (RT'map ___a)
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

#_closure
(class-ns LispSymbolicValueReader (ยง extends AFn)
    (defn #_"LispSymbolicValueReader" LispSymbolicValueReader'new []
        (AFn'new)
    )

    (def #_"IPersistentMap" LispSymbolicValueReader'specials (ร PersistentHashMap'create-1a(
        (object-array [
            (Symbol'intern-1 "Inf")  Double/POSITIVE_INFINITY
            (Symbol'intern-1 "-Inf") Double/NEGATIVE_INFINITY
            (Symbol'intern-1 "NaN")  Double/NaN
        ])
    )))

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispSymbolicValueReader" this, #_"Object" ___reader, #_"Object" ___quote, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"Object" ___o (LispReader'read-6 ___r, true, nil, true, ___opts, (LispReader'ensurePending ___pendingForms))]
                (when (not (ยง instance? Symbol ___o))
                    (throw (Util'runtimeException-1 (str "Invalid token: ##" ___o)))
                )
                (when (not (.containsKey LispSymbolicValueReader'specials, ___o))
                    (throw (Util'runtimeException-1 (str "Unknown symbolic value: ##" ___o)))
                )

                (.valAt LispSymbolicValueReader'specials, ___o)
            )
        )
    )
)

(class-ns WrappingReader (ยง extends AFn)
    (defn- #_"WrappingReader" WrappingReader'init []
        (hash-map
            #_"Symbol" :sym nil
        )
    )

    (defn #_"WrappingReader" WrappingReader'new [#_"Symbol" ___sym]
        (let [this (merge (AFn'new) (WrappingReader'init))]
            (ยง ass (:sym this) ___sym)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"WrappingReader" this, #_"Object" ___reader, #_"Object" ___quote, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"Object" ___o (LispReader'read-6 ___r, true, nil, true, ___opts, (LispReader'ensurePending ___pendingForms))]
                (RT'list-2 (:sym this), ___o)
            )
        )
    )
)

(class-ns DeprecatedWrappingReader (ยง extends AFn)
    (defn- #_"DeprecatedWrappingReader" DeprecatedWrappingReader'init []
        (hash-map
            #_"Symbol" :sym nil
            #_"String" :macro nil
        )
    )

    (defn #_"DeprecatedWrappingReader" DeprecatedWrappingReader'new [#_"Symbol" ___sym, #_"String" ___macro]
        (let [this (merge (AFn'new) (DeprecatedWrappingReader'init))]
            (ยง ass (:sym this) ___sym)
            (ยง ass (:macro this) ___macro)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"DeprecatedWrappingReader" this, #_"Object" ___reader, #_"Object" ___quote, #_"Object" ___opts, #_"Object" ___pendingForms]
        (System/out.println (str "WARNING: reader macro " (:macro this) " is deprecated; use " (.getName (:sym this)) " instead"))
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"Object" ___o (LispReader'read-6 ___r, true, nil, true, ___opts, (LispReader'ensurePending ___pendingForms))]
                (RT'list-2 (:sym this), ___o)
            )
        )
    )
)

#_closure
(class-ns VarReader (ยง extends AFn)
    (defn #_"VarReader" VarReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"VarReader" this, #_"Object" ___reader, #_"Object" ___quote, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"Object" ___o (LispReader'read-6 ___r, true, nil, true, ___opts, (LispReader'ensurePending ___pendingForms))]
                (RT'list-2 LispReader'THE_VAR, ___o)
            )
        )
    )
)

#_closure
(class-ns LispDispatchReader (ยง extends AFn)
    (defn #_"LispDispatchReader" LispDispatchReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispDispatchReader" this, #_"Object" ___reader, #_"Object" ___hash, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"int" ___ch (LispReader'read1 (cast Reader ___reader))]
            (when (= ___ch -1)
                (throw (Util'runtimeException-1 "EOF while reading character"))
            )
            (let [#_"IFn" ___fn (ยง aget dispatchMacros ___ch)]
                ;; Try the ctor reader first
                (when (nil? ___fn)
                    (LispReader'unread (cast PushbackReader ___reader), ___ch)
                    (ยง ass ___pendingForms (LispReader'ensurePending ___pendingForms))
                    (let [#_"Object" ___result (.invoke ctorReader, ___reader, ___ch, ___opts, ___pendingForms)]
                        (if (some? ___result)
                            (do
                                (ยง return ___result)
                            )
                            (do
                                (throw (Util'runtimeException-1 (String/format "No dispatch macro for: %c", (object-array [ (ร (char) ___ch) ]))))
                            )
                        )
                    )
                )
                (.invoke ___fn, ___reader, ___ch, ___opts, ___pendingForms)
            )
        )
    )
)

#_closure
(class-ns FnReader (ยง extends AFn)
    (defn #_"FnReader" FnReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"FnReader" this, #_"Object" ___reader, #_"Object" ___lparen, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (when (some? (.deref LispReader'ARG_ENV))
                (throw (IllegalStateException. "Nested #()s are not allowed"))
            )
            (try
                (ร Var'pushThreadBindings(RT'map(LispReader'ARG_ENV, PersistentTreeMap'EMPTY)))
                (LispReader'unread ___r, \()
                (let [#_"Object" ___form (LispReader'read-6 ___r, true, nil, true, ___opts, (LispReader'ensurePending ___pendingForms))]
                    (let [#_"PersistentVector" ___args PersistentVector'EMPTY]
                        (let [#_"PersistentTreeMap" ___argsyms (cast' PersistentTreeMap (.deref LispReader'ARG_ENV))]
                            (let [#_"ISeq" ___rargs (.rseq ___argsyms)]
                                (when (some? ___rargs)
                                    (let [#_"int" ___higharg (cast Integer (.getKey (cast Map$Entry (first ___rargs))))]
                                        (when (> ___higharg 0)
                                            (loop-when-recur [#_"int" ___i 1] (<= ___i ___higharg) [(inc ___i)]
                                                (let [#_"Object" ___sym (.valAt ___argsyms, ___i)]
                                                    (when (nil? ___sym)
                                                        (ยง ass ___sym (garg ___i))
                                                    )
                                                    (ยง ass ___args (.cons ___args, ___sym))
                                                )
                                            )
                                        )
                                        (let [#_"Object" ___restsym (.valAt ___argsyms, -1)]
                                            (when (some? ___restsym)
                                                (ยง ass ___args (.cons ___args, Compiler'_AMP_))
                                                (ยง ass ___args (.cons ___args, ___restsym))
                                            )
                                        )
                                    )
                                )
                                (RT'list-3 Compiler'FN, ___args, ___form)
                            )
                        )
                    )
                )
                (finally
                    (Var'popThreadBindings)
                )
            )
        )
    )
)

#_closure
(class-ns ArgReader (ยง extends AFn)
    (defn #_"ArgReader" ArgReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"ArgReader" this, #_"Object" ___reader, #_"Object" ___pct, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (when (nil? (.deref LispReader'ARG_ENV))
                (ยง return (ร interpretToken(readToken(___r, \%), nil)))
            )
            (let [#_"int" ___ch (LispReader'read1 ___r)]
                (LispReader'unread ___r, ___ch)
                ;; % alone is first arg
                (when (or (ร ___ch == -1) (LispReader'isWhitespace ___ch) (LispReader'isTerminatingMacro ___ch))
                    (ยง return (registerArg 1))
                )
                (let [#_"Object" ___n (LispReader'read-6 ___r, true, nil, true, ___opts, (LispReader'ensurePending ___pendingForms))]
                    (when (.equals ___n, Compiler'_AMP_)
                        (ยง return (registerArg -1))
                    )
                    (when (not (instance? Number ___n))
                        (throw (IllegalStateException. "arg literal must be %, %& or %integer"))
                    )
                    (ร registerArg((cast Number ___n).intValue()))
                )
            )
        )
    )
)

#_closure
(class-ns LispMetaReader (ยง extends AFn)
    (defn #_"LispMetaReader" LispMetaReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispMetaReader" this, #_"Object" ___reader, #_"Object" ___caret, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"int" ___line -1]
                (let [#_"int" ___column -1]
                    (when (ยง instance? LineNumberingPushbackReader ___r)
                        (ยง ass ___line (.getLineNumber (cast' LineNumberingPushbackReader ___r)))
                        (ยง ass ___column (ร (cast' LineNumberingPushbackReader ___r).getColumnNumber()-1))
                    )
                    (ยง ass ___pendingForms (LispReader'ensurePending ___pendingForms))
                    (let [#_"Object" ___meta (LispReader'read-6 ___r, true, nil, true, ___opts, ___pendingForms)]
                        (cond (or (ยง instance? Symbol ___meta) (instance? String ___meta))
                            (do
                                (ยง ass ___meta (RT'map RT'TAG_KEY, ___meta))
                            )
                            (ยง instance? Keyword ___meta)
                            (do
                                (ยง ass ___meta (RT'map ___meta, RT'T))
                            )
                            (not (ยง instance? IPersistentMap ___meta))
                            (do
                                (throw (IllegalArgumentException. "Metadata must be Symbol, Keyword, String or Map"))
                            )
                        )

                        (let [#_"Object" ___o (LispReader'read-6 ___r, true, nil, true, ___opts, ___pendingForms)]
                            (if (ยง instance? IMeta ___o)
                                (do
                                    (when (and (ร ___line != -1) (ยง instance? ISeq ___o))
                                        (ยง ass ___meta (ร (cast' IPersistentMap ___meta).assoc(RT'LINE_KEY, ___line).assoc(RT'COLUMN_KEY, ___column)))
                                    )
                                    (when (ยง instance? IReference ___o)
                                        (.resetMeta (cast' IReference ___o), (cast' IPersistentMap ___meta))
                                        (ยง return ___o)
                                    )
                                    (let [#_"Object" ___ometa (RT'meta ___o)]
                                        (loop-when-recur [#_"ISeq" ___s (RT'seq ___meta)] (some? ___s) [(next ___s)]
                                            (let [#_"IMapEntry" ___kv (cast' IMapEntry (first ___s))]
                                                (ยง ass ___ometa (ร RT'assoc(___ometa, (.getKey ___kv), (.getValue ___kv))))
                                            )
                                        )
                                        (.withMeta (cast' IObj ___o), (cast' IPersistentMap ___ometa))
                                    )
                                )
                                (do
                                    (throw (IllegalArgumentException. "Metadata can only be applied to IMetas"))
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

#_closure
(class-ns SyntaxQuoteReader (ยง extends AFn)
    (defn #_"SyntaxQuoteReader" SyntaxQuoteReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"SyntaxQuoteReader" this, #_"Object" ___reader, #_"Object" ___backquote, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (try
                (ร Var'pushThreadBindings(RT'map(LispReader'GENSYM_ENV, PersistentHashMap'EMPTY)))

                (let [#_"Object" ___form (LispReader'read-6 ___r, true, nil, true, ___opts, (LispReader'ensurePending ___pendingForms))]
                    (syntaxQuote ___form)
                )
                (finally
                    (Var'popThreadBindings)
                )
            )
        )
    )

    (defn #_"Object" SyntaxQuoteReader'syntaxQuote [#_"Object" ___form]
        (ยง let [#_"Object" ___ret]
            (cond (Compiler'isSpecial ___form)
                (do
                    (ยง ass ___ret (RT'list-2 Compiler'QUOTE, ___form))
                )
                (ยง instance? Symbol ___form)
                (do
                    (let [#_"Resolver" ___resolver (cast' Resolver (.deref RT'READER_RESOLVER))]
                        (let [#_"Symbol" ___sym (cast' Symbol ___form)]
                            (cond (and (nil? (:ns ___sym)) (.endsWith (:name ___sym), "#"))
                                (do
                                    (let [#_"IPersistentMap" ___gmap (cast' IPersistentMap (.deref LispReader'GENSYM_ENV))]
                                        (when (nil? ___gmap)
                                            (throw (IllegalStateException. "Gensym literal not in syntax-quote"))
                                        )
                                        (let [#_"Symbol" ___gs (cast' Symbol (.valAt ___gmap, ___sym))]
                                            (when (nil? ___gs)
                                                (ยง ass ___gs (Symbol'intern-2 nil, (str (ร (:name ___sym).substring(0, (:name ___sym).length() - 1)) "__" (RT'nextID) "__auto__")))
                                                (ร LispReader'GENSYM_ENV.set(___gmap.assoc(___sym, ___gs)))
                                            )
                                            (ยง ass ___sym ___gs)
                                        )
                                    )
                                )
                                (and (nil? (:ns ___sym)) (.endsWith (:name ___sym), "."))
                                (do
                                    (let [#_"Symbol" ___csym (ร Symbol'intern-2(nil, (:name ___sym).substring(0, (:name ___sym).length() - 1)))]
                                        (if (some? ___resolver)
                                            (do
                                                (let [#_"Symbol" ___rc (.resolveClass ___resolver, ___csym)]
                                                    (when (some? ___rc)
                                                        (ยง ass ___csym ___rc)
                                                    )
                                                )
                                            )
                                            (do
                                                (ยง ass ___csym (Compiler'resolveSymbol ___csym))
                                            )
                                        )
                                        (ยง ass ___sym (ร Symbol'intern-2(nil, (:name ___csym).concat("."))))
                                    )
                                )
                                (and (nil? (:ns ___sym)) (.startsWith (:name ___sym), "."))
                                (do
                                    ;; Simply quote method names.
                                )
                                (some? ___resolver)
                                (do
                                    (let [#_"Symbol" ___nsym nil]
                                        (when (ร (some? (:ns ___sym)))
                                            (let [#_"Symbol" ___alias (ร Symbol'intern-2(nil, (:ns ___sym)))]
                                                (ยง ass ___nsym (.resolveClass ___resolver, ___alias))
                                                (when (nil? ___nsym)
                                                    (ยง ass ___nsym (.resolveAlias ___resolver, ___alias))
                                                )
                                            )
                                        )
                                        (cond (some? ___nsym)
                                            (do
                                                ;; Classname/foo -> package.qualified.Classname/foo
                                                (ยง ass ___sym (ร Symbol'intern-2((:name ___nsym), (:name ___sym))))
                                            )
                                            (ร (nil? (:ns ___sym)))
                                            (do
                                                (let [#_"Symbol" ___rsym (.resolveClass ___resolver, ___sym)]
                                                    (when (nil? ___rsym)
                                                        (ยง ass ___rsym (.resolveVar ___resolver, ___sym))
                                                    )
                                                    (if (some? ___rsym)
                                                        (do
                                                            (ยง ass ___sym ___rsym)
                                                        )
                                                        (do
                                                            (ยง ass ___sym (ร Symbol'intern-2((:name (.currentNS ___resolver)), (:name ___sym))))
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        ;; leave alone if qualified
                                    )
                                )
                                :else
                                (do
                                    (let [#_"Object" ___maybeClass nil]
                                        (when (ร (some? (:ns ___sym)))
                                            (ยง ass ___maybeClass (ร Compiler'currentNS().getMapping(Symbol'intern-2(nil, (:ns ___sym)))))
                                        )
                                        (if (instance? Class ___maybeClass)
                                            (do
                                                ;; Classname/foo -> package.qualified.Classname/foo
                                                (ยง ass ___sym (ร Symbol'intern-2((cast Class ___maybeClass).getName(), (:name ___sym))))
                                            )
                                            (do
                                                (ยง ass ___sym (Compiler'resolveSymbol ___sym))
                                            )
                                        )
                                    )
                                )
                            )
                            (ยง ass ___ret (RT'list-2 Compiler'QUOTE, ___sym))
                        )
                    )
                )
                (LispReader'isUnquote ___form)
                (do
                    (ยง return (RT'second ___form))
                )
                (LispReader'isUnquoteSplicing ___form)
                (do
                    (throw (IllegalStateException. "splice not in list"))
                )
                (ยง instance? IPersistentCollection ___form)
                (do
                    (cond (ยง instance? IRecord ___form)
                        (do
                            (ยง ass ___ret ___form)
                        )
                        (ยง instance? IPersistentMap ___form)
                        (do
                            (let [#_"IPersistentVector" ___keyvals (SyntaxQuoteReader'flattenMap ___form)]
                                (ยง ass ___ret (ร RT'list-3(LispReader'APPLY, LispReader'HASHMAP, RT'list-2(LispReader'SEQ, RT'cons(LispReader'CONCAT, sqExpandList((.seq ___keyvals)))))))
                            )
                        )
                        (ยง instance? IPersistentVector ___form)
                        (do
                            (ยง ass ___ret (ร RT'list-3(LispReader'APPLY, LispReader'VECTOR, RT'list-2(LispReader'SEQ, RT'cons(LispReader'CONCAT, sqExpandList((cast' IPersistentVector ___form).seq()))))))
                        )
                        (ยง instance? IPersistentSet ___form)
                        (do
                            (ยง ass ___ret (ร RT'list-3(LispReader'APPLY, LispReader'HASHSET, RT'list-2(LispReader'SEQ, RT'cons(LispReader'CONCAT, sqExpandList((cast' IPersistentSet ___form).seq()))))))
                        )
                        (or (ยง instance? ISeq ___form) (ยง instance? IPersistentList ___form))
                        (do
                            (let [#_"ISeq" ___seq (RT'seq ___form)]
                                (if (nil? ___seq)
                                    (do
                                        (ยง ass ___ret (RT'cons LispReader'LIST, nil))
                                    )
                                    (do
                                        (ยง ass ___ret (ร RT'list-2(LispReader'SEQ, RT'cons(LispReader'CONCAT, sqExpandList(___seq)))))
                                    )
                                )
                            )
                        )
                        :else
                        (do
                            (throw (UnsupportedOperationException. "Unknown Collection type"))
                        )
                    )
                )
                (or (ยง instance? Keyword ___form) (instance? Number ___form) (instance? Character ___form) (instance? String ___form))
                (do
                    (ยง ass ___ret ___form)
                )
                :else
                (do
                    (ยง ass ___ret (RT'list-2 Compiler'QUOTE, ___form))
                )
            )

            (when (and (ยง instance? IObj ___form) (some? (RT'meta ___form)))
                ;; filter line and column numbers
                (let [#_"IPersistentMap" ___newMeta (ร (cast' IObj ___form).meta().without(RT'LINE_KEY).without(RT'COLUMN_KEY))]
                    (when (pos? (count ___newMeta))
                        (ยง return (ร RT'list-3(LispReader'WITH_META, ___ret, syntaxQuote((cast' IObj ___form).meta()))))
                    )
                )
            )
            ___ret
        )
    )

    (defn- #_"ISeq" SyntaxQuoteReader'sqExpandList [#_"ISeq" ___seq]
        (let [#_"PersistentVector" ___ret PersistentVector'EMPTY]
            (loop-when-recur [___seq ___seq] (some? ___seq) [(next ___seq)]
                (let [#_"Object" ___item (first ___seq)]
                    (cond (LispReader'isUnquote ___item)
                        (do
                            (ยง ass ___ret (ร ___ret.cons(RT'list-2(LispReader'LIST, RT'second(___item)))))
                        )
                        (LispReader'isUnquoteSplicing ___item)
                        (do
                            (ยง ass ___ret (ร ___ret.cons(RT'second(___item))))
                        )
                        :else
                        (do
                            (ยง ass ___ret (ร ___ret.cons(RT'list-2(LispReader'LIST, syntaxQuote(___item)))))
                        )
                    )
                )
            )
            (.seq ___ret)
        )
    )

    (defn- #_"IPersistentVector" SyntaxQuoteReader'flattenMap [#_"Object" ___form]
        (let [#_"IPersistentVector" ___keyvals PersistentVector'EMPTY]
            (loop-when-recur [#_"ISeq" ___s (RT'seq ___form)] (some? ___s) [(next ___s)]
                (let [#_"IMapEntry" ___e (cast' IMapEntry (first ___s))]
                    (ยง ass ___keyvals (cast' IPersistentVector (.cons ___keyvals, (.key ___e))))
                    (ยง ass ___keyvals (cast' IPersistentVector (.cons ___keyvals, (.val ___e))))
                )
            )
            ___keyvals
        )
    )
)

#_closure
(class-ns UnquoteReader (ยง extends AFn)
    (defn #_"UnquoteReader" UnquoteReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"UnquoteReader" this, #_"Object" ___reader, #_"Object" ___comma, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"int" ___ch (LispReader'read1 ___r)]
                (when (= ___ch -1)
                    (throw (Util'runtimeException-1 "EOF while reading character"))
                )
                (ยง ass ___pendingForms (LispReader'ensurePending ___pendingForms))
                (if (ร ___ch == \@)
                    (do
                        (let [#_"Object" ___o (LispReader'read-6 ___r, true, nil, true, ___opts, ___pendingForms)]
                            (RT'list-2 LispReader'UNQUOTE_SPLICING, ___o)
                        )
                    )
                    (do
                        (LispReader'unread ___r, ___ch)
                        (let [#_"Object" ___o (LispReader'read-6 ___r, true, nil, true, ___opts, ___pendingForms)]
                            (RT'list-2 LispReader'UNQUOTE, ___o)
                        )
                    )
                )
            )
        )
    )
)

#_closure
(class-ns LispCharacterReader (ยง extends AFn)
    (defn #_"LispCharacterReader" LispCharacterReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispCharacterReader" this, #_"Object" ___reader, #_"Object" ___backslash, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"int" ___ch (LispReader'read1 ___r)]
                (when (= ___ch -1)
                    (throw (Util'runtimeException-1 "EOF while reading character"))
                )
                (let [#_"String" ___token (ร readToken(___r, (char) ___ch))]
                    (cond (ร (.length ___token) == 1)
                        (do
                            (ยง return (ร Character/valueOf(___token.charAt(0))))
                        )
                        (.equals ___token, "newline")
                        (do
                            (ยง return \newline)
                        )
                        (.equals ___token, "space")
                        (do
                            (ยง return \space)
                        )
                        (.equals ___token, "tab")
                        (do
                            (ยง return \tab)
                        )
                        (.equals ___token, "backspace")
                        (do
                            (ยง return \backspace)
                        )
                        (.equals ___token, "formfeed")
                        (do
                            (ยง return \formfeed)
                        )
                        (.equals ___token, "return")
                        (do
                            (ยง return \return)
                        )
                        (.startsWith ___token, "u")
                        (do
                            (let [#_"char" ___c (ร (char) readUnicodeChar(___token, 1, 4, 16))]
                                (when (and (ร ___c >= (ยง char "\ud800")) (ร ___c <= (ยง char "\udfff"))) ;; surrogate code unit?
                                    (throw (Util'runtimeException-1 (str "Invalid character constant: \\u" (Integer/toString ___c, 16))))
                                )
                                (ยง return ___c)
                            )
                        )
                        (.startsWith ___token, "o")
                        (do
                            (let [#_"int" ___len (ร (.length ___token) - 1)]
                                (when (> ___len 3)
                                    (throw (Util'runtimeException-1 (str "Invalid octal escape sequence length: " ___len)))
                                )
                                (let [#_"int" ___uc (readUnicodeChar ___token, 1, ___len, 8)]
                                    (when (> ___uc 0377)
                                        (throw (Util'runtimeException-1 "Octal escape sequence must be in range [0, 377]."))
                                    )
                                    (ยง return (ร (char) ___uc))
                                )
                            )
                        )
                    )
                    (throw (Util'runtimeException-1 (str "Unsupported character: \\" ___token)))
                )
            )
        )
    )
)

#_closure
(class-ns LispListReader (ยง extends AFn)
    (defn #_"LispListReader" LispListReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispListReader" this, #_"Object" ___reader, #_"Object" ___leftparen, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"int" ___line -1]
                (let [#_"int" ___column -1]
                    (when (ยง instance? LineNumberingPushbackReader ___r)
                        (ยง ass ___line (.getLineNumber (cast' LineNumberingPushbackReader ___r)))
                        (ยง ass ___column (ร (cast' LineNumberingPushbackReader ___r).getColumnNumber()-1))
                    )
                    (let [#_"List" ___list (ร readDelimitedList(\), ___r, true, ___opts, LispReader'ensurePending(___pendingForms)))]
                        (when (.isEmpty ___list)
                            (ยง return PersistentList'EMPTY)
                        )
                        (let [#_"IObj" ___s (cast' IObj (PersistentList'create ___list))]
                            (if (not= ___line -1)
                                (do
                                    (ร ___s.withMeta(RT'map(
                                        (object-array [
                                            RT'LINE_KEY   ___line
                                            RT'COLUMN_KEY ___column
                                        ])
                                    )))
                                )
                                (do
                                    ___s
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

#_closure
(class-ns EvalReader (ยง extends AFn)
    (defn #_"EvalReader" EvalReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"EvalReader" this, #_"Object" ___reader, #_"Object" ___eq, #_"Object" ___opts, #_"Object" ___pendingForms]
        (when (not (ร RT'booleanCast-1o(RT'READEVAL.deref())))
            (throw (Util'runtimeException-1 "EvalReader not allowed when *read-eval* is false."))
        )

        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"Object" ___o (LispReader'read-6 ___r, true, nil, true, ___opts, (LispReader'ensurePending ___pendingForms))]
                (cond (ยง instance? Symbol ___o)
                    (do
                        (ร RT'classForName-1((.toString ___o)))
                    )
                    (ยง instance? IPersistentList ___o)
                    (do
                        (let [#_"Symbol" ___fs (cast' Symbol (RT'first ___o))]
                            (when (.equals ___fs, LispReader'THE_VAR)
                                (let [#_"Symbol" ___vs (cast' Symbol (RT'second ___o))]
                                    (ยง return (ร RT'var-2((:ns ___vs), (:name ___vs))))
                                )
                            )
                            (when (.endsWith (:name ___fs), ".")
                                (let [#_"Object[]" ___args (ร RT'toArray(RT'next(___o)))]
                                    (ยง return (ร Reflector'invokeConstructor(RT'classForName-1((:name ___fs).substring(0, (:name ___fs).length() - 1)), ___args)))
                                )
                            )
                            (when (Compiler'namesStaticMember ___fs)
                                (let [#_"Object[]" ___args (ร RT'toArray(RT'next(___o)))]
                                    (ยง return (ร Reflector'invokeStaticMethod-3s((:ns ___fs), (:name ___fs), ___args)))
                                )
                            )
                            (let [#_"Object" ___v (ร Compiler'maybeResolveIn(Compiler'currentNS(), ___fs))]
                                (when (ยง instance? Var ___v)
                                    (ยง return (ร (cast' IFn ___v).applyTo(RT'next(___o))))
                                )
                                (throw (Util'runtimeException-1 (str "Can't resolve " ___fs)))
                            )
                        )
                    )
                    :else
                    (do
                        (throw (IllegalArgumentException. "Unsupported #= form"))
                    )
                )
            )
        )
    )
)

#_closure
(class-ns LispVectorReader (ยง extends AFn)
    (defn #_"LispVectorReader" LispVectorReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispVectorReader" this, #_"Object" ___reader, #_"Object" ___leftparen, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (ร LazilyPersistentVector'create(readDelimitedList(\], ___r, true, ___opts, LispReader'ensurePending(___pendingForms))))
        )
    )
)

#_closure
(class-ns LispMapReader (ยง extends AFn)
    (defn #_"LispMapReader" LispMapReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispMapReader" this, #_"Object" ___reader, #_"Object" ___leftparen, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"Object[]" ___a (ร readDelimitedList(\}, ___r, true, ___opts, LispReader'ensurePending(___pendingForms)).toArray())]
                (when (ร ((ยง alength ___a) & 1) == 1)
                    (throw (Util'runtimeException-1 "Map literal must contain an even number of forms"))
                )
                (RT'map ___a)
            )
        )
    )
)

#_closure
(class-ns LispSetReader (ยง extends AFn)
    (defn #_"LispSetReader" LispSetReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispSetReader" this, #_"Object" ___reader, #_"Object" ___leftbracket, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (ร PersistentHashSet'createWithCheck-1l(readDelimitedList(\}, ___r, true, ___opts, LispReader'ensurePending(___pendingForms))))
        )
    )
)

#_closure
(class-ns LispUnmatchedDelimiterReader (ยง extends AFn)
    (defn #_"LispUnmatchedDelimiterReader" LispUnmatchedDelimiterReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispUnmatchedDelimiterReader" this, #_"Object" ___reader, #_"Object" ___rightdelim, #_"Object" ___opts, #_"Object" ___pendingForms]
        (throw (Util'runtimeException-1 (str "Unmatched delimiter: " ___rightdelim)))
    )
)

#_closure
(class-ns LispUnreadableReader (ยง extends AFn)
    (defn #_"LispUnreadableReader" LispUnreadableReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"LispUnreadableReader" this, #_"Object" ___reader, #_"Object" ___leftangle, #_"Object" ___opts, #_"Object" ___pendingForms]
        (throw (Util'runtimeException-1 "Unreadable form"))
    )
)

#_closure
(class-ns CtorReader (ยง extends AFn)
    (defn #_"CtorReader" CtorReader'new []
        (AFn'new)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"CtorReader" this, #_"Object" ___reader, #_"Object" ___firstChar, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (ยง ass ___pendingForms (LispReader'ensurePending ___pendingForms))
            (let [#_"Object" ___name (LispReader'read-6 ___r, true, nil, false, ___opts, ___pendingForms)]
                (when (not (ยง instance? Symbol ___name))
                    (throw (RuntimeException. "Reader tag must be a symbol"))
                )
                (let [#_"Symbol" ___sym (cast' Symbol ___name)]
                    (let [#_"Object" ___form (LispReader'read-6 ___r, true, nil, true, ___opts, ___pendingForms)]
                        (if (or (isPreserveReadCond ___opts) (RT'suppressRead))
                            (do
                                (TaggedLiteral'create ___sym, ___form)
                            )
                            (do
                                (if (ร (.getName ___sym).contains(".")) (.readRecord this, ___form, ___sym, ___opts, ___pendingForms) (.readTagged this, ___form, ___sym, ___opts, ___pendingForms))
                            )
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn- #_"Object" (ยง method readTagged) [#_"CtorReader" this, #_"Object" ___o, #_"Symbol" ___tag, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"ILookup" ___data_readers (cast' ILookup (.deref RT'DATA_READERS))]
            (let [#_"IFn" ___data_reader (cast' IFn (RT'get-2 ___data_readers, ___tag))]
                (when (nil? ___data_reader)
                    (ยง ass ___data_readers (cast' ILookup (.deref RT'DEFAULT_DATA_READERS)))
                    (ยง ass ___data_reader (cast' IFn (RT'get-2 ___data_readers, ___tag)))
                    (when (nil? ___data_reader)
                        (let [#_"IFn" ___default_reader (cast' IFn (.deref RT'DEFAULT_DATA_READER_FN))]
                            (if (some? ___default_reader)
                                (do
                                    (ยง return (.invoke ___default_reader, ___tag, ___o))
                                )
                                (do
                                    (throw (RuntimeException. (str "No reader function for tag " (.toString ___tag))))
                                )
                            )
                        )
                    )
                )

                (.invoke ___data_reader, ___o)
            )
        )
    )

    #_method
    (ยง defn- #_"Object" (ยง method readRecord) [#_"CtorReader" this, #_"Object" ___form, #_"Symbol" ___recordName, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"boolean" ___readeval (ร RT'booleanCast-1o(RT'READEVAL.deref()))]
            (when (not ___readeval)
                (throw (Util'runtimeException-1 "Record construction syntax can only be used when *read-eval* == true"))
            )

            (let [#_"Class" ___recordClass (RT'classForNameNonLoading (.toString ___recordName))]
                (let [#_"boolean" ___shortForm true]
                    (cond (ยง instance? IPersistentMap ___form)
                        (do
                            (ยง ass ___shortForm false)
                        )
                        (ยง instance? IPersistentVector ___form)
                        (do
                            (ยง ass ___shortForm true)
                        )
                        :else
                        (do
                            (throw (Util'runtimeException-1 (str "Unreadable constructor form starting with \"#" ___recordName "\"")))
                        )
                    )

                    (let [#_"Object" ___ret nil]
                        (let [#_"Constructor[]" ___allctors (.getConstructors (cast Class ___recordClass))]
                            (if ___shortForm
                                (do
                                    (let [#_"IPersistentVector" ___recordEntries (cast' IPersistentVector ___form)]
                                        (let [#_"boolean" ___ctorFound false]
                                            (doseq [#_"Constructor" ___ctor ___allctors]
                                                (when (ร (ยง alength (.getParameterTypes ___ctor)) == (count ___recordEntries))
                                                    (ยง ass ___ctorFound true)
                                                )
                                            )

                                            (when (not ___ctorFound)
                                                (throw (Util'runtimeException-1 (str "Unexpected number of constructor arguments to " (.toString ___recordClass) ": got " (count ___recordEntries))))
                                            )

                                            (ยง ass ___ret (ร Reflector'invokeConstructor(___recordClass, RT'toArray(___recordEntries))))
                                        )
                                    )
                                )
                                (do
                                    (let [#_"IPersistentMap" ___vals (cast' IPersistentMap ___form)]
                                        (loop-when-recur [#_"ISeq" ___s (RT'keys ___vals)] (some? ___s) [(next ___s)]
                                            (when (not (ยง instance? Keyword (first ___s)))
                                                (throw (Util'runtimeException-1 (str "Unreadable defrecord form: key must be of type cloiure.lang.Keyword, got " (.toString (first ___s)))))
                                            )
                                        )
                                        (ยง ass ___ret (ร Reflector'invokeStaticMethod-3c(___recordClass, "create", (object-array [ ___vals ]))))
                                    )
                                )
                            )

                            ___ret
                        )
                    )
                )
            )
        )
    )
)

#_closure
(class-ns ConditionalReader (ยง extends AFn)
    (defn #_"ConditionalReader" ConditionalReader'new []
        (AFn'new)
    )

    (def- #_"Object" ConditionalReader'READ_STARTED (Object.))
    (ยง def #_"Keyword" ConditionalReader'DEFAULT_FEATURE (Keyword'intern-2 nil, "default"))
    (def #_"IPersistentSet" ConditionalReader'RESERVED_FEATURES (ร RT'set(Keyword'intern-2(nil, "else"), Keyword'intern-2(nil, "none"))))

    (defn #_"boolean" ConditionalReader'hasFeature [#_"Object" ___feature, #_"Object" ___opts]
        (when (not (ยง instance? Keyword ___feature))
            (throw (Util'runtimeException-1 (str "Feature should be a keyword: " ___feature)))
        )

        (when (.equals ConditionalReader'DEFAULT_FEATURE, ___feature)
            (ยง return true)
        )

        (let [#_"IPersistentSet" ___custom (cast' IPersistentSet (.valAt (cast' IPersistentMap ___opts), LispReader'OPT_FEATURES))]
            (and (some? ___custom) (.contains ___custom, ___feature))
        )
    )

    (defn #_"Object" ConditionalReader'readCondDelimited [#_"PushbackReader" ___r, #_"boolean" ___splicing, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"Object" ___result ConditionalReader'READ_STARTED]
            (ยง let [#_"Object" ___form] ;; The most recently ready form
                (let [#_"boolean" ___toplevel (nil? ___pendingForms)]
                    (ยง ass ___pendingForms (LispReader'ensurePending ___pendingForms))

                    (let [#_"int" ___firstline (if (ยง instance? LineNumberingPushbackReader ___r) (.getLineNumber (cast' LineNumberingPushbackReader ___r)) -1)]
                        (while true
                            (when (= ___result ConditionalReader'READ_STARTED)
                                ;; Read the next feature
                                (ยง ass ___form (LispReader'read-9 ___r, false, LispReader'READ_EOF, \), LispReader'READ_FINISHED, true, ___opts, ___pendingForms, nil))

                                (cond (= ___form LispReader'READ_EOF)
                                    (do
                                        (if (< ___firstline 0)
                                            (do
                                                (throw (Util'runtimeException-1 "EOF while reading"))
                                            )
                                            (do
                                                (throw (Util'runtimeException-1 (str "EOF while reading, starting at line " ___firstline)))
                                            )
                                        )
                                    )
                                    (= ___form LispReader'READ_FINISHED)
                                    (do
                                        (ยง break ) ;; read-cond form is done
                                    )
                                )

                                (when (.contains ConditionalReader'RESERVED_FEATURES, ___form)
                                    (throw (Util'runtimeException-1 (str "Feature name " ___form " is reserved.")))
                                )

                                (when (hasFeature ___form, ___opts)
                                    ;; Read the form corresponding to the feature, and assign it to result if everything is kosher
                                    (ยง ass ___form (LispReader'read-9 ___r, false, LispReader'READ_EOF, \), LispReader'READ_FINISHED, true, ___opts, ___pendingForms, (cast' Resolver (.deref RT'READER_RESOLVER))))

                                    (cond (= ___form LispReader'READ_EOF)
                                        (do
                                            (if (< ___firstline 0)
                                                (do
                                                    (throw (Util'runtimeException-1 "EOF while reading"))
                                                )
                                                (do
                                                    (throw (Util'runtimeException-1 (str "EOF while reading, starting at line " ___firstline)))
                                                )
                                            )
                                        )
                                        (= ___form LispReader'READ_FINISHED)
                                        (do
                                            (if (< ___firstline 0)
                                                (do
                                                    (throw (Util'runtimeException-1 "read-cond requires an even number of forms."))
                                                )
                                                (do
                                                    (throw (Util'runtimeException-1 (str "read-cond starting on line " ___firstline " requires an even number of forms")))
                                                )
                                            )
                                        )
                                        :else
                                        (do
                                            (ยง ass ___result ___form)
                                        )
                                    )
                                )
                            )

                            ;; When we already have a result, or when the feature didn't match, discard the next form in the reader
                            (try
                                (ร Var'pushThreadBindings(RT'map(RT'SUPPRESS_READ, RT'T)))
                                (ยง ass ___form (LispReader'read-9 ___r, false, LispReader'READ_EOF, \), LispReader'READ_FINISHED, true, ___opts, ___pendingForms, (cast' Resolver (.deref RT'READER_RESOLVER))))

                                (cond (= ___form LispReader'READ_EOF)
                                    (do
                                        (if (< ___firstline 0)
                                            (do
                                                (throw (Util'runtimeException-1 "EOF while reading"))
                                            )
                                            (do
                                                (throw (Util'runtimeException-1 (str "EOF while reading, starting at line " ___firstline)))
                                            )
                                        )
                                    )
                                    (= ___form LispReader'READ_FINISHED)
                                    (do
                                        (ยง break )
                                    )
                                )
                                (finally
                                    (Var'popThreadBindings)
                                )
                            )
                        )

                        (when (= ___result ConditionalReader'READ_STARTED) ;; no features matched
                            (ยง return ___r)
                        )

                        (if ___splicing
                            (do
                                (when (not (instance? List ___result))
                                    (throw (Util'runtimeException-1 "Spliced form list in read-cond-splicing must implement java.util.List"))
                                )

                                (when ___toplevel
                                    (throw (Util'runtimeException-1 "Reader conditional splicing not allowed at the top level."))
                                )

                                (ร (cast List ___pendingForms).addAll(0, (cast List ___result)))

                                ___r
                            )
                            (do
                                ___result
                            )
                        )
                    )
                )
            )
        )
    )

    (defn- #_"void" ConditionalReader'checkConditionalAllowed [#_"Object" ___opts]
        (let [#_"IPersistentMap" ___mopts (cast' IPersistentMap ___opts)]
            (when (not (and (some? ___opts) (or (ร LispReader'COND_ALLOW.equals(___mopts.valAt(LispReader'OPT_READ_COND))) (ร LispReader'COND_PRESERVE.equals(___mopts.valAt(LispReader'OPT_READ_COND))))))
                (throw (Util'runtimeException-1 "Conditional read not allowed"))
            )
            nil
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"ConditionalReader" this, #_"Object" ___reader, #_"Object" ___mode, #_"Object" ___opts, #_"Object" ___pendingForms]
        (ConditionalReader'checkConditionalAllowed ___opts)

        (let [#_"PushbackReader" ___r (cast PushbackReader ___reader)]
            (let [#_"int" ___ch (LispReader'read1 ___r)]
                (when (= ___ch -1)
                    (throw (Util'runtimeException-1 "EOF while reading character"))
                )

                (let [#_"boolean" ___splicing false]
                    (when (ร ___ch == \@)
                        (ยง ass ___splicing true)
                        (ยง ass ___ch (LispReader'read1 ___r))
                    )

                    (while (LispReader'isWhitespace ___ch)
                        (ยง ass ___ch (LispReader'read1 ___r))
                    )

                    (when (= ___ch -1)
                        (throw (Util'runtimeException-1 "EOF while reading character"))
                    )

                    (when (ร ___ch != \()
                        (throw (Util'runtimeException-1 "read-cond body must be a list"))
                    )

                    (try
                        (ร Var'pushThreadBindings(RT'map(LispReader'READ_COND_ENV, RT'T)))

                        (if (isPreserveReadCond ___opts)
                            (do
                                (let [#_"IFn" ___listReader (EdnReader'getMacro ___ch)] ;; should always be a list
                                    (let [#_"Object" ___form (ร ___listReader.invoke(___r, ___ch, ___opts, LispReader'ensurePending(___pendingForms)))]
                                        (ReaderConditional'create ___form, ___splicing)
                                    )
                                )
                            )
                            (do
                                (readCondDelimited ___r, ___splicing, ___opts, ___pendingForms)
                            )
                        )
                        (finally
                            (Var'popThreadBindings)
                        )
                    )
                )
            )
        )
    )
)

#_stateless
(class-ns LispReader
    (ยง def #_"Symbol" LispReader'QUOTE (Symbol'intern-1 "quote"))
    (ยง def #_"Symbol" LispReader'THE_VAR (Symbol'intern-1 "var"))

    (ยง def #_"Symbol" LispReader'UNQUOTE (Symbol'intern-2 "cloiure.core", "unquote"))
    (ยง def #_"Symbol" LispReader'UNQUOTE_SPLICING (Symbol'intern-2 "cloiure.core", "unquote-splicing"))
    (ยง def #_"Symbol" LispReader'CONCAT (Symbol'intern-2 "cloiure.core", "concat"))
    (ยง def #_"Symbol" LispReader'SEQ (Symbol'intern-2 "cloiure.core", "seq"))
    (ยง def #_"Symbol" LispReader'LIST (Symbol'intern-2 "cloiure.core", "list"))
    (ยง def #_"Symbol" LispReader'APPLY (Symbol'intern-2 "cloiure.core", "apply"))
    (ยง def #_"Symbol" LispReader'HASHMAP (Symbol'intern-2 "cloiure.core", "hash-map"))
    (ยง def #_"Symbol" LispReader'HASHSET (Symbol'intern-2 "cloiure.core", "hash-set"))
    (ยง def #_"Symbol" LispReader'VECTOR (Symbol'intern-2 "cloiure.core", "vector"))
    (ยง def #_"Symbol" LispReader'WITH_META (Symbol'intern-2 "cloiure.core", "with-meta"))
    (ยง def #_"Symbol" LispReader'META (Symbol'intern-2 "cloiure.core", "meta"))
    (ยง def #_"Symbol" LispReader'DEREF (Symbol'intern-2 "cloiure.core", "deref"))
    (ยง def #_"Symbol" LispReader'READ_COND (Symbol'intern-2 "cloiure.core", "read-cond"))
    (ยง def #_"Symbol" LispReader'READ_COND_SPLICING (Symbol'intern-2 "cloiure.core", "read-cond-splicing"))
    (ยง def #_"Keyword" LispReader'UNKNOWN (Keyword'intern-2 nil, "unknown"))

    (def #_"IFn[]" LispReader'macros (ยง typeless make-array IFn 256))
    (def #_"IFn[]" LispReader'dispatchMacros (ยง typeless make-array IFn 256))

    (def #_"Pattern" LispReader'symbolPat (Pattern/compile "[:]?([\\D&&[^/]].*/)?(/|[\\D&&[^/]][^/]*)"))
    (def #_"Pattern" LispReader'intPat (Pattern/compile "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?"))
    (def #_"Pattern" LispReader'ratioPat (Pattern/compile "([-+]?[0-9]+)/([0-9]+)"))
    (def #_"Pattern" LispReader'floatPat (Pattern/compile "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?"))

    ;; symbol->gensymbol
    (ยง def #_"Var" LispReader'GENSYM_ENV (ร Var'create-1(nil).setDynamic()))
    ;; sorted-map num->gensymbol
    (ยง def #_"Var" LispReader'ARG_ENV (ร Var'create-1(nil).setDynamic()))
    (ยง def #_"IFn" LispReader'ctorReader (CtorReader'new))

    ;; Dynamic var set to true in a read-cond context
    (ยง def #_"Var" LispReader'READ_COND_ENV (ร Var'create-1(nil).setDynamic()))

    (ยง static
        (ยง ass (ร macros[\"]) (LispStringReader'new)) ;; oops! "
        (ยง ass (ร macros[\;]) (LispCommentReader'new))
        (ยง ass (ร macros[\']) (WrappingReader'new LispReader'QUOTE))
        (ยง ass (ร macros[\@]) (WrappingReader'new LispReader'DEREF))
        (ยง ass (ร macros[\^]) (LispMetaReader'new))
        (ยง ass (ร macros[\`]) (SyntaxQuoteReader'new))
        (ยง ass (ร macros[\~]) (UnquoteReader'new))
        (ยง ass (ร macros[\(]) (LispListReader'new))
        (ยง ass (ร macros[\)]) (LispUnmatchedDelimiterReader'new))
        (ยง ass (ร macros[\[]) (LispVectorReader'new))
        (ยง ass (ร macros[\]]) (LispUnmatchedDelimiterReader'new))
        (ยง ass (ร macros[\{]) (LispMapReader'new))
        (ยง ass (ร macros[\}]) (LispUnmatchedDelimiterReader'new))
        (ยง ass (ร macros[\\]) (LispCharacterReader'new))
        (ยง ass (ร macros[\%]) (ArgReader'new))
        (ยง ass (ร macros[\#]) (LispDispatchReader'new))

        (ยง ass (ร dispatchMacros[\^]) (LispMetaReader'new))
        (ยง ass (ร dispatchMacros[\#]) (LispSymbolicValueReader'new))
        (ยง ass (ร dispatchMacros[\']) (VarReader'new))
        (ยง ass (ร dispatchMacros[\"]) (RegexReader'new)) ;; oops! "
        (ยง ass (ร dispatchMacros[\(]) (FnReader'new))
        (ยง ass (ร dispatchMacros[\{]) (LispSetReader'new))
        (ยง ass (ร dispatchMacros[\=]) (EvalReader'new))
        (ยง ass (ร dispatchMacros[\!]) (LispCommentReader'new))
        (ยง ass (ร dispatchMacros[\<]) (LispUnreadableReader'new))
        (ยง ass (ร dispatchMacros[\_]) (LispDiscardReader'new))
        (ยง ass (ร dispatchMacros[\?]) (ConditionalReader'new))
        (ยง ass (ร dispatchMacros[\:]) (LispNamespaceMapReader'new))
    )

    (defn #_"boolean" LispReader'isWhitespace [#_"int" ___ch]
        (or (Character/isWhitespace ___ch) (ร ___ch == \,))
    )

    (defn #_"void" LispReader'unread [#_"PushbackReader" ___r, #_"int" ___ch]
        (when (not= ___ch -1)
            (try
                (.unread ___r, ___ch)
                (catch IOException ___e
                    (throw (Util'sneakyThrow ___e))
                )
            )
        )
        nil
    )

    (defn #_"int" LispReader'read1 [#_"Reader" ___r]
        (try
            (.read ___r)
            (catch IOException ___e
                (throw (Util'sneakyThrow ___e))
            )
        )
    )

    ;; Reader opts
    (ยง def #_"Keyword" LispReader'OPT_EOF (Keyword'intern-2 nil, "eof"))
    (ยง def #_"Keyword" LispReader'OPT_FEATURES (Keyword'intern-2 nil, "features"))
    (ยง def #_"Keyword" LispReader'OPT_READ_COND (Keyword'intern-2 nil, "read-cond"))

    ;; EOF special value to throw on eof
    (ยง def #_"Keyword" LispReader'EOFTHROW (Keyword'intern-2 nil, "eofthrow"))

    ;; Platform features - always installed
    (ยง def- #_"Keyword" LispReader'PLATFORM_KEY (Keyword'intern-2 nil, "cli"))
    (ยง def- #_"Object" LispReader'PLATFORM_FEATURES (PersistentHashSet'create-1a LispReader'PLATFORM_KEY))

    ;; Reader conditional options - use with :read-cond
    (ยง def #_"Keyword" LispReader'COND_ALLOW (Keyword'intern-2 nil, "allow"))
    (ยง def #_"Keyword" LispReader'COND_PRESERVE (Keyword'intern-2 nil, "preserve"))

    (defn #_"Object" LispReader'read-2 [#_"PushbackReader" ___r, #_"Object" ___opts]
        (let [#_"boolean" ___eofIsError true]
            (let [#_"Object" ___eofValue nil]
                (when (and (some? ___opts) (ยง instance? IPersistentMap ___opts))
                    (let [#_"Object" ___eof (.valAt (cast' IPersistentMap ___opts), LispReader'OPT_EOF, LispReader'EOFTHROW)]
                        (when (not (.equals LispReader'EOFTHROW, ___eof))
                            (ยง ass ___eofIsError false)
                            (ยง ass ___eofValue ___eof)
                        )
                    )
                )
                (LispReader'read-5 ___r, ___eofIsError, ___eofValue, false, ___opts)
            )
        )
    )

    (defn #_"Object" LispReader'read-4 [#_"PushbackReader" ___r, #_"boolean" ___eofIsError, #_"Object" ___eofValue, #_"boolean" ___isRecursive]
        (LispReader'read-5 ___r, ___eofIsError, ___eofValue, ___isRecursive, PersistentHashMap'EMPTY)
    )

    (defn #_"Object" LispReader'read-5 [#_"PushbackReader" ___r, #_"boolean" ___eofIsError, #_"Object" ___eofValue, #_"boolean" ___isRecursive, #_"Object" ___opts]
        ;; start with pendingForms nil as reader conditional splicing is not allowed at top level
        (LispReader'read-9 ___r, ___eofIsError, ___eofValue, nil, nil, ___isRecursive, ___opts, nil, (cast' Resolver (.deref RT'READER_RESOLVER)))
    )

    (defn- #_"Object" LispReader'read-6 [#_"PushbackReader" ___r, #_"boolean" ___eofIsError, #_"Object" ___eofValue, #_"boolean" ___isRecursive, #_"Object" ___opts, #_"Object" ___pendingForms]
        (LispReader'read-9 ___r, ___eofIsError, ___eofValue, nil, nil, ___isRecursive, ___opts, (LispReader'ensurePending ___pendingForms), (cast' Resolver (.deref RT'READER_RESOLVER)))
    )

    (defn- #_"Object" LispReader'ensurePending [#_"Object" ___pendingForms]
        (if (nil? ___pendingForms)
            (do
                (LinkedList.)
            )
            (do
                ___pendingForms
            )
        )
    )

    (defn- #_"Object" LispReader'installPlatformFeature [#_"Object" ___opts]
        (if (nil? ___opts)
            (do
                (RT'mapUniqueKeys LispReader'OPT_FEATURES, LispReader'PLATFORM_FEATURES)
            )
            (do
                (let [#_"IPersistentMap" ___mopts (cast' IPersistentMap ___opts)]
                    (let [#_"Object" ___features (.valAt ___mopts, LispReader'OPT_FEATURES)]
                        (if (nil? ___features)
                            (do
                                (.assoc ___mopts, LispReader'OPT_FEATURES, LispReader'PLATFORM_FEATURES)
                            )
                            (do
                                (ร ___mopts.assoc(LispReader'OPT_FEATURES, RT'conj((cast' IPersistentSet ___features), LispReader'PLATFORM_KEY)))
                            )
                        )
                    )
                )
            )
        )
    )

    (defn- #_"Object" LispReader'read-9 [#_"PushbackReader" ___r, #_"boolean" ___eofIsError, #_"Object" ___eofValue, #_"Character" ___returnOn, #_"Object" ___returnOnValue, #_"boolean" ___isRecursive, #_"Object" ___opts, #_"Object" ___pendingForms, #_"Resolver" ___resolver]
        (when (ร RT'READEVAL.deref() == LispReader'UNKNOWN)
            (throw (Util'runtimeException-1 "Reading disallowed - *read-eval* bound to :unknown"))
        )

        (ยง ass ___opts (installPlatformFeature ___opts))

        (try
            (while true
                (when (and (instance? List ___pendingForms) (not (.isEmpty (cast List ___pendingForms))))
                    (ยง return (.remove (cast List ___pendingForms), 0))
                )

                (let [#_"int" ___ch (LispReader'read1 ___r)]
                    (while (LispReader'isWhitespace ___ch)
                        (ยง ass ___ch (LispReader'read1 ___r))
                    )

                    (when (= ___ch -1)
                        (when ___eofIsError
                            (throw (Util'runtimeException-1 "EOF while reading"))
                        )
                        (ยง return ___eofValue)
                    )

                    (when (and (some? ___returnOn) (ร (.charValue ___returnOn) == ___ch))
                        (ยง return ___returnOnValue)
                    )

                    (when (Character/isDigit ___ch)
                        (let [#_"Object" ___n (ร readNumber(___r, (char) ___ch))]
                            (ยง return ___n)
                        )
                    )

                    (let [#_"IFn" ___macroFn (EdnReader'getMacro ___ch)]
                        (when (some? ___macroFn)
                            (let [#_"Object" ___ret (ร ___macroFn.invoke(___r, (char) ___ch, ___opts, ___pendingForms))]
                                ;; no op macros return the reader
                                (when (= ___ret ___r)
                                    (ยง continue )
                                )
                                (ยง return ___ret)
                            )
                        )

                        (when (or (ร ___ch == \+) (ร ___ch == \-))
                            (let [#_"int" ___ch2 (LispReader'read1 ___r)]
                                (when (Character/isDigit ___ch2)
                                    (LispReader'unread ___r, ___ch2)
                                    (let [#_"Object" ___n (ร readNumber(___r, (char) ___ch))]
                                        (ยง return ___n)
                                    )
                                )
                                (LispReader'unread ___r, ___ch2)
                            )
                        )

                        (let [#_"String" ___token (ร readToken(___r, (char) ___ch))]
                            (ยง return (interpretToken ___token, ___resolver))
                        )
                    )
                )
            )
            (catch Exception ___e
                (when (or ___isRecursive (not (ยง instance? LineNumberingPushbackReader ___r)))
                    (throw (Util'sneakyThrow ___e))
                )
                (let [#_"LineNumberingPushbackReader" ___rdr (cast' LineNumberingPushbackReader ___r)]
                    (throw (ร LispReaderException'new((.getLineNumber ___rdr), (.getColumnNumber ___rdr), ___e)))
                )
            )
        )
    )

    (defn- #_"String" LispReader'readToken [#_"PushbackReader" ___r, #_"char" ___initch]
        (let [#_"StringBuilder" ___sb (StringBuilder.)]
            (.append ___sb, ___initch)

            (while true
                (let [#_"int" ___ch (LispReader'read1 ___r)]
                    (when (or (ร ___ch == -1) (LispReader'isWhitespace ___ch) (LispReader'isTerminatingMacro ___ch))
                        (LispReader'unread ___r, ___ch)
                        (ยง return (.toString ___sb))
                    )
                    (ร ___sb.append((char) ___ch))
                )
            )
        )
    )

    (defn- #_"Object" LispReader'readNumber [#_"PushbackReader" ___r, #_"char" ___initch]
        (let [#_"StringBuilder" ___sb (StringBuilder.)]
            (.append ___sb, ___initch)

            (while true
                (let [#_"int" ___ch (LispReader'read1 ___r)]
                    (when (or (ร ___ch == -1) (LispReader'isWhitespace ___ch) (LispReader'isMacro ___ch))
                        (LispReader'unread ___r, ___ch)
                        (ยง break )
                    )
                    (ร ___sb.append((char) ___ch))
                )
            )

            (let [#_"String" ___s (.toString ___sb)]
                (let [#_"Object" ___n (LispReader'matchNumber ___s)]
                    (when (nil? ___n)
                        (throw (NumberFormatException. (str "Invalid number: " ___s)))
                    )
                    ___n
                )
            )
        )
    )

    (defn- #_"int" LispReader'readUnicodeChar-4 [#_"String" ___token, #_"int" ___offset, #_"int" ___length, #_"int" ___base]
        (when (ร (.length ___token) != ___offset + ___length)
            (throw (IllegalArgumentException. (str "Invalid unicode character: \\" ___token)))
        )
        (let [#_"int" ___uc 0]
            (loop-when-recur [#_"int" ___i ___offset] (ร ___i < ___offset + ___length) [(inc ___i)]
                (let [#_"int" ___d (ร Character/digit(___token.charAt(___i), ___base))]
                    (when (= ___d -1)
                        (throw (IllegalArgumentException. (str "Invalid digit: " (.charAt ___token, ___i))))
                    )
                    (ยง ass ___uc (ร ___uc * ___base + ___d))
                )
            )
            (ร (char) ___uc)
        )
    )

    (defn- #_"int" LispReader'readUnicodeChar-5 [#_"PushbackReader" ___r, #_"int" ___initch, #_"int" ___base, #_"int" ___length, #_"boolean" ___exact]
        (let [#_"int" ___uc (Character/digit ___initch, ___base)]
            (when (= ___uc -1)
                (throw (IllegalArgumentException. (str "Invalid digit: " (ร (char) ___initch))))
            )
            (let [#_"int" ___i 1]
                (loop-when-recur [___i ___i] (< ___i ___length) [(inc ___i)]
                    (let [#_"int" ___ch (LispReader'read1 ___r)]
                        (when (or (ร ___ch == -1) (LispReader'isWhitespace ___ch) (LispReader'isMacro ___ch))
                            (LispReader'unread ___r, ___ch)
                            (ยง break )
                        )
                        (let [#_"int" ___d (Character/digit ___ch, ___base)]
                            (when (= ___d -1)
                                (throw (IllegalArgumentException. (str "Invalid digit: " (ร (char) ___ch))))
                            )
                            (ยง ass ___uc (ร ___uc * ___base + ___d))
                        )
                    )
                )
                (when (and (ร ___i != ___length) ___exact)
                    (throw (IllegalArgumentException. (str "Invalid character length: " ___i ", should be: " ___length)))
                )
                ___uc
            )
        )
    )

    (defn- #_"Object" LispReader'interpretToken [#_"String" ___s, #_"Resolver" ___resolver]
        (cond (.equals ___s, "nil")
            (do
                (ยง return nil)
            )
            (.equals ___s, "true")
            (do
                (ยง return RT'T)
            )
            (.equals ___s, "false")
            (do
                (ยง return RT'F)
            )
        )
        (let [#_"Object" ___ret nil]
            (ยง ass ___ret (matchSymbol ___s, ___resolver))
            (when (some? ___ret)
                (ยง return ___ret)
            )

            (throw (Util'runtimeException-1 (str "Invalid token: " ___s)))
        )
    )

    (defn- #_"Object" LispReader'matchSymbol [#_"String" ___s, #_"Resolver" ___resolver]
        (let [#_"Matcher" ___m (.matcher LispReader'symbolPat, ___s)]
            (when (.matches ___m)
                (let [#_"int" ___gc (.groupCount ___m)]
                    (let [#_"String" ___ns (.group ___m, 1)]
                        (let [#_"String" ___name (.group ___m, 2)]
                            (when (or (and (some? ___ns) (.endsWith ___ns, ":/")) (.endsWith ___name, ":") (ร (.indexOf ___s, "::", 1) != -1))
                                (ยง return nil)
                            )
                            (when (.startsWith ___s, "::")
                                (let [#_"Symbol" ___ks (ร Symbol'intern-1(___s.substring(2)))]
                                    (if (some? ___resolver)
                                        (do
                                            (ยง let [#_"Symbol" ___nsym]
                                                (if (ร (some? (:ns ___ks)))
                                                    (do
                                                        (ยง ass ___nsym (ร ___resolver.resolveAlias(Symbol'intern-1((:ns ___ks)))))
                                                    )
                                                    (do
                                                        (ยง ass ___nsym (.currentNS ___resolver))
                                                    )
                                                )
                                                ;; auto-resolving keyword
                                                (if (some? ___nsym)
                                                    (do
                                                        (ยง return (ร Keyword'intern-2((:name ___nsym), (:name ___ks))))
                                                    )
                                                    (do
                                                        (ยง return nil)
                                                    )
                                                )
                                            )
                                        )
                                        (do
                                            (ยง let [#_"Namespace" ___kns]
                                                (if (ร (some? (:ns ___ks)))
                                                    (do
                                                        (ยง ass ___kns (ร Compiler'currentNS().lookupAlias(Symbol'intern-1((:ns ___ks)))))
                                                    )
                                                    (do
                                                        (ยง ass ___kns (Compiler'currentNS))
                                                    )
                                                )
                                                ;; auto-resolving keyword
                                                (if (some? ___kns)
                                                    (do
                                                        (ยง return (ร Keyword'intern-2((:name (:name ___kns)), (:name ___ks))))
                                                    )
                                                    (do
                                                        (ยง return nil)
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                            (let [#_"boolean" ___isKeyword (ร (___s.charAt(0) == \:))]
                                (let [#_"Symbol" ___sym (Symbol'intern-1 (.substring ___s, (if ___isKeyword 1 0)))]
                                    (when ___isKeyword
                                        (ยง return (Keyword'intern ___sym))
                                    )
                                    (ยง return ___sym)
                                )
                            )
                        )
                    )
                )
            )
            nil
        )
    )

    (defn- #_"Object" LispReader'matchNumber [#_"String" ___s]
        (let [#_"Matcher" ___m (.matcher LispReader'intPat, ___s)]
            (when (.matches ___m)
                (when (some? (.group ___m, 2))
                    (when (some? (.group ___m, 8))
                        (ยง return BigInt'ZERO)
                    )
                    (ยง return (Numbers'num-1l 0))
                )
                (let [#_"boolean" ___negate (ร ___m.group(1).equals("-"))]
                    (ยง let [#_"String" ___n]
                        (let [#_"int" ___radix 10]
                            (cond (some? (ยง ass ___n (.group ___m, 3)))
                                (do
                                    (ยง ass ___radix 10)
                                )
                                (some? (ยง ass ___n (.group ___m, 4)))
                                (do
                                    (ยง ass ___radix 16)
                                )
                                (some? (ยง ass ___n (.group ___m, 5)))
                                (do
                                    (ยง ass ___radix 8)
                                )
                                (some? (ยง ass ___n (.group ___m, 7)))
                                (do
                                    (ยง ass ___radix (ร Integer/parseInt(___m.group(6))))
                                )
                            )
                            (when (nil? ___n)
                                (ยง return nil)
                            )
                            (let [#_"BigInteger" ___bn (BigInteger. ___n, ___radix)]
                                (when ___negate
                                    (ยง ass ___bn (.negate ___bn))
                                )
                                (when (some? (.group ___m, 8))
                                    (ยง return (BigInt'fromBigInteger ___bn))
                                )
                                (ยง return (if (< (.bitLength ___bn) 64) (Numbers'num-1l (.longValue ___bn)) (BigInt'fromBigInteger ___bn)))
                            )
                        )
                    )
                )
            )
            (ยง ass ___m (.matcher LispReader'floatPat, ___s))
            (when (.matches ___m)
                (when (some? (.group ___m, 4))
                    (ยง return (ยง unsure BigDecimal. (.group ___m, 1)))
                )
                (ยง return (Double/parseDouble ___s))
            )
            (ยง ass ___m (.matcher LispReader'ratioPat, ___s))
            (when (.matches ___m)
                (let [#_"String" ___numerator (.group ___m, 1)]
                    (when (.startsWith ___numerator, "+")
                        (ยง ass ___numerator (.substring ___numerator, 1))
                    )
                    (ยง return (ร Numbers'divide-2oo(Numbers'reduceBigInt(BigInt'fromBigInteger((BigInteger. ___numerator))), Numbers'reduceBigInt(BigInt'fromBigInteger((BigInteger. (.group ___m, 2)))))))
                )
            )
            nil
        )
    )

    (defn- #_"IFn" LispReader'getMacro [#_"int" ___ch]
        (when (< ___ch (ยง alength macros))
            (ยง return (ยง aget macros ___ch))
        )
        nil
    )

    (defn- #_"boolean" LispReader'isMacro [#_"int" ___ch]
        (and (< ___ch (ยง alength macros)) (some? (ยง aget macros ___ch)))
    )

    (defn- #_"boolean" LispReader'isTerminatingMacro [#_"int" ___ch]
        (and (ร ___ch != \#) (ร ___ch != \') (ร ___ch != \%) (LispReader'isMacro ___ch))
    )

    (defn #_"Symbol" LispReader'garg [#_"int" ___n]
        (Symbol'intern-2 nil, (str (if (= ___n -1) "rest" (str "p" ___n)) "__" (RT'nextID) "#"))
    )

    (defn #_"Symbol" LispReader'registerArg [#_"int" ___n]
        (let [#_"PersistentTreeMap" ___argsyms (cast' PersistentTreeMap (.deref LispReader'ARG_ENV))]
            (when (nil? ___argsyms)
                (throw (IllegalStateException. "arg literal not in #()"))
            )
            (let [#_"Symbol" ___ret (cast' Symbol (.valAt ___argsyms, ___n))]
                (when (nil? ___ret)
                    (ยง ass ___ret (garg ___n))
                    (ร LispReader'ARG_ENV.set(___argsyms.assoc(___n, ___ret)))
                )
                ___ret
            )
        )
    )

    (defn #_"boolean" LispReader'isUnquoteSplicing [#_"Object" ___form]
        (and (ยง instance? ISeq ___form) (Util'equals (RT'first ___form), LispReader'UNQUOTE_SPLICING))
    )

    (defn #_"boolean" LispReader'isUnquote [#_"Object" ___form]
        (and (ยง instance? ISeq ___form) (Util'equals (RT'first ___form), LispReader'UNQUOTE))
    )

    ;; Sentinel values for reading lists
    (def- #_"Object" LispReader'READ_EOF (Object.))
    (def- #_"Object" LispReader'READ_FINISHED (Object.))

    (defn #_"List" LispReader'readDelimitedList [#_"char" ___delim, #_"PushbackReader" ___r, #_"boolean" ___isRecursive, #_"Object" ___opts, #_"Object" ___pendingForms]
        (let [#_"int" ___firstline (if (ยง instance? LineNumberingPushbackReader ___r) (.getLineNumber (cast' LineNumberingPushbackReader ___r)) -1)]
            (let [#_"ArrayList" ___a (ArrayList.)]
                (let [#_"Resolver" ___resolver (cast' Resolver (.deref RT'READER_RESOLVER))]
                    (while true
                        (let [#_"Object" ___form (LispReader'read-9 ___r, false, LispReader'READ_EOF, ___delim, LispReader'READ_FINISHED, ___isRecursive, ___opts, ___pendingForms, ___resolver)]
                            (cond (= ___form LispReader'READ_EOF)
                                (do
                                    (if (< ___firstline 0)
                                        (do
                                            (throw (Util'runtimeException-1 "EOF while reading"))
                                        )
                                        (do
                                            (throw (Util'runtimeException-1 (str "EOF while reading, starting at line " ___firstline)))
                                        )
                                    )
                                )
                                (= ___form LispReader'READ_FINISHED)
                                (do
                                    (ยง return ___a)
                                )
                            )

                            (.add ___a, ___form)
                        )
                    )
                )
            )
        )
    )

    (defn #_"boolean" LispReader'isPreserveReadCond [#_"Object" ___opts]
        (if (and (RT'booleanCast-1o (.deref LispReader'READ_COND_ENV)) (ยง instance? IPersistentMap ___opts))
            (do
                (let [#_"Object" ___readCond (.valAt (cast' IPersistentMap ___opts), LispReader'OPT_READ_COND)]
                    (.equals LispReader'COND_PRESERVE, ___readCond)
                )
            )
            (do
                false
            )
        )
    )
)
)

(java-ns cloiure.lang.LockingTransaction

(ยง import java.util.*)
(ยง import java.util.concurrent.atomic.AtomicInteger)
(ยง import java.util.concurrent.atomic.AtomicLong)
(ยง import java.util.concurrent.Callable)
(ยง import java.util.concurrent.TimeUnit)
(ยง import java.util.concurrent.CountDownLatch)

(class-ns RetryEx (ยง extends Error)
    (defn #_"RetryEx" RetryEx'new []
        (ยง foreign Error'new)
    )
)

(class-ns AbortException (ยง extends Exception)
    (defn #_"AbortException" AbortException'new []
        (ยง foreign Exception'new)
    )
)

(class-ns LockingTransactionInfo
    (defn- #_"LockingTransactionInfo" LockingTransactionInfo'init []
        (hash-map
            #_"AtomicInteger" :status nil
            #_"long" :startPoint 0
            #_"CountDownLatch" :latch nil
        )
    )

    (defn #_"LockingTransactionInfo" LockingTransactionInfo'new [#_"int" ___status, #_"long" ___startPoint]
        (let [this (LockingTransactionInfo'init)]
            (ยง ass (:status this) (AtomicInteger. ___status))
            (ยง ass (:startPoint this) ___startPoint)
            (ยง ass (:latch this) (CountDownLatch. 1))
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method running) [#_"LockingTransactionInfo" this]
        (let [#_"int" ___s (.get (:status this))]
            (or (ร ___s == LockingTransaction'RUNNING) (ร ___s == LockingTransaction'COMMITTING))
        )
    )
)

(class-ns CFn
    (defn- #_"CFn" CFn'init []
        (hash-map
            #_"IFn" :fn nil
            #_"ISeq" :args nil
        )
    )

    (defn #_"CFn" CFn'new [#_"IFn" ___fn, #_"ISeq" ___args]
        (let [this (CFn'init)]
            (ยง ass (:fn this) ___fn)
            (ยง ass (:args this) ___args)
            this
        )
    )
)

(class-ns Notify
    (defn- #_"Notify" Notify'init []
        (hash-map
            #_"Ref" :ref nil
            #_"Object" :oldval nil
            #_"Object" :newval nil
        )
    )

    (defn #_"Notify" Notify'new [#_"Ref" ___ref, #_"Object" ___oldval, #_"Object" ___newval]
        (let [this (Notify'init)]
            (ยง ass (:ref this) ___ref)
            (ยง ass (:oldval this) ___oldval)
            (ยง ass (:newval this) ___newval)
            this
        )
    )
)

(class-ns LockingTransaction
    (def #_"int" LockingTransaction'RETRY_LIMIT 10000)
    (def #_"int" LockingTransaction'LOCK_WAIT_MSECS 100)
    (def #_"long" LockingTransaction'BARGE_WAIT_NANOS (* 10 1000000))

    (def #_"int" LockingTransaction'RUNNING 0)
    (def #_"int" LockingTransaction'COMMITTING 1)
    (def #_"int" LockingTransaction'RETRY 2)
    (def #_"int" LockingTransaction'KILLED 3)
    (def #_"int" LockingTransaction'COMMITTED 4)

    (def #_"ThreadLocal<LockingTransaction>" LockingTransaction'transaction (ThreadLocal.))

    ;; total order on transactions
    ;; transactions will consume a point for init, for each retry, and on commit if writing
    (def- #_"AtomicLong" LockingTransaction'lastPoint (AtomicLong.))

    (defn- #_"LockingTransaction" LockingTransaction'init []
        (hash-map
            #_"LockingTransactionInfo" :info nil
            #_"long" :readPoint 0
            #_"long" :startPoint 0
            #_"long" :startTime 0

            #_"RetryEx" :retryex (RetryEx'new)
            #_"ArrayList<AgentAction>" :actions (ArrayList.)
            #_"HashMap<Ref, Object>" :vals (HashMap.)
            #_"HashSet<Ref>" :sets (HashSet.)
            #_"TreeMap<Ref, ArrayList<CFn>>" :commutes (TreeMap.)

            #_"HashSet<Ref>" :ensures (HashSet.) ;; all hold readLock
        )
    )

    (defn #_"LockingTransaction" LockingTransaction'new []
        (LockingTransaction'init)
    )

    #_method
    (ยง defn #_"void" (ยง method getReadPoint) [#_"LockingTransaction" this]
        (ยง ass (:readPoint this) (.incrementAndGet lastPoint))
        nil
    )

    #_method
    (ยง defn #_"long" (ยง method getCommitPoint) [#_"LockingTransaction" this]
        (.incrementAndGet lastPoint)
    )

    #_method
    (ยง defn #_"void" (ยง method stop) [#_"LockingTransaction" this, #_"int" ___status]
        (when (some? (:info this))
            (ยง sync (:info this)
                (.set (:status (:info this)), ___status)
                (.countDown (:latch (:info this)))
            )
            (ยง ass (:info this) nil)
            (.clear (:vals this))
            (.clear (:sets this))
            (.clear (:commutes this))
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method tryWriteLock) [#_"LockingTransaction" this, #_"Ref" ___ref]
        (try
            (when (not (ร (:lock ___ref).writeLock().tryLock(LockingTransaction'LOCK_WAIT_MSECS, TimeUnit/MILLISECONDS)))
                (throw (:retryex this))
            )
            (catch InterruptedException ___e
                (throw (:retryex this))
            )
        )
        nil
    )

    ;; returns the most recent val
    #_method
    (ยง defn #_"Object" (ยง method lock) [#_"LockingTransaction" this, #_"Ref" ___ref]
        ;; can't upgrade readLock, so release it
        (.releaseIfEnsured this, ___ref)

        (let [#_"boolean" ___unlocked true]
            (try
                (.tryWriteLock this, ___ref)
                (ยง ass ___unlocked false)

                (when (and (some? (:tvals ___ref)) (< (:readPoint this) (:point (:tvals ___ref))))
                    (throw (:retryex this))
                )
                (let [#_"LockingTransactionInfo" ___refinfo (:tinfo ___ref)]
                    ;; write lock conflict
                    (when (and (some? ___refinfo) (ร ___refinfo != (:info this)) (.running ___refinfo))
                        (when (not (.barge this, ___refinfo))
                            (ร (:lock ___ref).writeLock().unlock())
                            (ยง ass ___unlocked true)
                            (ยง return (.blockAndBail this, ___refinfo))
                        )
                    )
                    (ยง ass (:tinfo ___ref) (:info this))
                    (when (some? (:tvals ___ref)) (:val (:tvals ___ref)))
                )
                (finally
                    (when (not ___unlocked)
                        (ร (:lock ___ref).writeLock().unlock())
                    )
                )
            )
        )
    )

    #_method
    (ยง defn- #_"Object" (ยง method blockAndBail) [#_"LockingTransaction" this, #_"LockingTransactionInfo" ___refinfo]
        ;; stop prior to blocking
        (.stop this, LockingTransaction'RETRY)
        (try
            (.await (:latch ___refinfo), LockingTransaction'LOCK_WAIT_MSECS, TimeUnit/MILLISECONDS)
            (catch InterruptedException ___e
                ;; ignore
            )
        )
        (throw (:retryex this))
    )

    #_method
    (ยง defn- #_"void" (ยง method releaseIfEnsured) [#_"LockingTransaction" this, #_"Ref" ___ref]
        (when (.contains (:ensures this), ___ref)
            (.remove (:ensures this), ___ref)
            (ร (:lock ___ref).readLock().unlock())
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method abort) [#_"LockingTransaction" this] #_(ยง throws AbortException)
        (.stop this, LockingTransaction'KILLED)
        (throw (AbortException'new))
    )

    #_method
    (ยง defn- #_"boolean" (ยง method bargeTimeElapsed) [#_"LockingTransaction" this]
        (ร (System/nanoTime() - (:startTime this) > LockingTransaction'BARGE_WAIT_NANOS))
    )

    #_method
    (ยง defn- #_"boolean" (ยง method barge) [#_"LockingTransaction" this, #_"LockingTransactionInfo" ___refinfo]
        (let [#_"boolean" ___barged false]
            ;; if this transaction is older, try to abort the other
            (when (and (.bargeTimeElapsed this) (< (:startPoint this) (:startPoint ___refinfo)))
                (ยง ass ___barged (.compareAndSet (:status ___refinfo), LockingTransaction'RUNNING, LockingTransaction'KILLED))
                (when ___barged
                    (.countDown (:latch ___refinfo))
                )
            )
            ___barged
        )
    )

    (defn #_"LockingTransaction" LockingTransaction'getEx []
        (let [#_"LockingTransaction" ___t (.get LockingTransaction'transaction)]
            (when (or (nil? ___t) (nil? (:info ___t)))
                (throw (IllegalStateException. "No transaction running"))
            )
            ___t
        )
    )

    (defn #_"boolean" LockingTransaction'isRunning []
        (some? (LockingTransaction'getRunning))
    )

    (defn #_"LockingTransaction" LockingTransaction'getRunning []
        (let [#_"LockingTransaction" ___t (.get LockingTransaction'transaction)]
            (when (or (nil? ___t) (nil? (:info ___t)))
                (ยง return nil)
            )
            ___t
        )
    )

    (defn #_"Object" LockingTransaction'runInTransaction [#_"Callable" ___fn] #_(ยง throws Exception)
        (let [#_"LockingTransaction" ___t (.get LockingTransaction'transaction)]
            (ยง let [#_"Object" ___ret]
                (if (nil? ___t)
                    (do
                        (ร LockingTransaction'transaction.set(ยง ass ___t (LockingTransaction'new)))
                        (try
                            (ยง ass ___ret (.run ___t, ___fn))
                            (finally
                                (.remove LockingTransaction'transaction)
                            )
                        )
                    )
                    (do
                        (if (ร (some? (:info ___t)))
                            (do
                                (ยง ass ___ret (.call ___fn))
                            )
                            (do
                                (ยง ass ___ret (.run ___t, ___fn))
                            )
                        )
                    )
                )

                ___ret
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method run) [#_"LockingTransaction" this, #_"Callable" ___fn] #_(ยง throws Exception)
        (let [#_"boolean" ___done false]
            (let [#_"Object" ___ret nil]
                (let [#_"ArrayList<Ref>" ___locked (ArrayList.)]
                    (let [#_"ArrayList<Notify>" ___notify (ArrayList.)]
                        (loop-when-recur [#_"int" ___i 0] (and (not ___done) (< ___i LockingTransaction'RETRY_LIMIT)) [(inc ___i)]
                            (try
                                (.getReadPoint this)
                                (when (zero? ___i)
                                    (ยง ass (:startPoint this) (:readPoint this))
                                    (ยง ass (:startTime this) (System/nanoTime))
                                )
                                (ยง ass (:info this) (LockingTransactionInfo'new LockingTransaction'RUNNING, (:startPoint this)))
                                (ยง ass ___ret (.call ___fn))
                                ;; make sure no one has killed us before this point, and can't from now on
                                (when (ร (:status (:info this)).compareAndSet(LockingTransaction'RUNNING, LockingTransaction'COMMITTING))
                                    (doseq [#_"Map$Entry<Ref, ArrayList<CFn>>" ___e (.entrySet (:commutes this))]
                                        (let [#_"Ref" ___ref (.getKey ___e)]
                                            (when (.contains (:sets this), ___ref)
                                                (ยง continue )
                                            )

                                            (let [#_"boolean" ___wasEnsured (.contains (:ensures this), ___ref)]
                                                ;; can't upgrade readLock, so release it
                                                (.releaseIfEnsured this, ___ref)
                                                (.tryWriteLock this, ___ref)
                                                (.add ___locked, ___ref)
                                                (when (and ___wasEnsured (some? (:tvals ___ref)) (< (:readPoint this) (:point (:tvals ___ref))))
                                                    (throw (:retryex this))
                                                )

                                                (let [#_"LockingTransactionInfo" ___refinfo (:tinfo ___ref)]
                                                    (when (and (some? ___refinfo) (ร ___refinfo != (:info this)) (.running ___refinfo))
                                                        (when (not (.barge this, ___refinfo))
                                                            (throw (:retryex this))
                                                        )
                                                    )
                                                    (let [#_"Object" ___val (when (some? (:tvals ___ref)) (:val (:tvals ___ref)))]
                                                        (.put (:vals this), ___ref, ___val)
                                                        (doseq [#_"CFn" ___f (.getValue ___e)]
                                                            (ร (:vals this).put(___ref, (:fn ___f).applyTo(RT'cons((:vals this).get(___ref), (:args ___f)))))
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                    (doseq [#_"Ref" ___ref (:sets this)]
                                        (.tryWriteLock this, ___ref)
                                        (.add ___locked, ___ref)
                                    )

                                    ;; validate and enqueue notifications
                                    (doseq [#_"Map$Entry<Ref, Object>" ___e (.entrySet (:vals this))]
                                        (let [#_"Ref" ___ref (.getKey ___e)]
                                            (ร ___ref.validate((.getValidator ___ref), (.getValue ___e)))
                                        )
                                    )

                                    ;; at this point, all values calced, all refs to be written locked
                                    ;; no more client code to be called
                                    (let [#_"long" ___commitPoint (.getCommitPoint this)]
                                        (doseq [#_"Map$Entry<Ref, Object>" ___e (.entrySet (:vals this))]
                                            (let [#_"Ref" ___ref (.getKey ___e)]
                                                (let [#_"Object" ___oldval (when (some? (:tvals ___ref)) (:val (:tvals ___ref)))]
                                                    (let [#_"Object" ___newval (.getValue ___e)]
                                                        (let [#_"int" ___hcount (.histCount ___ref)]
                                                            (cond (ร (nil? (:tvals ___ref)))
                                                                (do
                                                                    (ยง ass (:tvals ___ref) (RefTVal'new-2 ___newval, ___commitPoint))
                                                                )
                                                                (or (and (pos? (.get (:faults ___ref))) (< ___hcount (:maxHistory ___ref))) (< ___hcount (:minHistory ___ref)))
                                                                (do
                                                                    (ยง ass (:tvals ___ref) (ร RefTVal'new-3(___newval, ___commitPoint, (:tvals ___ref))))
                                                                    (.set (:faults ___ref), 0)
                                                                )
                                                                :else
                                                                (do
                                                                    (ยง ass (:tvals ___ref) (:next (:tvals ___ref)))
                                                                    (ยง ass (:val (:tvals ___ref)) ___newval)
                                                                    (ยง ass (:point (:tvals ___ref)) ___commitPoint)
                                                                )
                                                            )
                                                            (when (pos? (.count (.getWatches ___ref)))
                                                                (ร ___notify.add(Notify'new(___ref, ___oldval, ___newval)))
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )

                                        (ยง ass ___done true)
                                        (.set (:status (:info this)), LockingTransaction'COMMITTED)
                                    )
                                )
                                (ยง catch RetryEx ___retry
                                    ;; eat this so we retry rather than fall out
                                )
                                (finally
                                    (loop-when-recur [#_"int" ___k (ร (.size ___locked) - 1)] (>= ___k 0) [(dec ___k)]
                                        (ร (:lock (.get ___locked, ___k)).writeLock().unlock())
                                    )
                                    (.clear ___locked)
                                    (doseq [#_"Ref" ___r (:ensures this)]
                                        (ร (:lock ___r).readLock().unlock())
                                    )
                                    (.clear (:ensures this))
                                    (.stop this, (if ___done LockingTransaction'COMMITTED LockingTransaction'RETRY))
                                    (try
                                        (when ___done ;; re-dispatch out of transaction
                                            (doseq [#_"Notify" ___n ___notify]
                                                (ร (:ref ___n).notifyWatches((:oldval ___n), (:newval ___n)))
                                            )
                                            (doseq [#_"AgentAction" ___action (:actions this)]
                                                (Agent'dispatchAction ___action)
                                            )
                                        )
                                        (finally
                                            (.clear ___notify)
                                            (.clear (:actions this))
                                        )
                                    )
                                )
                            )
                        )
                        (when (not ___done)
                            (throw (Util'runtimeException-1 "Transaction failed after reaching retry limit"))
                        )
                        ___ret
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method enqueue) [#_"LockingTransaction" this, #_"AgentAction" ___action]
        (.add (:actions this), ___action)
        nil
    )

    #_method
    (ยง defn #_"Object" (ยง method doGet) [#_"LockingTransaction" this, #_"Ref" ___ref]
        (when (not (.running (:info this)))
            (throw (:retryex this))
        )
        (when (.containsKey (:vals this), ___ref)
            (ยง return (.get (:vals this), ___ref))
        )
        (try
            (ร (:lock ___ref).readLock().lock())
            (when (ร (nil? (:tvals ___ref)))
                (throw (IllegalStateException. (str (.toString ___ref) " is unbound.")))
            )
            (let [#_"RefTVal" ___ver (:tvals ___ref)]
                (ยง loop
                    (when (ร (:point ___ver) <= (:readPoint this))
                        (ยง return (:val ___ver))
                    )
                    (ยง recur-if ((ยง ass ___ver (:prior ___ver)) != (:tvals ___ref)))
                )
            )
            (finally
                (ร (:lock ___ref).readLock().unlock())
            )
        )
        ;; no version of val precedes the read point
        (.incrementAndGet (:faults ___ref))
        (throw (:retryex this))
    )

    #_method
    (ยง defn #_"Object" (ยง method doSet) [#_"LockingTransaction" this, #_"Ref" ___ref, #_"Object" ___val]
        (when (not (.running (:info this)))
            (throw (:retryex this))
        )
        (when (.containsKey (:commutes this), ___ref)
            (throw (IllegalStateException. "Can't set after commute"))
        )
        (when (not (.contains (:sets this), ___ref))
            (.add (:sets this), ___ref)
            (.lock this, ___ref)
        )
        (.put (:vals this), ___ref, ___val)
        ___val
    )

    #_method
    (ยง defn #_"void" (ยง method doEnsure) [#_"LockingTransaction" this, #_"Ref" ___ref]
        (when (not (.running (:info this)))
            (throw (:retryex this))
        )
        (when (.contains (:ensures this), ___ref)
            (ยง return nil)
        )
        (ร (:lock ___ref).readLock().lock())

        ;; someone completed a write after our snapshot
        (when (and (some? (:tvals ___ref)) (< (:readPoint this) (:point (:tvals ___ref))))
            (ร (:lock ___ref).readLock().unlock())
            (throw (:retryex this))
        )

        (let [#_"LockingTransactionInfo" ___refinfo (:tinfo ___ref)]
            ;; writer exists
            (if (and (some? ___refinfo) (.running ___refinfo))
                (do
                    (ร (:lock ___ref).readLock().unlock())

                    (when (ร ___refinfo != (:info this)) ;; not us, ensure is doomed
                        (.blockAndBail this, ___refinfo)
                    )
                )
                (do
                    (.add (:ensures this), ___ref)
                )
            )
            nil
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method doCommute) [#_"LockingTransaction" this, #_"Ref" ___ref, #_"IFn" ___fn, #_"ISeq" ___args]
        (when (not (.running (:info this)))
            (throw (:retryex this))
        )
        (when (not (.containsKey (:vals this), ___ref))
            (let [#_"Object" ___val nil]
                (try
                    (ร (:lock ___ref).readLock().lock())
                    (ยง ass ___val (when (some? (:tvals ___ref)) (:val (:tvals ___ref))))
                    (finally
                        (ร (:lock ___ref).readLock().unlock())
                    )
                )
                (.put (:vals this), ___ref, ___val)
            )
        )
        (let [#_"ArrayList<CFn>" ___fns (.get (:commutes this), ___ref)]
            (when (nil? ___fns)
                (ร (:commutes this).put(___ref, (ยง ass ___fns (ArrayList.))))
            )
            (ร ___fns.add(CFn'new(___fn, ___args)))
            (let [#_"Object" ___ret (ร ___fn.applyTo(RT'cons((:vals this).get(___ref), ___args)))]
                (.put (:vals this), ___ref, ___ret)
                ___ret
            )
        )
    )
)
)

(java-ns cloiure.lang.LongRange

(ยง import java.util.Iterator)
(ยง import java.util.NoSuchElementException)

#_private
(ยง defprotocol LongRangeBoundsCheck
    #_abstract
    (#_"boolean" LongRangeBoundsCheck'''(ยง method exceededBounds) [#_"LongRangeBoundsCheck" this, #_"long" ___val])
)

#_non-static
(class-ns LongRangeIterator (ยง implements Iterator)
    (defn- #_"LongRangeIterator" LongRangeIterator'init []
        (hash-map
            #_"long" :next 0
            #_"boolean" :hasNext false
        )
    )

    (defn #_"LongRangeIterator" LongRangeIterator'new []
        (let [this (LongRangeIterator'init)]
            (ยง ass (:next this) (:start this))
            (ยง ass (:hasNext this) true)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"LongRangeIterator" this]
        (:hasNext this)
    )

    #_method
    (ยง defn #_"Object" (ยง method next) [#_"LongRangeIterator" this]
        (if (:hasNext this)
            (do
                (let [#_"long" ___ret (:next this)]
                    (try
                        (ยง ass (:next this) (Numbers'add-2ll (:next this), (:step this)))
                        (ยง ass (:hasNext this) (not (.exceededBounds (:boundsCheck this), (:next this))))
                        (catch ArithmeticException ___e
                            (ยง ass (:hasNext this) false)
                        )
                    )
                    ___ret
                )
            )
            (do
                (throw (NoSuchElementException.))
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"LongRangeIterator" this]
        (throw (UnsupportedOperationException.))
    )
)

#_private
(class-ns LongChunk (ยง implements IChunk)
    (defn- #_"LongChunk" LongChunk'init []
        (hash-map
            #_"long" :start 0
            #_"long" :step 0
            #_"int" :count 0
        )
    )

    (defn #_"LongChunk" LongChunk'new [#_"long" ___start, #_"long" ___step, #_"int" ___count]
        (let [this (LongChunk'init)]
            (ยง ass (:start this) ___start)
            (ยง ass (:step this) ___step)
            (ยง ass (:count this) ___count)
            this
        )
    )

    #_method
    (ยง defn #_"long" (ยง method first) [#_"LongChunk" this]
        (:start this)
    )

    #_method
    (ยง defn #_"Object" (ยง method nth) [#_"LongChunk" this, #_"int" ___i]
        (+ (:start this) (* ___i (:step this)))
    )

    #_method
    (ยง defn #_"Object" (ยง method nth) [#_"LongChunk" this, #_"int" ___i, #_"Object" ___notFound]
        (when (and (<= 0 ___i) (< ___i (:count this)))
            (ยง return (+ (:start this) (* ___i (:step this))))
        )
        ___notFound
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"LongChunk" this]
        (:count this)
    )

    #_method
    (ยง defn #_"LongChunk" (ยง method dropFirst) [#_"LongChunk" this]
        (when (ร (:count this) <= 1)
            (throw (IllegalStateException. "dropFirst of empty chunk"))
        )
        (ร LongChunk'new((:start this) + (:step this), (:step this), (:count this) - 1))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"LongChunk" this, #_"IFn" ___f, #_"Object" ___init]
        (let [#_"long" ___x (:start this)]
            (let [#_"Object" ___ret ___init]
                (loop-when-recur [#_"int" ___i 0] (< ___i (:count this)) [(inc ___i)]
                    (ยง ass ___ret (.invoke ___f, ___ret, ___x))
                    (when (RT'isReduced ___ret)
                        (ยง return ___ret)
                    )
                    (ยง ass ___x (+ ___x (:step this)))
                )
                ___ret
            )
        )
    )
)

;;;
 ; Implements the special common case of a finite range based on long start, end, and step.
 ;;
(class-ns LongRange (ยง extends ASeq) (ยง implements Counted, IChunkedSeq, IReduce)
    (def- #_"int" LongRange'CHUNK_SIZE 32)

    (defn- #_"LongRangeBoundsCheck" LongRange'positiveStep [#_"long" ___end]
        (ยง reify LongRangeBoundsCheck()
            #_method
            (ยง defn #_"boolean" (ยง method exceededBounds) [#_"LongRangeBoundsCheck" this, #_"long" ___val]
                (>= ___val ___end)
            )
        )
    )

    (defn- #_"LongRangeBoundsCheck" LongRange'negativeStep [#_"long" ___end]
        (ยง reify LongRangeBoundsCheck()
            #_method
            (ยง defn #_"boolean" (ยง method exceededBounds) [#_"LongRangeBoundsCheck" this, #_"long" ___val]
                (<= ___val ___end)
            )
        )
    )

    (defn- #_"LongRange" LongRange'init []
        (hash-map
            ;; Invariants guarantee this is never an empty or infinite seq
            #_"long" :start 0
            #_"long" :end 0
            #_"long" :step 0
            #_"LongRangeBoundsCheck" :boundsCheck nil

            #_volatile
            #_"LongChunk" :_chunk nil ;; lazy
            #_volatile
            #_"ISeq" :_chunkNext nil ;; lazy
            #_volatile
            #_"ISeq" :_next nil ;; cached
        )
    )

    (defn- #_"LongRange" LongRange'new-4 [#_"long" ___start, #_"long" ___end, #_"long" ___step, #_"LongRangeBoundsCheck" ___boundsCheck]
        (let [this (merge (ASeq'new) (LongRange'init))]
            (ยง ass (:start this) ___start)
            (ยง ass (:end this) ___end)
            (ยง ass (:step this) ___step)
            (ยง ass (:boundsCheck this) ___boundsCheck)
            this
        )
    )

    (defn- #_"LongRange" LongRange'new-6 [#_"long" ___start, #_"long" ___end, #_"long" ___step, #_"LongRangeBoundsCheck" ___boundsCheck, #_"LongChunk" ___chunk, #_"ISeq" ___chunkNext]
        (let [this (merge (ASeq'new) (LongRange'init))]
            (ยง ass (:start this) ___start)
            (ยง ass (:end this) ___end)
            (ยง ass (:step this) ___step)
            (ยง ass (:boundsCheck this) ___boundsCheck)
            (ยง ass (:_chunk this) ___chunk)
            (ยง ass (:_chunkNext this) ___chunkNext)
            this
        )
    )

    (defn- #_"LongRange" LongRange'new-7 [#_"IPersistentMap" ___meta, #_"long" ___start, #_"long" ___end, #_"long" ___step, #_"LongRangeBoundsCheck" ___boundsCheck, #_"LongChunk" ___chunk, #_"ISeq" ___chunkNext]
        (let [this (merge (ASeq'new ___meta) (LongRange'init))]
            (ยง ass (:start this) ___start)
            (ยง ass (:end this) ___end)
            (ยง ass (:step this) ___step)
            (ยง ass (:boundsCheck this) ___boundsCheck)
            (ยง ass (:_chunk this) ___chunk)
            (ยง ass (:_chunkNext this) ___chunkNext)
            this
        )
    )

    (defn #_"ISeq" LongRange'create-1 [#_"long" ___end]
        (when (> ___end 0)
            (ยง return (ร LongRange'new-4(0, ___end, 1, LongRange'positiveStep(___end))))
        )
        PersistentList'EMPTY
    )

    (defn #_"ISeq" LongRange'create-2 [#_"long" ___start, #_"long" ___end]
        (when (>= ___start ___end)
            (ยง return PersistentList'EMPTY)
        )
        (ร LongRange'new-4(___start, ___end, 1, LongRange'positiveStep(___end)))
    )

    (defn #_"ISeq" LongRange'create-3 [#_"long" ___start, #_"long" ___end, #_"long" ___step]
        (cond (> ___step 0)
            (do
                (when (<= ___end ___start)
                    (ยง return PersistentList'EMPTY)
                )
                (ร LongRange'new-4(___start, ___end, ___step, LongRange'positiveStep(___end)))
            )
            (< ___step 0)
            (do
                (when (>= ___end ___start)
                    (ยง return PersistentList'EMPTY)
                )
                (ร LongRange'new-4(___start, ___end, ___step, LongRange'negativeStep(___end)))
            )
            :else
            (do
                (when (= ___end ___start)
                    (ยง return PersistentList'EMPTY)
                )
                (Repeat'create-1 ___start)
            )
        )
    )

    #_method
    (ยง defn #_"Obj" (ยง method withMeta) [#_"LongRange" this, #_"IPersistentMap" ___meta]
        (when (ร ___meta == (:_meta this))
            (ยง return this)
        )
        (LongRange'new-7 ___meta, (:start this), (:end this), (:step this), (:boundsCheck this), (:_chunk this), (:_chunkNext this))
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"LongRange" this]
        (:start this)
    )

    #_method
    (ยง defn #_"void" (ยง method forceChunk) [#_"LongRange" this]
        (when (some? (:_chunk this))
            (ยง return nil)
        )

        (ยง let [#_"long" ___count]
            (try
                (ยง ass ___count (.rangeCount this, (:start this), (:end this), (:step this)))
                (catch ArithmeticException ___e
                    ;; size of total range is > Long.MAX_VALUE so must step to count
                    ;; this only happens in pathological range cases like:
                    ;; (range -9223372036854775808 9223372036854775807 9223372036854775807)
                    (ยง ass ___count (.steppingCount this, (:start this), (:end this), (:step this)))
                )
            )

            (cond (> ___count LongRange'CHUNK_SIZE) ;; not last chunk
                (do
                    (let [#_"long" ___nextStart (ร (:start this) + ((:step this) * LongRange'CHUNK_SIZE))] ;; cannot overflow, must be < end
                        (ยง ass (:_chunkNext this) (LongRange'new-4 ___nextStart, (:end this), (:step this), (:boundsCheck this)))
                        (ยง ass (:_chunk this) (LongChunk'new (:start this), (:step this), LongRange'CHUNK_SIZE))
                    )
                )
                :else ;; last chunk
                (do
                    (ยง ass (:_chunk this) (ร LongChunk'new((:start this), (:step this), (int) ___count))) ;; count must be <= CHUNK_SIZE
                )
            )
            nil
        )
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"LongRange" this]
        (when (some? (:_next this))
            (ยง return (:_next this))
        )

        (.forceChunk this)
        (when (ร (:_chunk this).count() > 1)
            (let [#_"LongChunk" ___smallerChunk (.dropFirst (:_chunk this))]
                (ยง ass (:_next this) (ร LongRange'new-6((first ___smallerChunk), (:end this), (:step this), (:boundsCheck this), ___smallerChunk, (:_chunkNext this))))
                (ยง return (:_next this))
            )
        )
        (.chunkedNext this)
    )

    #_method
    (ยง defn #_"IChunk" (ยง method chunkedFirst) [#_"LongRange" this]
        (.forceChunk this)
        (:_chunk this)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method chunkedNext) [#_"LongRange" this]
        (.seq (.chunkedMore this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method chunkedMore) [#_"LongRange" this]
        (.forceChunk this)
        (when (nil? (:_chunkNext this))
            (ยง return PersistentList'EMPTY)
        )
        (:_chunkNext this)
    )

    ;; fallback count mechanism for pathological cases
    ;; returns either exact count or CHUNK_SIZE+1
    #_method
    (ยง defn #_"long" (ยง method steppingCount) [#_"LongRange" this, #_"long" ___start, #_"long" ___end, #_"long" ___step]
        (let [#_"long" ___count 1]
            (let [#_"long" ___s ___start]
                (while (<= ___count LongRange'CHUNK_SIZE)
                    (try
                        (ยง ass ___s (Numbers'add-2ll ___s, ___step))
                        (if (.exceededBounds (:boundsCheck this), ___s)
                            (do
                                (ยง break )
                            )
                            (do
                                (ยง ass ___count (inc ___count))
                            )
                        )
                        (catch ArithmeticException ___e
                            (ยง break )
                        )
                    )
                )
                ___count
            )
        )
    )

    ;; returns exact size of remaining items OR throws ArithmeticException for overflow case
    #_method
    (ยง defn #_"long" (ยง method rangeCount) [#_"LongRange" this, #_"long" ___start, #_"long" ___end, #_"long" ___step]
        ;; (1) count = ceiling ((end - start) / step)
        ;; (2) ceiling(a/b) = (a+b+o)/b where o=-1 for positive stepping and +1 for negative stepping
        ;; thus: count = end - start + step + o / step
        (/ (Numbers'add-2ll (Numbers'add-2ll (Numbers'minus-2ll ___end, ___start), ___step), (if (pos? (:step this)) -1 1)) ___step)
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"LongRange" this]
        (try
            (let [#_"long" ___c (.rangeCount this, (:start this), (:end this), (:step this))]
                (if (> ___c Integer/MAX_VALUE)
                    (do
                        (Numbers'throwIntOverflow)
                    )
                    (do
                        (ร (int) ___c)
                    )
                )
            )
            (catch ArithmeticException ___e
                ;; rare case from large range or step, fall back to iterating and counting
                (let [#_"Iterator" ___iter (.iterator this)]
                    (let [#_"long" ___count 0]
                        (while (.hasNext ___iter)
                            (next ___iter)
                            (ยง ass ___count (inc ___count))
                        )

                        (if (> ___count Integer/MAX_VALUE)
                            (do
                                (Numbers'throwIntOverflow)
                            )
                            (do
                                (ร (int)___count)
                            )
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"LongRange" this, #_"IFn" ___f]
        (let [#_"Object" ___acc (:start this)]
            (let [#_"long" ___i (+ (:start this) (:step this))]
                (while (not (.exceededBounds (:boundsCheck this), ___i))
                    (ยง ass ___acc (.invoke ___f, ___acc, ___i))
                    (when (ยง instance? Reduced ___acc)
                        (ยง return (.deref (cast' Reduced ___acc)))
                    )
                    (ยง ass ___i (+ ___i (:step this)))
                )
                ___acc
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"LongRange" this, #_"IFn" ___f, #_"Object" ___val]
        (let [#_"Object" ___acc ___val]
            (let [#_"long" ___i (:start this)]
                (ยง loop
                    (ยง ass ___acc (.invoke ___f, ___acc, ___i))
                    (when (RT'isReduced ___acc)
                        (ยง return (.deref (cast' Reduced ___acc)))
                    )
                    (ยง ass ___i (+ ___i (:step this)))
                    (ยง recur-if (not (.exceededBounds (:boundsCheck this), ___i)))
                )
                ___acc
            )
        )
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"LongRange" this]
        (LongRangeIterator'new)
    )
)
)

(java-ns cloiure.lang.MapEntry

(ยง import java.util.Iterator)

(class-ns MapEntry (ยง extends AMapEntry)
    (defn #_"MapEntry" MapEntry'create [#_"Object" ___key, #_"Object" ___val]
        (MapEntry'new ___key, ___val)
    )

    (defn- #_"MapEntry" MapEntry'init []
        (hash-map
            #_"Object" :_key nil
            #_"Object" :_val nil
        )
    )

    (defn #_"MapEntry" MapEntry'new [#_"Object" ___key, #_"Object" ___val]
        (let [this (merge (AMapEntry'new) (MapEntry'init))]
            (ยง ass (:_key this) ___key)
            (ยง ass (:_val this) ___val)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method key) [#_"MapEntry" this]
        (:_key this)
    )

    #_method
    (ยง defn #_"Object" (ยง method val) [#_"MapEntry" this]
        (:_val this)
    )

    #_method
    (ยง defn #_"Object" (ยง method getKey) [#_"MapEntry" this]
        (.key this)
    )

    #_method
    (ยง defn #_"Object" (ยง method getValue) [#_"MapEntry" this]
        (.val this)
    )
)
)

(java-ns cloiure.lang.MapEquivalence

;; marker interface
(ยง defprotocol MapEquivalence
)
)

(java-ns cloiure.lang.MethodImplCache

(ยง import java.util.Map)

(class-ns Entry
    (defn- #_"Entry" Entry'init []
        (hash-map
            #_"Class" :c nil
            #_"IFn" :fn nil
        )
    )

    (defn #_"Entry" Entry'new [#_"Class" ___c, #_"IFn" ___fn]
        (let [this (Entry'init)]
            (ยง ass (:c this) ___c)
            (ยง ass (:fn this) ___fn)
            this
        )
    )
)

(class-ns MethodImplCache
    (defn- #_"MethodImplCache" MethodImplCache'init []
        (hash-map
            #_"IPersistentMap" :protocol nil
            #_"Keyword" :methodk nil
            #_"int" :shift 0
            #_"int" :mask 0
            #_"Object[]" :table nil ;; [class, entry. class, entry ...]
            #_"Map" :map nil

            #_"Entry" :mre nil
        )
    )

    (defn #_"MethodImplCache" MethodImplCache'new-2 [#_"IPersistentMap" ___protocol, #_"Keyword" ___methodk]
        (MethodImplCache'new-5 ___protocol, ___methodk, 0, 0, RT'EMPTY_ARRAY)
    )

    (defn #_"MethodImplCache" MethodImplCache'new-5 [#_"IPersistentMap" ___protocol, #_"Keyword" ___methodk, #_"int" ___shift, #_"int" ___mask, #_"Object[]" ___table]
        (let [this (MethodImplCache'init)]
            (ยง ass (:protocol this) ___protocol)
            (ยง ass (:methodk this) ___methodk)
            (ยง ass (:shift this) ___shift)
            (ยง ass (:mask this) ___mask)
            (ยง ass (:table this) ___table)
            (ยง ass (:map this) nil)
            this
        )
    )

    (defn #_"MethodImplCache" MethodImplCache'new-3 [#_"IPersistentMap" ___protocol, #_"Keyword" ___methodk, #_"Map" ___map]
        (let [this (MethodImplCache'init)]
            (ยง ass (:protocol this) ___protocol)
            (ยง ass (:methodk this) ___methodk)
            (ยง ass (:shift this) 0)
            (ยง ass (:mask this) 0)
            (ยง ass (:table this) nil)
            (ยง ass (:map this) ___map)
            this
        )
    )

    #_method
    (ยง defn #_"IFn" (ยง method fnFor) [#_"MethodImplCache" this, #_"Class" ___c]
        (let [#_"Entry" ___last (:mre this)]
            (when (and (some? ___last) (ร (:c ___last) == ___c))
                (ยง return (:fn ___last))
            )
            (.findFnFor this, ___c)
        )
    )

    #_method
    (ยง defn #_"IFn" (ยง method findFnFor) [#_"MethodImplCache" this, #_"Class" ___c]
        (if (some? (:map this))
            (do
                (let [#_"Entry" ___e (cast' Entry (.get (:map this), ___c))]
                    (ยง ass (:mre this) ___e)
                    (when (some? ___e) (:fn ___e))
                )
            )
            (do
                (let [#_"int" ___idx (ร ((Util'hash(___c) >> (:shift this)) & (:mask this)) << 1)]
                    (when (and (< ___idx (ยง alength (:table this))) (ร (ยง aget (:table this) ___idx) == ___c))
                        (let [#_"Entry" ___e (ร (cast' Entry (ยง aget (:table this) (ร ___idx + 1))))]
                            (ยง ass (:mre this) ___e)
                            (ยง return (when (some? ___e) (:fn ___e)))
                        )
                    )
                    nil
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.MultiFn

(ยง import java.util.Map)
(ยง import java.util.concurrent.locks.ReentrantReadWriteLock)

(class-ns MultiFn (ยง extends AFn)
    (ยง def #_"Var" MultiFn'assoc (RT'var-2 "cloiure.core", "assoc"))
    (ยง def #_"Var" MultiFn'dissoc (RT'var-2 "cloiure.core", "dissoc"))
    (ยง def #_"Var" MultiFn'isa (RT'var-2 "cloiure.core", "isa?"))
    (ยง def #_"Var" MultiFn'parents (RT'var-2 "cloiure.core", "parents"))

    (defn- #_"MultiFn" MultiFn'init []
        (hash-map
            #_"IFn" :dispatchFn nil
            #_"Object" :defaultDispatchVal nil
            #_"IRef" :hierarchy nil
            #_"String" :name nil
            #_"ReentrantReadWriteLock" :rw nil

            #_volatile
            #_"IPersistentMap" :methodTable nil
            #_volatile
            #_"IPersistentMap" :preferTable nil
            #_volatile
            #_"IPersistentMap" :methodCache nil
            #_volatile
            #_"Object" :cachedHierarchy nil
        )
    )

    (defn #_"MultiFn" MultiFn'new [#_"String" ___name, #_"IFn" ___dispatchFn, #_"Object" ___defaultDispatchVal, #_"IRef" ___hierarchy]
        (let [this (merge (AFn'new) (MultiFn'init))]
            (ยง ass (:rw this) (ReentrantReadWriteLock.))
            (ยง ass (:name this) ___name)
            (ยง ass (:dispatchFn this) ___dispatchFn)
            (ยง ass (:defaultDispatchVal this) ___defaultDispatchVal)
            (ยง ass (:methodTable this) PersistentHashMap'EMPTY)
            (ยง ass (:methodCache this) (.getMethodTable this))
            (ยง ass (:preferTable this) PersistentHashMap'EMPTY)
            (ยง ass (:hierarchy this) ___hierarchy)
            (ยง ass (:cachedHierarchy this) nil)
            this
        )
    )

    #_method
    (ยง defn #_"MultiFn" (ยง method reset) [#_"MultiFn" this]
        (ร (:rw this).writeLock().lock())
        (try
            (ยง ass (:methodTable this) (ยง ass (:methodCache this) (ยง ass (:preferTable this) PersistentHashMap'EMPTY)))
            (ยง ass (:cachedHierarchy this) nil)
            this
            (finally
                (ร (:rw this).writeLock().unlock())
            )
        )
    )

    #_method
    (ยง defn #_"MultiFn" (ยง method addMethod) [#_"MultiFn" this, #_"Object" ___dispatchVal, #_"IFn" ___method]
        (ร (:rw this).writeLock().lock())
        (try
            (ยง ass (:methodTable this) (ร (.getMethodTable this).assoc(___dispatchVal, ___method)))
            (.resetCache this)
            this
            (finally
                (ร (:rw this).writeLock().unlock())
            )
        )
    )

    #_method
    (ยง defn #_"MultiFn" (ยง method removeMethod) [#_"MultiFn" this, #_"Object" ___dispatchVal]
        (ร (:rw this).writeLock().lock())
        (try
            (ยง ass (:methodTable this) (ร (.getMethodTable this).without(___dispatchVal)))
            (.resetCache this)
            this
            (finally
                (ร (:rw this).writeLock().unlock())
            )
        )
    )

    #_method
    (ยง defn #_"MultiFn" (ยง method preferMethod) [#_"MultiFn" this, #_"Object" ___dispatchValX, #_"Object" ___dispatchValY]
        (ร (:rw this).writeLock().lock())
        (try
            (when (.prefers this, ___dispatchValY, ___dispatchValX)
                (throw (IllegalStateException. (String/format "Preference conflict in multimethod '%s': %s is already preferred to %s", (object-array [ (:name this), ___dispatchValY, ___dispatchValX ]))))
            )
            (ยง ass (:preferTable this) (ร (.getPreferTable this).assoc(___dispatchValX, RT'conj((cast' IPersistentCollection (ร RT'get-3((.getPreferTable this), ___dispatchValX, PersistentHashSet'EMPTY))), ___dispatchValY))))
            (.resetCache this)
            this
            (finally
                (ร (:rw this).writeLock().unlock())
            )
        )
    )

    #_method
    (ยง defn- #_"boolean" (ยง method prefers) [#_"MultiFn" this, #_"Object" ___x, #_"Object" ___y]
        (let [#_"IPersistentSet" ___xprefs (cast' IPersistentSet (ร (.getPreferTable this).valAt(___x)))]
            (when (and (some? ___xprefs) (.contains ___xprefs, ___y))
                (ยง return true)
            )
            (loop-when-recur [#_"ISeq" ___ps (ร RT'seq(MultiFn'parents.invoke(___y)))] (some? ___ps) [(next ___ps)]
                (when (ร this.prefers(___x, (first ___ps)))
                    (ยง return true)
                )
            )
            (loop-when-recur [#_"ISeq" ___ps (ร RT'seq(MultiFn'parents.invoke(___x)))] (some? ___ps) [(next ___ps)]
                (when (ร this.prefers((first ___ps), ___y))
                    (ยง return true)
                )
            )
            false
        )
    )

    #_method
    (ยง defn- #_"boolean" (ยง method isA) [#_"MultiFn" this, #_"Object" ___x, #_"Object" ___y]
        (ร RT'booleanCast-1o(isa.invoke((:hierarchy this).deref(), ___x, ___y)))
    )

    #_method
    (ยง defn- #_"boolean" (ยง method dominates) [#_"MultiFn" this, #_"Object" ___x, #_"Object" ___y]
        (or (.prefers this, ___x, ___y) (.isA this, ___x, ___y))
    )

    #_method
    (ยง defn- #_"IPersistentMap" (ยง method resetCache) [#_"MultiFn" this]
        (ร (:rw this).writeLock().lock())
        (try
            (ยง ass (:methodCache this) (.getMethodTable this))
            (ยง ass (:cachedHierarchy this) (.deref (:hierarchy this)))
            (:methodCache this)
            (finally
                (ร (:rw this).writeLock().unlock())
            )
        )
    )

    #_method
    (ยง defn #_"IFn" (ยง method getMethod) [#_"MultiFn" this, #_"Object" ___dispatchVal]
        (when (ร (:cachedHierarchy this) != (:hierarchy this).deref())
            (.resetCache this)
        )
        (let [#_"IFn" ___targetFn (cast' IFn (.valAt (:methodCache this), ___dispatchVal))]
            (when (some? ___targetFn)
                (ยง return ___targetFn)
            )
            (.findAndCacheBestMethod this, ___dispatchVal)
        )
    )

    #_method
    (ยง defn- #_"IFn" (ยง method getFn) [#_"MultiFn" this, #_"Object" ___dispatchVal]
        (let [#_"IFn" ___targetFn (.getMethod this, ___dispatchVal)]
            (when (nil? ___targetFn)
                (throw (IllegalArgumentException. (String/format "No method in multimethod '%s' for dispatch value: %s", (object-array [ (:name this), ___dispatchVal ]))))
            )
            ___targetFn
        )
    )

    #_method
    (ยง defn- #_"IFn" (ยง method findAndCacheBestMethod) [#_"MultiFn" this, #_"Object" ___dispatchVal]
        (ร (:rw this).readLock().lock())
        (ยง let [#_"Object" ___bestValue]
            (let [#_"IPersistentMap" ___mt (:methodTable this)]
                (let [#_"IPersistentMap" ___pt (:preferTable this)]
                    (let [#_"Object" ___ch (:cachedHierarchy this)]
                        (try
                            (let [#_"Map$Entry" ___bestEntry nil]
                                (doseq [#_"Object" ___o (.getMethodTable this)]
                                    (let [#_"Map$Entry" ___e (cast Map$Entry ___o)]
                                        (when (ร this.isA(___dispatchVal, (.getKey ___e)))
                                            (when (or (nil? ___bestEntry) (.dominates this, (.getKey ___e), (.getKey ___bestEntry)))
                                                (ยง ass ___bestEntry ___e)
                                            )
                                            (when (not (.dominates this, (.getKey ___bestEntry), (.getKey ___e)))
                                                (throw (IllegalArgumentException. (String/format "Multiple methods in multimethod '%s' match dispatch value: %s -> %s and %s, and neither is preferred", (object-array [ (:name this), ___dispatchVal, (.getKey ___e), (.getKey ___bestEntry) ]))))
                                            )
                                        )
                                    )
                                )
                                (if (nil? ___bestEntry)
                                    (do
                                        (ยง ass ___bestValue (.valAt (:methodTable this), (:defaultDispatchVal this)))
                                        (when (nil? ___bestValue)
                                            (ยง return nil)
                                        )
                                    )
                                    (do
                                        (ยง ass ___bestValue (.getValue ___bestEntry))
                                    )
                                )
                            )
                            (finally
                                (ร (:rw this).readLock().unlock())
                            )
                        )

                        ;; ensure basis has stayed stable throughout, else redo
                        (ร (:rw this).writeLock().lock())
                        (try
                            (if (and (ร ___mt == (:methodTable this)) (ร ___pt == (:preferTable this)) (ร ___ch == (:cachedHierarchy this)) (ร (:cachedHierarchy this) == (.deref (:hierarchy this))))
                                (do
                                    ;; place in cache
                                    (ยง ass (:methodCache this) (.assoc (:methodCache this), ___dispatchVal, ___bestValue))
                                    (cast' IFn ___bestValue)
                                )
                                (do
                                    (.resetCache this)
                                    (.findAndCacheBestMethod this, ___dispatchVal)
                                )
                            )
                            (finally
                                (ร (:rw this).writeLock().unlock())
                            )
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this]
        (ร this.getFn((:dispatchFn this).invoke()).invoke())
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1]
        (ร this.getFn((:dispatchFn this).invoke(___arg1)).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2]
        (ร this.getFn((:dispatchFn this).invoke(___arg1, ___arg2)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)), Util'ret1(___arg2, (ยง ass ___arg2 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3]
        (ร this.getFn((:dispatchFn this).invoke(___arg1, ___arg2, ___arg3)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)), Util'ret1(___arg2, (ยง ass ___arg2 nil)), Util'ret1(___arg3, (ยง ass ___arg3 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4]
        (ร this.getFn((:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5]
        (ร this.getFn((:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6]
        (ร this.getFn((:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7]
        (ร this.getFn((:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8]
        (ร this.getFn((:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9]
        (ร this.getFn((:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10]
        (ร this.getFn((:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11]
        (ร this.getFn((:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12]
        (ร this.getFn((:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13]
        (ร this.getFn((:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14]
        (ร this.getFn(
                (:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15]
        (ร this.getFn(
                (:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14,
                    ___arg15)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16]
        (ร this.getFn(
                (:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14,
                    ___arg15, ___arg16)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17]
        (ร this.getFn(
                (:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14,
                    ___arg15, ___arg16, ___arg17)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18]
        (ร this.getFn(
                (:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14,
                    ___arg15, ___arg16, ___arg17, ___arg18)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                    Util'ret1(___arg18, (ยง ass ___arg18 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19]
        (ร this.getFn(
                (:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14,
                    ___arg15, ___arg16, ___arg17, ___arg18, ___arg19)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                    Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                    Util'ret1(___arg19, (ยง ass ___arg19 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___arg20]
        (ร this.getFn(
                (:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14,
                    ___arg15, ___arg16, ___arg17, ___arg18, ___arg19, ___arg20)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                    Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                    Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                    Util'ret1(___arg20, (ยง ass ___arg20 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"MultiFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___arg20, #_"Object..." ___args]
        (ร this.getFn(
                (:dispatchFn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14,
                    ___arg15, ___arg16, ___arg17, ___arg18, ___arg19, ___arg20, ___args)).
            this.invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                    Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                    Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                    Util'ret1(___arg20, (ยง ass ___arg20 nil)),
                    ___args))
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method getMethodTable) [#_"MultiFn" this]
        (:methodTable this)
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method getPreferTable) [#_"MultiFn" this]
        (:preferTable this)
    )
)
)

(java-ns cloiure.lang.Murmur3
;;;
 ; MurmurHash3 was written by Austin Appleby, and is placed in the public
 ; domain. The author hereby disclaims copyright to this source code.
 ;;

;;;
 ; Source:
 ; http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp
 ; (Modified to adapt to Guava coding conventions and to use the HashFunction interface)
 ;;

;;;
 ; Modified to remove stuff Clojure doesn't need, placed under clojure.lang namespace,
 ; all fns made static, added hashOrdered/Unordered
 ;;

(ยง import java.nio.ByteBuffer)

;;;
 ; See http://smhasher.googlecode.com/svn/trunk/MurmurHash3.cpp
 ; MurmurHash3_x86_32
 ;
 ; @author Austin Appleby
 ; @author Dimitris Andreou
 ; @author Kurt Alfred Kluever
 ;;
#_stateless
(class-ns Murmur3
    (def- #_"int" Murmur3'seed 0)
    (def- #_"int" Murmur3'C1 0xcc9e2d51)
    (def- #_"int" Murmur3'C2 0x1b873593)

    (defn #_"int" Murmur3'hashInt [#_"int" ___input]
        (when (zero? ___input)
            (ยง return 0)
        )
        (let [#_"int" ___k1 (Murmur3'mixK1 ___input)]
            (let [#_"int" ___h1 (Murmur3'mixH1 Murmur3'seed, ___k1)]
                (Murmur3'fmix ___h1, 4)
            )
        )
    )

    (defn #_"int" Murmur3'hashLong [#_"long" ___input]
        (when (zero? ___input)
            (ยง return 0)
        )
        (let [#_"int" ___low (ร (int) ___input)]
            (let [#_"int" ___high (ร (int) (___input >>> 32))]
                (let [#_"int" ___k1 (Murmur3'mixK1 ___low)]
                    (let [#_"int" ___h1 (Murmur3'mixH1 Murmur3'seed, ___k1)]
                        (ยง ass ___k1 (Murmur3'mixK1 ___high))
                        (ยง ass ___h1 (Murmur3'mixH1 ___h1, ___k1))

                        (Murmur3'fmix ___h1, 8)
                    )
                )
            )
        )
    )

    (defn #_"int" Murmur3'hashUnencodedChars [#_"CharSequence" ___input]
        (let [#_"int" ___h1 Murmur3'seed]
            ;; step through the CharSequence 2 chars at a time
            (loop-when-recur [#_"int" ___i 1] (ร ___i < (.length ___input)) [(+ ___i 2)]
                (let [#_"int" ___k1 (ร ___input.charAt(___i - 1) | (___input.charAt(___i) << 16))]
                    (ยง ass ___k1 (Murmur3'mixK1 ___k1))
                    (ยง ass ___h1 (Murmur3'mixH1 ___h1, ___k1))
                )
            )

            ;; deal with any remaining characters
            (when (ร ((.length ___input) & 1) == 1)
                (let [#_"int" ___k1 (ร ___input.charAt((.length ___input) - 1))]
                    (ยง ass ___k1 (Murmur3'mixK1 ___k1))
                    (ยง ass ___h1 (ร ___h1 :xor ___k1))
                )
            )

            (ร Murmur3'fmix(___h1, 2 * (.length ___input)))
        )
    )

    (defn #_"int" Murmur3'mixCollHash [#_"int" ___hash, #_"int" ___count]
        (let [#_"int" ___h1 Murmur3'seed]
            (let [#_"int" ___k1 (Murmur3'mixK1 ___hash)]
                (ยง ass ___h1 (Murmur3'mixH1 ___h1, ___k1))
                (Murmur3'fmix ___h1, ___count)
            )
        )
    )

    (defn #_"int" Murmur3'hashOrdered [#_"Iterable" ___xs]
        (let [#_"int" ___n 0]
            (let [#_"int" ___hash 1]
                (doseq [#_"Object" ___x ___xs]
                    (ยง ass ___hash (ร 31 * ___hash + Util'hasheq(___x)))
                    (ยง ass ___n (inc ___n))
                )

                (Murmur3'mixCollHash ___hash, ___n)
            )
        )
    )

    (defn #_"int" Murmur3'hashUnordered [#_"Iterable" ___xs]
        (let [#_"int" ___hash 0]
            (let [#_"int" ___n 0]
                (doseq [#_"Object" ___x ___xs]
                    (ยง ass ___hash (ร ___hash + Util'hasheq(___x)))
                    (ยง ass ___n (inc ___n))
                )

                (Murmur3'mixCollHash ___hash, ___n)
            )
        )
    )

    (defn- #_"int" Murmur3'mixK1 [#_"int" ___k1]
        (ยง ass ___k1 (ร ___k1 * Murmur3'C1))
        (ยง ass ___k1 (Integer/rotateLeft ___k1, 15))
        (ยง ass ___k1 (ร ___k1 * Murmur3'C2))
        ___k1
    )

    (defn- #_"int" Murmur3'mixH1 [#_"int" ___h1, #_"int" ___k1]
        (ยง ass ___h1 (ร ___h1 :xor ___k1))
        (ยง ass ___h1 (Integer/rotateLeft ___h1, 13))
        (ยง ass ___h1 (ร ___h1 * 5 + 0xe6546b64))
        ___h1
    )

    ;; Finalization mix - force all bits of a hash block to avalanche
    (defn- #_"int" Murmur3'fmix [#_"int" ___h1, #_"int" ___length]
        (ยง ass ___h1 (ร ___h1 :xor ___length))
        (ยง ass ___h1 (ร ___h1 :xor (___h1 >>> 16)))
        (ยง ass ___h1 (* ___h1 0x85ebca6b))
        (ยง ass ___h1 (ร ___h1 :xor (___h1 >>> 13)))
        (ยง ass ___h1 (* ___h1 0xc2b2ae35))
        (ยง ass ___h1 (ร ___h1 :xor (___h1 >>> 16)))
        ___h1
    )
)
)

(java-ns cloiure.lang.Named

(ยง defprotocol Named
    #_abstract
    (#_"String" Named'''(ยง method getNamespace) [#_"Named" this])
    #_abstract
    (#_"String" Named'''(ยง method getName) [#_"Named" this])
)
)

(java-ns cloiure.lang.Namespace

(ยง import java.util.concurrent.ConcurrentHashMap)
(ยง import java.util.concurrent.atomic.AtomicReference)

(class-ns Namespace (ยง extends AReference)
    (def #_"ConcurrentHashMap<Symbol, Namespace>" Namespace'namespaces (ConcurrentHashMap.))

    (defn- #_"Namespace" Namespace'init []
        (hash-map
            #_"Symbol" :name nil

            #_transient
            #_"AtomicReference<IPersistentMap>" :mappings (AtomicReference.)
            #_transient
            #_"AtomicReference<IPersistentMap>" :aliases (AtomicReference.)
        )
    )

    (defn #_"Namespace" Namespace'new [#_"Symbol" ___name]
        (let [this (merge (AReference'new (.meta ___name)) (Namespace'init))]
            (ยง ass (:name this) ___name)
            (.set (:mappings this), RT'DEFAULT_IMPORTS)
            (ร (:aliases this).set(RT'map()))
            this
        )
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"Namespace" this]
        (.toString (:name this))
    )

    (defn #_"ISeq" Namespace'all []
        (RT'seq (.values Namespace'namespaces))
    )

    #_method
    (ยง defn #_"Symbol" (ยง method getName) [#_"Namespace" this]
        (:name this)
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method getMappings) [#_"Namespace" this]
        (.get (:mappings this))
    )

    #_method
    (ยง defn #_"Var" (ยง method intern) [#_"Namespace" this, #_"Symbol" ___sym]
        (when (ร (some? (:ns ___sym)))
            (throw (IllegalArgumentException. "Can't intern namespace-qualified symbol"))
        )
        (let [#_"IPersistentMap" ___map (.getMappings this)]
            (ยง let [#_"Object" ___o]
                (let [#_"Var" ___v nil]
                    (while (nil? (ยง ass ___o (.valAt ___map, ___sym)))
                        (when (nil? ___v)
                            (ยง ass ___v (Var'new-2 this, ___sym))
                        )
                        (let [#_"IPersistentMap" ___newMap (.assoc ___map, ___sym, ___v)]
                            (.compareAndSet (:mappings this), ___map, ___newMap)
                            (ยง ass ___map (.getMappings this))
                        )
                    )
                    (when (and (ยง instance? Var ___o) (ร (:ns (cast' Var ___o)) == this))
                        (ยง return (cast' Var ___o))
                    )

                    (when (nil? ___v)
                        (ยง ass ___v (Var'new-2 this, ___sym))
                    )

                    (.warnOrFailOnReplace this, ___sym, ___o, ___v)

                    (while (not (ร (:mappings this).compareAndSet(___map, ___map.assoc(___sym, ___v))))
                        (ยง ass ___map (.getMappings this))
                    )

                    ___v
                )
            )
        )
    )

    #_method
    (ยง defn- #_"void" (ยง method warnOrFailOnReplace) [#_"Namespace" this, #_"Symbol" ___sym, #_"Object" ___o, #_"Object" ___v]
        (when (ยง instance? Var ___o)
            (let [#_"Namespace" ___ns (:ns (cast' Var ___o))]
                (when (or (ร ___ns == this) (and (ยง instance? Var ___v) (ร (:ns (cast' Var ___v)) == RT'CLOIURE_NS)))
                    (ยง return nil)
                )
                (when (not= ___ns RT'CLOIURE_NS)
                    (throw (IllegalStateException. (str ___sym " already refers to: " ___o " in namespace: " (:name this))))
                )
            )
        )
        (.println (RT'errPrintWriter), (str "WARNING: " ___sym " already refers to: " ___o " in namespace: " (:name this) ", being replaced by: " ___v))
        nil
    )

    #_method
    (ยง defn #_"Object" (ยง method reference) [#_"Namespace" this, #_"Symbol" ___sym, #_"Object" ___val]
        (when (ร (some? (:ns ___sym)))
            (throw (IllegalArgumentException. "Can't intern namespace-qualified symbol"))
        )
        (let [#_"IPersistentMap" ___map (.getMappings this)]
            (ยง let [#_"Object" ___o]
                (while (nil? (ยง ass ___o (.valAt ___map, ___sym)))
                    (let [#_"IPersistentMap" ___newMap (.assoc ___map, ___sym, ___val)]
                        (.compareAndSet (:mappings this), ___map, ___newMap)
                        (ยง ass ___map (.getMappings this))
                    )
                )
                (when (= ___o ___val)
                    (ยง return ___o)
                )

                (.warnOrFailOnReplace this, ___sym, ___o, ___val)

                (while (not (ร (:mappings this).compareAndSet(___map, ___map.assoc(___sym, ___val))))
                    (ยง ass ___map (.getMappings this))
                )

                ___val
            )
        )
    )

    (defn #_"boolean" Namespace'areDifferentInstancesOfSameClassName [#_"Class" ___cls1, #_"Class" ___cls2]
        (and (ร ___cls1 != ___cls2) (.equals (.getName ___cls1), (.getName ___cls2)))
    )

    #_method
    (ยง defn #_"Class" (ยง method referenceClass) [#_"Namespace" this, #_"Symbol" ___sym, #_"Class" ___val]
        (when (ร (some? (:ns ___sym)))
            (throw (IllegalArgumentException. "Can't intern namespace-qualified symbol"))
        )
        (let [#_"IPersistentMap" ___map (.getMappings this)]
            (let [#_"Class" ___c (cast Class (.valAt ___map, ___sym))]
                (while (or (nil? ___c) (Namespace'areDifferentInstancesOfSameClassName ___c, ___val))
                    (let [#_"IPersistentMap" ___newMap (.assoc ___map, ___sym, ___val)]
                        (.compareAndSet (:mappings this), ___map, ___newMap)
                        (ยง ass ___map (.getMappings this))
                        (ยง ass ___c (cast Class (.valAt ___map, ___sym)))
                    )
                )
                (when (= ___c ___val)
                    (ยง return ___c)
                )

                (throw (IllegalStateException. (str ___sym " already refers to: " ___c " in namespace: " (:name this))))
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method unmap) [#_"Namespace" this, #_"Symbol" ___sym]
        (when (ร (some? (:ns ___sym)))
            (throw (IllegalArgumentException. "Can't unintern namespace-qualified symbol"))
        )
        (let [#_"IPersistentMap" ___map (.getMappings this)]
            (while (.containsKey ___map, ___sym)
                (let [#_"IPersistentMap" ___newMap (.without ___map, ___sym)]
                    (.compareAndSet (:mappings this), ___map, ___newMap)
                    (ยง ass ___map (.getMappings this))
                )
            )
            nil
        )
    )

    #_method
    (ยง defn #_"Class" (ยง method importClass) [#_"Namespace" this, #_"Symbol" ___sym, #_"Class" ___c]
        (.referenceClass this, ___sym, ___c)
    )

    #_method
    (ยง defn #_"Class" (ยง method importClass) [#_"Namespace" this, #_"Class" ___c]
        (let [#_"String" ___n (.getName ___c)]
            (ร this.importClass(Symbol'intern-1(___n.substring(___n.lastIndexOf(\.) + 1)), ___c))
        )
    )

    #_method
    (ยง defn #_"Var" (ยง method refer) [#_"Namespace" this, #_"Symbol" ___sym, #_"Var" ___var]
        (cast' Var (.reference this, ___sym, ___var))
    )

    (defn #_"Namespace" Namespace'findOrCreate [#_"Symbol" ___name]
        (let [#_"Namespace" ___ns (.get Namespace'namespaces, ___name)]
            (when (some? ___ns)
                (ยง return ___ns)
            )
            (let [#_"Namespace" ___newns (Namespace'new ___name)]
                (ยง ass ___ns (.putIfAbsent Namespace'namespaces, ___name, ___newns))
                (or ___ns ___newns)
            )
        )
    )

    (defn #_"Namespace" Namespace'remove [#_"Symbol" ___name]
        (when (.equals ___name, (:name RT'CLOIURE_NS))
            (throw (IllegalArgumentException. "Cannot remove cloiure namespace"))
        )
        (.remove Namespace'namespaces, ___name)
    )

    (defn #_"Namespace" Namespace'find [#_"Symbol" ___name]
        (.get Namespace'namespaces, ___name)
    )

    #_method
    (ยง defn #_"Object" (ยง method getMapping) [#_"Namespace" this, #_"Symbol" ___name]
        (ร (:mappings this).get().valAt(___name))
    )

    #_method
    (ยง defn #_"Var" (ยง method findInternedVar) [#_"Namespace" this, #_"Symbol" ___symbol]
        (let [#_"Object" ___o (ร (:mappings this).get().valAt(___symbol))]
            (when (and (some? ___o) (ยง instance? Var ___o) (ร (:ns (cast' Var ___o)) == this))
                (ยง return (cast' Var ___o))
            )
            nil
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method getAliases) [#_"Namespace" this]
        (.get (:aliases this))
    )

    #_method
    (ยง defn #_"Namespace" (ยง method lookupAlias) [#_"Namespace" this, #_"Symbol" ___alias]
        (let [#_"IPersistentMap" ___map (.getAliases this)]
            (cast' Namespace (.valAt ___map, ___alias))
        )
    )

    #_method
    (ยง defn #_"void" (ยง method addAlias) [#_"Namespace" this, #_"Symbol" ___alias, #_"Namespace" ___ns]
        (when (or (nil? ___alias) (nil? ___ns))
            (throw (NullPointerException. "Expecting Symbol + Namespace"))
        )
        (let [#_"IPersistentMap" ___map (.getAliases this)]
            (while (not (.containsKey ___map, ___alias))
                (let [#_"IPersistentMap" ___newMap (.assoc ___map, ___alias, ___ns)]
                    (.compareAndSet (:aliases this), ___map, ___newMap)
                    (ยง ass ___map (.getAliases this))
                )
            )
            ;; you can rebind an alias, but only to the initially-aliased namespace.
            (when (not (ร ___map.valAt(___alias).equals(___ns)))
                (throw (IllegalStateException. (str "Alias " ___alias " already exists in namespace " (:name this) ", aliasing " (.valAt ___map, ___alias))))
            )
            nil
        )
    )

    #_method
    (ยง defn #_"void" (ยง method removeAlias) [#_"Namespace" this, #_"Symbol" ___alias]
        (let [#_"IPersistentMap" ___map (.getAliases this)]
            (while (.containsKey ___map, ___alias)
                (let [#_"IPersistentMap" ___newMap (.without ___map, ___alias)]
                    (.compareAndSet (:aliases this), ___map, ___newMap)
                    (ยง ass ___map (.getAliases this))
                )
            )
            nil
        )
    )
)
)

(java-ns cloiure.lang.Numbers

(ยง import java.math.BigInteger)
(ยง import java.math.BigDecimal)
(ยง import java.math.MathContext)

(ยง defprotocol Ops
    #_abstract
    (#_"Ops" Ops'''(ยง method combine) [#_"Ops" this, #_"Ops" ___y])
    #_abstract
    (#_"Ops" Ops'''(ยง method opsWithLong) [#_"Ops" this, #_"LongOps" ___x])
    #_abstract
    (#_"Ops" Ops'''(ยง method opsWithDouble) [#_"Ops" this, #_"DoubleOps" ___x])
    #_abstract
    (#_"Ops" Ops'''(ยง method opsWithRatio) [#_"Ops" this, #_"RatioOps" ___x])
    #_abstract
    (#_"Ops" Ops'''(ยง method opsWithBigInt) [#_"Ops" this, #_"BigIntOps" ___x])
    #_abstract
    (#_"Ops" Ops'''(ยง method opsWithBigDecimal) [#_"Ops" this, #_"BigDecimalOps" ___x])
    #_abstract
    (#_"boolean" Ops'''(ยง method isZero) [#_"Ops" this, #_"Number" ___x])
    #_abstract
    (#_"boolean" Ops'''(ยง method isPos) [#_"Ops" this, #_"Number" ___x])
    #_abstract
    (#_"boolean" Ops'''(ยง method isNeg) [#_"Ops" this, #_"Number" ___x])
    #_abstract
    (#_"Number" Ops'''(ยง method add) [#_"Ops" this, #_"Number" ___x, #_"Number" ___y])
    #_abstract
    (#_"Number" Ops'''(ยง method addP) [#_"Ops" this, #_"Number" ___x, #_"Number" ___y])
    #_abstract
    (#_"Number" Ops'''(ยง method multiply) [#_"Ops" this, #_"Number" ___x, #_"Number" ___y])
    #_abstract
    (#_"Number" Ops'''(ยง method multiplyP) [#_"Ops" this, #_"Number" ___x, #_"Number" ___y])
    #_abstract
    (#_"Number" Ops'''(ยง method divide) [#_"Ops" this, #_"Number" ___x, #_"Number" ___y])
    #_abstract
    (#_"Number" Ops'''(ยง method quotient) [#_"Ops" this, #_"Number" ___x, #_"Number" ___y])
    #_abstract
    (#_"Number" Ops'''(ยง method remainder) [#_"Ops" this, #_"Number" ___x, #_"Number" ___y])
    #_abstract
    (#_"boolean" Ops'''(ยง method equiv) [#_"Ops" this, #_"Number" ___x, #_"Number" ___y])
    #_abstract
    (#_"boolean" Ops'''(ยง method lt) [#_"Ops" this, #_"Number" ___x, #_"Number" ___y])
    #_abstract
    (#_"boolean" Ops'''(ยง method lte) [#_"Ops" this, #_"Number" ___x, #_"Number" ___y])
    #_abstract
    (#_"boolean" Ops'''(ยง method gte) [#_"Ops" this, #_"Number" ___x, #_"Number" ___y])
    #_abstract
    (#_"Number" Ops'''(ยง method negate) [#_"Ops" this, #_"Number" ___x])
    #_abstract
    (#_"Number" Ops'''(ยง method negateP) [#_"Ops" this, #_"Number" ___x])
    #_abstract
    (#_"Number" Ops'''(ยง method inc) [#_"Ops" this, #_"Number" ___x])
    #_abstract
    (#_"Number" Ops'''(ยง method incP) [#_"Ops" this, #_"Number" ___x])
    #_abstract
    (#_"Number" Ops'''(ยง method dec) [#_"Ops" this, #_"Number" ___x])
    #_abstract
    (#_"Number" Ops'''(ยง method decP) [#_"Ops" this, #_"Number" ___x])
)

#_stateless
#_abstract
(class-ns OpsP (ยง implements Ops)
    #_protected
    (defn #_"OpsP" OpsP'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Number" (ยง method addP) [#_"OpsP" this, #_"Number" ___x, #_"Number" ___y]
        (.add this, ___x, ___y)
    )

    #_method
    (ยง defn #_"Number" (ยง method multiplyP) [#_"OpsP" this, #_"Number" ___x, #_"Number" ___y]
        (.multiply this, ___x, ___y)
    )

    #_method
    (ยง defn #_"Number" (ยง method negateP) [#_"OpsP" this, #_"Number" ___x]
        (.negate this, ___x)
    )

    #_method
    (ยง defn #_"Number" (ยง method incP) [#_"OpsP" this, #_"Number" ___x]
        (.inc this, ___x)
    )

    #_method
    (ยง defn #_"Number" (ยง method decP) [#_"OpsP" this, #_"Number" ___x]
        (.dec this, ___x)
    )
)

(class-ns LongOps (ยง implements Ops)
    (defn #_"LongOps" LongOps'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Ops" (ยง method combine) [#_"LongOps" this, #_"Ops" ___y]
        (.opsWith ___y, this)
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"LongOps" this, #_"LongOps" ___x]
        this
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"LongOps" this, #_"DoubleOps" ___x]
        Numbers'DOUBLE_OPS
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"LongOps" this, #_"RatioOps" ___x]
        Numbers'RATIO_OPS
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"LongOps" this, #_"BigIntOps" ___x]
        Numbers'BIGINT_OPS
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"LongOps" this, #_"BigDecimalOps" ___x]
        Numbers'BIGDECIMAL_OPS
    )

    #_method
    (ยง defn #_"boolean" (ยง method isZero) [#_"LongOps" this, #_"Number" ___x]
        (zero? (.longValue ___x))
    )

    #_method
    (ยง defn #_"boolean" (ยง method isPos) [#_"LongOps" this, #_"Number" ___x]
        (pos? (.longValue ___x))
    )

    #_method
    (ยง defn #_"boolean" (ยง method isNeg) [#_"LongOps" this, #_"Number" ___x]
        (neg? (.longValue ___x))
    )

    #_method
    (ยง defn #_"Number" (ยง method add) [#_"LongOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร num(Numbers'add-2ll((.longValue ___x), (.longValue ___y))))
    )

    #_method
    (ยง defn #_"Number" (ยง method addP) [#_"LongOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"long" ___lx (.longValue ___x) #_"long" ___ly (.longValue ___y)]
            (let [#_"long" ___ret (+ ___lx ___ly)]
                (when (and (neg? (___ret :xor ___lx)) (neg? (___ret :xor ___ly)))
                    (ยง return (.add Numbers'BIGINT_OPS, ___x, ___y))
                )
                (num ___ret)
            )
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method multiply) [#_"LongOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร num(Numbers'multiply-2ll((.longValue ___x), (.longValue ___y))))
    )

    #_method
    (ยง defn #_"Number" (ยง method multiplyP) [#_"LongOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"long" ___lx (.longValue ___x) #_"long" ___ly (.longValue ___y)]
            (when (and (ร ___lx == Long/MIN_VALUE) (neg? ___ly))
                (ยง return (.multiply Numbers'BIGINT_OPS, ___x, ___y))
            )
            (let [#_"long" ___ret (* ___lx ___ly)]
                (when (and (ร ___ly != 0) (ร ___ret / ___ly != ___lx))
                    (ยง return (.multiply Numbers'BIGINT_OPS, ___x, ___y))
                )
                (num ___ret)
            )
        )
    )

    (defn #_"long" LongOps'gcd [#_"long" ___u, #_"long" ___v]
        (while (not= ___v 0)
            (let [#_"long" ___r (ร ___u % ___v)]
                (ยง ass ___u ___v)
                (ยง ass ___v ___r)
            )
        )
        ___u
    )

    #_method
    (ยง defn #_"Number" (ยง method divide) [#_"LongOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"long" ___n (.longValue ___x)]
            (let [#_"long" ___val (.longValue ___y)]
                (let [#_"long" ___gcd (LongOps'gcd ___n, ___val)]
                    (when (zero? ___gcd)
                        (ยง return (num 0))
                    )

                    (ยง ass ___n (/ ___n ___gcd))
                    (let [#_"long" ___d (/ ___val ___gcd)]
                        (when (= ___d 1)
                            (ยง return (num ___n))
                        )
                        (when (< ___d 0)
                            (ยง ass ___n (- ___n))
                            (ยง ass ___d (- ___d))
                        )
                        (ร Ratio'new(BigInteger/valueOf(___n), BigInteger/valueOf(___d)))
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method quotient) [#_"LongOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร num((.longValue ___x) / (.longValue ___y)))
    )

    #_method
    (ยง defn #_"Number" (ยง method remainder) [#_"LongOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร num((.longValue ___x) % (.longValue ___y)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"LongOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร ((.longValue ___x) == (.longValue ___y)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method lt) [#_"LongOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร ((.longValue ___x) < (.longValue ___y)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method lte) [#_"LongOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร ((.longValue ___x) <= (.longValue ___y)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method gte) [#_"LongOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร ((.longValue ___x) >= (.longValue ___y)))
    )

    #_method
    (ยง defn #_"Number" (ยง method negate) [#_"LongOps" this, #_"Number" ___x]
        (let [#_"long" ___val (.longValue ___x)]
            (ร num(Numbers'minus-1l(___val)))
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method negateP) [#_"LongOps" this, #_"Number" ___x]
        (let [#_"long" ___val (.longValue ___x)]
            (when (> ___val Long/MIN_VALUE)
                (ยง return (num (- val)))
            )
            (ร BigInt'fromBigInteger(BigInteger/valueOf(___val).negate()))
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method inc) [#_"LongOps" this, #_"Number" ___x]
        (let [#_"long" ___val (.longValue ___x)]
            (ร num(Numbers'inc-1l(___val)))
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method incP) [#_"LongOps" this, #_"Number" ___x]
        (let [#_"long" ___val (.longValue ___x)]
            (when (< ___val Long/MAX_VALUE)
                (ยง return (ร num(___val + 1)))
            )
            (.inc Numbers'BIGINT_OPS, ___x)
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method dec) [#_"LongOps" this, #_"Number" ___x]
        (let [#_"long" ___val (.longValue ___x)]
            (ร num(Numbers'dec-1l(___val)))
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method decP) [#_"LongOps" this, #_"Number" ___x]
        (let [#_"long" ___val (.longValue ___x)]
            (when (> ___val Long/MIN_VALUE)
                (ยง return (ร num(___val - 1)))
            )
            (.dec Numbers'BIGINT_OPS, ___x)
        )
    )
)

(class-ns DoubleOps (ยง extends OpsP)
    (defn #_"DoubleOps" DoubleOps'new []
        (OpsP'new)
    )

    #_method
    (ยง defn #_"Ops" (ยง method combine) [#_"DoubleOps" this, #_"Ops" ___y]
        (.opsWith ___y, this)
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"DoubleOps" this, #_"LongOps" ___x]
        this
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"DoubleOps" this, #_"DoubleOps" ___x]
        this
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"DoubleOps" this, #_"RatioOps" ___x]
        this
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"DoubleOps" this, #_"BigIntOps" ___x]
        this
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"DoubleOps" this, #_"BigDecimalOps" ___x]
        this
    )

    #_method
    (ยง defn #_"boolean" (ยง method isZero) [#_"DoubleOps" this, #_"Number" ___x]
        (zero? (.doubleValue ___x))
    )

    #_method
    (ยง defn #_"boolean" (ยง method isPos) [#_"DoubleOps" this, #_"Number" ___x]
        (pos? (.doubleValue ___x))
    )

    #_method
    (ยง defn #_"boolean" (ยง method isNeg) [#_"DoubleOps" this, #_"Number" ___x]
        (neg? (.doubleValue ___x))
    )

    #_method
    (ยง defn #_"Number" (ยง method add) [#_"DoubleOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร Double/valueOf((.doubleValue ___x) + (.doubleValue ___y)))
    )

    #_method
    (ยง defn #_"Number" (ยง method multiply) [#_"DoubleOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร Double/valueOf((.doubleValue ___x) * (.doubleValue ___y)))
    )

    #_method
    (ยง defn #_"Number" (ยง method divide) [#_"DoubleOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร Double/valueOf((.doubleValue ___x) / (.doubleValue ___y)))
    )

    #_method
    (ยง defn #_"Number" (ยง method quotient) [#_"DoubleOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร Numbers'quotient-2dd((.doubleValue ___x), (.doubleValue ___y)))
    )

    #_method
    (ยง defn #_"Number" (ยง method remainder) [#_"DoubleOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร Numbers'remainder-2dd((.doubleValue ___x), (.doubleValue ___y)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"DoubleOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร ((.doubleValue ___x) == (.doubleValue ___y)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method lt) [#_"DoubleOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร ((.doubleValue ___x) < (.doubleValue ___y)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method lte) [#_"DoubleOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร ((.doubleValue ___x) <= (.doubleValue ___y)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method gte) [#_"DoubleOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร ((.doubleValue ___x) >= (.doubleValue ___y)))
    )

    #_method
    (ยง defn #_"Number" (ยง method negate) [#_"DoubleOps" this, #_"Number" ___x]
        (ร Double/valueOf(-x.doubleValue()))
    )

    #_method
    (ยง defn #_"Number" (ยง method inc) [#_"DoubleOps" this, #_"Number" ___x]
        (ร Double/valueOf((.doubleValue ___x) + 1))
    )

    #_method
    (ยง defn #_"Number" (ยง method dec) [#_"DoubleOps" this, #_"Number" ___x]
        (ร Double/valueOf((.doubleValue ___x) - 1))
    )
)

(class-ns RatioOps (ยง extends OpsP)
    (defn #_"RatioOps" RatioOps'new []
        (OpsP'new)
    )

    #_method
    (ยง defn #_"Ops" (ยง method combine) [#_"RatioOps" this, #_"Ops" ___y]
        (.opsWith ___y, this)
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"RatioOps" this, #_"LongOps" ___x]
        this
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"RatioOps" this, #_"DoubleOps" ___x]
        Numbers'DOUBLE_OPS
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"RatioOps" this, #_"RatioOps" ___x]
        this
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"RatioOps" this, #_"BigIntOps" ___x]
        this
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"RatioOps" this, #_"BigDecimalOps" ___x]
        Numbers'BIGDECIMAL_OPS
    )

    #_method
    (ยง defn #_"boolean" (ยง method isZero) [#_"RatioOps" this, #_"Number" ___x]
        (let [#_"Ratio" ___r (cast' Ratio ___x)]
            (zero? (.signum (:numerator ___r)))
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method isPos) [#_"RatioOps" this, #_"Number" ___x]
        (let [#_"Ratio" ___r (cast' Ratio ___x)]
            (pos? (.signum (:numerator ___r)))
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method isNeg) [#_"RatioOps" this, #_"Number" ___x]
        (let [#_"Ratio" ___r (cast' Ratio ___x)]
            (neg? (.signum (:numerator ___r)))
        )
    )

    (defn #_"Number" RatioOps'normalizeRet [#_"Number" ___ret, #_"Number" ___x, #_"Number" ___y]
        ___ret
    )

    #_method
    (ยง defn #_"Number" (ยง method add) [#_"RatioOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"Ratio" ___rx (toRatio ___x)]
            (let [#_"Ratio" ___ry (toRatio ___y)]
                (let [#_"Number" ___ret (ร this.divide((:numerator ___ry).multiply((:denominator ___rx)).add((:numerator ___rx).multiply((:denominator ___ry))), (:denominator ___ry).multiply((:denominator ___rx))))]
                    (RatioOps'normalizeRet ___ret, ___x, ___y)
                )
            )
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method multiply) [#_"RatioOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"Ratio" ___rx (toRatio ___x)]
            (let [#_"Ratio" ___ry (toRatio ___y)]
                (let [#_"Number" ___ret (ร Numbers'divide-2ii((:numerator ___ry).multiply((:numerator ___rx)), (:denominator ___ry).multiply((:denominator ___rx))))]
                    (RatioOps'normalizeRet ___ret, ___x, ___y)
                )
            )
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method divide) [#_"RatioOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"Ratio" ___rx (toRatio ___x)]
            (let [#_"Ratio" ___ry (toRatio ___y)]
                (let [#_"Number" ___ret (ร Numbers'divide-2ii((:denominator ___ry).multiply((:numerator ___rx)), (:numerator ___ry).multiply((:denominator ___rx))))]
                    (RatioOps'normalizeRet ___ret, ___x, ___y)
                )
            )
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method quotient) [#_"RatioOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"Ratio" ___rx (toRatio ___x)]
            (let [#_"Ratio" ___ry (toRatio ___y)]
                (let [#_"BigInteger" ___q (ร (:numerator ___rx).multiply((:denominator ___ry)).divide((:denominator ___rx).multiply((:numerator ___ry))))]
                    (ร RatioOps'normalizeRet(BigInt'fromBigInteger(___q), ___x, ___y))
                )
            )
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method remainder) [#_"RatioOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"Ratio" ___rx (toRatio ___x)]
            (let [#_"Ratio" ___ry (toRatio ___y)]
                (let [#_"BigInteger" ___q (ร (:numerator ___rx).multiply((:denominator ___ry)).divide((:denominator ___rx).multiply((:numerator ___ry))))]
                    (let [#_"Number" ___ret (ร Numbers'minus-2oo(___x, Numbers'multiply-2oo(___q, ___y)))]
                        (RatioOps'normalizeRet ___ret, ___x, ___y)
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"RatioOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"Ratio" ___rx (toRatio ___x)]
            (let [#_"Ratio" ___ry (toRatio ___y)]
                (and (.equals (:numerator ___rx), (:numerator ___ry)) (.equals (:denominator ___rx), (:denominator ___ry)))
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method lt) [#_"RatioOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"Ratio" ___rx (toRatio ___x)]
            (let [#_"Ratio" ___ry (toRatio ___y)]
                (ร Numbers'lt-2oo((:numerator ___rx).multiply((:denominator ___ry)), (:numerator ___ry).multiply((:denominator ___rx))))
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method lte) [#_"RatioOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"Ratio" ___rx (toRatio ___x)]
            (let [#_"Ratio" ___ry (toRatio ___y)]
                (ร Numbers'lte-2oo((:numerator ___rx).multiply((:denominator ___ry)), (:numerator ___ry).multiply((:denominator ___rx))))
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method gte) [#_"RatioOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"Ratio" ___rx (toRatio ___x)]
            (let [#_"Ratio" ___ry (toRatio ___y)]
                (ร Numbers'gte-2oo((:numerator ___rx).multiply((:denominator ___ry)), (:numerator ___ry).multiply((:denominator ___rx))))
            )
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method negate) [#_"RatioOps" this, #_"Number" ___x]
        (let [#_"Ratio" ___r (cast' Ratio ___x)]
            (ร Ratio'new((:numerator ___r).negate(), (:denominator ___r)))
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method inc) [#_"RatioOps" this, #_"Number" ___x]
        (Numbers'add-2ol ___x, 1)
    )

    #_method
    (ยง defn #_"Number" (ยง method dec) [#_"RatioOps" this, #_"Number" ___x]
        (Numbers'add-2ol ___x, -1)
    )
)

(class-ns BigIntOps (ยง extends OpsP)
    (defn #_"BigIntOps" BigIntOps'new []
        (OpsP'new)
    )

    #_method
    (ยง defn #_"Ops" (ยง method combine) [#_"BigIntOps" this, #_"Ops" ___y]
        (.opsWith ___y, this)
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"BigIntOps" this, #_"LongOps" ___x]
        this
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"BigIntOps" this, #_"DoubleOps" ___x]
        Numbers'DOUBLE_OPS
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"BigIntOps" this, #_"RatioOps" ___x]
        Numbers'RATIO_OPS
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"BigIntOps" this, #_"BigIntOps" ___x]
        this
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"BigIntOps" this, #_"BigDecimalOps" ___x]
        Numbers'BIGDECIMAL_OPS
    )

    #_method
    (ยง defn #_"boolean" (ยง method isZero) [#_"BigIntOps" this, #_"Number" ___x]
        (let [#_"BigInt" ___bx (toBigInt ___x)]
            (when (ร (nil? (:bipart ___bx)))
                (ยง return (zero? (:lpart ___bx)))
            )
            (zero? (.signum (:bipart ___bx)))
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method isPos) [#_"BigIntOps" this, #_"Number" ___x]
        (let [#_"BigInt" ___bx (toBigInt ___x)]
            (when (ร (nil? (:bipart ___bx)))
                (ยง return (pos? (:lpart ___bx)))
            )
            (pos? (.signum (:bipart ___bx)))
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method isNeg) [#_"BigIntOps" this, #_"Number" ___x]
        (let [#_"BigInt" ___bx (toBigInt ___x)]
            (when (ร (nil? (:bipart ___bx)))
                (ยง return (neg? (:lpart ___bx)))
            )
            (neg? (.signum (:bipart ___bx)))
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method add) [#_"BigIntOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร toBigInt(___x).add(toBigInt(___y)))
    )

    #_method
    (ยง defn #_"Number" (ยง method multiply) [#_"BigIntOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร toBigInt(___x).multiply(toBigInt(___y)))
    )

    #_method
    (ยง defn #_"Number" (ยง method divide) [#_"BigIntOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร Numbers'divide-2ii(this.toBigInteger(___x), this.toBigInteger(___y)))
    )

    #_method
    (ยง defn #_"Number" (ยง method quotient) [#_"BigIntOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร toBigInt(___x).quotient(toBigInt(___y)))
    )

    #_method
    (ยง defn #_"Number" (ยง method remainder) [#_"BigIntOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร toBigInt(___x).remainder(toBigInt(___y)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"BigIntOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร toBigInt(___x).equals(toBigInt(___y)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method lt) [#_"BigIntOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร toBigInt(___x).lt(toBigInt(___y)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method lte) [#_"BigIntOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร (this.toBigInteger(___x).compareTo(this.toBigInteger(___y)) <= 0))
    )

    #_method
    (ยง defn #_"boolean" (ยง method gte) [#_"BigIntOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร (this.toBigInteger(___x).compareTo(this.toBigInteger(___y)) >= 0))
    )

    #_method
    (ยง defn #_"Number" (ยง method negate) [#_"BigIntOps" this, #_"Number" ___x]
        (ร BigInt'fromBigInteger(this.toBigInteger(___x).negate()))
    )

    #_method
    (ยง defn #_"Number" (ยง method inc) [#_"BigIntOps" this, #_"Number" ___x]
        (let [#_"BigInteger" ___bx (.toBigInteger this, ___x)]
            (ร BigInt'fromBigInteger(___bx.add(BigInteger/ONE)))
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method dec) [#_"BigIntOps" this, #_"Number" ___x]
        (let [#_"BigInteger" ___bx (.toBigInteger this, ___x)]
            (ร BigInt'fromBigInteger(___bx.subtract(BigInteger/ONE)))
        )
    )
)

(class-ns BigDecimalOps (ยง extends OpsP)
    (ยง def #_"Var" BigDecimalOps'MATH_CONTEXT RT'MATH_CONTEXT)

    (defn #_"BigDecimalOps" BigDecimalOps'new []
        (OpsP'new)
    )

    #_method
    (ยง defn #_"Ops" (ยง method combine) [#_"BigDecimalOps" this, #_"Ops" ___y]
        (.opsWith ___y, this)
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"BigDecimalOps" this, #_"LongOps" ___x]
        this
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"BigDecimalOps" this, #_"DoubleOps" ___x]
        Numbers'DOUBLE_OPS
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"BigDecimalOps" this, #_"RatioOps" ___x]
        this
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"BigDecimalOps" this, #_"BigIntOps" ___x]
        this
    )

    #_method
    (ยง defn #_"Ops" (ยง method opsWith) [#_"BigDecimalOps" this, #_"BigDecimalOps" ___x]
        this
    )

    #_method
    (ยง defn #_"boolean" (ยง method isZero) [#_"BigDecimalOps" this, #_"Number" ___x]
        (let [#_"BigDecimal" ___bx (cast BigDecimal ___x)]
            (zero? (.signum ___bx))
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method isPos) [#_"BigDecimalOps" this, #_"Number" ___x]
        (let [#_"BigDecimal" ___bx (cast BigDecimal ___x)]
            (pos? (.signum ___bx))
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method isNeg) [#_"BigDecimalOps" this, #_"Number" ___x]
        (let [#_"BigDecimal" ___bx (cast BigDecimal ___x)]
            (neg? (.signum ___bx))
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method add) [#_"BigDecimalOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"MathContext" ___mc (cast MathContext (.deref BigDecimalOps'MATH_CONTEXT))]
            (if (nil? ___mc) (ร this.toBigDecimal(___x).add(this.toBigDecimal(___y))) (ร this.toBigDecimal(___x).add(this.toBigDecimal(___y), ___mc)))
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method multiply) [#_"BigDecimalOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"MathContext" ___mc (cast MathContext (.deref BigDecimalOps'MATH_CONTEXT))]
            (if (nil? ___mc) (ร this.toBigDecimal(___x).multiply(this.toBigDecimal(___y))) (ร this.toBigDecimal(___x).multiply(this.toBigDecimal(___y), ___mc)))
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method divide) [#_"BigDecimalOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"MathContext" ___mc (cast MathContext (.deref BigDecimalOps'MATH_CONTEXT))]
            (if (nil? ___mc) (ร this.toBigDecimal(___x).divide(this.toBigDecimal(___y))) (ร this.toBigDecimal(___x).divide(this.toBigDecimal(___y), ___mc)))
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method quotient) [#_"BigDecimalOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"MathContext" ___mc (cast MathContext (.deref BigDecimalOps'MATH_CONTEXT))]
            (if (nil? ___mc) (ร this.toBigDecimal(___x).divideToIntegralValue(this.toBigDecimal(___y))) (ร this.toBigDecimal(___x).divideToIntegralValue(this.toBigDecimal(___y), ___mc)))
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method remainder) [#_"BigDecimalOps" this, #_"Number" ___x, #_"Number" ___y]
        (let [#_"MathContext" ___mc (cast MathContext (.deref BigDecimalOps'MATH_CONTEXT))]
            (if (nil? ___mc) (ร this.toBigDecimal(___x).remainder(this.toBigDecimal(___y))) (ร this.toBigDecimal(___x).remainder(this.toBigDecimal(___y), ___mc)))
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"BigDecimalOps" this, #_"Number" ___x, #_"Number" ___y]
        (zero? (ร this.toBigDecimal(___x).compareTo(this.toBigDecimal(___y))))
    )

    #_method
    (ยง defn #_"boolean" (ยง method lt) [#_"BigDecimalOps" this, #_"Number" ___x, #_"Number" ___y]
        (neg? (ร this.toBigDecimal(___x).compareTo(this.toBigDecimal(___y))))
    )

    #_method
    (ยง defn #_"boolean" (ยง method lte) [#_"BigDecimalOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร (ร this.toBigDecimal(___x).compareTo(this.toBigDecimal(___y))) <= 0)
    )

    #_method
    (ยง defn #_"boolean" (ยง method gte) [#_"BigDecimalOps" this, #_"Number" ___x, #_"Number" ___y]
        (ร (ร this.toBigDecimal(___x).compareTo(this.toBigDecimal(___y))) >= 0)
    )

    #_method
    (ยง defn #_"Number" (ยง method negate) [#_"BigDecimalOps" this, #_"Number" ___x]
        (let [#_"MathContext" ___mc (cast MathContext (.deref BigDecimalOps'MATH_CONTEXT))]
            (if (nil? ___mc) (.negate (cast BigDecimal ___x)) (.negate (cast BigDecimal ___x), ___mc))
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method inc) [#_"BigDecimalOps" this, #_"Number" ___x]
        (let [#_"MathContext" ___mc (cast MathContext (.deref BigDecimalOps'MATH_CONTEXT))]
            (let [#_"BigDecimal" ___bx (cast BigDecimal ___x)]
                (if (nil? ___mc) (.add ___bx, BigDecimal/ONE) (.add ___bx, BigDecimal/ONE, ___mc))
            )
        )
    )

    #_method
    (ยง defn #_"Number" (ยง method dec) [#_"BigDecimalOps" this, #_"Number" ___x]
        (let [#_"MathContext" ___mc (cast MathContext (.deref BigDecimalOps'MATH_CONTEXT))]
            (let [#_"BigDecimal" ___bx (cast BigDecimal ___x)]
                (if (nil? ___mc) (.subtract ___bx, BigDecimal/ONE) (.subtract ___bx, BigDecimal/ONE, ___mc))
            )
        )
    )
)

(def Category'enum-set
    (hash-set
        :Category'INTEGER
        :Category'FLOATING
        :Category'DECIMAL
        :Category'RATIO
    )
)

#_stateless
(class-ns Numbers
    (defn #_"boolean" Numbers'isZero-1o [#_"Object" ___x]
        (ร Numbers'ops(___x).isZero((cast Number ___x)))
    )

    (defn #_"boolean" Numbers'isPos-1o [#_"Object" ___x]
        (ร Numbers'ops(___x).isPos((cast Number ___x)))
    )

    (defn #_"boolean" Numbers'isNeg-1o [#_"Object" ___x]
        (ร Numbers'ops(___x).isNeg((cast Number ___x)))
    )

    (defn #_"Number" Numbers'minus-1o [#_"Object" ___x]
        (ร Numbers'ops(___x).negate((cast Number ___x)))
    )

    (defn #_"Number" Numbers'minusP-1o [#_"Object" ___x]
        (ร Numbers'ops(___x).negateP((cast Number ___x)))
    )

    (defn #_"Number" Numbers'inc-1o [#_"Object" ___x]
        (ร Numbers'ops(___x).inc((cast Number ___x)))
    )

    (defn #_"Number" Numbers'incP-1o [#_"Object" ___x]
        (ร Numbers'ops(___x).incP((cast Number ___x)))
    )

    (defn #_"Number" Numbers'dec-1o [#_"Object" ___x]
        (ร Numbers'ops(___x).dec((cast Number ___x)))
    )

    (defn #_"Number" Numbers'decP-1o [#_"Object" ___x]
        (ร Numbers'ops(___x).decP((cast Number ___x)))
    )

    (defn #_"Number" Numbers'add-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร Numbers'ops(___x).combine(Numbers'ops(___y)).add((cast Number ___x), (cast Number ___y)))
    )

    (defn #_"Number" Numbers'addP-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร Numbers'ops(___x).combine(Numbers'ops(___y)).addP((cast Number ___x), (cast Number ___y)))
    )

    (defn #_"Number" Numbers'minus-2oo [#_"Object" ___x, #_"Object" ___y]
        (let [#_"Ops" ___yops (Numbers'ops ___y)]
            (ร Numbers'ops(___x).combine(___yops).add((cast Number ___x), ___yops.negate((cast Number ___y))))
        )
    )

    (defn #_"Number" Numbers'minusP-2oo [#_"Object" ___x, #_"Object" ___y]
        (let [#_"Ops" ___yops (Numbers'ops ___y)]
            (let [#_"Number" ___negativeY (.negateP ___yops, (cast Number ___y))]
                (let [#_"Ops" ___negativeYOps (Numbers'ops ___negativeY)]
                    (ร Numbers'ops(___x).combine(___negativeYOps).addP((cast Number ___x), ___negativeY))
                )
            )
        )
    )

    (defn #_"Number" Numbers'multiply-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร Numbers'ops(___x).combine(Numbers'ops(___y)).multiply((cast Number ___x), (cast Number ___y)))
    )

    (defn #_"Number" Numbers'multiplyP-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร Numbers'ops(___x).combine(Numbers'ops(___y)).multiplyP((cast Number ___x), (cast Number ___y)))
    )

    (defn #_"Number" Numbers'divide-2oo [#_"Object" ___x, #_"Object" ___y]
        (cond (Numbers'isNaN ___x)
            (do
                (ยง return (cast Number ___x))
            )
            (Numbers'isNaN ___y)
            (do
                (ยง return (cast Number ___y))
            )
        )
        (let [#_"Ops" ___yops (Numbers'ops ___y)]
            (when (.isZero ___yops, (cast Number ___y))
                (throw (ArithmeticException. "Divide by zero"))
            )
            (ร Numbers'ops(___x).combine(___yops).divide((cast Number ___x), (cast Number ___y)))
        )
    )

    (defn #_"Number" Numbers'quotient-2oo [#_"Object" ___x, #_"Object" ___y]
        (let [#_"Ops" ___yops (Numbers'ops ___y)]
            (when (.isZero ___yops, (cast Number ___y))
                (throw (ArithmeticException. "Divide by zero"))
            )
            (ร Numbers'ops(___x).combine(___yops).quotient((cast Number ___x), (cast Number ___y)))
        )
    )

    (defn #_"Number" Numbers'remainder-2oo [#_"Object" ___x, #_"Object" ___y]
        (let [#_"Ops" ___yops (Numbers'ops ___y)]
            (when (.isZero ___yops, (cast Number ___y))
                (throw (ArithmeticException. "Divide by zero"))
            )
            (ร Numbers'ops(___x).combine(___yops).remainder((cast Number ___x), (cast Number ___y)))
        )
    )

    (defn #_"double" Numbers'quotient-2dd [#_"double" ___n, #_"double" ___d]
        (when (zero? ___d)
            (throw (ArithmeticException. "Divide by zero"))
        )

        (let [#_"double" ___q (/ ___n ___d)]
            (cond (<= Long/MIN_VALUE ___q Long/MAX_VALUE)
                (do
                    (ร (double)(long) ___q)
                )
                :else ;; bigint quotient
                (do
                    (ร (BigDecimal. ___q).toBigInteger().doubleValue())
                )
            )
        )
    )

    (defn #_"double" Numbers'remainder-2dd [#_"double" ___n, #_"double" ___d]
        (when (zero? ___d)
            (throw (ArithmeticException. "Divide by zero"))
        )

        (let [#_"double" ___q (/ ___n ___d)]
            (cond (<= Long/MIN_VALUE ___q Long/MAX_VALUE)
                (do
                    (ร (___n - ((long) ___q) * ___d))
                )
                :else ;; bigint quotient
                (do
                    (let [#_"Number" ___bq (.toBigInteger (BigDecimal. ___q))]
                        (ร (___n - (.doubleValue ___bq) * ___d))
                    )
                )
            )
        )
    )

    (defn #_"boolean" Numbers'equiv-2oo [#_"Object" ___x, #_"Object" ___y]
        (Numbers'equiv-2nn (cast Number ___x), (cast Number ___y))
    )

    (defn #_"boolean" Numbers'equiv-2nn [#_"Number" ___x, #_"Number" ___y]
        (ร Numbers'ops(___x).combine(Numbers'ops(___y)).equiv(___x, ___y))
    )

    (defn #_"boolean" Numbers'equal [#_"Number" ___x, #_"Number" ___y]
        (and (ร category(___x) == category(___y)) (ร Numbers'ops(___x).combine(Numbers'ops(___y)).equiv(___x, ___y)))
    )

    (defn #_"boolean" Numbers'lt-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร Numbers'ops(___x).combine(Numbers'ops(___y)).lt((cast Number ___x), (cast Number ___y)))
    )

    (defn #_"boolean" Numbers'lte-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร Numbers'ops(___x).combine(Numbers'ops(___y)).lte((cast Number ___x), (cast Number ___y)))
    )

    (defn #_"boolean" Numbers'gt-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร Numbers'ops(___x).combine(Numbers'ops(___y)).lt((cast Number ___y), (cast Number ___x)))
    )

    (defn #_"boolean" Numbers'gte-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร Numbers'ops(___x).combine(Numbers'ops(___y)).gte((cast Number ___x), (cast Number ___y)))
    )

    (defn #_"int" Numbers'compare [#_"Number" ___x, #_"Number" ___y]
        (let [#_"Ops" ___ops (ร Numbers'ops(___x).combine(Numbers'ops(___y)))]
            (cond (.lt ___ops, ___x, ___y)
                (do
                    (ยง return -1)
                )
                (.lt ___ops, ___y, ___x)
                (do
                    (ยง return 1)
                )
            )
            0
        )
    )

    (defn #_"BigInt" Numbers'toBigInt [#_"Object" ___x]
        (when (ยง instance? BigInt ___x)
            (ยง return (cast' BigInt ___x))
        )
        (if (instance? BigInteger ___x)
            (do
                (BigInt'fromBigInteger (cast BigInteger ___x))
            )
            (do
                (ร BigInt'fromLong((cast Number ___x).longValue()))
            )
        )
    )

    (defn #_"BigInteger" Numbers'toBigInteger [#_"Object" ___x]
        (cond (instance? BigInteger ___x)
            (do
                (cast BigInteger ___x)
            )
            (ยง instance? BigInt ___x)
            (do
                (.toBigInteger (cast' BigInt ___x))
            )
            :else
            (do
                (ร BigInteger/valueOf((cast Number ___x).longValue()))
            )
        )
    )

    (defn #_"BigDecimal" Numbers'toBigDecimal [#_"Object" ___x]
        (cond (instance? BigDecimal ___x)
            (do
                (cast BigDecimal ___x)
            )
            (ยง instance? BigInt ___x)
            (do
                (let [#_"BigInt" ___bi (cast' BigInt ___x)]
                    (if (ร (nil? (:bipart ___bi)))
                        (do
                            (BigDecimal/valueOf (:lpart ___bi))
                        )
                        (do
                            (ยง unsure BigDecimal. (:bipart ___bi))
                        )
                    )
                )
            )
            (instance? BigInteger ___x)
            (do
                (ยง unsure BigDecimal. (cast BigInteger ___x))
            )
            (instance? Double ___x)
            (do
                (ยง unsure BigDecimal. (.doubleValue (cast Number ___x)))
            )
            (instance? Float ___x)
            (do
                (ยง unsure BigDecimal. (.doubleValue (cast Number ___x)))
            )
            (ยง instance? Ratio ___x)
            (do
                (let [#_"Ratio" ___r (cast' Ratio ___x)]
                    (cast BigDecimal (Numbers'divide-2oo (ยง unsure BigDecimal. (:numerator ___r)), (:denominator ___r)))
                )
            )
            :else
            (do
                (BigDecimal/valueOf (.longValue (cast Number ___x)))
            )
        )
    )

    (defn #_"Ratio" Numbers'toRatio [#_"Object" ___x]
        (cond (ยง instance? Ratio ___x)
            (do
                (ยง return (cast' Ratio ___x))
            )
            (instance? BigDecimal ___x)
            (do
                (let [#_"BigDecimal" ___bx (cast BigDecimal ___x)]
                    (let [#_"BigInteger" ___bv (.unscaledValue ___bx)]
                        (let [#_"int" ___scale (.scale ___bx)]
                            (if (< ___scale 0)
                                (do
                                    (ยง return (ร Ratio'new(___bv.multiply(BigInteger/TEN.pow(-scale)), BigInteger/ONE)))
                                )
                                (do
                                    (ยง return (ร Ratio'new(___bv, BigInteger/TEN.pow(___scale))))
                                )
                            )
                        )
                    )
                )
            )
        )
        (Ratio'new (Numbers'toBigInteger ___x), BigInteger/ONE)
    )

    (defn #_"Number" Numbers'rationalize [#_"Number" ___x]
        (cond (or (instance? Float ___x) (instance? Double ___x))
            (do
                (ยง return (ร rationalize(BigDecimal/valueOf((.doubleValue ___x)))))
            )
            (instance? BigDecimal ___x)
            (do
                (let [#_"BigDecimal" ___bx (cast BigDecimal ___x)]
                    (let [#_"BigInteger" ___bv (.unscaledValue ___bx)]
                        (let [#_"int" ___scale (.scale ___bx)]
                            (if (< ___scale 0)
                                (do
                                    (ยง return (ร BigInt'fromBigInteger(___bv.multiply(BigInteger/TEN.pow(-scale)))))
                                )
                                (do
                                    (ยง return (ร Numbers'divide-ii(___bv, BigInteger/TEN.pow(___scale))))
                                )
                            )
                        )
                    )
                )
            )
        )
        ___x
    )

    (defn #_"Number" Numbers'reduceBigInt [#_"BigInt" ___val]
        (if (ร (nil? (:bipart ___val)))
            (do
                (num (:lpart ___val))
            )
            (do
                (:bipart ___val)
            )
        )
    )

    (defn #_"Number" Numbers'divide-2ii [#_"BigInteger" ___n, #_"BigInteger" ___d]
        (when (.equals ___d, BigInteger/ZERO)
            (throw (ArithmeticException. "Divide by zero"))
        )
        (let [#_"BigInteger" ___gcd (.gcd ___n, ___d)]
            (when (.equals ___gcd, BigInteger/ZERO)
                (ยง return BigInt'ZERO)
            )
            (ยง ass ___n (.divide ___n, ___gcd))
            (ยง ass ___d (.divide ___d, ___gcd))
            (cond (.equals ___d, BigInteger/ONE)
                (do
                    (ยง return (BigInt'fromBigInteger ___n))
                )
                (ร ___d.equals(BigInteger/ONE.negate()))
                (do
                    (ยง return (BigInt'fromBigInteger (.negate ___n)))
                )
            )
            (Ratio'new (if (neg? (.signum ___d)) (.negate ___n) ___n), (if (neg? (.signum ___d)) (.negate ___d) ___d))
        )
    )

    (defn #_"int" Numbers'shiftLeftInt [#_"int" ___x, #_"int" ___n]
        (<< ___x ___n)
    )

    (defn #_"long" Numbers'shiftLeft-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร shiftLeft(bitOpsCast(___x), bitOpsCast(___y)))
    )
    (defn #_"long" Numbers'shiftLeft-2ol [#_"Object" ___x, #_"long" ___y]
        (ร shiftLeft(bitOpsCast(___x), ___y))
    )
    (defn #_"long" Numbers'shiftLeft-2lo [#_"long" ___x, #_"Object" ___y]
        (ร shiftLeft(___x, bitOpsCast(___y)))
    )
    (defn #_"long" Numbers'shiftLeft-2ll [#_"long" ___x, #_"long" ___n]
        (<< ___x ___n)
    )

    (defn #_"int" Numbers'shiftRightInt [#_"int" ___x, #_"int" ___n]
        (>> ___x ___n)
    )

    (defn #_"long" Numbers'shiftRight-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร shiftRight(bitOpsCast(___x), bitOpsCast(___y)))
    )
    (defn #_"long" Numbers'shiftRight-2ol [#_"Object" ___x, #_"long" ___y]
        (ร shiftRight(bitOpsCast(___x), ___y))
    )
    (defn #_"long" Numbers'shiftRight-2lo [#_"long" ___x, #_"Object" ___y]
        (ร shiftRight(___x, bitOpsCast(___y)))
    )
    (defn #_"long" Numbers'shiftRight-2ll [#_"long" ___x, #_"long" ___n]
        (>> ___x ___n)
    )

    (defn #_"int" Numbers'unsignedShiftRightInt [#_"int" ___x, #_"int" ___n]
        (>>> ___x ___n)
    )

    (defn #_"long" Numbers'unsignedShiftRight-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร unsignedShiftRight(bitOpsCast(___x), bitOpsCast(___y)))
    )
    (defn #_"long" Numbers'unsignedShiftRight-2ol [#_"Object" ___x, #_"long" ___y]
        (ร unsignedShiftRight(bitOpsCast(___x), ___y))
    )
    (defn #_"long" Numbers'unsignedShiftRight-2lo [#_"long" ___x, #_"Object" ___y]
        (ร unsignedShiftRight(___x, bitOpsCast(___y)))
    )
    (defn #_"long" Numbers'unsignedShiftRight-2ll [#_"long" ___x, #_"long" ___n]
        (>>> ___x ___n)
    )

    (ยง def #_"LongOps" Numbers'LONG_OPS (LongOps'new))
    (ยง def #_"DoubleOps" Numbers'DOUBLE_OPS (DoubleOps'new))
    (ยง def #_"RatioOps" Numbers'RATIO_OPS (RatioOps'new))
    (ยง def #_"BigIntOps" Numbers'BIGINT_OPS (BigIntOps'new))
    (ยง def #_"BigDecimalOps" Numbers'BIGDECIMAL_OPS (BigDecimalOps'new))

    (defn #_"Ops" Numbers'ops [#_"Object" ___x]
        (let [#_"Class" ___xc (.getClass ___x)]
            (cond (= ___xc Long)
                (do
                    Numbers'LONG_OPS
                )
                (= ___xc Double)
                (do
                    Numbers'DOUBLE_OPS
                )
                (= ___xc Integer)
                (do
                    Numbers'LONG_OPS
                )
                (= ___xc Float)
                (do
                    Numbers'DOUBLE_OPS
                )
                (ร ___xc == (ยง class BigInt))
                (do
                    Numbers'BIGINT_OPS
                )
                (= ___xc BigInteger)
                (do
                    Numbers'BIGINT_OPS
                )
                (ร ___xc == (ยง class Ratio))
                (do
                    Numbers'RATIO_OPS
                )
                (= ___xc BigDecimal)
                (do
                    Numbers'BIGDECIMAL_OPS
                )
                :else
                (do
                    Numbers'LONG_OPS
                )
            )
        )
    )

    (defn #_"int" Numbers'hasheqFrom [#_"Number" ___x, #_"Class" ___xc]
        (when (or (ร ___xc == Integer) (ร ___xc == Short) (ร ___xc == Byte) (and (ร ___xc == BigInteger) (Numbers'lte-2ol ___x, Long/MAX_VALUE) (Numbers'gte-2ol ___x, Long/MIN_VALUE)))
            (let [#_"long" ___lpart (.longValue ___x)]
                (ยง return (Murmur3'hashLong ___lpart))
            )
        )
        (when (= ___xc BigDecimal)
            ;; stripTrailingZeros() to make all numerically equal
            ;; BigDecimal values come out the same before calling
            ;; hashCode. Special check for 0 because
            ;; stripTrailingZeros() does not do anything to values
            ;; equal to 0 with different scales.
            (if (Numbers'isZero-1o ___x)
                (do
                    (ยง return (.hashCode BigDecimal/ZERO))
                )
                (do
                    (ยง return (ร (cast BigDecimal ___x).stripTrailingZeros().hashCode()))
                )
            )
        )
        (when (and (= ___xc Float) (.equals ___x, (float -0.0)))
            (ยง return 0) ;; match 0.0f
        )
        (.hashCode ___x)
    )

    (defn #_"int" Numbers'hasheq [#_"Number" ___x]
        (let [#_"Class" ___xc (.getClass ___x)]
            (when (= ___xc Long)
                (let [#_"long" ___lpart (.longValue ___x)]
                    (ยง return (Murmur3'hashLong ___lpart))
                )
            )
            (when (= ___xc Double)
                (when (.equals ___x, -0.0)
                    (ยง return 0) ;; match 0.0
                )
                (ยง return (.hashCode ___x))
            )
            (Numbers'hasheqFrom ___x, ___xc)
        )
    )

    (defn #_"Category" Numbers'category [#_"Object" ___x]
        (let [#_"Class" ___xc (.getClass ___x)]
            (cond (= ___xc Integer)
                (do
                    (ร :Category'INTEGER)
                )
                (= ___xc Double)
                (do
                    (ร :Category'FLOATING)
                )
                (= ___xc Long)
                (do
                    (ร :Category'INTEGER)
                )
                (= ___xc Float)
                (do
                    (ร :Category'FLOATING)
                )
                (ร ___xc == (ยง class BigInt))
                (do
                    (ร :Category'INTEGER)
                )
                (ร ___xc == (ยง class Ratio))
                (do
                    (ร :Category'RATIO)
                )
                (= ___xc BigDecimal)
                (do
                    (ร :Category'DECIMAL)
                )
                :else
                (do
                    (ร :Category'INTEGER)
                )
            )
        )
    )

    (defn #_"long" Numbers'bitOpsCast [#_"Object" ___x]
        (let [#_"Class" ___xc (.getClass ___x)]
            (when (or (ร ___xc == Long) (ร ___xc == Integer) (ร ___xc == Short) (ร ___xc == Byte))
                (ยง return (RT'longCast-1o ___x))
            )
            ;; no bignums, no decimals
            (throw (IllegalArgumentException. (str "bit operation not supported for: " ___xc)))
        )
    )

    (defn #_"float[]" Numbers'float_array-2 [#_"int" ___size, #_"Object" ___init]
        (let [#_"float[]" ___ret (.float-array ___size)]
            (if (instance? Number ___init)
                (do
                    (let [#_"float" ___f (.floatValue (cast Number ___init))]
                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___ret)) [(inc ___i)]
                            (ยง ass (ยง aget ___ret ___i) ___f)
                        )
                    )
                )
                (do
                    (let [#_"ISeq" ___s (RT'seq ___init)]
                        (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                            (ยง ass (ยง aget ___ret ___i) (.floatValue (cast Number (first ___s))))
                        )
                    )
                )
            )
            ___ret
        )
    )

    (defn #_"float[]" Numbers'float_array-1 [#_"Object" ___sizeOrSeq]
        (if (instance? Number ___sizeOrSeq)
            (do
                (.float-array (.intValue (cast Number ___sizeOrSeq)))
            )
            (do
                (let [#_"ISeq" ___s (RT'seq ___sizeOrSeq)]
                    (let [#_"int" ___size (RT'count ___s)]
                        (let [#_"float[]" ___ret (.float-array ___size)]
                            (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                                (ยง ass (ยง aget ___ret ___i) (.floatValue (cast Number (first ___s))))
                            )
                            ___ret
                        )
                    )
                )
            )
        )
    )

    (defn #_"double[]" Numbers'double_array-2 [#_"int" ___size, #_"Object" ___init]
        (let [#_"double[]" ___ret (.double-array ___size)]
            (if (instance? Number ___init)
                (do
                    (let [#_"double" ___f (.doubleValue (cast Number ___init))]
                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___ret)) [(inc ___i)]
                            (ยง ass (ยง aget ___ret ___i) ___f)
                        )
                    )
                )
                (do
                    (let [#_"ISeq" ___s (RT'seq ___init)]
                        (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                            (ยง ass (ยง aget ___ret ___i) (.doubleValue (cast Number (first ___s))))
                        )
                    )
                )
            )
            ___ret
        )
    )

    (defn #_"double[]" Numbers'double_array-1 [#_"Object" ___sizeOrSeq]
        (if (instance? Number ___sizeOrSeq)
            (do
                (.double-array (.intValue (cast Number ___sizeOrSeq)))
            )
            (do
                (let [#_"ISeq" ___s (RT'seq ___sizeOrSeq)]
                    (let [#_"int" ___size (RT'count ___s)]
                        (let [#_"double[]" ___ret (.double-array ___size)]
                            (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                                (ยง ass (ยง aget ___ret ___i) (.doubleValue (cast Number (first ___s))))
                            )
                            ___ret
                        )
                    )
                )
            )
        )
    )

    (defn #_"int[]" Numbers'int_array-2 [#_"int" ___size, #_"Object" ___init]
        (let [#_"int[]" ___ret (.int-array ___size)]
            (if (instance? Number ___init)
                (do
                    (let [#_"int" ___f (.intValue (cast Number ___init))]
                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___ret)) [(inc ___i)]
                            (ยง ass (ยง aget ___ret ___i) ___f)
                        )
                    )
                )
                (do
                    (let [#_"ISeq" ___s (RT'seq ___init)]
                        (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                            (ยง ass (ยง aget ___ret ___i) (.intValue (cast Number (first ___s))))
                        )
                    )
                )
            )
            ___ret
        )
    )

    (defn #_"int[]" Numbers'int_array-1 [#_"Object" ___sizeOrSeq]
        (if (instance? Number ___sizeOrSeq)
            (do
                (.int-array (.intValue (cast Number ___sizeOrSeq)))
            )
            (do
                (let [#_"ISeq" ___s (RT'seq ___sizeOrSeq)]
                    (let [#_"int" ___size (RT'count ___s)]
                        (let [#_"int[]" ___ret (.int-array ___size)]
                            (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                                (ยง ass (ยง aget ___ret ___i) (.intValue (cast Number (first ___s))))
                            )
                            ___ret
                        )
                    )
                )
            )
        )
    )

    (defn #_"long[]" Numbers'long_array-2 [#_"int" ___size, #_"Object" ___init]
        (let [#_"long[]" ___ret (.long-array ___size)]
            (if (instance? Number ___init)
                (do
                    (let [#_"long" ___f (.longValue (cast Number ___init))]
                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___ret)) [(inc ___i)]
                            (ยง ass (ยง aget ___ret ___i) ___f)
                        )
                    )
                )
                (do
                    (let [#_"ISeq" ___s (RT'seq ___init)]
                        (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                            (ยง ass (ยง aget ___ret ___i) (.longValue (cast Number (first ___s))))
                        )
                    )
                )
            )
            ___ret
        )
    )

    (defn #_"long[]" Numbers'long_array-1 [#_"Object" ___sizeOrSeq]
        (if (instance? Number ___sizeOrSeq)
            (do
                (.long-array (.intValue (cast Number ___sizeOrSeq)))
            )
            (do
                (let [#_"ISeq" ___s (RT'seq ___sizeOrSeq)]
                    (let [#_"int" ___size (RT'count ___s)]
                        (let [#_"long[]" ___ret (.long-array ___size)]
                            (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                                (ยง ass (ยง aget ___ret ___i) (.longValue (cast Number (first ___s))))
                            )
                            ___ret
                        )
                    )
                )
            )
        )
    )

    (defn #_"short[]" Numbers'short_array-2 [#_"int" ___size, #_"Object" ___init]
        (let [#_"short[]" ___ret (.short-array ___size)]
            (if (instance? Short ___init)
                (do
                    (let [#_"short" ___s (cast Short ___init)]
                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___ret)) [(inc ___i)]
                            (ยง ass (ยง aget ___ret ___i) ___s)
                        )
                    )
                )
                (do
                    (let [#_"ISeq" ___s (RT'seq ___init)]
                        (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                            (ยง ass (ยง aget ___ret ___i) (.shortValue (cast Number (first ___s))))
                        )
                    )
                )
            )
            ___ret
        )
    )

    (defn #_"short[]" Numbers'short_array-1 [#_"Object" ___sizeOrSeq]
        (if (instance? Number ___sizeOrSeq)
            (do
                (.short-array (.intValue (cast Number ___sizeOrSeq)))
            )
            (do
                (let [#_"ISeq" ___s (RT'seq ___sizeOrSeq)]
                    (let [#_"int" ___size (RT'count ___s)]
                        (let [#_"short[]" ___ret (.short-array ___size)]
                            (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                                (ยง ass (ยง aget ___ret ___i) (.shortValue (cast Number (first ___s))))
                            )
                            ___ret
                        )
                    )
                )
            )
        )
    )

    (defn #_"char[]" Numbers'char_array-2 [#_"int" ___size, #_"Object" ___init]
        (let [#_"char[]" ___ret (.char-array ___size)]
            (if (instance? Character ___init)
                (do
                    (let [#_"char" ___c (cast Character ___init)]
                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___ret)) [(inc ___i)]
                            (ยง ass (ยง aget ___ret ___i) ___c)
                        )
                    )
                )
                (do
                    (let [#_"ISeq" ___s (RT'seq ___init)]
                        (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                            (ยง ass (ยง aget ___ret ___i) (cast Character (first ___s)))
                        )
                    )
                )
            )
            ___ret
        )
    )

    (defn #_"char[]" Numbers'char_array-1 [#_"Object" ___sizeOrSeq]
        (if (instance? Number ___sizeOrSeq)
            (do
                (.char-array (.intValue (cast Number ___sizeOrSeq)))
            )
            (do
                (let [#_"ISeq" ___s (RT'seq ___sizeOrSeq)]
                    (let [#_"int" ___size (RT'count ___s)]
                        (let [#_"char[]" ___ret (.char-array ___size)]
                            (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                                (ยง ass (ยง aget ___ret ___i) (cast Character (first ___s)))
                            )
                            ___ret
                        )
                    )
                )
            )
        )
    )

    (defn #_"byte[]" Numbers'byte_array-2 [#_"int" ___size, #_"Object" ___init]
        (let [#_"byte[]" ___ret (.byte-array ___size)]
            (if (instance? Byte ___init)
                (do
                    (let [#_"byte" ___b (cast Byte ___init)]
                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___ret)) [(inc ___i)]
                            (ยง ass (ยง aget ___ret ___i) ___b)
                        )
                    )
                )
                (do
                    (let [#_"ISeq" ___s (RT'seq ___init)]
                        (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                            (ยง ass (ยง aget ___ret ___i) (.byteValue (cast Number (first ___s))))
                        )
                    )
                )
            )
            ___ret
        )
    )

    (defn #_"byte[]" Numbers'byte_array-1 [#_"Object" ___sizeOrSeq]
        (if (instance? Number ___sizeOrSeq)
            (do
                (.byte-array (.intValue (cast Number ___sizeOrSeq)))
            )
            (do
                (let [#_"ISeq" ___s (RT'seq ___sizeOrSeq)]
                    (let [#_"int" ___size (RT'count ___s)]
                        (let [#_"byte[]" ___ret (.byte-array ___size)]
                            (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                                (ยง ass (ยง aget ___ret ___i) (.byteValue (cast Number (first ___s))))
                            )
                            ___ret
                        )
                    )
                )
            )
        )
    )

    (defn #_"boolean[]" Numbers'boolean_array-2 [#_"int" ___size, #_"Object" ___init]
        (let [#_"boolean[]" ___ret (.boolean-array ___size)]
            (if (instance? Boolean ___init)
                (do
                    (let [#_"boolean" ___b (cast Boolean ___init)]
                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___ret)) [(inc ___i)]
                            (ยง ass (ยง aget ___ret ___i) ___b)
                        )
                    )
                )
                (do
                    (let [#_"ISeq" ___s (RT'seq ___init)]
                        (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                            (ยง ass (ยง aget ___ret ___i) (cast Boolean (.first ___s)))
                        )
                    )
                )
            )
            ___ret
        )
    )

    (defn #_"boolean[]" Numbers'boolean_array-1 [#_"Object" ___sizeOrSeq]
        (if (instance? Number ___sizeOrSeq)
            (do
                (.boolean-array (.intValue (cast Number ___sizeOrSeq)))
            )
            (do
                (let [#_"ISeq" ___s (RT'seq ___sizeOrSeq)]
                    (let [#_"int" ___size (RT'count ___s)]
                        (let [#_"boolean[]" ___ret (.boolean-array ___size)]
                            (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (ร ___i < ___size) (some? ___s)) [(inc ___i) (next ___s)]
                                (ยง ass (ยง aget ___ret ___i) (cast Boolean (.first ___s)))
                            )
                            ___ret
                        )
                    )
                )
            )
        )
    )

    (defn #_"boolean[]" Numbers'booleans [#_"Object" ___array]
        (.booleans ___array)
    )

    (defn #_"byte[]" Numbers'bytes [#_"Object" ___array]
        (.bytes ___array)
    )

    (defn #_"char[]" Numbers'chars [#_"Object" ___array]
        (.chars ___array)
    )

    (defn #_"short[]" Numbers'shorts [#_"Object" ___array]
        (.shorts ___array)
    )

    (defn #_"float[]" Numbers'floats [#_"Object" ___array]
        (.floats ___array)
    )

    (defn #_"double[]" Numbers'doubles [#_"Object" ___array]
        (.doubles ___array)
    )

    (defn #_"int[]" Numbers'ints [#_"Object" ___array]
        (.ints ___array)
    )

    (defn #_"long[]" Numbers'longs [#_"Object" ___array]
        (.longs ___array)
    )

    (defn #_"Number" Numbers'num-1o [#_"Object" ___x]
        (cast Number ___x)
    )

    (defn #_"Number" Numbers'num-1f [#_"float" ___x]
        (Float/valueOf ___x)
    )

    (defn #_"Number" Numbers'num-1d [#_"double" ___x]
        (Double/valueOf ___x)
    )

    (defn #_"double" Numbers'add-2dd [#_"double" ___x, #_"double" ___y]
        (+ ___x ___y)
    )

    (defn #_"double" Numbers'addP-2dd [#_"double" ___x, #_"double" ___y]
        (+ ___x ___y)
    )

    (defn #_"double" Numbers'minus-2dd [#_"double" ___x, #_"double" ___y]
        (- ___x ___y)
    )

    (defn #_"double" Numbers'minusP-2dd [#_"double" ___x, #_"double" ___y]
        (- ___x ___y)
    )

    (defn #_"double" Numbers'minus-1d [#_"double" ___x]
        (- ___x)
    )

    (defn #_"double" Numbers'minusP-1d [#_"double" ___x]
        (- ___x)
    )

    (defn #_"double" Numbers'inc-1d [#_"double" ___x]
        (+ ___x 1)
    )

    (defn #_"double" Numbers'incP-1d [#_"double" ___x]
        (+ ___x 1)
    )

    (defn #_"double" Numbers'dec-1d [#_"double" ___x]
        (- ___x 1)
    )

    (defn #_"double" Numbers'decP-1d [#_"double" ___x]
        (- ___x 1)
    )

    (defn #_"double" Numbers'multiply-2dd [#_"double" ___x, #_"double" ___y]
        (* ___x ___y)
    )

    (defn #_"double" Numbers'multiplyP-2dd [#_"double" ___x, #_"double" ___y]
        (* ___x ___y)
    )

    (defn #_"double" Numbers'divide-2dd [#_"double" ___x, #_"double" ___y]
        (/ ___x ___y)
    )

    (defn #_"boolean" Numbers'equiv-2dd [#_"double" ___x, #_"double" ___y]
        (= ___x ___y)
    )

    (defn #_"boolean" Numbers'lt-2dd [#_"double" ___x, #_"double" ___y]
        (< ___x ___y)
    )

    (defn #_"boolean" Numbers'lte-2dd [#_"double" ___x, #_"double" ___y]
        (<= ___x ___y)
    )

    (defn #_"boolean" Numbers'gt-2dd [#_"double" ___x, #_"double" ___y]
        (> ___x ___y)
    )

    (defn #_"boolean" Numbers'gte-2dd [#_"double" ___x, #_"double" ___y]
        (>= ___x ___y)
    )

    (defn #_"boolean" Numbers'isPos-1d [#_"double" ___x]
        (> ___x 0)
    )

    (defn #_"boolean" Numbers'isNeg-1d [#_"double" ___x]
        (< ___x 0)
    )

    (defn #_"boolean" Numbers'isZero-1d [#_"double" ___x]
        (zero? ___x)
    )

    (defn #_"int" Numbers'throwIntOverflow []
        (throw (ArithmeticException. "integer overflow"))
    )

    (defn #_"int" Numbers'unchecked_int_add [#_"int" ___x, #_"int" ___y]
        (+ ___x ___y)
    )

    (defn #_"int" Numbers'unchecked_int_subtract [#_"int" ___x, #_"int" ___y]
        (- ___x ___y)
    )

    (defn #_"int" Numbers'unchecked_int_negate [#_"int" ___x]
        (- ___x)
    )

    (defn #_"int" Numbers'unchecked_int_inc [#_"int" ___x]
        (+ ___x 1)
    )

    (defn #_"int" Numbers'unchecked_int_dec [#_"int" ___x]
        (- ___x 1)
    )

    (defn #_"int" Numbers'unchecked_int_multiply [#_"int" ___x, #_"int" ___y]
        (* ___x ___y)
    )

    (defn #_"long" Numbers'not-1o [#_"Object" ___x]
        (ร not(bitOpsCast(___x)))
    )

    (defn #_"long" Numbers'not-1l [#_"long" ___x]
        (ร ~___x)
    )

    (defn #_"long" Numbers'and-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร and(bitOpsCast(___x), bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'and-2ol [#_"Object" ___x, #_"long" ___y]
        (ร and(bitOpsCast(___x), ___y))
    )

    (defn #_"long" Numbers'and-2lo [#_"long" ___x, #_"Object" ___y]
        (ร and(___x, bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'and-2ll [#_"long" ___x, #_"long" ___y]
        (ร ___x & ___y)
    )

    (defn #_"long" Numbers'or-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร or(bitOpsCast(___x), bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'or-2ol [#_"Object" ___x, #_"long" ___y]
        (ร or(bitOpsCast(___x), ___y))
    )

    (defn #_"long" Numbers'or-2lo [#_"long" ___x, #_"Object" ___y]
        (ร or(___x, bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'or-2ll [#_"long" ___x, #_"long" ___y]
        (ร ___x | ___y)
    )

    (defn #_"long" Numbers'xor-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร xor(bitOpsCast(___x), bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'xor-2ol [#_"Object" ___x, #_"long" ___y]
        (ร xor(bitOpsCast(___x), ___y))
    )

    (defn #_"long" Numbers'xor-2lo [#_"long" ___x, #_"Object" ___y]
        (ร xor(___x, bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'xor-2ll [#_"long" ___x, #_"long" ___y]
        (ร ___x :xor ___y)
    )

    (defn #_"long" Numbers'andNot-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร andNot(bitOpsCast(___x), bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'andNot-2ol [#_"Object" ___x, #_"long" ___y]
        (ร andNot(bitOpsCast(___x), ___y))
    )

    (defn #_"long" Numbers'andNot-2lo [#_"long" ___x, #_"Object" ___y]
        (ร andNot(___x, bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'andNot-2ll [#_"long" ___x, #_"long" ___y]
        (ร ___x & ~___y)
    )

    (defn #_"long" Numbers'clearBit-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร clearBit(bitOpsCast(___x), bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'clearBit-2ol [#_"Object" ___x, #_"long" ___y]
        (ร clearBit(bitOpsCast(___x), ___y))
    )

    (defn #_"long" Numbers'clearBit-2lo [#_"long" ___x, #_"Object" ___y]
        (ร clearBit(___x, bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'clearBit-2ll [#_"long" ___x, #_"long" ___n]
        (ร ___x & ~(1 << ___n))
    )

    (defn #_"long" Numbers'setBit-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร setBit(bitOpsCast(___x), bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'setBit-2ol [#_"Object" ___x, #_"long" ___y]
        (ร setBit(bitOpsCast(___x), ___y))
    )

    (defn #_"long" Numbers'setBit-2lo [#_"long" ___x, #_"Object" ___y]
        (ร setBit(___x, bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'setBit-2ll [#_"long" ___x, #_"long" ___n]
        (ร ___x | (1 << ___n))
    )

    (defn #_"long" Numbers'flipBit-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร flipBit(bitOpsCast(___x), bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'flipBit-2ol [#_"Object" ___x, #_"long" ___y]
        (ร flipBit(bitOpsCast(___x), ___y))
    )

    (defn #_"long" Numbers'flipBit-2lo [#_"long" ___x, #_"Object" ___y]
        (ร flipBit(___x, bitOpsCast(___y)))
    )

    (defn #_"long" Numbers'flipBit-2ll [#_"long" ___x, #_"long" ___n]
        (ร ___x :xor (1 << ___n))
    )

    (defn #_"boolean" Numbers'testBit-2oo [#_"Object" ___x, #_"Object" ___y]
        (ร testBit(bitOpsCast(___x), bitOpsCast(___y)))
    )

    (defn #_"boolean" Numbers'testBit-2ol [#_"Object" ___x, #_"long" ___y]
        (ร testBit(bitOpsCast(___x), ___y))
    )

    (defn #_"boolean" Numbers'testBit-2lo [#_"long" ___x, #_"Object" ___y]
        (ร testBit(___x, bitOpsCast(___y)))
    )

    (defn #_"boolean" Numbers'testBit-2ll [#_"long" ___x, #_"long" ___n]
        (ร ((___x & (1 << ___n)) != 0))
    )

    (defn #_"int" Numbers'unchecked_int_divide [#_"int" ___x, #_"int" ___y]
        (/ ___x ___y)
    )

    (defn #_"int" Numbers'unchecked_int_remainder [#_"int" ___x, #_"int" ___y]
        (ร ___x % ___y)
    )

    (defn #_"Number" Numbers'num-1l [#_"long" ___x]
        (Long/valueOf ___x)
    )

    (defn #_"long" Numbers'unchecked_add-2ll [#_"long" ___x, #_"long" ___y]
        (+ ___x ___y)
    )

    (defn #_"long" Numbers'unchecked_minus-2ll [#_"long" ___x, #_"long" ___y]
        (- ___x ___y)
    )

    (defn #_"long" Numbers'unchecked_multiply-2ll [#_"long" ___x, #_"long" ___y]
        (* ___x ___y)
    )

    (defn #_"long" Numbers'unchecked_minus-1l [#_"long" ___x]
        (- ___x)
    )

    (defn #_"long" Numbers'unchecked_inc-1l [#_"long" ___x]
        (+ ___x 1)
    )

    (defn #_"long" Numbers'unchecked_dec-1l [#_"long" ___x]
        (- ___x 1)
    )

    (defn #_"Number" Numbers'unchecked_add-2oo [#_"Object" ___x, #_"Object" ___y]
        (Numbers'add-2oo ___x, ___y)
    )

    (defn #_"Number" Numbers'unchecked_minus-2oo [#_"Object" ___x, #_"Object" ___y]
        (Numbers'minus-2oo ___x, ___y)
    )

    (defn #_"Number" Numbers'unchecked_multiply-2oo [#_"Object" ___x, #_"Object" ___y]
        (Numbers'multiply-2oo ___x, ___y)
    )

    (defn #_"Number" Numbers'unchecked_minus-1o [#_"Object" ___x]
        (Numbers'minus-1o ___x)
    )

    (defn #_"Number" Numbers'unchecked_inc-1o [#_"Object" ___x]
        (Numbers'inc-1o ___x)
    )

    (defn #_"Number" Numbers'unchecked_dec-1o [#_"Object" ___x]
        (Numbers'dec-1o ___x)
    )

    (defn #_"double" Numbers'unchecked_add-2dd [#_"double" ___x, #_"double" ___y]
        (Numbers'add-2dd ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_minus-2dd [#_"double" ___x, #_"double" ___y]
        (Numbers'minus-2dd ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_multiply-2dd [#_"double" ___x, #_"double" ___y]
        (Numbers'multiply-2dd ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_minus-1d [#_"double" ___x]
        (Numbers'minus-1d ___x)
    )

    (defn #_"double" Numbers'unchecked_inc-1d [#_"double" ___x]
        (Numbers'inc-1d ___x)
    )

    (defn #_"double" Numbers'unchecked_dec-1d [#_"double" ___x]
        (Numbers'dec-1d ___x)
    )

    (defn #_"double" Numbers'unchecked_add-2do [#_"double" ___x, #_"Object" ___y]
        (Numbers'add-2do ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_minus-2do [#_"double" ___x, #_"Object" ___y]
        (Numbers'minus-2do ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_multiply-2do [#_"double" ___x, #_"Object" ___y]
        (Numbers'multiply-2do ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_add-2od [#_"Object" ___x, #_"double" ___y]
        (Numbers'add-2od ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_minus-2od [#_"Object" ___x, #_"double" ___y]
        (Numbers'minus-2od ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_multiply-2od [#_"Object" ___x, #_"double" ___y]
        (Numbers'multiply-2od ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_add-2dl [#_"double" ___x, #_"long" ___y]
        (Numbers'add-2dl ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_minus-2dl [#_"double" ___x, #_"long" ___y]
        (Numbers'minus-2dl ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_multiply-2dl [#_"double" ___x, #_"long" ___y]
        (Numbers'multiply-2dl ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_add-2ld [#_"long" ___x, #_"double" ___y]
        (Numbers'add-2ld ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_minus-2ld [#_"long" ___x, #_"double" ___y]
        (Numbers'minus-2ld ___x, ___y)
    )

    (defn #_"double" Numbers'unchecked_multiply-2ld [#_"long" ___x, #_"double" ___y]
        (Numbers'multiply-2ld ___x, ___y)
    )

    (defn #_"Number" Numbers'unchecked_add-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'add-2lo ___x, ___y)
    )

    (defn #_"Number" Numbers'unchecked_minus-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'minus-2lo ___x, ___y)
    )

    (defn #_"Number" Numbers'unchecked_multiply-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'multiply-2lo ___x, ___y)
    )

    (defn #_"Number" Numbers'unchecked_add-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'add-2ol ___x, ___y)
    )

    (defn #_"Number" Numbers'unchecked_minus-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'minus-2ol ___x, ___y)
    )

    (defn #_"Number" Numbers'unchecked_multiply-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'multiply-2ol ___x, ___y)
    )

    (defn #_"Number" Numbers'quotient-2do [#_"double" ___x, #_"Object" ___y]
        (Numbers'quotient-2oo (cast Object ___x), ___y)
    )

    (defn #_"Number" Numbers'quotient-2od [#_"Object" ___x, #_"double" ___y]
        (Numbers'quotient-2oo ___x, (cast Object ___y))
    )

    (defn #_"Number" Numbers'quotient-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'quotient-2oo (cast Object ___x), ___y)
    )

    (defn #_"Number" Numbers'quotient-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'quotient-2oo ___x, (cast Object ___y))
    )

    (defn #_"double" Numbers'quotient-2dl [#_"double" ___x, #_"long" ___y]
        (Numbers'quotient-2dd ___x, (double ___y))
    )

    (defn #_"double" Numbers'quotient-2ld [#_"long" ___x, #_"double" ___y]
        (Numbers'quotient-2dd (double ___x), ___y)
    )

    (defn #_"Number" Numbers'remainder-2do [#_"double" ___x, #_"Object" ___y]
        (Numbers'remainder-2oo (cast Object ___x), ___y)
    )

    (defn #_"Number" Numbers'remainder-2od [#_"Object" ___x, #_"double" ___y]
        (Numbers'remainder-2oo ___x, (cast Object ___y))
    )

    (defn #_"Number" Numbers'remainder-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'remainder-2oo (cast Object ___x), ___y)
    )

    (defn #_"Number" Numbers'remainder-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'remainder-2oo ___x, (cast Object ___y))
    )

    (defn #_"double" Numbers'remainder-2dl [#_"double" ___x, #_"long" ___y]
        (Numbers'remainder-2dd ___x, (double ___y))
    )

    (defn #_"double" Numbers'remainder-2ld [#_"long" ___x, #_"double" ___y]
        (Numbers'remainder-2dd (double ___x), ___y)
    )

    (defn #_"long" Numbers'add-2ll [#_"long" ___x, #_"long" ___y]
        (let [#_"long" ___ret (+ ___x ___y)]
            (when (and (neg? (ร ___ret :xor ___x)) (neg? (ร ___ret :xor ___y)))
                (ยง return (throwIntOverflow))
            )
            ___ret
        )
    )

    (defn #_"Number" Numbers'addP-2ll [#_"long" ___x, #_"long" ___y]
        (let [#_"long" ___ret (+ ___x ___y)]
            (when (and (neg? (ร ___ret :xor ___x)) (neg? (ร ___ret :xor ___y)))
                (ยง return (Numbers'addP-2oo (cast Number ___x), (cast Number ___y)))
            )
            (num ___ret)
        )
    )

    (defn #_"long" Numbers'minus-2ll [#_"long" ___x, #_"long" ___y]
        (let [#_"long" ___ret (- ___x ___y)]
            (when (and (neg? (ร ___ret :xor ___x)) (neg? (ร ___ret :xor (ร ~ ___y))))
                (ยง return (throwIntOverflow))
            )
            ___ret
        )
    )

    (defn #_"Number" Numbers'minusP-2ll [#_"long" ___x, #_"long" ___y]
        (let [#_"long" ___ret (- ___x ___y)]
            (when (and (neg? (ร ___ret :xor ___x)) (neg? (ร ___ret :xor (ร ~ ___y))))
                (ยง return (ร minusP((cast Number ___x), (cast Number ___y))))
            )
            (num ___ret)
        )
    )

    (defn #_"long" Numbers'minus-1l [#_"long" ___x]
        (when (= ___x Long/MIN_VALUE)
            (ยง return (throwIntOverflow))
        )
        (- ___x)
    )

    (defn #_"Number" Numbers'minusP-1l [#_"long" ___x]
        (when (= ___x Long/MIN_VALUE)
            (ยง return (ร BigInt'fromBigInteger(BigInteger/valueOf(___x).negate())))
        )
        (num (- ___x))
    )

    (defn #_"long" Numbers'inc-1l [#_"long" ___x]
        (when (= ___x Long/MAX_VALUE)
            (ยง return (throwIntOverflow))
        )
        (inc ___x)
    )

    (defn #_"Number" Numbers'incP-1l [#_"long" ___x]
        (when (= ___x Long/MAX_VALUE)
            (ยง return (.inc Numbers'BIGINT_OPS, ___x))
        )
        (ร num(___x + 1))
    )

    (defn #_"long" Numbers'dec-1l [#_"long" ___x]
        (when (= ___x Long/MIN_VALUE)
            (ยง return (throwIntOverflow))
        )
        (dec ___x)
    )

    (defn #_"Number" Numbers'decP-1l [#_"long" ___x]
        (when (= ___x Long/MIN_VALUE)
            (ยง return (.dec Numbers'BIGINT_OPS, ___x))
        )
        (ร num(___x - 1))
    )

    (defn #_"long" Numbers'multiply-2ll [#_"long" ___x, #_"long" ___y]
        (when (and (ร ___x == Long/MIN_VALUE) (neg? ___y))
            (ยง return (throwIntOverflow))
        )
        (let [#_"long" ___ret (* ___x ___y)]
            (when (and (ร ___y != 0) (ร ___ret / ___y != ___x))
                (ยง return (throwIntOverflow))
            )
            ___ret
        )
    )

    (defn #_"Number" Numbers'multiplyP-2ll [#_"long" ___x, #_"long" ___y]
        (when (and (ร ___x == Long/MIN_VALUE) (neg? ___y))
            (ยง return (Numbers'multiplyP (cast Number ___x), (cast Number ___y)))
        )
        (let [#_"long" ___ret (* ___x ___y)]
            (when (and (ร ___y != 0) (ร ___ret / ___y != ___x))
                (ยง return (Numbers'multiplyP (cast Number ___x), (cast Number ___y)))
            )
            (num ___ret)
        )
    )

    (defn #_"long" Numbers'quotient-2ll [#_"long" ___x, #_"long" ___y]
        (/ ___x ___y)
    )

    (defn #_"long" Numbers'remainder-2ll [#_"long" ___x, #_"long" ___y]
        (ร ___x % ___y)
    )

    (defn #_"boolean" Numbers'equiv-2ll [#_"long" ___x, #_"long" ___y]
        (= ___x ___y)
    )

    (defn #_"boolean" Numbers'lt-2ll [#_"long" ___x, #_"long" ___y]
        (< ___x ___y)
    )

    (defn #_"boolean" Numbers'lte-2ll [#_"long" ___x, #_"long" ___y]
        (<= ___x ___y)
    )

    (defn #_"boolean" Numbers'gt-2ll [#_"long" ___x, #_"long" ___y]
        (> ___x ___y)
    )

    (defn #_"boolean" Numbers'gte-2ll [#_"long" ___x, #_"long" ___y]
        (>= ___x ___y)
    )

    (defn #_"boolean" Numbers'isPos-1l [#_"long" ___x]
        (> ___x 0)
    )

    (defn #_"boolean" Numbers'isNeg-1l [#_"long" ___x]
        (< ___x 0)
    )

    (defn #_"boolean" Numbers'isZero-1l [#_"long" ___x]
        (zero? ___x)
    )

    ;; overload resolution

    (defn #_"Number" Numbers'add-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'add-2oo (cast Object ___x), ___y)
    )

    (defn #_"Number" Numbers'add-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'add-2oo ___x, (cast Object ___y))
    )

    (defn #_"Number" Numbers'addP-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'addP-2oo (cast Object ___x), ___y)
    )

    (defn #_"Number" Numbers'addP-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'addP-2oo ___x, (cast Object ___y))
    )

    (defn #_"double" Numbers'add-2do [#_"double" ___x, #_"Object" ___y]
        (Numbers'add-2dd ___x, (.doubleValue (cast Number ___y)))
    )

    (defn #_"double" Numbers'add-2od [#_"Object" ___x, #_"double" ___y]
        (Numbers'add-2dd (.doubleValue (cast Number ___x)), ___y)
    )

    (defn #_"double" Numbers'add-2dl [#_"double" ___x, #_"long" ___y]
        (+ ___x ___y)
    )

    (defn #_"double" Numbers'add-2ld [#_"long" ___x, #_"double" ___y]
        (+ ___x ___y)
    )

    (defn #_"double" Numbers'addP-2do [#_"double" ___x, #_"Object" ___y]
        (Numbers'addP-2dd ___x, (.doubleValue (cast Number ___y)))
    )

    (defn #_"double" Numbers'addP-2od [#_"Object" ___x, #_"double" ___y]
        (Numbers'addP-2dd (.doubleValue (cast Number ___x)), ___y)
    )

    (defn #_"double" Numbers'addP-2dl [#_"double" ___x, #_"long" ___y]
        (+ ___x ___y)
    )

    (defn #_"double" Numbers'addP-2ld [#_"long" ___x, #_"double" ___y]
        (+ ___x ___y)
    )

    (defn #_"Number" Numbers'minus-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'minus-2oo (cast Object ___x), ___y)
    )

    (defn #_"Number" Numbers'minus-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'minus-2oo ___x, (cast Object ___y))
    )

    (defn #_"Number" Numbers'minusP-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'minusP-2oo (cast Object ___x), ___y)
    )

    (defn #_"Number" Numbers'minusP-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'minusP-2oo ___x, (cast Object ___y))
    )

    (defn #_"double" Numbers'minus-2do [#_"double" ___x, #_"Object" ___y]
        (Numbers'minus-2dd ___x, (.doubleValue (cast Number ___y)))
    )

    (defn #_"double" Numbers'minus-2od [#_"Object" ___x, #_"double" ___y]
        (Numbers'minus-2dd (.doubleValue (cast Number ___x)), ___y)
    )

    (defn #_"double" Numbers'minus-2dl [#_"double" ___x, #_"long" ___y]
        (- ___x ___y)
    )

    (defn #_"double" Numbers'minus-2ld [#_"long" ___x, #_"double" ___y]
        (- ___x ___y)
    )

    (defn #_"double" Numbers'minusP-2do [#_"double" ___x, #_"Object" ___y]
        (Numbers'minus-2dd ___x, (.doubleValue (cast Number ___y)))
    )

    (defn #_"double" Numbers'minusP-2od [#_"Object" ___x, #_"double" ___y]
        (Numbers'minus-2dd (.doubleValue (cast Number ___x)), ___y)
    )

    (defn #_"double" Numbers'minusP-2dl [#_"double" ___x, #_"long" ___y]
        (- ___x ___y)
    )

    (defn #_"double" Numbers'minusP-2ld [#_"long" ___x, #_"double" ___y]
        (- ___x ___y)
    )

    (defn #_"Number" Numbers'multiply-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'multiply-2oo (cast Object ___x), ___y)
    )

    (defn #_"Number" Numbers'multiply-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'multiply-2oo ___x, (cast Object ___y))
    )

    (defn #_"Number" Numbers'multiplyP-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'multiplyP-2oo (cast Object ___x), ___y)
    )

    (defn #_"Number" Numbers'multiplyP-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'multiplyP-2oo ___x, (cast Object ___y))
    )

    (defn #_"double" Numbers'multiply-2do [#_"double" ___x, #_"Object" ___y]
        (Numbers'multiply-2dd ___x, (.doubleValue (cast Number ___y)))
    )

    (defn #_"double" Numbers'multiply-2od [#_"Object" ___x, #_"double" ___y]
        (Numbers'multiply-2dd (.doubleValue (cast Number ___x)), ___y)
    )

    (defn #_"double" Numbers'multiply-2dl [#_"double" ___x, #_"long" ___y]
        (* ___x ___y)
    )

    (defn #_"double" Numbers'multiply-2ld [#_"long" ___x, #_"double" ___y]
        (* ___x ___y)
    )

    (defn #_"double" Numbers'multiplyP-2do [#_"double" ___x, #_"Object" ___y]
        (Numbers'multiplyP-2dd ___x, (.doubleValue (cast Number ___y)))
    )

    (defn #_"double" Numbers'multiplyP-2od [#_"Object" ___x, #_"double" ___y]
        (Numbers'multiplyP-2dd (.doubleValue (cast Number ___x)), ___y)
    )

    (defn #_"double" Numbers'multiplyP-2dl [#_"double" ___x, #_"long" ___y]
        (* ___x ___y)
    )

    (defn #_"double" Numbers'multiplyP-2ld [#_"long" ___x, #_"double" ___y]
        (* ___x ___y)
    )

    (defn #_"Number" Numbers'divide-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'divide-2oo (cast Object ___x), ___y)
    )

    (defn #_"Number" Numbers'divide-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'divide-2oo ___x, (cast Object ___y))
    )

    (defn #_"double" Numbers'divide-2do [#_"double" ___x, #_"Object" ___y]
        (ร ___x / (cast Number ___y).doubleValue())
    )

    (defn #_"double" Numbers'divide-2od [#_"Object" ___x, #_"double" ___y]
        (ร (cast Number ___x).doubleValue() / ___y)
    )

    (defn #_"double" Numbers'divide-2dl [#_"double" ___x, #_"long" ___y]
        (/ ___x ___y)
    )

    (defn #_"double" Numbers'divide-2ld [#_"long" ___x, #_"double" ___y]
        (/ ___x ___y)
    )

    (defn #_"Number" Numbers'divide-2ll [#_"long" ___x, #_"long" ___y]
        (Numbers'divide-2oo (cast Number ___x), (cast Number ___y))
    )

    (defn #_"boolean" Numbers'lt-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'lt-2oo (cast Object ___x), ___y)
    )

    (defn #_"boolean" Numbers'lt-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'lt-2oo ___x, (cast Object ___y))
    )

    (defn #_"boolean" Numbers'lt-2do [#_"double" ___x, #_"Object" ___y]
        (ร (___x < (cast Number ___y).doubleValue()))
    )

    (defn #_"boolean" Numbers'lt-2od [#_"Object" ___x, #_"double" ___y]
        (ร ((cast Number ___x).doubleValue() < ___y))
    )

    (defn #_"boolean" Numbers'lt-2dl [#_"double" ___x, #_"long" ___y]
        (< ___x ___y)
    )

    (defn #_"boolean" Numbers'lt-2ld [#_"long" ___x, #_"double" ___y]
        (< ___x ___y)
    )

    (defn #_"boolean" Numbers'lte-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'lte-2oo (cast Object ___x), ___y)
    )

    (defn #_"boolean" Numbers'lte-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'lte-2oo ___x, (cast Object ___y))
    )

    (defn #_"boolean" Numbers'lte-2do [#_"double" ___x, #_"Object" ___y]
        (ร (___x <= (cast Number ___y).doubleValue()))
    )

    (defn #_"boolean" Numbers'lte-2od [#_"Object" ___x, #_"double" ___y]
        (ร ((cast Number ___x).doubleValue() <= ___y))
    )

    (defn #_"boolean" Numbers'lte-2dl [#_"double" ___x, #_"long" ___y]
        (<= ___x ___y)
    )

    (defn #_"boolean" Numbers'lte-2ld [#_"long" ___x, #_"double" ___y]
        (<= ___x ___y)
    )

    (defn #_"boolean" Numbers'gt-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'gt-2oo (cast Object ___x), ___y)
    )

    (defn #_"boolean" Numbers'gt-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'gt-2oo ___x, (cast Object ___y))
    )

    (defn #_"boolean" Numbers'gt-2do [#_"double" ___x, #_"Object" ___y]
        (ร (___x > (cast Number ___y).doubleValue()))
    )

    (defn #_"boolean" Numbers'gt-2od [#_"Object" ___x, #_"double" ___y]
        (ร ((cast Number ___x).doubleValue() > ___y))
    )

    (defn #_"boolean" Numbers'gt-2dl [#_"double" ___x, #_"long" ___y]
        (> ___x ___y)
    )

    (defn #_"boolean" Numbers'gt-2ld [#_"long" ___x, #_"double" ___y]
        (> ___x ___y)
    )

    (defn #_"boolean" Numbers'gte-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'gte-2oo (cast Object ___x), ___y)
    )

    (defn #_"boolean" Numbers'gte-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'gte-2oo ___x, (cast Object ___y))
    )

    (defn #_"boolean" Numbers'gte-2do [#_"double" ___x, #_"Object" ___y]
        (ร (___x >= (cast Number ___y).doubleValue()))
    )

    (defn #_"boolean" Numbers'gte-2od [#_"Object" ___x, #_"double" ___y]
        (ร ((cast Number ___x).doubleValue() >= ___y))
    )

    (defn #_"boolean" Numbers'gte-2dl [#_"double" ___x, #_"long" ___y]
        (>= ___x ___y)
    )

    (defn #_"boolean" Numbers'gte-2ld [#_"long" ___x, #_"double" ___y]
        (>= ___x ___y)
    )

    (defn #_"boolean" Numbers'equiv-2lo [#_"long" ___x, #_"Object" ___y]
        (Numbers'equiv-2oo (cast Object ___x), ___y)
    )

    (defn #_"boolean" Numbers'equiv-2ol [#_"Object" ___x, #_"long" ___y]
        (Numbers'equiv-2oo ___x, (cast Object ___y))
    )

    (defn #_"boolean" Numbers'equiv-2do [#_"double" ___x, #_"Object" ___y]
        (ร (___x == (cast Number ___y).doubleValue()))
    )

    (defn #_"boolean" Numbers'equiv-2od [#_"Object" ___x, #_"double" ___y]
        (ร ((cast Number ___x).doubleValue() == ___y))
    )

    (defn #_"boolean" Numbers'equiv-2dl [#_"double" ___x, #_"long" ___y]
        (= ___x ___y)
    )

    (defn #_"boolean" Numbers'equiv-2ld [#_"long" ___x, #_"double" ___y]
        (= ___x ___y)
    )

    (defn #_"boolean" Numbers'isNaN [#_"Object" ___x]
        (or (and (instance? Double ___x) (.isNaN (cast Double ___x))) (and (instance? Float ___x) (.isNaN (cast Float ___x))))
    )

    (defn #_"double" Numbers'max-2dd [#_"double" ___x, #_"double" ___y]
        (Math/max ___x, ___y)
    )

    (defn #_"Object" Numbers'max-2dl [#_"double" ___x, #_"long" ___y]
        (when (Double/isNaN ___x)
            (ยง return ___x)
        )
        (if (> ___x ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"Object" Numbers'max-2do [#_"double" ___x, #_"Object" ___y]
        (cond (Double/isNaN ___x)
            (do
                (ยง return ___x)
            )
            (Numbers'isNaN ___y)
            (do
                (ยง return ___y)
            )
        )
        (if (ร ___x > (cast Number ___y).doubleValue())
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"Object" Numbers'max-2ld [#_"long" ___x, #_"double" ___y]
        (when (Double/isNaN ___y)
            (ยง return ___y)
        )
        (if (> ___x ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"long" Numbers'max-2ll [#_"long" ___x, #_"long" ___y]
        (if (> ___x ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"Object" Numbers'max-2lo [#_"long" ___x, #_"Object" ___y]
        (when (Numbers'isNaN ___y)
            (ยง return ___y)
        )
        (if (Numbers'gt-2lo ___x, ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"Object" Numbers'max-2ol [#_"Object" ___x, #_"long" ___y]
        (when (Numbers'isNaN ___x)
            (ยง return ___x)
        )
        (if (Numbers'gt-2ol ___x, ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"Object" Numbers'max-2od [#_"Object" ___x, #_"double" ___y]
        (cond (Numbers'isNaN ___x)
            (do
                (ยง return ___x)
            )
            (Double/isNaN ___y)
            (do
                (ยง return ___y)
            )
        )
        (if (ร (cast Number ___x).doubleValue() > ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"Object" Numbers'max-2oo [#_"Object" ___x, #_"Object" ___y]
        (cond (Numbers'isNaN ___x)
            (do
                (ยง return ___x)
            )
            (Numbers'isNaN ___y)
            (do
                (ยง return ___y)
            )
        )
        (if (Numbers'gt-2oo ___x, ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"double" Numbers'min-2dd [#_"double" ___x, #_"double" ___y]
        (Math/min ___x, ___y)
    )

    (defn #_"Object" Numbers'min-2dl [#_"double" ___x, #_"long" ___y]
        (when (Double/isNaN ___x)
            (ยง return ___x)
        )
        (if (< ___x ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"Object" Numbers'min-2do [#_"double" ___x, #_"Object" ___y]
        (cond (Double/isNaN ___x)
            (do
                (ยง return ___x)
            )
            (Numbers'isNaN ___y)
            (do
                (ยง return ___y)
            )
        )
        (if (ร ___x < (cast Number ___y).doubleValue())
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"Object" Numbers'min-2ld [#_"long" ___x, #_"double" ___y]
        (when (Double/isNaN ___y)
            (ยง return ___y)
        )
        (if (< ___x ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"long" Numbers'min-2ll [#_"long" ___x, #_"long" ___y]
        (if (< ___x ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"Object" Numbers'min-2lo [#_"long" ___x, #_"Object" ___y]
        (when (Numbers'isNaN ___y)
            (ยง return ___y)
        )
        (if (Numbers'lt-2lo ___x, ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"Object" Numbers'min-2ol [#_"Object" ___x, #_"long" ___y]
        (when (Numbers'isNaN ___x)
            (ยง return ___x)
        )
        (if (Numbers'lt-2ol ___x, ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"Object" Numbers'min-2od [#_"Object" ___x, #_"double" ___y]
        (cond (Numbers'isNaN ___x)
            (do
                (ยง return ___x)
            )
            (Double/isNaN ___y)
            (do
                (ยง return ___y)
            )
        )
        (if (ร (cast Number ___x).doubleValue() < ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )

    (defn #_"Object" Numbers'min-2oo [#_"Object" ___x, #_"Object" ___y]
        (cond (Numbers'isNaN ___x)
            (do
                (ยง return ___x)
            )
            (Numbers'isNaN ___y)
            (do
                (ยง return ___y)
            )
        )
        (if (Numbers'lt-2oo ___x, ___y)
            (do
                ___x
            )
            (do
                ___y
            )
        )
    )
)
)

(java-ns cloiure.lang.Obj

#_abstract
(class-ns Obj (ยง implements IObj)
    (defn- #_"Obj" Obj'init []
        (hash-map
            #_"IPersistentMap" :_meta nil
        )
    )

    (defn #_"Obj" Obj'new-1 [#_"IPersistentMap" ___meta]
        (let [this (Obj'init)]
            (ยง ass (:_meta this) ___meta)
            this
        )
    )

    (defn #_"Obj" Obj'new-0 []
        (let [this (Obj'init)]
            (ยง ass (:_meta this) nil)
            this
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method meta) [#_"Obj" this]
        (:_meta this)
    )

    #_abstract
    (ยง defn #_"Obj" (ยง method withMeta) [#_"Obj" this, #_"IPersistentMap" ___meta])
)
)

(java-ns cloiure.lang.PersistentArrayMap

(ยง import java.util.Arrays)
(ยง import java.util.Iterator)
(ยง import java.util.Map)
(ยง import java.util.NoSuchElementException)

(class-ns MSeq (ยง extends ASeq) (ยง implements Counted)
    (defn- #_"MSeq" MSeq'init []
        (hash-map
            #_"Object[]" :array nil
            #_"int" :i 0
        )
    )

    (defn #_"MSeq" MSeq'new-2 [#_"Object[]" ___array, #_"int" ___i]
        (let [this (merge (ASeq'new) (MSeq'init))]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    (defn #_"MSeq" MSeq'new-3 [#_"IPersistentMap" ___meta, #_"Object[]" ___array, #_"int" ___i]
        (let [this (merge (ASeq'new ___meta) (MSeq'init))]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"MSeq" this]
        (ร MapEntry'create((:array this)[(:i this)], (:array this)[(:i this) + 1]))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"MSeq" this]
        (when (ร (:i this) + 2 < (ยง alength (:array this)))
            (ยง return (ร MSeq'new-2((:array this), (:i this) + 2)))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"MSeq" this]
        (/ (- (ยง alength (:array this)) (:i this)) 2)
    )

    #_method
    (ยง defn #_"Obj" (ยง method withMeta) [#_"MSeq" this, #_"IPersistentMap" ___meta]
        (MSeq'new-3 ___meta, (:array this), (:i this))
    )
)

(class-ns MIter (ยง implements Iterator)
    (defn- #_"MIter" MIter'init []
        (hash-map
            #_"IFn" :f nil
            #_"Object[]" :array nil
            #_"int" :i 0
        )
    )

    ;; for iterator
    (defn #_"MIter" MIter'new-2 [#_"Object[]" ___array, #_"IFn" ___f]
        (MIter'new-3 ___array, -2, ___f)
    )

    ;; for entryAt
    (defn #_"MIter" MIter'new-3 [#_"Object[]" ___array, #_"int" ___i, #_"IFn" ___f]
        (let [this (MIter'init)]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            (ยง ass (:f this) ___f)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"MIter" this]
        (ร ((:i this) < (ยง alength (:array this)) - 2))
    )

    #_method
    (ยง defn #_"Object" (ยง method next) [#_"MIter" this]
        (try
            (ยง ass (:i this) (+ (:i this) 2))
            (ร (:f this).invoke((:array this)[(:i this)], (:array this)[(:i this) + 1]))
            (catch IndexOutOfBoundsException ___e
                (throw (NoSuchElementException.))
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"MIter" this]
        (throw (UnsupportedOperationException.))
    )
)

(class-ns TransientArrayMap (ยง extends ATransientMap)
    (defn- #_"TransientArrayMap" TransientArrayMap'init []
        (hash-map
            #_volatile
            #_"int" :len 0
            #_"Object[]" :array nil
            #_volatile
            #_"Thread" :owner nil
        )
    )

    (defn #_"TransientArrayMap" TransientArrayMap'new [#_"Object[]" ___array]
        (let [this (merge (ATransientMap'new) (TransientArrayMap'init))]
            (ยง ass (:owner this) (Thread/currentThread))
            (ยง ass (:array this) (make-array Object (ร Math/max(PersistentArrayMap'HASHTABLE_THRESHOLD, (ยง alength ___array)))))
            (ร System/arraycopy(___array, 0, (:array this), 0, (ยง alength ___array)))
            (ยง ass (:len this) (ยง alength ___array))
            this
        )
    )

    #_method
    (ยง defn- #_"int" (ยง method indexOf) [#_"TransientArrayMap" this, #_"Object" ___key]
        (loop-when-recur [#_"int" ___i 0] (< ___i (:len this)) [(+ ___i 2)]
            (when (ร equalKey((:array this)[___i], ___key))
                (ยง return ___i)
            )
        )
        -1
    )

    #_method
    (ยง defn #_"ITransientMap" (ยง method doAssoc) [#_"TransientArrayMap" this, #_"Object" ___key, #_"Object" ___val]
        (let [#_"int" ___i (.indexOf this, ___key)]
            (cond (>= ___i 0) ;; already have key,
                (do
                    (when (ร (:array this)[___i + 1] != ___val) ;; no change, no op
                        (ยง ass (ยง aget (:array this) (ร ___i + 1)) ___val)
                    )
                )
                :else ;; didn't have key, grow
                (do
                    (when (ร (:len this) >= (ยง alength (:array this)))
                        (ยง return (ร PersistentHashMap'create-1a((:array this)).asTransient().assoc(___key, ___val)))
                    )
                    (ยง ass (ยง aget (:array this) (:len this)) ___key)
                    (ยง ass (:len this) (+ (:len this) 1))
                    (ยง ass (ยง aget (:array this) (:len this)) ___val)
                    (ยง ass (:len this) (+ (:len this) 1))
                )
            )
            this
        )
    )

    #_method
    (ยง defn #_"ITransientMap" (ยง method doWithout) [#_"TransientArrayMap" this, #_"Object" ___key]
        (let [#_"int" ___i (.indexOf this, ___key)]
            (when (>= ___i 0) ;; have key, will remove
                (when (ร (:len this) >= 2)
                    (ยง ass (ยง aget (:array this) ___i) (ยง aget (:array this) (ร (:len this) - 2)))
                    (ยง ass (ยง aget (:array this) (ร ___i + 1)) (ยง aget (:array this) (ร (:len this) - 1)))
                )
                (ยง ass (:len this) (- (:len this) 2))
            )
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method doValAt) [#_"TransientArrayMap" this, #_"Object" ___key, #_"Object" ___notFound]
        (let [#_"int" ___i (.indexOf this, ___key)]
            (when (>= ___i 0)
                (ยง return (ยง aget (:array this) (ร ___i + 1)))
            )
            ___notFound
        )
    )

    #_method
    (ยง defn #_"int" (ยง method doCount) [#_"TransientArrayMap" this]
        (/ (:len this) 2)
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method doPersistent) [#_"TransientArrayMap" this]
        (.ensureEditable this)
        (ยง ass (:owner this) nil)
        (let [#_"Object[]" ___a (make-array Object (:len this))]
            (System/arraycopy (:array this), 0, ___a, 0, (:len this))
            (PersistentArrayMap'new-1 ___a)
        )
    )

    #_method
    (ยง defn #_"void" (ยง method ensureEditable) [#_"TransientArrayMap" this]
        (when (nil? (:owner this))
            (throw (IllegalAccessError. "Transient used after persistent! call"))
        )
        nil
    )
)

;;;
 ; Simple implementation of persistent map on an array
 ;
 ; Note that instances of this class are constant values
 ; i.e. add/remove etc return new values
 ;
 ; Copies array on every change, so only appropriate for _very_small_ maps
 ;
 ; nil keys and values are ok, but you won't be able to distinguish a nil value via valAt - use contains/entryAt
 ;;
(class-ns PersistentArrayMap (ยง extends APersistentMap) (ยง implements IObj, IEditableCollection, IMapIterable, IKVReduce)
    (ยง def #_"PersistentArrayMap" PersistentArrayMap'EMPTY (PersistentArrayMap'new-0))
    (def #_"int" PersistentArrayMap'HASHTABLE_THRESHOLD 16)

    (defn #_"IPersistentMap" PersistentArrayMap'create [#_"Map" ___other]
        (let [#_"ITransientMap" ___ret (.asTransient PersistentArrayMap'EMPTY)]
            (doseq [#_"Object" ___o (.entrySet ___other)]
                (let [#_"Map$Entry" ___e (cast' Entry ___o)]
                    (ยง ass ___ret (ร ___ret.assoc((.getKey ___e), (.getValue ___e))))
                )
            )
            (.persistent ___ret)
        )
    )

    (defn- #_"PersistentArrayMap" PersistentArrayMap'init []
        (hash-map
            #_"Object[]" :array nil
            #_"IPersistentMap" :_meta nil
        )
    )

    #_protected
    (defn #_"PersistentArrayMap" PersistentArrayMap'new-0 []
        (let [this (merge (APersistentMap'new) (PersistentArrayMap'init))]
            (ยง ass (:array this) (make-array Object 0))
            (ยง ass (:_meta this) nil)
            this
        )
    )

    #_method
    (ยง defn #_"PersistentArrayMap" (ยง method withMeta) [#_"PersistentArrayMap" this, #_"IPersistentMap" ___meta]
        (PersistentArrayMap'new-2 ___meta, (:array this))
    )

    #_method
    (ยง defn #_"PersistentArrayMap" (ยง method create) [#_"PersistentArrayMap" this, #_"Object..." ___init]
        (ร PersistentArrayMap'new-2((.meta this), ___init))
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method createHT) [#_"PersistentArrayMap" this, #_"Object[]" ___init]
        (ร PersistentHashMap'create-2((.meta this), ___init))
    )

    (defn #_"PersistentArrayMap" PersistentArrayMap'createWithCheck [#_"Object[]" ___init]
        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___init)) [(+ ___i 2)]
            (loop-when-recur [#_"int" ___j (+ ___i 2)] (< ___j (ยง alength ___init)) [(+ ___j 2)]
                (when (ร PersistentArrayMap'equalKey(___init[___i], ___init[___j]))
                    (throw (IllegalArgumentException. (str "Duplicate key: " (ยง aget ___init ___i))))
                )
            )
        )
        (PersistentArrayMap'new-1 ___init)
    )

    (defn #_"PersistentArrayMap" PersistentArrayMap'createAsIfByAssoc [#_"Object[]" ___init]
        (when (ร ((ยง alength ___init) & 1) == 1)
            (throw (IllegalArgumentException. (String/format "No value supplied for key: %s", (object-array [ (ยง aget ___init (ร (ยง alength ___init) - 1)) ]))))
        )
        ;; If this looks like it is doing busy-work, it is because it
        ;; is achieving these goals: O(n^2) run time like
        ;; createWithCheck(), never modify init arg, and only
        ;; allocate memory if there are duplicate keys.
        (let [#_"int" ___n 0]
            (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___init)) [(+ ___i 2)]
                (let [#_"boolean" ___duplicateKey false]
                    (loop-when-recur [#_"int" ___j 0] (< ___j ___i) [(+ ___j 2)]
                        (when (ร PersistentArrayMap'equalKey(___init[___i], ___init[___j]))
                            (ยง ass ___duplicateKey true)
                            (ยง break )
                        )
                    )
                    (when (not ___duplicateKey)
                        (ยง ass ___n (+ ___n 2))
                    )
                )
            )
            (when (< ___n (ยง alength ___init))
                ;; Create a new shorter array with unique keys, and
                ;; the last value associated with each key. To behave
                ;; like assoc, the first occurrence of each key must
                ;; be used, since its metadata may be different than
                ;; later equal keys.
                (let [#_"Object[]" ___nodups (make-array Object ___n)]
                    (let [#_"int" ___m 0]
                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___init)) [(+ ___i 2)]
                            (let [#_"boolean" ___duplicateKey false]
                                (loop-when-recur [#_"int" ___j 0] (< ___j ___m) [(+ ___j 2)]
                                    (when (ร PersistentArrayMap'equalKey(___init[___i], ___nodups[___j]))
                                        (ยง ass ___duplicateKey true)
                                        (ยง break )
                                    )
                                )
                                (when (not ___duplicateKey)
                                    (ยง let [#_"int" ___j]
                                        (loop-when-recur [___j (- (ยง alength ___init) 2)] (>= ___j ___i) [(- ___j 2)]
                                            (when (ร PersistentArrayMap'equalKey(___init[___i], ___init[___j]))
                                                (ยง break )
                                            )
                                        )
                                        (ยง ass (ยง aget ___nodups ___m) (ยง aget ___init ___i))
                                        (ยง ass (ยง aget ___nodups (ร ___m + 1)) (ยง aget ___init (ร ___j + 1)))
                                        (ยง ass ___m (+ ___m 2))
                                    )
                                )
                            )
                        )
                        (when (not= ___m ___n)
                            (throw (IllegalArgumentException. (str "Internal error: m=" ___m)))
                        )
                        (ยง ass ___init ___nodups)
                    )
                )
            )
            (PersistentArrayMap'new-1 ___init)
        )
    )

    ;;;
     ; This ctor captures/aliases the passed array, so do not modify later
     ;
     ; @param init {key1, val1, key2, val2, ...}
     ;;
    (defn #_"PersistentArrayMap" PersistentArrayMap'new-1 [#_"Object[]" ___init]
        (let [this (merge (APersistentMap'new) (PersistentArrayMap'init))]
            (ยง ass (:array this) ___init)
            (ยง ass (:_meta this) nil)
            this
        )
    )

    (defn #_"PersistentArrayMap" PersistentArrayMap'new-2 [#_"IPersistentMap" ___meta, #_"Object[]" ___init]
        (let [this (merge (APersistentMap'new) (PersistentArrayMap'init))]
            (ยง ass (:_meta this) ___meta)
            (ยง ass (:array this) ___init)
            this
        )
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"PersistentArrayMap" this]
        (ร (ยง alength (:array this)) / 2)
    )

    #_method
    (ยง defn #_"boolean" (ยง method containsKey) [#_"PersistentArrayMap" this, #_"Object" ___key]
        (ร (this.indexOf(___key) >= 0))
    )

    #_method
    (ยง defn #_"IMapEntry" (ยง method entryAt) [#_"PersistentArrayMap" this, #_"Object" ___key]
        (let [#_"int" ___i (.indexOf this, ___key)]
            (when (>= ___i 0)
                (ยง return (cast' IMapEntry (ร MapEntry'create((:array this)[___i], (:array this)[___i + 1]))))
            )
            nil
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method assocEx) [#_"PersistentArrayMap" this, #_"Object" ___key, #_"Object" ___val]
        (let [#_"int" ___i (.indexOf this, ___key)]
            (ยง let [#_"Object[]" ___newArray]
                (cond (>= ___i 0)
                    (do
                        (throw (Util'runtimeException-1 "Key already present"))
                    )
                    :else ;; didn't have key, grow
                    (do
                        (when (ร (ยง alength (:array this)) > PersistentArrayMap'HASHTABLE_THRESHOLD)
                            (ยง return (ร this.createHT((:array this)).assocEx(___key, ___val)))
                        )
                        (ยง ass ___newArray (make-array Object (ร (ยง alength (:array this)) + 2)))
                        (when (pos? (ยง alength (:array this)))
                            (ร System/arraycopy((:array this), 0, ___newArray, 2, (ยง alength (:array this))))
                        )
                        (ยง ass (ยง aget ___newArray (ร 0)) ___key)
                        (ยง ass (ยง aget ___newArray (ร 1)) ___val)
                    )
                )
                (.create this, ___newArray)
            )
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method assoc) [#_"PersistentArrayMap" this, #_"Object" ___key, #_"Object" ___val]
        (let [#_"int" ___i (.indexOf this, ___key)]
            (ยง let [#_"Object[]" ___newArray]
                (cond (>= ___i 0) ;; already have key, same-sized replacement
                    (do
                        (when (ร (:array this)[___i + 1] == ___val) ;; no change, no op
                            (ยง return this)
                        )
                        (ยง ass ___newArray (.clone (:array this)))
                        (ยง ass (ยง aget ___newArray (ร ___i + 1)) ___val)
                    )
                    :else ;; didn't have key, grow
                    (do
                        (when (ร (ยง alength (:array this)) > PersistentArrayMap'HASHTABLE_THRESHOLD)
                            (ยง return (ร this.createHT((:array this)).assoc(___key, ___val)))
                        )
                        (ยง ass ___newArray (make-array Object (ร (ยง alength (:array this)) + 2)))
                        (when (pos? (ยง alength (:array this)))
                            (ร System/arraycopy((:array this), 0, ___newArray, 0, (ยง alength (:array this))))
                        )
                        (ยง ass (ยง aget ___newArray (ร (ยง alength ___newArray) - 2)) ___key)
                        (ยง ass (ยง aget ___newArray (ร (ยง alength ___newArray) - 1)) ___val)
                    )
                )
                (.create this, ___newArray)
            )
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method without) [#_"PersistentArrayMap" this, #_"Object" ___key]
        (let [#_"int" ___i (.indexOf this, ___key)]
            (when (>= ___i 0) ;; have key, will remove
                (let [#_"int" ___newlen (ร (ยง alength (:array this)) - 2)]
                    (when (zero? ___newlen)
                        (ยง return (.empty this))
                    )
                    (let [#_"Object[]" ___newArray (make-array Object ___newlen)]
                        (System/arraycopy (:array this), 0, ___newArray, 0, ___i)
                        (ร System/arraycopy((:array this), ___i + 2, ___newArray, ___i, ___newlen - ___i))
                        (ยง return (.create this, ___newArray))
                    )
                )
            )
            ;; don't have key, no op
            this
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method empty) [#_"PersistentArrayMap" this]
        (cast' IPersistentMap (.withMeta PersistentArrayMap'EMPTY, (.meta this)))
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"PersistentArrayMap" this, #_"Object" ___key, #_"Object" ___notFound]
        (let [#_"int" ___i (.indexOf this, ___key)]
            (when (>= ___i 0)
                (ยง return (ยง aget (:array this) (ร ___i + 1)))
            )
            ___notFound
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"PersistentArrayMap" this, #_"Object" ___key]
        (.valAt this, ___key, nil)
    )

    #_method
    (ยง defn #_"int" (ยง method capacity) [#_"PersistentArrayMap" this]
        (count this)
    )

    #_method
    (ยง defn- #_"int" (ยง method indexOfObject) [#_"PersistentArrayMap" this, #_"Object" ___key]
        (let [#_"EquivPred" ___ep (Util'equivPred ___key)]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength (:array this))) [(+ ___i 2)]
                (when (ร ___ep.equiv(___key, (:array this)[___i]))
                    (ยง return ___i)
                )
            )
            -1
        )
    )

    #_method
    (ยง defn- #_"int" (ยง method indexOf) [#_"PersistentArrayMap" this, #_"Object" ___key]
        (if (ยง instance? Keyword ___key)
            (do
                (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength (:array this))) [(+ ___i 2)]
                    (when (ร ___key == (:array this)[___i])
                        (ยง return ___i)
                    )
                )
                -1
            )
            (do
                (.indexOfObject this, ___key)
            )
        )
    )

    (defn #_"boolean" PersistentArrayMap'equalKey [#_"Object" ___k1, #_"Object" ___k2]
        (when (ยง instance? Keyword ___k1)
            (ยง return (= ___k1 ___k2))
        )
        (Util'equiv-2oo ___k1, ___k2)
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"PersistentArrayMap" this]
        (MIter'new-2 (:array this), APersistentMap'MAKE_ENTRY)
    )

    #_method
    (ยง defn #_"Iterator" (ยง method keyIterator) [#_"PersistentArrayMap" this]
        (MIter'new-2 (:array this), APersistentMap'MAKE_KEY)
    )

    #_method
    (ยง defn #_"Iterator" (ยง method valIterator) [#_"PersistentArrayMap" this]
        (MIter'new-2 (:array this), APersistentMap'MAKE_VAL)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seq) [#_"PersistentArrayMap" this]
        (when (pos? (ยง alength (:array this)))
            (ยง return (MSeq'new-2 (:array this), 0))
        )
        nil
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method meta) [#_"PersistentArrayMap" this]
        (:_meta this)
    )

    #_method
    (ยง defn #_"Object" (ยง method kvreduce) [#_"PersistentArrayMap" this, #_"IFn" ___f, #_"Object" ___init]
        (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength (:array this))) [(+ ___i 2)]
            (ยง ass ___init (ร ___f.invoke(___init, (:array this)[___i], (:array this)[___i + 1])))
            (when (RT'isReduced ___init)
                (ยง return (.deref (cast' IDeref ___init)))
            )
        )
        ___init
    )

    #_method
    (ยง defn #_"ITransientMap" (ยง method asTransient) [#_"PersistentArrayMap" this]
        (TransientArrayMap'new (:array this))
    )
)
)

(java-ns cloiure.lang.PersistentHashMap

(ยง import java.util.*)
(ยง import java.util.concurrent.Callable)
(ยง import java.util.concurrent.atomic.AtomicReference)

(class-ns TransientHashMap (ยง extends ATransientMap)
    (defn- #_"TransientHashMap" TransientHashMap'init []
        (hash-map
            #_"AtomicReference<Thread>" :edit nil
            #_volatile
            #_"INode" :root nil
            #_volatile
            #_"int" :count 0
            #_volatile
            #_"boolean" :hasNull false
            #_volatile
            #_"Object" :nullValue nil
            #_"Box" :leafFlag (Box'new nil)
        )
    )

    (defn #_"TransientHashMap" TransientHashMap'new-1 [#_"PersistentHashMap" ___m]
        (TransientHashMap'new-5 (AtomicReference. (Thread/currentThread)), (:root ___m), (:count ___m), (:hasNull ___m), (:nullValue ___m))
    )

    (defn #_"TransientHashMap" TransientHashMap'new-5 [#_"AtomicReference<Thread>" ___edit, #_"INode" ___root, #_"int" ___count, #_"boolean" ___hasNull, #_"Object" ___nullValue]
        (let [this (merge (ATransientMap'new) (TransientHashMap'init))]
            (ยง ass (:edit this) ___edit)
            (ยง ass (:root this) ___root)
            (ยง ass (:count this) ___count)
            (ยง ass (:hasNull this) ___hasNull)
            (ยง ass (:nullValue this) ___nullValue)
            this
        )
    )

    #_method
    (ยง defn #_"ITransientMap" (ยง method doAssoc) [#_"TransientHashMap" this, #_"Object" ___key, #_"Object" ___val]
        (when (nil? ___key)
            (when (ร (:nullValue this) != ___val)
                (ยง ass (:nullValue this) ___val)
            )
            (when (not (:hasNull this))
                (ยง ass (:count this) (ร (:count this) + 1))
                (ยง ass (:hasNull this) true)
            )
            (ยง return this)
        )
        (ยง ass (:val (:leafFlag this)) nil)
        (let [#_"INode" ___n (.assoc (or (:root this) BitmapIndexedNode'EMPTY), (:edit this), 0, (PersistentHashMap'hash ___key), ___key, ___val, (:leafFlag this))]
            (when (ร ___n != (:root this))
                (ยง ass (:root this) ___n)
            )
            (when (some? (:val (:leafFlag this)))
                (ยง ass (:count this) (ร (:count this) + 1))
            )
            this
        )
    )

    #_method
    (ยง defn #_"ITransientMap" (ยง method doWithout) [#_"TransientHashMap" this, #_"Object" ___key]
        (when (nil? ___key)
            (when (not (:hasNull this))
                (ยง return this)
            )
            (ยง ass (:hasNull this) false)
            (ยง ass (:nullValue this) nil)
            (ยง ass (:count this) (ร (:count this) - 1))
            (ยง return this)
        )
        (when (nil? (:root this))
            (ยง return this)
        )
        (ยง ass (:val (:leafFlag this)) nil)
        (let [#_"INode" ___n (ร (:root this).without((:edit this), 0, PersistentHashMap'hash(___key), ___key, (:leafFlag this)))]
            (when (ร ___n != (:root this))
                (ยง ass (:root this) ___n)
            )
            (when (some? (:val (:leafFlag this)))
                (ยง ass (:count this) (ร (:count this) - 1))
            )
            this
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method doPersistent) [#_"TransientHashMap" this]
        (.set (:edit this), nil)
        (PersistentHashMap'new-4 (:count this), (:root this), (:hasNull this), (:nullValue this))
    )

    #_method
    (ยง defn #_"Object" (ยง method doValAt) [#_"TransientHashMap" this, #_"Object" ___key, #_"Object" ___notFound]
        (when (nil? ___key)
            (if (:hasNull this)
                (do
                    (ยง return (:nullValue this))
                )
                (do
                    (ยง return ___notFound)
                )
            )
        )
        (when (nil? (:root this))
            (ยง return ___notFound)
        )
        (ร (:root this).find(0, PersistentHashMap'hash(___key), ___key, ___notFound))
    )

    #_method
    (ยง defn #_"int" (ยง method doCount) [#_"TransientHashMap" this]
        (:count this)
    )

    #_method
    (ยง defn #_"void" (ยง method ensureEditable) [#_"TransientHashMap" this]
        (when (nil? (.get (:edit this)))
            (throw (IllegalAccessError. "Transient used after persistent! call"))
        )
        nil
    )
)

(ยง defprotocol INode
    #_abstract
    (#_"INode" INode'''(ยง method assoc-6) [#_"INode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Object" ___val, #_"Box" ___addedLeaf])
    #_abstract
    (#_"INode" INode'''(ยง method without-4) [#_"INode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key])
    #_abstract
    (#_"IMapEntry" INode'''(ยง method find-4) [#_"INode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key])
    #_abstract
    (#_"Object" INode'''(ยง method find-5) [#_"INode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Object" ___notFound])
    #_abstract
    (#_"ISeq" INode'''(ยง method nodeSeq) [#_"INode" this])
    #_abstract
    (#_"INode" INode'''(ยง method assoc-7) [#_"INode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Object" ___val, #_"Box" ___addedLeaf])
    #_abstract
    (#_"INode" INode'''(ยง method without-6) [#_"INode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Box" ___removedLeaf])
    #_abstract
    (#_"Object" INode'''(ยง method kvreduce) [#_"INode" this, #_"IFn" ___f, #_"Object" ___init])
    #_abstract
    (#_"Object" INode'''(ยง method fold) [#_"INode" this, #_"IFn" ___combinef, #_"IFn" ___reducef, #_"IFn" ___fjtask, #_"IFn" ___fjfork, #_"IFn" ___fjjoin])
    ;; returns the result of (f [k v]) for each iterated element
    #_abstract
    (#_"Iterator" INode'''(ยง method iterator) [#_"INode" this, #_"IFn" ___f])
)

(class-ns HSeq (ยง extends ASeq)
    (defn #_"ISeq" HSeq'create-1 [#_"INode[]" ___nodes]
        (HSeq'create-4 nil, ___nodes, 0, nil)
    )

    (defn- #_"ISeq" HSeq'create-4 [#_"IPersistentMap" ___meta, #_"INode[]" ___nodes, #_"int" ___i, #_"ISeq" ___s]
        (when (some? ___s)
            (ยง return (HSeq'new ___meta, ___nodes, ___i, ___s))
        )
        (loop-when-recur [#_"int" ___j ___i] (< ___j (ยง alength ___nodes)) [(inc ___j)]
            (when (some? (ยง aget ___nodes ___j))
                (let [#_"ISeq" ___ns (ร ___nodes[___j].nodeSeq())]
                    (when (some? ___ns)
                        (ยง return (ร HSeq'new(___meta, ___nodes, ___j + 1, ___ns)))
                    )
                )
            )
        )
        nil
    )

    (defn- #_"HSeq" HSeq'init []
        (hash-map
            #_"INode[]" :nodes nil
            #_"int" :i 0
            #_"ISeq" :s nil
        )
    )

    (defn- #_"HSeq" HSeq'new [#_"IPersistentMap" ___meta, #_"INode[]" ___nodes, #_"int" ___i, #_"ISeq" ___s]
        (let [this (merge (ASeq'new ___meta) (HSeq'init))]
            (ยง ass (:nodes this) ___nodes)
            (ยง ass (:i this) ___i)
            (ยง ass (:s this) ___s)
            this
        )
    )

    #_method
    (ยง defn #_"Obj" (ยง method withMeta) [#_"HSeq" this, #_"IPersistentMap" ___meta]
        (HSeq'new ___meta, (:nodes this), (:i this), (:s this))
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"HSeq" this]
        (first (:s this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"HSeq" this]
        (ร HSeq'create-4(nil, (:nodes this), (:i this), (:s this).next()))
    )
)

(class-ns HIter (ยง implements Iterator)
    (defn- #_"HIter" HIter'init []
        (hash-map
            #_"INode[]" :array nil
            #_"IFn" :f nil
            #_"int" :i 0
            #_"Iterator" :nestedIter nil
        )
    )

    (defn- #_"HIter" HIter'new [#_"INode[]" ___array, #_"IFn" ___f]
        (let [this (HIter'init)]
            (ยง ass (:array this) ___array)
            (ยง ass (:f this) ___f)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"HIter" this]
        (while true
            (when (some? (:nestedIter this))
                (if (.hasNext (:nestedIter this))
                    (do
                        (ยง return true)
                    )
                    (do
                        (ยง ass (:nestedIter this) nil)
                    )
                )
            )

            (if (ร (:i this) < (ยง alength (:array this)))
                (do
                    (let [#_"INode" ___node (ยง aget (:array this) (:i this))]
                        (ยง ass (:i this) (+ (:i this) 1))
                        (when (some? ___node)
                            (ยง ass (:nestedIter this) (.iterator ___node, (:f this)))
                        )
                    )
                )
                (do
                    (ยง return false)
                )
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method next) [#_"HIter" this]
        (if (.hasNext this)
            (do
                (next (:nestedIter this))
            )
            (do
                (throw (NoSuchElementException.))
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"HIter" this]
        (throw (UnsupportedOperationException.))
    )
)

(class-ns ArrayNode (ยง implements INode)
    (defn- #_"ArrayNode" ArrayNode'init []
        (hash-map
            #_"int" :count 0
            #_"INode[]" :array nil
            #_"AtomicReference<Thread>" :edit nil
        )
    )

    (defn #_"ArrayNode" ArrayNode'new [#_"AtomicReference<Thread>" ___edit, #_"int" ___count, #_"INode[]" ___array]
        (let [this (ArrayNode'init)]
            (ยง ass (:array this) ___array)
            (ยง ass (:edit this) ___edit)
            (ยง ass (:count this) ___count)
            this
        )
    )

    #_method
    (ยง defn #_"INode" (ยง method assoc) [#_"ArrayNode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Object" ___val, #_"Box" ___addedLeaf]
        (let [#_"int" ___idx (mask ___hash, ___shift)]
            (let [#_"INode" ___node (ยง aget (:array this) ___idx)]
                (when (nil? ___node)
                    (ยง return (ร ArrayNode'new(nil, (:count this) + 1, cloneAndSet((:array this), ___idx, BitmapIndexedNode'EMPTY.assoc(___shift + 5, ___hash, ___key, ___val, ___addedLeaf)))))
                )
                (let [#_"INode" ___n (ร ___node.assoc(___shift + 5, ___hash, ___key, ___val, ___addedLeaf))]
                    (when (= ___n ___node)
                        (ยง return this)
                    )
                    (ร ArrayNode'new(nil, (:count this), cloneAndSet((:array this), ___idx, ___n)))
                )
            )
        )
    )

    #_method
    (ยง defn #_"INode" (ยง method without) [#_"ArrayNode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key]
        (let [#_"int" ___idx (mask ___hash, ___shift)]
            (let [#_"INode" ___node (ยง aget (:array this) ___idx)]
                (when (nil? ___node)
                    (ยง return this)
                )
                (let [#_"INode" ___n (ร ___node.without(___shift + 5, ___hash, ___key))]
                    (when (= ___n ___node)
                        (ยง return this)
                    )
                    (if (nil? ___n)
                        (do
                            (when (ร (:count this) <= 8) ;; shrink
                                (ยง return (.pack this, nil, ___idx))
                            )
                            (ร ArrayNode'new(nil, (:count this) - 1, cloneAndSet((:array this), ___idx, ___n)))
                        )
                        (do
                            (ร ArrayNode'new(nil, (:count this), cloneAndSet((:array this), ___idx, ___n)))
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"IMapEntry" (ยง method find) [#_"ArrayNode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key]
        (let [#_"int" ___idx (mask ___hash, ___shift)]
            (let [#_"INode" ___node (ยง aget (:array this) ___idx)]
                (when (nil? ___node)
                    (ยง return nil)
                )
                (ร ___node.find(___shift + 5, ___hash, ___key))
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method find) [#_"ArrayNode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Object" ___notFound]
        (let [#_"int" ___idx (mask ___hash, ___shift)]
            (let [#_"INode" ___node (ยง aget (:array this) ___idx)]
                (when (nil? ___node)
                    (ยง return ___notFound)
                )
                (ร ___node.find(___shift + 5, ___hash, ___key, ___notFound))
            )
        )
    )

    #_method
    (ยง defn #_"ISeq" (ยง method nodeSeq) [#_"ArrayNode" this]
        (HSeq'create-1 (:array this))
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"ArrayNode" this, #_"IFn" ___f]
        (HIter'new (:array this), ___f)
    )

    #_method
    (ยง defn #_"Object" (ยง method kvreduce) [#_"ArrayNode" this, #_"IFn" ___f, #_"Object" ___init]
        (doseq [#_"INode" ___node (:array this)]
            (when (some? ___node)
                (ยง ass ___init (.kvreduce ___node, ___f, ___init))
                (when (RT'isReduced ___init)
                    (ยง return ___init)
                )
            )
        )
        ___init
    )

    #_method
    (ยง defn #_"Object" (ยง method fold) [#_"ArrayNode" this, #_"IFn" ___combinef, #_"IFn" ___reducef, #_"IFn" ___fjtask, #_"IFn" ___fjfork, #_"IFn" ___fjjoin]
        (let [#_"List<Callable>" ___tasks (ArrayList.)]
            (doseq [#_"INode" ___node (:array this)]
                (when (some? ___node)
                    (ร ___tasks.add(
                            (ยง reify Callable()
                                #_method
                                (ยง defn #_"Object" (ยง method call) [#_"Callable" this] #_(ยง throws Exception)
                                    (.fold ___node, ___combinef, ___reducef, ___fjtask, ___fjfork, ___fjjoin)
                                )
                            )
                        )
                    )
                )
            )

            (ArrayNode'foldTasks ___tasks, ___combinef, ___fjtask, ___fjfork, ___fjjoin)
        )
    )

    (defn #_"Object" ArrayNode'foldTasks [#_"List<Callable>" ___tasks, #_"IFn" ___combinef, #_"IFn" ___fjtask, #_"IFn" ___fjfork, #_"IFn" ___fjjoin]
        (when (.isEmpty ___tasks)
            (ยง return (.invoke ___combinef))
        )

        (when (ร (.size ___tasks) == 1)
            (let [#_"Object" ___ret nil]
                (try
                    (ยง return (ร ___tasks.get(0).call()))
                    (catch Exception ___e
                        (throw (Util'sneakyThrow ___e))
                    )
                )
            )
        )

        (let [#_"List<Callable>" ___t1 (ร ___tasks.subList(0, (.size ___tasks) / 2))]
            (let [#_"List<Callable>" ___t2 (ร ___tasks.subList((.size ___tasks) / 2, (.size ___tasks)))]
                (let [#_"Object" ___forked
                        (ร ___fjfork.invoke(___fjtask.invoke(
                                (ยง reify Callable()
                                    #_method
                                    (ยง defn #_"Object" (ยง method call) [#_"Callable" this] #_(ยง throws Exception)
                                        (ArrayNode'foldTasks ___t2, ___combinef, ___fjtask, ___fjfork, ___fjjoin)
                                    )
                                )
                            ))
                        )]
                    (ร ___combinef.invoke(ArrayNode'foldTasks(___t1, ___combinef, ___fjtask, ___fjfork, ___fjjoin), ___fjjoin.invoke(___forked)))
                )
            )
        )
    )

    #_method
    (ยง defn- #_"ArrayNode" (ยง method ensureEditable) [#_"ArrayNode" this, #_"AtomicReference<Thread>" ___edit]
        (when (ร (:edit this) == ___edit)
            (ยง return this)
        )
        (ร ArrayNode'new(___edit, (:count this), (:array this).clone()))
    )

    #_method
    (ยง defn- #_"ArrayNode" (ยง method editAndSet) [#_"ArrayNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___i, #_"INode" ___n]
        (let [#_"ArrayNode" ___editable (.ensureEditable this, ___edit)]
            (ยง ass (ยง aget (:array ___editable) ___i) ___n)
            ___editable
        )
    )

    #_method
    (ยง defn- #_"INode" (ยง method pack) [#_"ArrayNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___idx]
        (let [#_"Object[]" ___newArray (make-array Object (ร 2 * ((:count this) - 1)))]
            (let [#_"int" ___j 1]
                (let [#_"int" ___bitmap 0]
                    (loop-when-recur [#_"int" ___i 0] (< ___i ___idx) [(inc ___i)]
                        (when (some? (ยง aget (:array this) ___i))
                            (ยง ass (ยง aget ___newArray ___j) (ยง aget (:array this) ___i))
                            (ยง ass ___bitmap (ร ___bitmap | (1 << ___i)))
                            (ยง ass ___j (+ ___j 2))
                        )
                    )
                    (loop-when-recur [#_"int" ___i (inc ___idx)] (ร ___i < (ยง alength (:array this))) [(inc ___i)]
                        (when (some? (ยง aget (:array this) ___i))
                            (ยง ass (ยง aget ___newArray ___j) (ยง aget (:array this) ___i))
                            (ยง ass ___bitmap (ร ___bitmap | (1 << ___i)))
                            (ยง ass ___j (+ ___j 2))
                        )
                    )
                    (BitmapIndexedNode'new ___edit, ___bitmap, ___newArray)
                )
            )
        )
    )

    #_method
    (ยง defn #_"INode" (ยง method assoc) [#_"ArrayNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Object" ___val, #_"Box" ___addedLeaf]
        (let [#_"int" ___idx (mask ___hash, ___shift)]
            (let [#_"INode" ___node (ยง aget (:array this) ___idx)]
                (when (nil? ___node)
                    (let [#_"ArrayNode" ___editable (ร this.editAndSet(___edit, ___idx, BitmapIndexedNode'EMPTY.assoc(___edit, ___shift + 5, ___hash, ___key, ___val, ___addedLeaf)))]
                        (ยง ass (:count ___editable) (ร (:count ___editable) + 1))
                        (ยง return ___editable)
                    )
                )
                (let [#_"INode" ___n (ร ___node.assoc(___edit, ___shift + 5, ___hash, ___key, ___val, ___addedLeaf))]
                    (when (= ___n ___node)
                        (ยง return this)
                    )
                    (.editAndSet this, ___edit, ___idx, ___n)
                )
            )
        )
    )

    #_method
    (ยง defn #_"INode" (ยง method without) [#_"ArrayNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Box" ___removedLeaf]
        (let [#_"int" ___idx (mask ___hash, ___shift)]
            (let [#_"INode" ___node (ยง aget (:array this) ___idx)]
                (when (nil? ___node)
                    (ยง return this)
                )
                (let [#_"INode" ___n (ร ___node.without(___edit, ___shift + 5, ___hash, ___key, ___removedLeaf))]
                    (when (= ___n ___node)
                        (ยง return this)
                    )
                    (when (nil? ___n)
                        (when (ร (:count this) <= 8) ;; shrink
                            (ยง return (.pack this, ___edit, ___idx))
                        )
                        (let [#_"ArrayNode" ___editable (.editAndSet this, ___edit, ___idx, ___n)]
                            (ยง ass (:count ___editable) (ร (:count ___editable) - 1))
                            (ยง return ___editable)
                        )
                    )
                    (.editAndSet this, ___edit, ___idx, ___n)
                )
            )
        )
    )
)

(class-ns BitmapIndexedNode (ยง implements INode)
    (def #_"BitmapIndexedNode" BitmapIndexedNode'EMPTY (ร BitmapIndexedNode'new(nil, 0, new Object[0])))

    (defn- #_"BitmapIndexedNode" BitmapIndexedNode'init []
        (hash-map
            #_"int" :bitmap 0
            #_"Object[]" :array nil
            #_"AtomicReference<Thread>" :edit nil
        )
    )

    (defn #_"BitmapIndexedNode" BitmapIndexedNode'new [#_"AtomicReference<Thread>" ___edit, #_"int" ___bitmap, #_"Object[]" ___array]
        (let [this (BitmapIndexedNode'init)]
            (ยง ass (:bitmap this) ___bitmap)
            (ยง ass (:array this) ___array)
            (ยง ass (:edit this) ___edit)
            this
        )
    )

    #_method
    (ยง defn #_"int" (ยง method index) [#_"BitmapIndexedNode" this, #_"int" ___bit]
        (ร Integer/bitCount((:bitmap this) & (___bit - 1)))
    )

    #_method
    (ยง defn #_"INode" (ยง method assoc) [#_"BitmapIndexedNode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Object" ___val, #_"Box" ___addedLeaf]
        (let [#_"int" ___bit (bitpos ___hash, ___shift)]
            (let [#_"int" ___idx (.index this, ___bit)]
                (if (ร ((:bitmap this) & ___bit) != 0)
                    (do
                        (let [#_"Object" ___keyOrNull (ยง aget (:array this) (ร 2 * ___idx))]
                            (let [#_"Object" ___valOrNode (ยง aget (:array this) (ร 2 * ___idx + 1))]
                                (when (nil? ___keyOrNull)
                                    (let [#_"INode" ___n (ร (cast' INode ___valOrNode).assoc(___shift + 5, ___hash, ___key, ___val, ___addedLeaf))]
                                        (when (= ___n ___valOrNode)
                                            (ยง return this)
                                        )
                                        (ยง return (ร BitmapIndexedNode'new(nil, (:bitmap this), cloneAndSet((:array this), 2 * ___idx + 1, ___n))))
                                    )
                                )
                                (when (Util'equiv-2oo ___key, ___keyOrNull)
                                    (when (= ___val ___valOrNode)
                                        (ยง return this)
                                    )
                                    (ยง return (ร BitmapIndexedNode'new(nil, (:bitmap this), cloneAndSet((:array this), 2 * ___idx + 1, ___val))))
                                )
                                (ยง ass (:val ___addedLeaf) ___addedLeaf)
                                (ร BitmapIndexedNode'new(nil, (:bitmap this), cloneAndSet((:array this), 2 * ___idx, nil, 2 * ___idx + 1, createNode(___shift + 5, ___keyOrNull, ___valOrNode, ___hash, ___key, ___val))))
                            )
                        )
                    )
                    (do
                        (let [#_"int" ___n (Integer/bitCount (:bitmap this))]
                            (if (>= ___n 16)
                                (do
                                    (let [#_"INode[]" ___nodes (ยง typeless make-array INode 32)]
                                        (let [#_"int" ___jdx (mask ___hash, ___shift)]
                                            (ยง ass (ยง aget ___nodes ___jdx) (ร BitmapIndexedNode'EMPTY.assoc(___shift + 5, ___hash, ___key, ___val, ___addedLeaf)))
                                            (let [#_"int" ___j 0]
                                                (loop-when-recur [#_"int" ___i 0] (< ___i 32) [(inc ___i)]
                                                    (when (ร (((:bitmap this) >>> ___i) & 1) != 0)
                                                        (if (nil? (ยง aget (:array this) ___j))
                                                            (do
                                                                (ยง ass (ยง aget ___nodes ___i) (cast' INode (ยง aget (:array this) (ร ___j + 1))))
                                                            )
                                                            (do
                                                                (ยง ass (ยง aget ___nodes ___i) (ร BitmapIndexedNode'EMPTY.assoc(___shift + 5, PersistentHashMap'hash((:array this)[___j]), (:array this)[___j], (:array this)[___j + 1], ___addedLeaf)))
                                                            )
                                                        )
                                                        (ยง ass ___j (+ ___j 2))
                                                    )
                                                )
                                                (ร ArrayNode'new(nil, ___n + 1, ___nodes))
                                            )
                                        )
                                    )
                                )
                                (do
                                    (let [#_"Object[]" ___newArray (make-array Object (ร 2 * (___n + 1)))]
                                        (ร System/arraycopy((:array this), 0, ___newArray, 0, 2 * ___idx))
                                        (ยง ass (ยง aget ___newArray (ร 2 * ___idx)) ___key)
                                        (ยง ass (:val ___addedLeaf) ___addedLeaf)
                                        (ยง ass (ยง aget ___newArray (ร 2 * ___idx + 1)) ___val)
                                        (ร System/arraycopy((:array this), 2 * ___idx, ___newArray, 2 * (___idx + 1), 2 * (___n - ___idx)))
                                        (ร BitmapIndexedNode'new(nil, (:bitmap this) | ___bit, ___newArray))
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"INode" (ยง method without) [#_"BitmapIndexedNode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key]
        (let [#_"int" ___bit (bitpos ___hash, ___shift)]
            (when (zero? (ร (:bitmap this) & ___bit))
                (ยง return this)
            )
            (let [#_"int" ___idx (.index this, ___bit)]
                (let [#_"Object" ___keyOrNull (ยง aget (:array this) (ร 2 * ___idx))]
                    (let [#_"Object" ___valOrNode (ยง aget (:array this) (ร 2 * ___idx + 1))]
                        (when (nil? ___keyOrNull)
                            (let [#_"INode" ___n (ร (cast' INode ___valOrNode).without(___shift + 5, ___hash, ___key))]
                                (when (= ___n ___valOrNode)
                                    (ยง return this)
                                )
                                (when (some? ___n)
                                    (ยง return (ร BitmapIndexedNode'new(nil, (:bitmap this), cloneAndSet((:array this), 2 * ___idx + 1, ___n))))
                                )
                                (when (ร (:bitmap this) == ___bit)
                                    (ยง return nil)
                                )
                                (ยง return (ร BitmapIndexedNode'new(nil, (:bitmap this) :xor ___bit, removePair((:array this), ___idx))))
                            )
                        )
                        (when (Util'equiv-2oo ___key, ___keyOrNull)
                            ;; TODO: collapse
                            (ยง return (ร BitmapIndexedNode'new(nil, (:bitmap this) :xor ___bit, removePair((:array this), ___idx))))
                        )
                        this
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"IMapEntry" (ยง method find) [#_"BitmapIndexedNode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key]
        (let [#_"int" ___bit (bitpos ___hash, ___shift)]
            (when (zero? (ร (:bitmap this) & ___bit))
                (ยง return nil)
            )
            (let [#_"int" ___idx (.index this, ___bit)]
                (let [#_"Object" ___keyOrNull (ยง aget (:array this) (ร 2 * ___idx))]
                    (let [#_"Object" ___valOrNode (ยง aget (:array this) (ร 2 * ___idx + 1))]
                        (when (nil? ___keyOrNull)
                            (ยง return (ร (cast' INode ___valOrNode).find(___shift + 5, ___hash, ___key)))
                        )
                        (when (Util'equiv-2oo ___key, ___keyOrNull)
                            (ยง return (cast' IMapEntry (MapEntry'create ___keyOrNull, ___valOrNode)))
                        )
                        nil
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method find) [#_"BitmapIndexedNode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Object" ___notFound]
        (let [#_"int" ___bit (bitpos ___hash, ___shift)]
            (when (zero? (ร (:bitmap this) & ___bit))
                (ยง return ___notFound)
            )
            (let [#_"int" ___idx (.index this, ___bit)]
                (let [#_"Object" ___keyOrNull (ยง aget (:array this) (ร 2 * ___idx))]
                    (let [#_"Object" ___valOrNode (ยง aget (:array this) (ร 2 * ___idx + 1))]
                        (when (nil? ___keyOrNull)
                            (ยง return (ร (cast' INode ___valOrNode).find(___shift + 5, ___hash, ___key, ___notFound)))
                        )
                        (when (Util'equiv-2oo ___key, ___keyOrNull)
                            (ยง return ___valOrNode)
                        )
                        ___notFound
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"ISeq" (ยง method nodeSeq) [#_"BitmapIndexedNode" this]
        (NodeSeq'create-1 (:array this))
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"BitmapIndexedNode" this, #_"IFn" ___f]
        (NodeIter'new (:array this), ___f)
    )

    #_method
    (ยง defn #_"Object" (ยง method kvreduce) [#_"BitmapIndexedNode" this, #_"IFn" ___f, #_"Object" ___init]
        (NodeSeq'kvreduce (:array this), ___f, ___init)
    )

    #_method
    (ยง defn #_"Object" (ยง method fold) [#_"BitmapIndexedNode" this, #_"IFn" ___combinef, #_"IFn" ___reducef, #_"IFn" ___fjtask, #_"IFn" ___fjfork, #_"IFn" ___fjjoin]
        (ร NodeSeq'kvreduce((:array this), ___reducef, (.invoke ___combinef)))
    )

    #_method
    (ยง defn- #_"BitmapIndexedNode" (ยง method ensureEditable) [#_"BitmapIndexedNode" this, #_"AtomicReference<Thread>" ___edit]
        (when (ร (:edit this) == ___edit)
            (ยง return this)
        )
        (let [#_"int" ___n (Integer/bitCount (:bitmap this))]
            (let [#_"Object[]" ___newArray (make-array Object (if (<= 0 ___n) (* 2 (+ ___n 1)) 4))] ;; make room for next assoc
                (System/arraycopy (:array this), 0, ___newArray, 0, (* 2 ___n))
                (BitmapIndexedNode'new ___edit, (:bitmap this), ___newArray)
            )
        )
    )

    #_method
    (ยง defn- #_"BitmapIndexedNode" (ยง method editAndSet) [#_"BitmapIndexedNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___i, #_"Object" ___a]
        (let [#_"BitmapIndexedNode" ___editable (.ensureEditable this, ___edit)]
            (ยง ass (ยง aget (:array ___editable) ___i) ___a)
            ___editable
        )
    )

    #_method
    (ยง defn- #_"BitmapIndexedNode" (ยง method editAndSet) [#_"BitmapIndexedNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___i, #_"Object" ___a, #_"int" ___j, #_"Object" ___b]
        (let [#_"BitmapIndexedNode" ___editable (.ensureEditable this, ___edit)]
            (ยง ass (ยง aget (:array ___editable) ___i) ___a)
            (ยง ass (ยง aget (:array ___editable) ___j) ___b)
            ___editable
        )
    )

    #_method
    (ยง defn- #_"BitmapIndexedNode" (ยง method editAndRemovePair) [#_"BitmapIndexedNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___bit, #_"int" ___i]
        (when (ร (:bitmap this) == ___bit)
            (ยง return nil)
        )
        (let [#_"BitmapIndexedNode" ___editable (.ensureEditable this, ___edit)]
            (ยง ass (:bitmap ___editable) (ร (:bitmap ___editable) :xor ___bit))
            (ร System/arraycopy((:array ___editable), 2 * (___i + 1), (:array ___editable), 2 * ___i, (ยง alength (:array ___editable)) - 2 * (___i + 1)))
            (ยง ass (ยง aget (:array ___editable) (ร (ยง alength (:array ___editable)) - 2)) nil)
            (ยง ass (ยง aget (:array ___editable) (ร (ยง alength (:array ___editable)) - 1)) nil)
            ___editable
        )
    )

    #_method
    (ยง defn #_"INode" (ยง method assoc) [#_"BitmapIndexedNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Object" ___val, #_"Box" ___addedLeaf]
        (let [#_"int" ___bit (bitpos ___hash, ___shift)]
            (let [#_"int" ___idx (.index this, ___bit)]
                (if (ร ((:bitmap this) & ___bit) != 0)
                    (do
                        (let [#_"Object" ___keyOrNull (ยง aget (:array this) (ร 2 * ___idx))]
                            (let [#_"Object" ___valOrNode (ยง aget (:array this) (ร 2 * ___idx + 1))]
                                (when (nil? ___keyOrNull)
                                    (let [#_"INode" ___n (ร (cast' INode ___valOrNode).assoc(___edit, ___shift + 5, ___hash, ___key, ___val, ___addedLeaf))]
                                        (when (= ___n ___valOrNode)
                                            (ยง return this)
                                        )
                                        (ยง return (ร this.editAndSet(___edit, 2 * ___idx + 1, ___n)))
                                    )
                                )
                                (when (Util'equiv-2oo ___key, ___keyOrNull)
                                    (when (= ___val ___valOrNode)
                                        (ยง return this)
                                    )
                                    (ยง return (ร this.editAndSet(___edit, 2 * ___idx + 1, ___val)))
                                )
                                (ยง ass (:val ___addedLeaf) ___addedLeaf)
                                (ร this.editAndSet(___edit, 2 * ___idx, nil, 2 * ___idx + 1, createNode(___edit, ___shift + 5, ___keyOrNull, ___valOrNode, ___hash, ___key, ___val)))
                            )
                        )
                    )
                    (do
                        (let [#_"int" ___n (Integer/bitCount (:bitmap this))]
                            (when (ร ___n * 2 < (ยง alength (:array this)))
                                (ยง ass (:val ___addedLeaf) ___addedLeaf)
                                (let [#_"BitmapIndexedNode" ___editable (.ensureEditable this, ___edit)]
                                    (ร System/arraycopy((:array ___editable), 2 * ___idx, (:array ___editable), 2 * (___idx + 1), 2 * (___n - ___idx)))
                                    (ยง ass (ยง aget (:array ___editable) (ร 2 * ___idx)) ___key)
                                    (ยง ass (ยง aget (:array ___editable) (ร 2 * ___idx + 1)) ___val)
                                    (ยง ass (:bitmap ___editable) (ร (:bitmap ___editable) | ___bit))
                                    (ยง return ___editable)
                                )
                            )
                            (if (>= ___n 16)
                                (do
                                    (let [#_"INode[]" ___nodes (ยง typeless make-array INode 32)]
                                        (let [#_"int" ___jdx (mask ___hash, ___shift)]
                                            (ยง ass (ยง aget ___nodes ___jdx) (ร BitmapIndexedNode'EMPTY.assoc(___edit, ___shift + 5, ___hash, ___key, ___val, ___addedLeaf)))
                                            (let [#_"int" ___j 0]
                                                (loop-when-recur [#_"int" ___i 0] (< ___i 32) [(inc ___i)]
                                                    (when (ร (((:bitmap this) >>> ___i) & 1) != 0)
                                                        (if (nil? (ยง aget (:array this) ___j))
                                                            (do
                                                                (ยง ass (ยง aget ___nodes ___i) (cast' INode (ยง aget (:array this) (ร ___j + 1))))
                                                            )
                                                            (do
                                                                (ยง ass (ยง aget ___nodes ___i) (ร BitmapIndexedNode'EMPTY.assoc(___edit, ___shift + 5, PersistentHashMap'hash((:array this)[___j]), (:array this)[___j], (:array this)[___j + 1], ___addedLeaf)))
                                                            )
                                                        )
                                                        (ยง ass ___j (+ ___j 2))
                                                    )
                                                )
                                                (ร ArrayNode'new(___edit, ___n + 1, ___nodes))
                                            )
                                        )
                                    )
                                )
                                (do
                                    (let [#_"Object[]" ___newArray (make-array Object (ร 2 * (___n + 4)))]
                                        (ร System/arraycopy((:array this), 0, ___newArray, 0, 2 * ___idx))
                                        (ยง ass (ยง aget ___newArray (ร 2 * ___idx)) ___key)
                                        (ยง ass (:val ___addedLeaf) ___addedLeaf)
                                        (ยง ass (ยง aget ___newArray (ร 2 * ___idx + 1)) ___val)
                                        (ร System/arraycopy((:array this), 2 * ___idx, ___newArray, 2 * (___idx + 1), 2 * (___n - ___idx)))
                                        (let [#_"BitmapIndexedNode" ___editable (.ensureEditable this, ___edit)]
                                            (ยง ass (:array ___editable) ___newArray)
                                            (ยง ass (:bitmap ___editable) (ร (:bitmap ___editable) | ___bit))
                                            ___editable
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"INode" (ยง method without) [#_"BitmapIndexedNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Box" ___removedLeaf]
        (let [#_"int" ___bit (bitpos ___hash, ___shift)]
            (when (zero? (ร (:bitmap this) & ___bit))
                (ยง return this)
            )
            (let [#_"int" ___idx (.index this, ___bit)]
                (let [#_"Object" ___keyOrNull (ยง aget (:array this) (ร 2 * ___idx))]
                    (let [#_"Object" ___valOrNode (ยง aget (:array this) (ร 2 * ___idx + 1))]
                        (when (nil? ___keyOrNull)
                            (let [#_"INode" ___n (ร (cast' INode ___valOrNode).without(___edit, ___shift + 5, ___hash, ___key, ___removedLeaf))]
                                (when (= ___n ___valOrNode)
                                    (ยง return this)
                                )
                                (when (some? ___n)
                                    (ยง return (ร this.editAndSet(___edit, 2 * ___idx + 1, ___n)))
                                )
                                (when (ร (:bitmap this) == ___bit)
                                    (ยง return nil)
                                )
                                (ยง return (.editAndRemovePair this, ___edit, ___bit, ___idx))
                            )
                        )
                        (when (Util'equiv-2oo ___key, ___keyOrNull)
                            (ยง ass (:val ___removedLeaf) ___removedLeaf)
                            ;; TODO: collapse
                            (ยง return (.editAndRemovePair this, ___edit, ___bit, ___idx))
                        )
                        this
                    )
                )
            )
        )
    )
)

(class-ns HashCollisionNode (ยง implements INode)
    (defn- #_"HashCollisionNode" HashCollisionNode'init []
        (hash-map
            #_"int" :hash 0
            #_"int" :count 0
            #_"Object[]" :array nil
            #_"AtomicReference<Thread>" :edit nil
        )
    )

    (defn #_"HashCollisionNode" HashCollisionNode'new [#_"AtomicReference<Thread>" ___edit, #_"int" ___hash, #_"int" ___count, #_"Object..." ___array]
        (let [this (HashCollisionNode'init)]
            (ยง ass (:edit this) ___edit)
            (ยง ass (:hash this) ___hash)
            (ยง ass (:count this) ___count)
            (ยง ass (:array this) ___array)
            this
        )
    )

    #_method
    (ยง defn #_"INode" (ยง method assoc) [#_"HashCollisionNode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Object" ___val, #_"Box" ___addedLeaf]
        (when (ร ___hash == (:hash this))
            (let [#_"int" ___idx (.findIndex this, ___key)]
                (when (not= ___idx -1)
                    (when (ร (:array this)[___idx + 1] == ___val)
                        (ยง return this)
                    )
                    (ยง return (ร HashCollisionNode'new(nil, ___hash, (:count this), cloneAndSet((:array this), ___idx + 1, ___val))))
                )
                (let [#_"Object[]" ___newArray (make-array Object (ร 2 * ((:count this) + 1)))]
                    (ร System/arraycopy((:array this), 0, ___newArray, 0, 2 * (:count this)))
                    (ยง ass (ยง aget ___newArray (ร 2 * (:count this))) ___key)
                    (ยง ass (ยง aget ___newArray (ร 2 * (:count this) + 1)) ___val)
                    (ยง ass (:val ___addedLeaf) ___addedLeaf)
                    (ยง return (ร HashCollisionNode'new((:edit this), ___hash, (:count this) + 1, ___newArray)))
                )
            )
        )
        ;; nest it in a bitmap node
        (ร BitmapIndexedNode'new(nil, bitpos((:hash this), ___shift), (object-array [ nil, this ])).assoc(___shift, ___hash, ___key, ___val, ___addedLeaf))
    )

    #_method
    (ยง defn #_"INode" (ยง method without) [#_"HashCollisionNode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key]
        (let [#_"int" ___idx (.findIndex this, ___key)]
            (when (= ___idx -1)
                (ยง return this)
            )
            (when (ร (:count this) == 1)
                (ยง return nil)
            )
            (ร HashCollisionNode'new(nil, ___hash, (:count this) - 1, removePair((:array this), ___idx / 2)))
        )
    )

    #_method
    (ยง defn #_"IMapEntry" (ยง method find) [#_"HashCollisionNode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key]
        (let [#_"int" ___idx (.findIndex this, ___key)]
            (when (< ___idx 0)
                (ยง return nil)
            )
            (when (ร Util'equiv-2oo(___key, (:array this)[___idx]))
                (ยง return (cast' IMapEntry (ร MapEntry'create((:array this)[___idx], (:array this)[___idx + 1]))))
            )
            nil
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method find) [#_"HashCollisionNode" this, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Object" ___notFound]
        (let [#_"int" ___idx (.findIndex this, ___key)]
            (when (< ___idx 0)
                (ยง return ___notFound)
            )
            (when (ร Util'equiv-2oo(___key, (:array this)[___idx]))
                (ยง return (ยง aget (:array this) (ร ___idx + 1)))
            )
            ___notFound
        )
    )

    #_method
    (ยง defn #_"ISeq" (ยง method nodeSeq) [#_"HashCollisionNode" this]
        (NodeSeq'create-1 (:array this))
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"HashCollisionNode" this, #_"IFn" ___f]
        (NodeIter'new (:array this), ___f)
    )

    #_method
    (ยง defn #_"Object" (ยง method kvreduce) [#_"HashCollisionNode" this, #_"IFn" ___f, #_"Object" ___init]
        (NodeSeq'kvreduce (:array this), ___f, ___init)
    )

    #_method
    (ยง defn #_"Object" (ยง method fold) [#_"HashCollisionNode" this, #_"IFn" ___combinef, #_"IFn" ___reducef, #_"IFn" ___fjtask, #_"IFn" ___fjfork, #_"IFn" ___fjjoin]
        (ร NodeSeq'kvreduce((:array this), ___reducef, (.invoke ___combinef)))
    )

    #_method
    (ยง defn #_"int" (ยง method findIndex) [#_"HashCollisionNode" this, #_"Object" ___key]
        (loop-when-recur [#_"int" ___i 0] (ร ___i < 2 * (:count this)) [(+ ___i 2)]
            (when (ร Util'equiv-2oo(___key, (:array this)[___i]))
                (ยง return ___i)
            )
        )
        -1
    )

    #_method
    (ยง defn- #_"HashCollisionNode" (ยง method ensureEditable) [#_"HashCollisionNode" this, #_"AtomicReference<Thread>" ___edit]
        (when (ร (:edit this) == ___edit)
            (ยง return this)
        )
        (let [#_"Object[]" ___newArray (make-array Object (ร 2 * ((:count this) + 1)))] ;; make room for next assoc
            (ร System/arraycopy((:array this), 0, ___newArray, 0, 2 * (:count this)))
            (HashCollisionNode'new ___edit, (:hash this), (:count this), ___newArray)
        )
    )

    #_method
    (ยง defn- #_"HashCollisionNode" (ยง method ensureEditable) [#_"HashCollisionNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___count, #_"Object[]" ___array]
        (when (ร (:edit this) == ___edit)
            (ยง ass (:array this) ___array)
            (ยง ass (:count this) ___count)
            (ยง return this)
        )
        (HashCollisionNode'new ___edit, (:hash this), ___count, ___array)
    )

    #_method
    (ยง defn- #_"HashCollisionNode" (ยง method editAndSet) [#_"HashCollisionNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___i, #_"Object" ___a]
        (let [#_"HashCollisionNode" ___editable (.ensureEditable this, ___edit)]
            (ยง ass (ยง aget (:array ___editable) ___i) ___a)
            ___editable
        )
    )

    #_method
    (ยง defn- #_"HashCollisionNode" (ยง method editAndSet) [#_"HashCollisionNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___i, #_"Object" ___a, #_"int" ___j, #_"Object" ___b]
        (let [#_"HashCollisionNode" ___editable (.ensureEditable this, ___edit)]
            (ยง ass (ยง aget (:array ___editable) ___i) ___a)
            (ยง ass (ยง aget (:array ___editable) ___j) ___b)
            ___editable
        )
    )

    #_method
    (ยง defn #_"INode" (ยง method assoc) [#_"HashCollisionNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Object" ___val, #_"Box" ___addedLeaf]
        (when (ร ___hash == (:hash this))
            (let [#_"int" ___idx (.findIndex this, ___key)]
                (when (not= ___idx -1)
                    (when (ร (:array this)[___idx + 1] == ___val)
                        (ยง return this)
                    )
                    (ยง return (ร this.editAndSet(___edit, ___idx + 1, ___val)))
                )
                (when (ร (ยง alength (:array this)) > 2 * (:count this))
                    (ยง ass (:val ___addedLeaf) ___addedLeaf)
                    (let [#_"HashCollisionNode" ___editable (ร this.editAndSet(___edit, 2 * (:count this), ___key, 2 * (:count this) + 1, ___val))]
                        (ยง ass (:count ___editable) (ร (:count ___editable) + 1))
                        (ยง return ___editable)
                    )
                )
                (let [#_"Object[]" ___newArray (make-array Object (ร (ยง alength (:array this)) + 2))]
                    (ร System/arraycopy((:array this), 0, ___newArray, 0, (ยง alength (:array this))))
                    (ยง ass (ยง aget ___newArray (ร (ยง alength (:array this)))) ___key)
                    (ยง ass (ยง aget ___newArray (ร (ยง alength (:array this)) + 1)) ___val)
                    (ยง ass (:val ___addedLeaf) ___addedLeaf)
                    (ยง return (ร this.ensureEditable(___edit, (:count this) + 1, ___newArray)))
                )
            )
        )
        ;; nest it in a bitmap node
        (ร BitmapIndexedNode'new(___edit, bitpos((:hash this), ___shift), (object-array [ nil, this, nil, nil ])).assoc(___edit, ___shift, ___hash, ___key, ___val, ___addedLeaf))
    )

    #_method
    (ยง defn #_"INode" (ยง method without) [#_"HashCollisionNode" this, #_"AtomicReference<Thread>" ___edit, #_"int" ___shift, #_"int" ___hash, #_"Object" ___key, #_"Box" ___removedLeaf]
        (let [#_"int" ___idx (.findIndex this, ___key)]
            (when (= ___idx -1)
                (ยง return this)
            )
            (ยง ass (:val ___removedLeaf) ___removedLeaf)
            (when (ร (:count this) == 1)
                (ยง return nil)
            )
            (let [#_"HashCollisionNode" ___editable (.ensureEditable this, ___edit)]
                (ยง ass (ยง aget (:array ___editable) ___idx) (ยง aget (:array ___editable) (ร 2 * (:count this) - 2)))
                (ยง ass (ยง aget (:array ___editable) (ร ___idx + 1)) (ยง aget (:array ___editable) (ร 2 * (:count this) - 1)))
                (ยง ass (ยง aget (:array ___editable) (ร 2 * (:count this) - 2)) (ยง ass (ยง aget (:array ___editable) (ร 2 * (:count this) - 1)) nil))
                (ยง ass (:count ___editable) (ร (:count ___editable) - 1))
                ___editable
            )
        )
    )
)

(class-ns NodeIter (ยง implements Iterator)
    (def- #_"Object" NodeIter'NULL (Object.))

    (defn- #_"NodeIter" NodeIter'init []
        (hash-map
            #_"Object[]" :array nil
            #_"IFn" :f nil
            #_"int" :i 0
            #_"Object" :nextEntry NodeIter'NULL
            #_"Iterator" :nextIter nil
        )
    )

    (defn #_"NodeIter" NodeIter'new [#_"Object[]" ___array, #_"IFn" ___f]
        (let [this (NodeIter'init)]
            (ยง ass (:array this) ___array)
            (ยง ass (:f this) ___f)
            this
        )
    )

    #_method
    (ยง defn- #_"boolean" (ยง method advance) [#_"NodeIter" this]
        (while (ร (:i this) < (ยง alength (:array this)))
            (let [#_"Object" ___key (ยง aget (:array this) (:i this))]
                (let [#_"Object" ___nodeOrVal (ยง aget (:array this) (ร (:i this) + 1))]
                    (ยง ass (:i this) (+ (:i this) 2))
                    (cond (some? ___key)
                        (do
                            (ยง ass (:nextEntry this) (.invoke (:f this), ___key, ___nodeOrVal))
                            (ยง return true)
                        )
                        (some? ___nodeOrVal)
                        (do
                            (let [#_"Iterator" ___iter (.iterator (cast' INode ___nodeOrVal), (:f this))]
                                (when (and (some? ___iter) (.hasNext ___iter))
                                    (ยง ass (:nextIter this) ___iter)
                                    (ยง return true)
                                )
                            )
                        )
                    )
                )
            )
        )
        false
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"NodeIter" this]
        (when (or (ร (:nextEntry this) != NodeIter'NULL) (some? (:nextIter this)))
            (ยง return true)
        )
        (.advance this)
    )

    #_method
    (ยง defn #_"Object" (ยง method next) [#_"NodeIter" this]
        (let [#_"Object" ___ret (:nextEntry this)]
            (cond (not= ___ret NodeIter'NULL)
                (do
                    (ยง ass (:nextEntry this) NodeIter'NULL)
                    (ยง return ___ret)
                )
                (some? (:nextIter this))
                (do
                    (ยง ass ___ret (next (:nextIter this)))
                    (when (not (.hasNext (:nextIter this)))
                        (ยง ass (:nextIter this) nil)
                    )
                    (ยง return ___ret)
                )
                (.advance this)
                (do
                    (ยง return (next this))
                )
            )
            (throw (NoSuchElementException.))
        )
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"NodeIter" this]
        (throw (UnsupportedOperationException.))
    )
)

(class-ns NodeSeq (ยง extends ASeq)
    (defn- #_"NodeSeq" NodeSeq'init []
        (hash-map
            #_"Object[]" :array nil
            #_"int" :i 0
            #_"ISeq" :s nil
        )
    )

    (defn #_"NodeSeq" NodeSeq'new-2 [#_"Object[]" ___array, #_"int" ___i]
        (NodeSeq'new-4 nil, ___array, ___i, nil)
    )

    (defn #_"ISeq" NodeSeq'create-1 [#_"Object[]" ___array]
        (NodeSeq'create-3 ___array, 0, nil)
    )

    (defn #_"Object" NodeSeq'kvreduce [#_"Object[]" ___array, #_"IFn" ___f, #_"Object" ___init]
        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___array)) [(+ ___i 2)]
            (if (some? (ยง aget ___array ___i))
                (do
                    (ยง ass ___init (ร ___f.invoke(___init, ___array[___i], ___array[___i + 1])))
                )
                (do
                    (let [#_"INode" ___node (cast' INode (ยง aget ___array (ร ___i + 1)))]
                        (when (some? ___node)
                            (ยง ass ___init (.kvreduce ___node, ___f, ___init))
                        )
                    )
                )
            )
            (when (RT'isReduced ___init)
                (ยง return ___init)
            )
        )
        ___init
    )

    (defn- #_"ISeq" NodeSeq'create-3 [#_"Object[]" ___array, #_"int" ___i, #_"ISeq" ___s]
        (when (some? ___s)
            (ยง return (NodeSeq'new-4 nil, ___array, ___i, ___s))
        )
        (loop-when-recur [#_"int" ___j ___i] (< ___j (ยง alength ___array)) [(+ ___j 2)]
            (when (some? (ยง aget ___array ___j))
                (ยง return (NodeSeq'new-4 nil, ___array, ___j, nil))
            )
            (let [#_"INode" ___node (cast' INode (ยง aget ___array (ร ___j + 1)))]
                (when (some? ___node)
                    (let [#_"ISeq" ___nodeSeq (.nodeSeq ___node)]
                        (when (some? ___nodeSeq)
                            (ยง return (ร NodeSeq'new-4(nil, ___array, ___j + 2, ___nodeSeq)))
                        )
                    )
                )
            )
        )
        nil
    )

    (defn #_"NodeSeq" NodeSeq'new-4 [#_"IPersistentMap" ___meta, #_"Object[]" ___array, #_"int" ___i, #_"ISeq" ___s]
        (let [this (merge (ASeq'new ___meta) (NodeSeq'init))]
            (ยง ass (:array this) ___array)
            (ยง ass (:i this) ___i)
            (ยง ass (:s this) ___s)
            this
        )
    )

    #_method
    (ยง defn #_"Obj" (ยง method withMeta) [#_"NodeSeq" this, #_"IPersistentMap" ___meta]
        (NodeSeq'new-4 ___meta, (:array this), (:i this), (:s this))
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"NodeSeq" this]
        (when (some? (:s this))
            (ยง return (first (:s this)))
        )
        (ร MapEntry'create((:array this)[(:i this)], (:array this)[(:i this) + 1]))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"NodeSeq" this]
        (when (some? (:s this))
            (ยง return (ร NodeSeq'create-3((:array this), (:i this), (:s this).next())))
        )
        (ร NodeSeq'create-3((:array this), (:i this) + 2, nil))
    )
)

;;;
 ; A persistent rendition of Phil Bagwell's Hash Array Mapped Trie
 ;
 ; Uses path copying for persistence
 ; HashCollision leaves vs. extended hashing
 ; Node polymorphism vs. conditionals
 ; No sub-tree pools or root-resizing
 ; Any errors are my own
 ;;
(class-ns PersistentHashMap (ยง extends APersistentMap) (ยง implements IEditableCollection, IObj, IMapIterable, IKVReduce)
    (ยง def #_"PersistentHashMap" PersistentHashMap'EMPTY (PersistentHashMap'new-4 0, nil, false, nil))
    (def- #_"Object" PersistentHashMap'NOT_FOUND (Object.))

    (defn #_"IPersistentMap" PersistentHashMap'create-1m [#_"Map" ___other]
        (let [#_"ITransientMap" ___ret (.asTransient PersistentHashMap'EMPTY)]
            (doseq [#_"Object" ___o (.entrySet ___other)]
                (let [#_"Map$Entry" ___e (cast' Entry ___o)]
                    (ยง ass ___ret (ร ___ret.assoc((.getKey ___e), (.getValue ___e))))
                )
            )
            (.persistent ___ret)
        )
    )

    ;;;
     ; @param init {key1, val1, key2, val2, ...}
     ;;
    (defn #_"PersistentHashMap" PersistentHashMap'create-1a [#_"Object..." ___init]
        (let [#_"ITransientMap" ___ret (.asTransient PersistentHashMap'EMPTY)]
            (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___init)) [(+ ___i 2)]
                (ยง ass ___ret (ร ___ret.assoc(___init[___i], ___init[___i + 1])))
            )
            (cast' PersistentHashMap (.persistent ___ret))
        )
    )

    (defn #_"PersistentHashMap" PersistentHashMap'createWithCheck-1a [#_"Object..." ___init]
        (let [#_"ITransientMap" ___ret (.asTransient PersistentHashMap'EMPTY)]
            (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___init)) [(+ ___i 2)]
                (ยง ass ___ret (ร ___ret.assoc(___init[___i], ___init[___i + 1])))
                (when (ร (count ___ret) != ___i / 2 + 1)
                    (throw (IllegalArgumentException. (str "Duplicate key: " (ยง aget ___init ___i))))
                )
            )
            (cast' PersistentHashMap (.persistent ___ret))
        )
    )

    (defn #_"PersistentHashMap" PersistentHashMap'create-1s [#_"ISeq" ___items]
        (let [#_"ITransientMap" ___ret (.asTransient PersistentHashMap'EMPTY)]
            (loop-when-recur [___items ___items] (some? ___items) [(next (next ___items))]
                (when (nil? (next ___items))
                    (throw (IllegalArgumentException. (String/format "No value supplied for key: %s", (object-array [ (first ___items) ]))))
                )
                (ยง ass ___ret (ร ___ret.assoc((first ___items), RT'second(___items))))
            )
            (cast' PersistentHashMap (.persistent ___ret))
        )
    )

    (defn #_"PersistentHashMap" PersistentHashMap'createWithCheck-1s [#_"ISeq" ___items]
        (let [#_"ITransientMap" ___ret (.asTransient PersistentHashMap'EMPTY)]
            (loop-when-recur [___items ___items #_"int" ___i 0] (some? ___items) [(next (next ___items)) (inc ___i)]
                (when (nil? (next ___items))
                    (throw (IllegalArgumentException. (String/format "No value supplied for key: %s", (object-array [ (first ___items) ]))))
                )
                (ยง ass ___ret (ร ___ret.assoc((first ___items), RT'second(___items))))
                (when (ร (count ___ret) != ___i + 1)
                    (throw (IllegalArgumentException. (str "Duplicate key: " (first ___items))))
                )
            )
            (cast' PersistentHashMap (.persistent ___ret))
        )
    )

    ;;;
     ; @param init {key1, val1, key2, val2, ...}
     ;;
    (defn #_"PersistentHashMap" PersistentHashMap'create-2 [#_"IPersistentMap" ___meta, #_"Object..." ___init]
        (ร this.create(___init).withMeta(___meta))
    )

    (defn- #_"PersistentHashMap" PersistentHashMap'init []
        (hash-map
            #_"int" :count 0
            #_"INode" :root nil
            #_"boolean" :hasNull false
            #_"Object" :nullValue nil
            #_"IPersistentMap" :_meta nil
        )
    )

    (defn #_"PersistentHashMap" PersistentHashMap'new-4 [#_"int" ___count, #_"INode" ___root, #_"boolean" ___hasNull, #_"Object" ___nullValue]
        (let [this (merge (APersistentMap'new) (PersistentHashMap'init))]
            (ยง ass (:count this) ___count)
            (ยง ass (:root this) ___root)
            (ยง ass (:hasNull this) ___hasNull)
            (ยง ass (:nullValue this) ___nullValue)
            (ยง ass (:_meta this) nil)
            this
        )
    )

    (defn #_"PersistentHashMap" PersistentHashMap'new-5 [#_"IPersistentMap" ___meta, #_"int" ___count, #_"INode" ___root, #_"boolean" ___hasNull, #_"Object" ___nullValue]
        (let [this (merge (APersistentMap'new) (PersistentHashMap'init))]
            (ยง ass (:_meta this) ___meta)
            (ยง ass (:count this) ___count)
            (ยง ass (:root this) ___root)
            (ยง ass (:hasNull this) ___hasNull)
            (ยง ass (:nullValue this) ___nullValue)
            this
        )
    )

    (defn #_"int" PersistentHashMap'hash [#_"Object" ___k]
        (Util'hasheq ___k)
    )

    #_method
    (ยง defn #_"boolean" (ยง method containsKey) [#_"PersistentHashMap" this, #_"Object" ___key]
        (when (nil? ___key)
            (ยง return (:hasNull this))
        )
        (and (some? (:root this)) (ร (ร (:root this).find(0, PersistentHashMap'hash(___key), ___key, PersistentHashMap'NOT_FOUND)) != PersistentHashMap'NOT_FOUND))
    )

    #_method
    (ยง defn #_"IMapEntry" (ยง method entryAt) [#_"PersistentHashMap" this, #_"Object" ___key]
        (when (nil? ___key)
            (ยง return (when (:hasNull this) (cast' IMapEntry (MapEntry'create nil, (:nullValue this)))))
        )
        (when (some? (:root this)) (ร (:root this).find(0, PersistentHashMap'hash(___key), ___key)))
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method assoc) [#_"PersistentHashMap" this, #_"Object" ___key, #_"Object" ___val]
        (when (nil? ___key)
            (when (and (:hasNull this) (ร ___val == (:nullValue this)))
                (ยง return this)
            )
            (ยง return (PersistentHashMap'new-5 (.meta this), (if (:hasNull this) (:count this) (inc (:count this))), (:root this), true, ___val))
        )
        (let [#_"Box" ___addedLeaf (Box'new nil)]
            (let [#_"INode" ___newroot (.assoc (or (:root this) BitmapIndexedNode'EMPTY), 0, (PersistentHashMap'hash ___key), ___key, ___val, ___addedLeaf)]
                (when (ร ___newroot == (:root this))
                    (ยง return this)
                )
                (PersistentHashMap'new-5 (.meta this), (if (nil? (:val ___addedLeaf)) (:count this) (inc (:count this))), ___newroot, (:hasNull this), (:nullValue this))
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"PersistentHashMap" this, #_"Object" ___key, #_"Object" ___notFound]
        (when (nil? ___key)
            (ยง return (if (:hasNull this) (:nullValue this) ___notFound))
        )
        (if (some? (:root this)) (ร (:root this).find(0, PersistentHashMap'hash(___key), ___key, ___notFound)) ___notFound)
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"PersistentHashMap" this, #_"Object" ___key]
        (.valAt this, ___key, nil)
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method assocEx) [#_"PersistentHashMap" this, #_"Object" ___key, #_"Object" ___val]
        (when (.containsKey this, ___key)
            (throw (Util'runtimeException-1 "Key already present"))
        )
        (.assoc this, ___key, ___val)
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method without) [#_"PersistentHashMap" this, #_"Object" ___key]
        (when (nil? ___key)
            (ยง return (if (:hasNull this) (PersistentHashMap'new-5 (.meta this), (dec (:count this)), (:root this), false, nil) this))
        )
        (when (nil? (:root this))
            (ยง return this)
        )
        (let [#_"INode" ___newroot (ร (:root this).without(0, PersistentHashMap'hash(___key), ___key))]
            (when (ร ___newroot == (:root this))
                (ยง return this)
            )
            (ร PersistentHashMap'new-5((.meta this), (:count this) - 1, ___newroot, (:hasNull this), (:nullValue this)))
        )
    )

    (def #_"Iterator" PersistentHashMap'EMPTY_ITER
        (ยง reify Iterator()
            #_method
            (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                false
            )

            #_method
            (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                (throw (NoSuchElementException.))
            )

            #_method
            (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                (throw (UnsupportedOperationException.))
            )
        )
    )

    #_method
    (ยง defn- #_"Iterator" (ยง method iterator) [#_"PersistentHashMap" this, #_"IFn" ___f]
        (let [#_"Iterator" ___rootIter (if (nil? (:root this)) PersistentHashMap'EMPTY_ITER (.iterator (:root this), ___f))]
            (if (:hasNull this)
                (do
                    (ยง reify Iterator()
                        (ยง init
                            (hash-map
                                #_"boolean" :seen false
                            )
                        )

                        #_method
                        (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                            (if (not (:seen this))
                                (do
                                    true
                                )
                                (do
                                    (.hasNext ___rootIter)
                                )
                            )
                        )

                        #_method
                        (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                            (if (not (:seen this))
                                (do
                                    (ยง ass (:seen this) true)
                                    (.invoke ___f, nil, (:nullValue this))
                                )
                                (do
                                    (next ___rootIter)
                                )
                            )
                        )

                        #_method
                        (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                            (throw (UnsupportedOperationException.))
                        )
                    )
                )
                (do
                    ___rootIter
                )
            )
        )
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"PersistentHashMap" this]
        (.iterator this, APersistentMap'MAKE_ENTRY)
    )

    #_method
    (ยง defn #_"Iterator" (ยง method keyIterator) [#_"PersistentHashMap" this]
        (.iterator this, APersistentMap'MAKE_KEY)
    )

    #_method
    (ยง defn #_"Iterator" (ยง method valIterator) [#_"PersistentHashMap" this]
        (.iterator this, APersistentMap'MAKE_VAL)
    )

    #_method
    (ยง defn #_"Object" (ยง method kvreduce) [#_"PersistentHashMap" this, #_"IFn" ___f, #_"Object" ___init]
        (ยง ass ___init (if (:hasNull this) (.invoke ___f, ___init, nil, (:nullValue this)) ___init))
        (when (RT'isReduced ___init)
            (ยง return (.deref (cast' IDeref ___init)))
        )
        (when (some? (:root this))
            (ยง ass ___init (.kvreduce (:root this), ___f, ___init))
            (if (RT'isReduced ___init)
                (do
                    (ยง return (.deref (cast' IDeref ___init)))
                )
                (do
                    (ยง return ___init)
                )
            )
        )
        ___init
    )

    #_method
    (ยง defn #_"Object" (ยง method fold) [#_"PersistentHashMap" this, #_"long" ___n, #_"IFn" ___combinef, #_"IFn" ___reducef, #_"IFn" ___fjinvoke, #_"IFn" ___fjtask, #_"IFn" ___fjfork, #_"IFn" ___fjjoin]
        ;; we are ignoring n for now
        (let [#_"Callable" ___top
                (ยง reify Callable()
                    #_method
                    (ยง defn #_"Object" (ยง method call) [#_"Callable" this] #_(ยง throws Exception)
                        (let [#_"Object" ___ret (.invoke ___combinef)]
                            (when (some? (:root this))
                                (ยง ass ___ret (ร ___combinef.invoke(___ret, (:root this).fold(___combinef, ___reducef, ___fjtask, ___fjfork, ___fjjoin))))
                            )
                            (if (:hasNull this) (ร ___combinef.invoke(___ret, ___reducef.invoke((.invoke ___combinef), nil, (:nullValue this)))) ___ret)
                        )
                    )
                )]
            (.invoke ___fjinvoke, ___top)
        )
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"PersistentHashMap" this]
        (:count this)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seq) [#_"PersistentHashMap" this]
        (let [#_"ISeq" ___s (when (some? (:root this)) (.nodeSeq (:root this)))]
            (if (:hasNull this) (Cons'new-2 (MapEntry'create nil, (:nullValue this)), ___s) ___s)
        )
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method empty) [#_"PersistentHashMap" this]
        (.withMeta PersistentHashMap'EMPTY, (.meta this))
    )

    (defn #_"int" PersistentHashMap'mask [#_"int" ___hash, #_"int" ___shift]
        (ร (___hash >>> ___shift) & 0x01f)
    )

    #_method
    (ยง defn #_"PersistentHashMap" (ยง method withMeta) [#_"PersistentHashMap" this, #_"IPersistentMap" ___meta]
        (PersistentHashMap'new-5 ___meta, (:count this), (:root this), (:hasNull this), (:nullValue this))
    )

    #_method
    (ยง defn #_"TransientHashMap" (ยง method asTransient) [#_"PersistentHashMap" this]
        (TransientHashMap'new-1 this)
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method meta) [#_"PersistentHashMap" this]
        (:_meta this)
    )

    (defn- #_"Object[]" PersistentHashMap'cloneAndSet-3 [#_"Object[]" ___array, #_"int" ___i, #_"Object" ___a]
        (let [#_"Object[]" ___clone (.clone ___array)]
            (ยง ass (ยง aget ___clone ___i) ___a)
            ___clone
        )
    )

    (defn- #_"Object[]" PersistentHashMap'cloneAndSet-5 [#_"Object[]" ___array, #_"int" ___i, #_"Object" ___a, #_"int" ___j, #_"Object" ___b]
        (let [#_"Object[]" ___clone (.clone ___array)]
            (ยง ass (ยง aget ___clone ___i) ___a)
            (ยง ass (ยง aget ___clone ___j) ___b)
            ___clone
        )
    )

    (defn- #_"Object[]" PersistentHashMap'removePair [#_"Object[]" ___array, #_"int" ___i]
        (let [#_"Object[]" ___newArray (make-array Object (- (ยง alength ___array) 2))]
            (ร System/arraycopy(___array, 0, ___newArray, 0, 2 * ___i))
            (ร System/arraycopy(___array, 2 * (___i + 1), ___newArray, 2 * ___i, (ยง alength ___newArray) - 2 * ___i))
            ___newArray
        )
    )

    (defn- #_"INode" PersistentHashMap'createNode-6 [#_"int" ___shift, #_"Object" ___key1, #_"Object" ___val1, #_"int" ___key2hash, #_"Object" ___key2, #_"Object" ___val2]
        (let [#_"int" ___key1hash (PersistentHashMap'hash ___key1)]
            (when (= ___key1hash ___key2hash)
                (ยง return (ร HashCollisionNode'new(nil, ___key1hash, 2, (object-array [ ___key1, ___val1, ___key2, ___val2 ]))))
            )
            (let [#_"Box" ___addedLeaf (Box'new nil)]
                (let [#_"AtomicReference<Thread>" ___edit (AtomicReference.)]
                    (ร BitmapIndexedNode'EMPTY.assoc(___edit, ___shift, ___key1hash, ___key1, ___val1, ___addedLeaf).assoc(___edit, ___shift, ___key2hash, ___key2, ___val2, ___addedLeaf))
                )
            )
        )
    )

    (defn- #_"INode" PersistentHashMap'createNode-7 [#_"AtomicReference<Thread>" ___edit, #_"int" ___shift, #_"Object" ___key1, #_"Object" ___val1, #_"int" ___key2hash, #_"Object" ___key2, #_"Object" ___val2]
        (let [#_"int" ___key1hash (PersistentHashMap'hash ___key1)]
            (when (= ___key1hash ___key2hash)
                (ยง return (ร HashCollisionNode'new(nil, ___key1hash, 2, (object-array [ ___key1, ___val1, ___key2, ___val2 ]))))
            )
            (let [#_"Box" ___addedLeaf (Box'new nil)]
                (ร BitmapIndexedNode'EMPTY.assoc(___edit, ___shift, ___key1hash, ___key1, ___val1, ___addedLeaf).assoc(___edit, ___shift, ___key2hash, ___key2, ___val2, ___addedLeaf))
            )
        )
    )

    (defn- #_"int" PersistentHashMap'bitpos [#_"int" ___hash, #_"int" ___shift]
        (ร 1 << mask(___hash, ___shift))
    )
)
)

(java-ns cloiure.lang.PersistentHashSet

(ยง import java.util.List)

#_stateless
(class-ns TransientHashSet (ยง extends ATransientSet)
    (defn #_"TransientHashSet" TransientHashSet'new [#_"ITransientMap" ___impl]
        (ATransientSet'new ___impl)
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method persistent) [#_"TransientHashSet" this]
        (ร PersistentHashSet'new(nil, (:impl this).persistent()))
    )
)

(class-ns PersistentHashSet (ยง extends APersistentSet) (ยง implements IObj, IEditableCollection)
    (ยง def #_"PersistentHashSet" PersistentHashSet'EMPTY (PersistentHashSet'new nil, PersistentHashMap'EMPTY))

    (defn #_"PersistentHashSet" PersistentHashSet'create-1a [#_"Object..." ___init]
        (let [#_"ITransientSet" ___ret (cast' ITransientSet (.asTransient PersistentHashSet'EMPTY))]
            (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___init)) [(inc ___i)]
                (ยง ass ___ret (cast' ITransientSet (ร ___ret.conj(___init[___i]))))
            )
            (cast' PersistentHashSet (.persistent ___ret))
        )
    )

    (defn #_"PersistentHashSet" PersistentHashSet'create-1l [#_"List" ___init]
        (let [#_"ITransientSet" ___ret (cast' ITransientSet (.asTransient PersistentHashSet'EMPTY))]
            (doseq [#_"Object" ___key ___init]
                (ยง ass ___ret (cast' ITransientSet (.conj ___ret, ___key)))
            )
            (cast' PersistentHashSet (.persistent ___ret))
        )
    )

    (defn #_"PersistentHashSet" PersistentHashSet'create-1s [#_"ISeq" ___items]
        (let [#_"ITransientSet" ___ret (cast' ITransientSet (.asTransient PersistentHashSet'EMPTY))]
            (loop-when-recur [___items ___items] (some? ___items) [(next ___items)]
                (ยง ass ___ret (cast' ITransientSet (.conj ___ret, (first ___items))))
            )
            (cast' PersistentHashSet (.persistent ___ret))
        )
    )

    (defn #_"PersistentHashSet" PersistentHashSet'createWithCheck-1a [#_"Object..." ___init]
        (let [#_"ITransientSet" ___ret (cast' ITransientSet (.asTransient PersistentHashSet'EMPTY))]
            (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___init)) [(inc ___i)]
                (ยง ass ___ret (cast' ITransientSet (ร ___ret.conj(___init[___i]))))
                (when (ร (count ___ret) != ___i + 1)
                    (throw (IllegalArgumentException. (str "Duplicate key: " (ยง aget ___init ___i))))
                )
            )
            (cast' PersistentHashSet (.persistent ___ret))
        )
    )

    (defn #_"PersistentHashSet" PersistentHashSet'createWithCheck-1l [#_"List" ___init]
        (let [#_"ITransientSet" ___ret (cast' ITransientSet (.asTransient PersistentHashSet'EMPTY))]
            (let [#_"int" ___i 0]
                (doseq [#_"Object" ___key ___init]
                    (ยง ass ___ret (cast' ITransientSet (.conj ___ret, ___key)))
                    (when (ร (count ___ret) != ___i + 1)
                        (throw (IllegalArgumentException. (str "Duplicate key: " ___key)))
                    )
                    (ยง ass ___i (inc ___i))
                )
                (cast' PersistentHashSet (.persistent ___ret))
            )
        )
    )

    (defn #_"PersistentHashSet" PersistentHashSet'createWithCheck-1s [#_"ISeq" ___items]
        (let [#_"ITransientSet" ___ret (cast' ITransientSet (.asTransient PersistentHashSet'EMPTY))]
            (loop-when-recur [___items ___items #_"int" ___i 0] (some? ___items) [(next ___items) (inc ___i)]
                (ยง ass ___ret (cast' ITransientSet (.conj ___ret, (first ___items))))
                (when (ร (count ___ret) != ___i + 1)
                    (throw (IllegalArgumentException. (str "Duplicate key: " (first ___items))))
                )
            )
            (cast' PersistentHashSet (.persistent ___ret))
        )
    )

    (defn- #_"PersistentHashSet" PersistentHashSet'init []
        (hash-map
            #_"IPersistentMap" :_meta nil
        )
    )

    (defn #_"PersistentHashSet" PersistentHashSet'new [#_"IPersistentMap" ___meta, #_"IPersistentMap" ___impl]
        (let [this (merge (APersistentSet'new ___impl) (PersistentHashSet'init))]
            (ยง ass (:_meta this) ___meta)
            this
        )
    )

    #_method
    (ยง defn #_"IPersistentSet" (ยง method disjoin) [#_"PersistentHashSet" this, #_"Object" ___key]
        (when (.contains this, ___key)
            (ยง return (ร PersistentHashSet'new((.meta this), (:impl this).without(___key))))
        )
        this
    )

    #_method
    (ยง defn #_"IPersistentSet" (ยง method cons) [#_"PersistentHashSet" this, #_"Object" ___o]
        (when (.contains this, ___o)
            (ยง return this)
        )
        (ร PersistentHashSet'new((.meta this), (:impl this).assoc(___o, ___o)))
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method empty) [#_"PersistentHashSet" this]
        (.withMeta PersistentHashSet'EMPTY, (.meta this))
    )

    #_method
    (ยง defn #_"PersistentHashSet" (ยง method withMeta) [#_"PersistentHashSet" this, #_"IPersistentMap" ___meta]
        (PersistentHashSet'new ___meta, (:impl this))
    )

    #_method
    (ยง defn #_"ITransientCollection" (ยง method asTransient) [#_"PersistentHashSet" this]
        (ร TransientHashSet'new((cast' PersistentHashMap (:impl this)).asTransient()))
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method meta) [#_"PersistentHashSet" this]
        (:_meta this)
    )
)
)

(java-ns cloiure.lang.PersistentList

(ยง import java.util.*)

(class-ns Primordial (ยง extends RestFn)
    (defn #_"Primordial" Primordial'new []
        (RestFn'new)
    )

    #_method
    (ยง defn #_"int" (ยง method getRequiredArity) [#_"Primordial" this]
        0
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"Primordial" this, #_"Object" ___args]
        (when (ยง instance? ArraySeq ___args)
            (let [#_"Object[]" ___argsarray (:array (cast' ArraySeq ___args))]
                (let [#_"IPersistentList" ___ret PersistentList'EMPTY]
                    (loop-when-recur [#_"int" ___i (- (ยง alength ___argsarray) 1)] (ร ___i >= (:i (cast' ArraySeq ___args))) [(dec ___i)]
                        (ยง ass ___ret (cast' IPersistentList (ร ___ret.cons(___argsarray[___i]))))
                    )
                    (ยง return ___ret)
                )
            )
        )
        (let [#_"LinkedList" ___list (LinkedList.)]
            (loop-when-recur [#_"ISeq" ___s (RT'seq ___args)] (some? ___s) [(next ___s)]
                (.add ___list, (first ___s))
            )
            (PersistentList'create ___list)
        )
    )

    (defn #_"Object" Primordial'invokeStatic [#_"ISeq" ___args]
        (when (ยง instance? ArraySeq ___args)
            (let [#_"Object[]" ___argsarray (:array (cast' ArraySeq ___args))]
                (let [#_"IPersistentList" ___ret PersistentList'EMPTY]
                    (loop-when-recur [#_"int" ___i (- (ยง alength ___argsarray) 1)] (>= ___i 0) [(dec ___i)]
                        (ยง ass ___ret (cast' IPersistentList (ร ___ret.cons(___argsarray[___i]))))
                    )
                    (ยง return ___ret)
                )
            )
        )
        (let [#_"LinkedList" ___list (LinkedList.)]
            (loop-when-recur [#_"ISeq" ___s (RT'seq ___args)] (some? ___s) [(next ___s)]
                (.add ___list, (first ___s))
            )
            (PersistentList'create ___list)
        )
    )

    #_method
    (ยง defn #_"IObj" (ยง method withMeta) [#_"Primordial" this, #_"IPersistentMap" ___meta]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method meta) [#_"Primordial" this]
        nil
    )
)

#_stateless
(class-ns EmptyList (ยง extends Obj) (ยง implements IPersistentList, List, ISeq, Counted, IHashEq)
    (ยง def #_"int" EmptyList'HASHEQ (Murmur3'hashOrdered Collections/EMPTY_LIST))

    (defn #_"EmptyList" EmptyList'new [#_"IPersistentMap" ___meta]
        (Obj'new ___meta)
    )

    #_method
    (ยง defn #_"int" (ยง method hashCode) [#_"EmptyList" this]
        1
    )

    #_method
    (defn #_"int" EmptyList'hasheq [#_"EmptyList" this]
        EmptyList'HASHEQ
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"EmptyList" this]
        "()"
    )

    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"EmptyList" this, #_"Object" ___o]
        (and (or (ยง instance? Sequential ___o) (instance? List ___o)) (nil? (RT'seq ___o)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"EmptyList" this, #_"Object" ___o]
        (.equals this, ___o)
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"EmptyList" this]
        nil
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"EmptyList" this]
        nil
    )

    #_method
    (ยง defn #_"ISeq" (ยง method more) [#_"EmptyList" this]
        this
    )

    #_method
    (ยง defn #_"PersistentList" (ยง method cons) [#_"EmptyList" this, #_"Object" ___o]
        (ร PersistentList'new-4((.meta this), ___o, nil, 1))
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method empty) [#_"EmptyList" this]
        this
    )

    #_method
    (ยง defn #_"EmptyList" (ยง method withMeta) [#_"EmptyList" this, #_"IPersistentMap" ___meta]
        (when (ร ___meta != (.meta this))
            (ยง return (EmptyList'new ___meta))
        )
        this
    )

    #_method
    (ยง defn #_"Object" (ยง method peek) [#_"EmptyList" this]
        nil
    )

    #_method
    (ยง defn #_"IPersistentList" (ยง method pop) [#_"EmptyList" this]
        (throw (IllegalStateException. "Can't pop empty list"))
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"EmptyList" this]
        0
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seq) [#_"EmptyList" this]
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method size) [#_"EmptyList" this]
        0
    )

    #_method
    (ยง defn #_"boolean" (ยง method isEmpty) [#_"EmptyList" this]
        true
    )

    #_method
    (ยง defn #_"boolean" (ยง method contains) [#_"EmptyList" this, #_"Object" ___o]
        false
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"EmptyList" this]
        (ยง reify Iterator()
            #_method
            (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                false
            )

            #_method
            (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                (throw (NoSuchElementException.))
            )

            #_method
            (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                (throw (UnsupportedOperationException.))
            )
        )
    )

    #_method
    (ยง defn #_"Object[]" (ยง method toArray) [#_"EmptyList" this]
        RT'EMPTY_ARRAY
    )

    #_method
    (ยง defn #_"boolean" (ยง method add) [#_"EmptyList" this, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method remove) [#_"EmptyList" this, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method addAll) [#_"EmptyList" this, #_"Collection" ___collection]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"void" (ยง method clear) [#_"EmptyList" this]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method retainAll) [#_"EmptyList" this, #_"Collection" ___collection]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method removeAll) [#_"EmptyList" this, #_"Collection" ___collection]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method containsAll) [#_"EmptyList" this, #_"Collection" ___collection]
        (.isEmpty ___collection)
    )

    #_method
    (ยง defn #_"Object[]" (ยง method toArray) [#_"EmptyList" this, #_"Object[]" ___objects]
        (when (> (ยง alength ___objects) 0)
            (ยง ass (ยง aget ___objects (ร 0)) nil)
        )
        ___objects
    )

    #_method
    (ยง defn- #_"List" (ยง method reify) [#_"EmptyList" this]
        (Collections/unmodifiableList (ArrayList. this))
    )

    #_method
    (ยง defn #_"List" (ยง method subList) [#_"EmptyList" this, #_"int" ___fromIndex, #_"int" ___toIndex]
        (ร (.reify this).subList(___fromIndex, ___toIndex))
    )

    #_method
    (ยง defn #_"Object" (ยง method set) [#_"EmptyList" this, #_"int" ___index, #_"Object" ___element]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"Object" (ยง method remove) [#_"EmptyList" this, #_"int" ___index]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"int" (ยง method indexOf) [#_"EmptyList" this, #_"Object" ___o]
        (loop-when-recur [#_"ISeq" ___s (.seq this) #_"int" ___i 0] (some? ___s) [(next ___s) (inc ___i)]
            (when (ร Util'equiv-2oo((first ___s), ___o))
                (ยง return ___i)
            )
        )
        -1
    )

    #_method
    (ยง defn #_"int" (ยง method lastIndexOf) [#_"EmptyList" this, #_"Object" ___o]
        (ร (.reify this).lastIndexOf(___o))
    )

    #_method
    (ยง defn #_"ListIterator" (ยง method listIterator) [#_"EmptyList" this]
        (.listIterator (.reify this))
    )

    #_method
    (ยง defn #_"ListIterator" (ยง method listIterator) [#_"EmptyList" this, #_"int" ___index]
        (ร (.reify this).listIterator(___index))
    )

    #_method
    (ยง defn #_"Object" (ยง method get) [#_"EmptyList" this, #_"int" ___index]
        (RT'nth-2 this, ___index)
    )

    #_method
    (ยง defn #_"void" (ยง method add) [#_"EmptyList" this, #_"int" ___index, #_"Object" ___element]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method addAll) [#_"EmptyList" this, #_"int" ___index, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )
)

(class-ns PersistentList (ยง extends ASeq) (ยง implements IPersistentList, IReduce, List, Counted)
    (ยง def #_"IFn" PersistentList'creator (Primordial'new))

    (ยง def #_"EmptyList" PersistentList'EMPTY (EmptyList'new nil))

    (defn- #_"PersistentList" PersistentList'init []
        (hash-map
            #_"Object" :_first nil
            #_"IPersistentList" :_rest nil
            #_"int" :_count 0
        )
    )

    (defn #_"PersistentList" PersistentList'new-1 [#_"Object" ___first]
        (let [this (merge (ASeq'new) (PersistentList'init))]
            (ยง ass (:_first this) ___first)
            (ยง ass (:_rest this) nil)

            (ยง ass (:_count this) 1)
            this
        )
    )

    (defn #_"PersistentList" PersistentList'new-4 [#_"IPersistentMap" ___meta, #_"Object" ____first, #_"IPersistentList" ____rest, #_"int" ____count]
        (let [this (merge (ASeq'new ___meta) (PersistentList'init))]
            (ยง ass (:_first this) ____first)
            (ยง ass (:_rest this) ____rest)
            (ยง ass (:_count this) ____count)
            this
        )
    )

    (defn #_"IPersistentList" PersistentList'create [#_"List" ___init]
        (let [#_"IPersistentList" ___ret PersistentList'EMPTY]
            (loop-when-recur [#_"ListIterator" ___i (.listIterator ___init, (.size ___init))] (.hasPrevious ___i) [___i]
                (ยง ass ___ret (cast' IPersistentList (.cons ___ret, (.previous ___i))))
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"PersistentList" this]
        (:_first this)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"PersistentList" this]
        (when (ร (:_count this) == 1)
            (ยง return nil)
        )
        (cast' ISeq (:_rest this))
    )

    #_method
    (ยง defn #_"Object" (ยง method peek) [#_"PersistentList" this]
        (first this)
    )

    #_method
    (ยง defn #_"IPersistentList" (ยง method pop) [#_"PersistentList" this]
        (when (nil? (:_rest this))
            (ยง return (.withMeta PersistentList'EMPTY, (:_meta this)))
        )
        (:_rest this)
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"PersistentList" this]
        (:_count this)
    )

    #_method
    (ยง defn #_"PersistentList" (ยง method cons) [#_"PersistentList" this, #_"Object" ___o]
        (ร PersistentList'new-4((.meta this), ___o, this, (:_count this) + 1))
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method empty) [#_"PersistentList" this]
        (.withMeta PersistentList'EMPTY, (.meta this))
    )

    #_method
    (ยง defn #_"PersistentList" (ยง method withMeta) [#_"PersistentList" this, #_"IPersistentMap" ___meta]
        (when (ร ___meta != (:_meta this))
            (ยง return (PersistentList'new-4 ___meta, (:_first this), (:_rest this), (:_count this)))
        )
        this
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"PersistentList" this, #_"IFn" ___f]
        (let [#_"Object" ___ret (first this)]
            (loop-when-recur [#_"ISeq" ___s (next this)] (some? ___s) [(next ___s)]
                (ยง ass ___ret (ร ___f.invoke(___ret, (first ___s))))
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"PersistentList" this, #_"IFn" ___f, #_"Object" ___start]
        (let [#_"Object" ___ret (ร ___f.invoke(___start, (first this)))]
            (loop-when-recur [#_"ISeq" ___s (next this)] (some? ___s) [(next ___s)]
                (when (RT'isReduced ___ret)
                    (ยง return (.deref (cast' IDeref ___ret)))
                )
                (ยง ass ___ret (ร ___f.invoke(___ret, (first ___s))))
            )
            (when (RT'isReduced ___ret)
                (ยง return (.deref (cast' IDeref ___ret)))
            )
            ___ret
        )
    )
)
)

(java-ns cloiure.lang.PersistentQueue

(ยง import java.util.Collection)
(ยง import java.util.Iterator)
(ยง import java.util.NoSuchElementException)

(class-ns QSeq (ยง extends ASeq)
    (defn- #_"QSeq" QSeq'init []
        (hash-map
            #_"ISeq" :f nil
            #_"ISeq" :rseq nil
        )
    )

    (defn #_"QSeq" QSeq'new-2 [#_"ISeq" ___f, #_"ISeq" ___rseq]
        (let [this (merge (ASeq'new) (QSeq'init))]
            (ยง ass (:f this) ___f)
            (ยง ass (:rseq this) ___rseq)
            this
        )
    )

    (defn #_"QSeq" QSeq'new-3 [#_"IPersistentMap" ___meta, #_"ISeq" ___f, #_"ISeq" ___rseq]
        (let [this (merge (ASeq'new ___meta) (QSeq'init))]
            (ยง ass (:f this) ___f)
            (ยง ass (:rseq this) ___rseq)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"QSeq" this]
        (first (:f this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"QSeq" this]
        (let [#_"ISeq" ___f1 (next (:f this))]
            (let [#_"ISeq" ___r1 (:rseq this)]
                (when (nil? ___f1)
                    (when (nil? (:rseq this))
                        (ยง return nil)
                    )
                    (ยง ass ___f1 (:rseq this))
                    (ยง ass ___r1 nil)
                )
                (QSeq'new-2 ___f1, ___r1)
            )
        )
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"QSeq" this]
        (ร RT'count((:f this)) + RT'count((:rseq this)))
    )

    #_method
    (ยง defn #_"QSeq" (ยง method withMeta) [#_"QSeq" this, #_"IPersistentMap" ___meta]
        (QSeq'new-3 ___meta, (:f this), (:rseq this))
    )
)

;;;
 ; conses onto rear, peeks/pops from front
 ; See Okasaki's Batched Queues
 ; This differs in that it uses a PersistentVector as the rear, which is in-order,
 ; so no reversing or suspensions required for persistent use
 ;;
(class-ns PersistentQueue (ยง extends Obj) (ยง implements IPersistentList, Collection, Counted, IHashEq)
    (ยง def #_"PersistentQueue" PersistentQueue'EMPTY (PersistentQueue'new nil, 0, nil, nil))

    (defn- #_"PersistentQueue" PersistentQueue'init []
        (hash-map
            #_"int" :cnt 0
            #_"ISeq" :f nil
            #_"PersistentVector" :r nil
            #_"int" :_hash 0
            #_"int" :_hasheq 0
        )
    )

    (defn #_"PersistentQueue" PersistentQueue'new [#_"IPersistentMap" ___meta, #_"int" ___cnt, #_"ISeq" ___f, #_"PersistentVector" ___r]
        (let [this (merge (Obj'new ___meta) (PersistentQueue'init))]
            (ยง ass (:cnt this) ___cnt)
            (ยง ass (:f this) ___f)
            (ยง ass (:r this) ___r)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"PersistentQueue" this, #_"Object" ___obj]
        (when (not (ยง instance? Sequential ___obj))
            (ยง return false)
        )
        (let [#_"ISeq" ___ms (RT'seq ___obj)]
            (loop-when-recur [#_"ISeq" ___s (.seq this) ___ms ___ms] (some? ___s) [(next ___s) (next ___ms)]
                (when (or (nil? ___ms) (not (Util'equiv-2oo (first ___s), (first ___ms))))
                    (ยง return false)
                )
            )
            (nil? ___ms)
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"PersistentQueue" this, #_"Object" ___obj]
        (when (not (ยง instance? Sequential ___obj))
            (ยง return false)
        )
        (let [#_"ISeq" ___ms (RT'seq ___obj)]
            (loop-when-recur [#_"ISeq" ___s (.seq this) ___ms ___ms] (some? ___s) [(next ___s) (next ___ms)]
                (when (or (nil? ___ms) (not (Util'equals (first ___s), (first ___ms))))
                    (ยง return false)
                )
            )
            (nil? ___ms)
        )
    )

    #_method
    (ยง defn #_"int" (ยง method hashCode) [#_"PersistentQueue" this]
        (let [#_"int" ___hash (:_hash this)]
            (when (zero? ___hash)
                (ยง ass ___hash 1)
                (loop-when-recur [#_"ISeq" ___s (.seq this)] (some? ___s) [(next ___s)]
                    (ยง ass ___hash (+ (* 31 ___hash) (if (nil? (first ___s)) 0 (.hashCode (first ___s)))))
                )
                (ยง ass (:_hash this) ___hash)
            )
            ___hash
        )
    )

    #_method
    (ยง defn #_"int" (ยง method hasheq) [#_"PersistentQueue" this]
        (let [#_"int" ___cached (:_hasheq this)]
            (when (zero? ___cached)
                (ยง ass (:_hasheq this) (ยง ass ___cached (Murmur3'hashOrdered this)))
            )
            ___cached
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method peek) [#_"PersistentQueue" this]
        (RT'first (:f this))
    )

    #_method
    (ยง defn #_"PersistentQueue" (ยง method pop) [#_"PersistentQueue" this]
        (when (nil? (:f this)) ;; hmmm... pop of empty queue -> empty queue?
            (ยง return this)
        )
        (let [#_"ISeq" ___f1 (next (:f this))]
            (let [#_"PersistentVector" ___r1 (:r this)]
                (when (nil? ___f1)
                    (ยง ass ___f1 (RT'seq (:r this)))
                    (ยง ass ___r1 nil)
                )
                (ร PersistentQueue'new((.meta this), (:cnt this) - 1, ___f1, ___r1))
            )
        )
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"PersistentQueue" this]
        (:cnt this)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seq) [#_"PersistentQueue" this]
        (when (nil? (:f this))
            (ยง return nil)
        )
        (ร QSeq'new-2((:f this), RT'seq((:r this))))
    )

    #_method
    (ยง defn #_"PersistentQueue" (ยง method cons) [#_"PersistentQueue" this, #_"Object" ___o]
        (if (nil? (:f this)) ;; empty
            (do
                (PersistentQueue'new (.meta this), (inc (:cnt this)), (RT'list-1 ___o), nil)
            )
            (do
                (PersistentQueue'new (.meta this), (inc (:cnt this)), (:f this), (.cons (or (:r this) PersistentVector'EMPTY), ___o))
            )
        )
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method empty) [#_"PersistentQueue" this]
        (.withMeta PersistentQueue'EMPTY, (.meta this))
    )

    #_method
    (ยง defn #_"PersistentQueue" (ยง method withMeta) [#_"PersistentQueue" this, #_"IPersistentMap" ___meta]
        (PersistentQueue'new ___meta, (:cnt this), (:f this), (:r this))
    )

    #_method
    (ยง defn #_"Object[]" (ยง method toArray) [#_"PersistentQueue" this]
        (RT'seqToArray (.seq this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method add) [#_"PersistentQueue" this, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method remove) [#_"PersistentQueue" this, #_"Object" ___o]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method addAll) [#_"PersistentQueue" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"void" (ยง method clear) [#_"PersistentQueue" this]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method retainAll) [#_"PersistentQueue" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method removeAll) [#_"PersistentQueue" this, #_"Collection" ___c]
        (throw (UnsupportedOperationException.))
    )

    #_method
    (ยง defn #_"boolean" (ยง method containsAll) [#_"PersistentQueue" this, #_"Collection" ___c]
        (doseq [#_"Object" ___o ___c]
            (when (.contains this, ___o)
                (ยง return true)
            )
        )
        false
    )

    #_method
    (ยง defn #_"Object[]" (ยง method toArray) [#_"PersistentQueue" this, #_"Object[]" ___a]
        (ร RT'seqToPassedArray((.seq this), ___a))
    )

    #_method
    (ยง defn #_"int" (ยง method size) [#_"PersistentQueue" this]
        (count this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method isEmpty) [#_"PersistentQueue" this]
        (zero? (count this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method contains) [#_"PersistentQueue" this, #_"Object" ___o]
        (loop-when-recur [#_"ISeq" ___s (.seq this)] (some? ___s) [(next ___s)]
            (when (ร Util'equiv-2oo((first ___s), ___o))
                (ยง return true)
            )
        )
        false
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"PersistentQueue" this]
        (ยง reify Iterator()
            (ยง init
                (hash-map
                    #_"ISeq" :fseq (:f this)
                    #_"Iterator" :riter (when (some? (:r this)) (.iterator (:r this)))
                )
            )

            #_method
            (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                (or (and (some? (:fseq this)) (some? (.seq (:fseq this)))) (and (some? (:riter this)) (.hasNext (:riter this))))
            )

            #_method
            (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                (cond (some? (:fseq this))
                    (do
                        (let [#_"Object" ___ret (first (:fseq this))]
                            (ยง ass (:fseq this) (next (:fseq this)))
                            ___ret
                        )
                    )
                    (and (some? (:riter this)) (.hasNext (:riter this)))
                    (do
                        (next (:riter this))
                    )
                    :else
                    (do
                        (throw (NoSuchElementException.))
                    )
                )
            )

            #_method
            (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                (throw (UnsupportedOperationException.))
            )
        )
    )
)
)

(java-ns cloiure.lang.PersistentTreeMap

(ยง import java.util.*)

#_abstract
(class-ns TNode (ยง extends AMapEntry)
    (defn- #_"TNode" TNode'init []
        (hash-map
            #_"Object" :key nil
        )
    )

    (defn #_"TNode" TNode'new [#_"Object" ___key]
        (let [this (merge (AMapEntry'new) (TNode'init))]
            (ยง ass (:key this) ___key)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method key) [#_"TNode" this]
        (:key this)
    )

    #_method
    (ยง defn #_"Object" (ยง method val) [#_"TNode" this]
        nil
    )

    #_method
    (ยง defn #_"Object" (ยง method getKey) [#_"TNode" this]
        (.key this)
    )

    #_method
    (ยง defn #_"Object" (ยง method getValue) [#_"TNode" this]
        (.val this)
    )

    #_method
    (ยง defn #_"TNode" (ยง method left) [#_"TNode" this]
        nil
    )

    #_method
    (ยง defn #_"TNode" (ยง method right) [#_"TNode" this]
        nil
    )

    #_abstract
    (ยง defn #_"TNode" (ยง method addLeft) [#_"TNode" this, #_"TNode" ___ins])
    #_abstract
    (ยง defn #_"TNode" (ยง method addRight) [#_"TNode" this, #_"TNode" ___ins])
    #_abstract
    (ยง defn #_"TNode" (ยง method removeLeft) [#_"TNode" this, #_"TNode" ___del])
    #_abstract
    (ยง defn #_"TNode" (ยง method removeRight) [#_"TNode" this, #_"TNode" ___del])
    #_abstract
    (ยง defn #_"TNode" (ยง method blacken) [#_"TNode" this])
    #_abstract
    (ยง defn #_"TNode" (ยง method redden) [#_"TNode" this])

    #_method
    (ยง defn #_"TNode" (ยง method balanceLeft) [#_"TNode" this, #_"TNode" ___parent]
        (ร black((:key ___parent), (.val ___parent), this, (.right ___parent)))
    )

    #_method
    (ยง defn #_"TNode" (ยง method balanceRight) [#_"TNode" this, #_"TNode" ___parent]
        (ร black((:key ___parent), (.val ___parent), (.left ___parent), this))
    )

    #_abstract
    (ยง defn #_"TNode" (ยง method replace) [#_"TNode" this, #_"Object" ___key, #_"Object" ___val, #_"TNode" ___left, #_"TNode" ___right])

    #_method
    (ยง defn #_"Object" (ยง method kvreduce) [#_"TNode" this, #_"IFn" ___f, #_"Object" ___init]
        (when (some? (.left this))
            (ยง ass ___init (ร (.left this).kvreduce(___f, ___init)))
            (when (RT'isReduced ___init)
                (ยง return ___init)
            )
        )
        (ยง ass ___init (ร ___f.invoke(___init, (.key this), (.val this))))
        (when (RT'isReduced ___init)
            (ยง return ___init)
        )

        (when (some? (.right this))
            (ยง ass ___init (ร (.right this).kvreduce(___f, ___init)))
        )
        ___init
    )
)

#_stateless
(class-ns Black (ยง extends TNode)
    (defn #_"Black" Black'new [#_"Object" ___key]
        (TNode'new ___key)
    )

    #_method
    (ยง defn #_"TNode" (ยง method addLeft) [#_"Black" this, #_"TNode" ___ins]
        (.balanceLeft ___ins, this)
    )

    #_method
    (ยง defn #_"TNode" (ยง method addRight) [#_"Black" this, #_"TNode" ___ins]
        (.balanceRight ___ins, this)
    )

    #_method
    (ยง defn #_"TNode" (ยง method removeLeft) [#_"Black" this, #_"TNode" ___del]
        (ร balanceLeftDel((:key this), (.val this), ___del, (.right this)))
    )

    #_method
    (ยง defn #_"TNode" (ยง method removeRight) [#_"Black" this, #_"TNode" ___del]
        (ร balanceRightDel((:key this), (.val this), (.left this), ___del))
    )

    #_method
    (ยง defn #_"TNode" (ยง method blacken) [#_"Black" this]
        this
    )

    #_method
    (ยง defn #_"TNode" (ยง method redden) [#_"Black" this]
        (Red'new (:key this))
    )

    #_method
    (ยง defn #_"TNode" (ยง method replace) [#_"Black" this, #_"Object" ___key, #_"Object" ___val, #_"TNode" ___left, #_"TNode" ___right]
        (black ___key, ___val, ___left, ___right)
    )
)

(class-ns BlackVal (ยง extends Black)
    (defn- #_"BlackVal" BlackVal'init []
        (hash-map
            #_"Object" :val nil
        )
    )

    (defn #_"BlackVal" BlackVal'new [#_"Object" ___key, #_"Object" ___val]
        (let [this (merge (Black'new ___key) (BlackVal'init))]
            (ยง ass (:val this) ___val)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method val) [#_"BlackVal" this]
        (:val this)
    )

    #_method
    (ยง defn #_"TNode" (ยง method redden) [#_"BlackVal" this]
        (RedVal'new (:key this), (:val this))
    )
)

(class-ns BlackBranch (ยง extends Black)
    (defn- #_"BlackBranch" BlackBranch'init []
        (hash-map
            #_"TNode" :left nil
            #_"TNode" :right nil
        )
    )

    (defn #_"BlackBranch" BlackBranch'new [#_"Object" ___key, #_"TNode" ___left, #_"TNode" ___right]
        (let [this (merge (Black'new ___key) (BlackBranch'init))]
            (ยง ass (:left this) ___left)
            (ยง ass (:right this) ___right)
            this
        )
    )

    #_method
    (ยง defn #_"TNode" (ยง method left) [#_"BlackBranch" this]
        (:left this)
    )

    #_method
    (ยง defn #_"TNode" (ยง method right) [#_"BlackBranch" this]
        (:right this)
    )

    #_method
    (ยง defn #_"TNode" (ยง method redden) [#_"BlackBranch" this]
        (RedBranch'new (:key this), (:left this), (:right this))
    )
)

(class-ns BlackBranchVal (ยง extends BlackBranch)
    (defn- #_"BlackBranchVal" BlackBranchVal'init []
        (hash-map
            #_"Object" :val nil
        )
    )

    (defn #_"BlackBranchVal" BlackBranchVal'new [#_"Object" ___key, #_"Object" ___val, #_"TNode" ___left, #_"TNode" ___right]
        (let [this (merge (BlackBranch'new ___key, ___left, ___right) (BlackBranchVal'init))]
            (ยง ass (:val this) ___val)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method val) [#_"BlackBranchVal" this]
        (:val this)
    )

    #_method
    (ยง defn #_"TNode" (ยง method redden) [#_"BlackBranchVal" this]
        (RedBranchVal'new (:key this), (:val this), (:left this), (:right this))
    )
)

#_stateless
(class-ns Red (ยง extends TNode)
    (defn #_"Red" Red'new [#_"Object" ___key]
        (TNode'new ___key)
    )

    #_method
    (ยง defn #_"TNode" (ยง method addLeft) [#_"Red" this, #_"TNode" ___ins]
        (ร red((:key this), (.val this), ___ins, (.right this)))
    )

    #_method
    (ยง defn #_"TNode" (ยง method addRight) [#_"Red" this, #_"TNode" ___ins]
        (ร red((:key this), (.val this), (.left this), ___ins))
    )

    #_method
    (ยง defn #_"TNode" (ยง method removeLeft) [#_"Red" this, #_"TNode" ___del]
        (ร red((:key this), (.val this), ___del, (.right this)))
    )

    #_method
    (ยง defn #_"TNode" (ยง method removeRight) [#_"Red" this, #_"TNode" ___del]
        (ร red((:key this), (.val this), (.left this), ___del))
    )

    #_method
    (ยง defn #_"TNode" (ยง method blacken) [#_"Red" this]
        (Black'new (:key this))
    )

    #_method
    (ยง defn #_"TNode" (ยง method redden) [#_"Red" this]
        (throw (UnsupportedOperationException. "Invariant violation"))
    )

    #_method
    (ยง defn #_"TNode" (ยง method replace) [#_"Red" this, #_"Object" ___key, #_"Object" ___val, #_"TNode" ___left, #_"TNode" ___right]
        (red ___key, ___val, ___left, ___right)
    )
)

(class-ns RedVal (ยง extends Red)
    (defn- #_"RedVal" RedVal'init []
        (hash-map
            #_"Object" :val nil
        )
    )

    (defn #_"RedVal" RedVal'new [#_"Object" ___key, #_"Object" ___val]
        (let [this (merge (Red'new ___key) (RedVal'init))]
            (ยง ass (:val this) ___val)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method val) [#_"RedVal" this]
        (:val this)
    )

    #_method
    (ยง defn #_"TNode" (ยง method blacken) [#_"RedVal" this]
        (BlackVal'new (:key this), (:val this))
    )
)

(class-ns RedBranch (ยง extends Red)
    (defn- #_"RedBranch" RedBranch'init []
        (hash-map
            #_"TNode" :left nil
            #_"TNode" :right nil
        )
    )

    (defn #_"RedBranch" RedBranch'new [#_"Object" ___key, #_"TNode" ___left, #_"TNode" ___right]
        (let [this (merge (Red'new ___key) (RedBranch'init))]
            (ยง ass (:left this) ___left)
            (ยง ass (:right this) ___right)
            this
        )
    )

    #_method
    (ยง defn #_"TNode" (ยง method left) [#_"RedBranch" this]
        (:left this)
    )

    #_method
    (ยง defn #_"TNode" (ยง method right) [#_"RedBranch" this]
        (:right this)
    )

    #_method
    (ยง defn #_"TNode" (ยง method balanceLeft) [#_"RedBranch" this, #_"TNode" ___parent]
        (cond (ยง instance? Red (:left this))
            (do
                (ร red((:key this), (.val this), (:left this).blacken(), black((:key ___parent), (.val ___parent), (:right this), (.right ___parent))))
            )
            (ยง instance? Red (:right this))
            (do
                (ร red((:key (:right this)), (:right this).val(), black((:key this), (.val this), (:left this), (:right this).left()), black((:key ___parent), (.val ___parent), (:right this).right(), (.right ___parent))))
            )
            :else
            (do
                (.balanceLeft super, ___parent)
            )
        )
    )

    #_method
    (ยง defn #_"TNode" (ยง method balanceRight) [#_"RedBranch" this, #_"TNode" ___parent]
        (cond (ยง instance? Red (:right this))
            (do
                (ร red((:key this), (.val this), black((:key ___parent), (.val ___parent), (.left ___parent), (:left this)), (:right this).blacken()))
            )
            (ยง instance? Red (:left this))
            (do
                (ร red((:key (:left this)), (:left this).val(), black((:key ___parent), (.val ___parent), (.left ___parent), (:left this).left()), black((:key this), (.val this), (:left this).right(), (:right this))))
            )
            :else
            (do
                (.balanceRight super, ___parent)
            )
        )
    )

    #_method
    (ยง defn #_"TNode" (ยง method blacken) [#_"RedBranch" this]
        (BlackBranch'new (:key this), (:left this), (:right this))
    )
)

(class-ns RedBranchVal (ยง extends RedBranch)
    (defn- #_"RedBranchVal" RedBranchVal'init []
        (hash-map
            #_"Object" :val nil
        )
    )

    (defn #_"RedBranchVal" RedBranchVal'new [#_"Object" ___key, #_"Object" ___val, #_"TNode" ___left, #_"TNode" ___right]
        (let [this (merge (RedBranch'new ___key, ___left, ___right) (RedBranchVal'init))]
            (ยง ass (:val this) ___val)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method val) [#_"RedBranchVal" this]
        (:val this)
    )

    #_method
    (ยง defn #_"TNode" (ยง method blacken) [#_"RedBranchVal" this]
        (BlackBranchVal'new (:key this), (:val this), (:left this), (:right this))
    )
)

(class-ns TSeq (ยง extends ASeq)
    (defn- #_"TSeq" TSeq'init []
        (hash-map
            #_"ISeq" :stack nil
            #_"boolean" :asc false
            #_"int" :cnt 0
        )
    )

    (defn #_"TSeq" TSeq'new-2 [#_"ISeq" ___stack, #_"boolean" ___asc]
        (let [this (merge (ASeq'new) (TSeq'init))]
            (ยง ass (:stack this) ___stack)
            (ยง ass (:asc this) ___asc)
            (ยง ass (:cnt this) -1)
            this
        )
    )

    (defn #_"TSeq" TSeq'new-3 [#_"ISeq" ___stack, #_"boolean" ___asc, #_"int" ___cnt]
        (let [this (merge (ASeq'new) (TSeq'init))]
            (ยง ass (:stack this) ___stack)
            (ยง ass (:asc this) ___asc)
            (ยง ass (:cnt this) ___cnt)
            this
        )
    )

    (defn #_"TSeq" TSeq'new-4 [#_"IPersistentMap" ___meta, #_"ISeq" ___stack, #_"boolean" ___asc, #_"int" ___cnt]
        (let [this (merge (ASeq'new ___meta) (TSeq'init))]
            (ยง ass (:stack this) ___stack)
            (ยง ass (:asc this) ___asc)
            (ยง ass (:cnt this) ___cnt)
            this
        )
    )

    (defn #_"TSeq" TSeq'create [#_"TNode" ___t, #_"boolean" ___asc, #_"int" ___cnt]
        (ร TSeq'new-3(TSeq'push(___t, nil, ___asc), ___asc, ___cnt))
    )

    (defn #_"ISeq" TSeq'push [#_"TNode" ___t, #_"ISeq" ___stack, #_"boolean" ___asc]
        (while (some? ___t)
            (ยง ass ___stack (RT'cons ___t, ___stack))
            (ยง ass ___t (if ___asc (.left ___t) (.right ___t)))
        )
        ___stack
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"TSeq" this]
        (first (:stack this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"TSeq" this]
        (let [#_"TNode" ___t (cast' TNode (.first (:stack this)))]
            (let [#_"ISeq" ___nextstack (TSeq'push (if (:asc this) (.right ___t) (.left ___t)), (.next (:stack this)), (:asc this))]
                (when (some? ___nextstack)
                    (ยง return (ร TSeq'new-3(___nextstack, (:asc this), (:cnt this) - 1)))
                )
                nil
            )
        )
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"TSeq" this]
        (when (< (:cnt this) 0)
            (ยง return (count super))
        )
        (:cnt this)
    )

    #_method
    (ยง defn #_"Obj" (ยง method withMeta) [#_"TSeq" this, #_"IPersistentMap" ___meta]
        (TSeq'new-4 ___meta, (:stack this), (:asc this), (:cnt this))
    )
)

(class-ns NodeIterator (ยง implements Iterator)
    (defn- #_"NodeIterator" NodeIterator'init []
        (hash-map
            #_"Stack" :stack (Stack.)
            #_"boolean" :asc false
        )
    )

    (defn #_"NodeIterator" NodeIterator'new [#_"TNode" ___t, #_"boolean" ___asc]
        (let [this (NodeIterator'init)]
            (ยง ass (:asc this) ___asc)
            (.push this, ___t)
            this
        )
    )

    #_method
    (ยง defn #_"void" (ยง method push) [#_"NodeIterator" this, #_"TNode" ___t]
        (while (some? ___t)
            (.push (:stack this), ___t)
            (ยง ass ___t (if (:asc this) (.left ___t) (.right ___t)))
        )
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"NodeIterator" this]
        (not (.isEmpty (:stack this)))
    )

    #_method
    (ยง defn #_"Object" (ยง method next) [#_"NodeIterator" this]
        (try
            (let [#_"TNode" ___t (cast' TNode (.pop (:stack this)))]
                (.push this, (if (:asc this) (.right ___t) (.left ___t)))
                ___t
            )
            (catch EmptyStackException ___e
                (throw (NoSuchElementException.))
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"NodeIterator" this]
        (throw (UnsupportedOperationException.))
    )
)

(class-ns KeyIterator (ยง implements Iterator)
    (defn- #_"KeyIterator" KeyIterator'init []
        (hash-map
            #_"NodeIterator" :it nil
        )
    )

    (defn #_"KeyIterator" KeyIterator'new [#_"NodeIterator" ___it]
        (let [this (KeyIterator'init)]
            (ยง ass (:it this) ___it)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"KeyIterator" this]
        (.hasNext (:it this))
    )

    #_method
    (ยง defn #_"Object" (ยง method next) [#_"KeyIterator" this]
        (:key (cast' TNode (next (:it this))))
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"KeyIterator" this]
        (throw (UnsupportedOperationException.))
    )
)

(class-ns ValIterator (ยง implements Iterator)
    (defn- #_"ValIterator" ValIterator'init []
        (hash-map
            #_"NodeIterator" :it nil
        )
    )

    (defn #_"ValIterator" ValIterator'new [#_"NodeIterator" ___it]
        (let [this (ValIterator'init)]
            (ยง ass (:it this) ___it)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"ValIterator" this]
        (.hasNext (:it this))
    )

    #_method
    (ยง defn #_"Object" (ยง method next) [#_"ValIterator" this]
        (.val (cast' TNode (.next (:it this))))
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"ValIterator" this]
        (throw (UnsupportedOperationException.))
    )
)

;;;
 ; Persistent Red Black Tree
 ; Note that instances of this class are constant values
 ; i.e. add/remove etc return new values
 ;
 ; See Okasaki, Kahrs, Larsen et al
 ;;
(class-ns PersistentTreeMap (ยง extends APersistentMap) (ยง implements IObj, Reversible, Sorted, IKVReduce)
    (ยง def #_"PersistentTreeMap" PersistentTreeMap'EMPTY (PersistentTreeMap'new-0))

    (defn #_"IPersistentMap" PersistentTreeMap'create-1m [#_"Map" ___other]
        (let [#_"IPersistentMap" ___ret PersistentTreeMap'EMPTY]
            (doseq [#_"Object" ___o (.entrySet ___other)]
                (let [#_"Map$Entry" ___e (cast' Entry ___o)]
                    (ยง ass ___ret (ร ___ret.assoc((.getKey ___e), (.getValue ___e))))
                )
            )
            ___ret
        )
    )

    (defn- #_"PersistentTreeMap" PersistentTreeMap'init []
        (hash-map
            #_"Comparator" :comp nil
            #_"TNode" :tree nil
            #_"int" :_count 0
            #_"IPersistentMap" :_meta nil
        )
    )

    (defn #_"PersistentTreeMap" PersistentTreeMap'new-0 []
        (PersistentTreeMap'new-1 RT'DEFAULT_COMPARATOR)
    )

    (defn- #_"PersistentTreeMap" PersistentTreeMap'new-1 [#_"Comparator" ___comp]
        (PersistentTreeMap'new-2 nil, ___comp)
    )

    (defn #_"PersistentTreeMap" PersistentTreeMap'new-2 [#_"IPersistentMap" ___meta, #_"Comparator" ___comp]
        (let [this (merge (APersistentMap'new) (PersistentTreeMap'init))]
            (ยง ass (:comp this) ___comp)
            (ยง ass (:_meta this) ___meta)
            (ยง ass (:tree this) nil)
            (ยง ass (:_count this) 0)
            this
        )
    )

    (defn #_"PersistentTreeMap" PersistentTreeMap'new-4m [#_"IPersistentMap" ___meta, #_"Comparator" ___comp, #_"TNode" ___tree, #_"int" ____count]
        (let [this (merge (APersistentMap'new) (PersistentTreeMap'init))]
            (ยง ass (:_meta this) ___meta)
            (ยง ass (:comp this) ___comp)
            (ยง ass (:tree this) ___tree)
            (ยง ass (:_count this) ____count)
            this
        )
    )

    #_method
    (ยง defn #_"PersistentTreeMap" (ยง method withMeta) [#_"PersistentTreeMap" this, #_"IPersistentMap" ___meta]
        (PersistentTreeMap'new-4m ___meta, (:comp this), (:tree this), (:_count this))
    )

    (defn #_"PersistentTreeMap" PersistentTreeMap'create-1s [#_"ISeq" ___items]
        (let [#_"IPersistentMap" ___ret PersistentTreeMap'EMPTY]
            (loop-when-recur [___items ___items] (some? ___items) [(next (next ___items))]
                (when (nil? (next ___items))
                    (throw (IllegalArgumentException. (String/format "No value supplied for key: %s", (object-array [ (first ___items) ]))))
                )
                (ยง ass ___ret (ร ___ret.assoc((first ___items), RT'second(___items))))
            )
            (cast' PersistentTreeMap ___ret)
        )
    )

    (defn #_"PersistentTreeMap" PersistentTreeMap'create-2 [#_"Comparator" ___comp, #_"ISeq" ___items]
        (let [#_"IPersistentMap" ___ret (PersistentTreeMap'new-1 ___comp)]
            (loop-when-recur [___items ___items] (some? ___items) [(next (next ___items))]
                (when (nil? (next ___items))
                    (throw (IllegalArgumentException. (String/format "No value supplied for key: %s", (object-array [ (first ___items) ]))))
                )
                (ยง ass ___ret (ร ___ret.assoc((first ___items), RT'second(___items))))
            )
            (cast' PersistentTreeMap ___ret)
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method containsKey) [#_"PersistentTreeMap" this, #_"Object" ___key]
        (some? (.entryAt this, ___key))
    )

    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"PersistentTreeMap" this, #_"Object" ___obj]
        (try
            (.equals super, ___obj)
            (catch ClassCastException ___e
                false
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"PersistentTreeMap" this, #_"Object" ___obj]
        (try
            (.equiv super, ___obj)
            (catch ClassCastException ___e
                false
            )
        )
    )

    #_method
    (ยง defn #_"PersistentTreeMap" (ยง method assocEx) [#_"PersistentTreeMap" this, #_"Object" ___key, #_"Object" ___val]
        (let [#_"Box" ___found (Box'new nil)]
            (let [#_"TNode" ___t (.add this, (:tree this), ___key, ___val, ___found)]
                (when (nil? ___t) ;; nil == already contains key
                    (throw (Util'runtimeException-1 "Key already present"))
                )
                (ร PersistentTreeMap'new-4c((:comp this), (.blacken ___t), (:_count this) + 1, (.meta this)))
            )
        )
    )

    #_method
    (ยง defn #_"PersistentTreeMap" (ยง method assoc) [#_"PersistentTreeMap" this, #_"Object" ___key, #_"Object" ___val]
        (let [#_"Box" ___found (Box'new nil)]
            (let [#_"TNode" ___t (.add this, (:tree this), ___key, ___val, ___found)]
                (when (nil? ___t) ;; nil == already contains key
                    (let [#_"TNode" ___foundNode (cast' TNode (:val ___found))]
                        (when (ร (.val ___foundNode) == ___val) ;; note only get same collection on identity of val, not equals()
                            (ยง return this)
                        )
                        (ยง return (ร PersistentTreeMap'new-4c((:comp this), this.replace((:tree this), ___key, ___val), (:_count this), (.meta this))))
                    )
                )
                (ร PersistentTreeMap'new-4c((:comp this), (.blacken ___t), (:_count this) + 1, (.meta this)))
            )
        )
    )

    #_method
    (ยง defn #_"PersistentTreeMap" (ยง method without) [#_"PersistentTreeMap" this, #_"Object" ___key]
        (let [#_"Box" ___found (Box'new nil)]
            (let [#_"TNode" ___t (.remove this, (:tree this), ___key, ___found)]
                (when (nil? ___t)
                    (when (ร (nil? (:val ___found))) ;; nil == doesn't contain key
                        (ยง return this)
                    )
                    ;; empty
                    (ยง return (ร PersistentTreeMap'new-2((.meta this), (:comp this))))
                )
                (ร PersistentTreeMap'new-4c((:comp this), (.blacken ___t), (:_count this) - 1, (.meta this)))
            )
        )
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seq) [#_"PersistentTreeMap" this]
        (when (> (:_count this) 0)
            (ยง return (TSeq'create (:tree this), true, (:_count this)))
        )
        nil
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method empty) [#_"PersistentTreeMap" this]
        (ร PersistentTreeMap'new-2((.meta this), (:comp this)))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method rseq) [#_"PersistentTreeMap" this]
        (when (> (:_count this) 0)
            (ยง return (TSeq'create (:tree this), false, (:_count this)))
        )
        nil
    )

    #_method
    (ยง defn #_"Comparator" (ยง method comparator) [#_"PersistentTreeMap" this]
        (:comp this)
    )

    #_method
    (ยง defn #_"Object" (ยง method entryKey) [#_"PersistentTreeMap" this, #_"Object" ___entry]
        (.key (cast' IMapEntry ___entry))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seq) [#_"PersistentTreeMap" this, #_"boolean" ___ascending]
        (when (> (:_count this) 0)
            (ยง return (TSeq'create (:tree this), ___ascending, (:_count this)))
        )
        nil
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seqFrom) [#_"PersistentTreeMap" this, #_"Object" ___key, #_"boolean" ___ascending]
        (when (> (:_count this) 0)
            (let [#_"ISeq" ___stack nil]
                (let [#_"TNode" ___t (:tree this)]
                    (while (some? ___t)
                        (let [#_"int" ___c (.doCompare this, ___key, (:key ___t))]
                            (cond (zero? ___c)
                                (do
                                    (ยง ass ___stack (RT'cons ___t, ___stack))
                                    (ยง return (TSeq'new-2 ___stack, ___ascending))
                                )
                                ___ascending
                                (do
                                    (if (< ___c 0)
                                        (do
                                            (ยง ass ___stack (RT'cons ___t, ___stack))
                                            (ยง ass ___t (.left ___t))
                                        )
                                        (do
                                            (ยง ass ___t (.right ___t))
                                        )
                                    )
                                )
                                :else
                                (do
                                    (if (> ___c 0)
                                        (do
                                            (ยง ass ___stack (RT'cons ___t, ___stack))
                                            (ยง ass ___t (.right ___t))
                                        )
                                        (do
                                            (ยง ass ___t (.left ___t))
                                        )
                                    )
                                )
                            )
                        )
                    )
                    (when (some? ___stack)
                        (ยง return (TSeq'new-2 ___stack, ___ascending))
                    )
                )
            )
        )
        nil
    )

    #_method
    (ยง defn #_"NodeIterator" (ยง method iterator) [#_"PersistentTreeMap" this]
        (NodeIterator'new (:tree this), true)
    )

    #_method
    (ยง defn #_"Object" (ยง method kvreduce) [#_"PersistentTreeMap" this, #_"IFn" ___f, #_"Object" ___init]
        (when (some? (:tree this))
            (ยง ass ___init (.kvreduce (:tree this), ___f, ___init))
        )
        (when (RT'isReduced ___init)
            (ยง ass ___init (.deref (cast' IDeref ___init)))
        )
        ___init
    )

    #_method
    (ยง defn #_"NodeIterator" (ยง method reverseIterator) [#_"PersistentTreeMap" this]
        (NodeIterator'new (:tree this), false)
    )

    #_method
    (ยง defn #_"Iterator" (ยง method keys) [#_"PersistentTreeMap" this]
        (.keys this, (.iterator this))
    )

    #_method
    (ยง defn #_"Iterator" (ยง method vals) [#_"PersistentTreeMap" this]
        (.vals this, (.iterator this))
    )

    #_method
    (ยง defn #_"Iterator" (ยง method keys) [#_"PersistentTreeMap" this, #_"NodeIterator" ___it]
        (KeyIterator'new ___it)
    )

    #_method
    (ยง defn #_"Iterator" (ยง method vals) [#_"PersistentTreeMap" this, #_"NodeIterator" ___it]
        (ValIterator'new ___it)
    )

    #_method
    (ยง defn #_"Object" (ยง method minKey) [#_"PersistentTreeMap" this]
        (let [#_"TNode" ___t (.min this)]
            (when (some? ___t) (:key ___t))
        )
    )

    #_method
    (ยง defn #_"TNode" (ยง method min) [#_"PersistentTreeMap" this]
        (let [#_"TNode" ___t (:tree this)]
            (when (some? ___t)
                (while (some? (.left ___t))
                    (ยง ass ___t (.left ___t))
                )
            )
            ___t
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method maxKey) [#_"PersistentTreeMap" this]
        (let [#_"TNode" ___t (.max this)]
            (when (some? ___t) (:key ___t))
        )
    )

    #_method
    (ยง defn #_"TNode" (ยง method max) [#_"PersistentTreeMap" this]
        (let [#_"TNode" ___t (:tree this)]
            (when (some? ___t)
                (while (some? (.right ___t))
                    (ยง ass ___t (.right ___t))
                )
            )
            ___t
        )
    )

    #_method
    (ยง defn #_"int" (ยง method depth) [#_"PersistentTreeMap" this]
        (.depth this, (:tree this))
    )

    #_method
    (ยง defn #_"int" (ยง method depth) [#_"PersistentTreeMap" this, #_"TNode" ___t]
        (when (nil? ___t)
            (ยง return 0)
        )
        (ร 1 + Math/max(this.depth((.left ___t)), this.depth((.right ___t))))
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"PersistentTreeMap" this, #_"Object" ___key, #_"Object" ___notFound]
        (let [#_"TNode" ___n (.entryAt this, ___key)]
            (if (some? ___n) (.val ___n) ___notFound)
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"PersistentTreeMap" this, #_"Object" ___key]
        (.valAt this, ___key, nil)
    )

    #_method
    (ยง defn #_"int" (ยง method capacity) [#_"PersistentTreeMap" this]
        (:_count this)
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"PersistentTreeMap" this]
        (:_count this)
    )

    #_method
    (ยง defn #_"TNode" (ยง method entryAt) [#_"PersistentTreeMap" this, #_"Object" ___key]
        (let [#_"TNode" ___t (:tree this)]
            (while (some? ___t)
                (let [#_"int" ___c (.doCompare this, ___key, (:key ___t))]
                    (cond (zero? ___c)
                        (do
                            (ยง return ___t)
                        )
                        (< ___c 0)
                        (do
                            (ยง ass ___t (.left ___t))
                        )
                        :else
                        (do
                            (ยง ass ___t (.right ___t))
                        )
                    )
                )
            )
            ___t
        )
    )

    #_method
    (ยง defn #_"int" (ยง method doCompare) [#_"PersistentTreeMap" this, #_"Object" ___k1, #_"Object" ___k2]
        (.compare (:comp this), ___k1, ___k2)
    )

    #_method
    (ยง defn #_"TNode" (ยง method add) [#_"PersistentTreeMap" this, #_"TNode" ___t, #_"Object" ___key, #_"Object" ___val, #_"Box" ___found]
        (when (nil? ___t)
            (when (nil? ___val)
                (ยง return (Red'new ___key))
            )
            (ยง return (RedVal'new ___key, ___val))
        )
        (let [#_"int" ___c (.doCompare this, ___key, (:key ___t))]
            (when (zero? ___c)
                (ยง ass (:val ___found) ___t)
                (ยง return nil)
            )
            (let [#_"TNode" ___ins (if (neg? ___c) (.add this, (.left ___t), ___key, ___val, ___found) (.add this, (.right ___t), ___key, ___val, ___found))]
                (when (nil? ___ins) ;; found below
                    (ยง return nil)
                )
                (when (< ___c 0)
                    (ยง return (.addLeft ___t, ___ins))
                )
                (.addRight ___t, ___ins)
            )
        )
    )

    #_method
    (ยง defn #_"TNode" (ยง method remove) [#_"PersistentTreeMap" this, #_"TNode" ___t, #_"Object" ___key, #_"Box" ___found]
        (when (nil? ___t)
            (ยง return nil) ;; not found indicator
        )
        (let [#_"int" ___c (.doCompare this, ___key, (:key ___t))]
            (when (zero? ___c)
                (ยง ass (:val ___found) ___t)
                (ยง return (ร append((.left ___t), (.right ___t))))
            )
            (let [#_"TNode" ___del (if (neg? ___c) (.remove this, (.left ___t), ___key, ___found) (.remove this, (.right ___t), ___key, ___found))]
                (when (and (nil? ___del) (nil? (:val ___found))) ;; not found below
                    (ยง return nil)
                )
                (when (< ___c 0)
                    (if (ยง instance? Black (.left ___t))
                        (do
                            (ยง return (ร balanceLeftDel((:key ___t), (.val ___t), ___del, (.right ___t))))
                        )
                        (do
                            (ยง return (ร red((:key ___t), (.val ___t), ___del, (.right ___t))))
                        )
                    )
                )
                (when (ยง instance? Black (.right ___t))
                    (ยง return (ร balanceRightDel((:key ___t), (.val ___t), (.left ___t), ___del)))
                )
                (ร red((:key ___t), (.val ___t), (.left ___t), ___del))
            )
        )
    )

    (defn #_"TNode" PersistentTreeMap'append [#_"TNode" ___left, #_"TNode" ___right]
        (cond (nil? ___left)
            (do
                ___right
            )
            (nil? ___right)
            (do
                ___left
            )
            (ยง instance? Red ___left)
            (do
                (if (ยง instance? Red ___right)
                    (do
                        (let [#_"TNode" ___app (ร append((.right ___left), (.left ___right)))]
                            (if (ยง instance? Red ___app)
                                (do
                                    (ร red((:key ___app), (.val ___app), red((:key ___left), (.val ___left), (.left ___left), (.left ___app)), red((:key ___right), (.val ___right), (.right ___app), (.right ___right))))
                                )
                                (do
                                    (ร red((:key ___left), (.val ___left), (.left ___left), red((:key ___right), (.val ___right), ___app, (.right ___right))))
                                )
                            )
                        )
                    )
                    (do
                        (ร red((:key ___left), (.val ___left), (.left ___left), append((.right ___left), ___right)))
                    )
                )
            )
            (ยง instance? Red ___right)
            (do
                (ร red((:key ___right), (.val ___right), append(___left, (.left ___right)), (.right ___right)))
            )
            :else ;; black/black
            (do
                (let [#_"TNode" ___app (ร append((.right ___left), (.left ___right)))]
                    (if (ยง instance? Red ___app)
                        (do
                            (ร red((:key ___app), (.val ___app), PersistentTreeMap'black((:key ___left), (.val ___left), (.left ___left), (.left ___app)), PersistentTreeMap'black((:key ___right), (.val ___right), (.right ___app), (.right ___right))))
                        )
                        (do
                            (ร balanceLeftDel((:key ___left), (.val ___left), (.left ___left), PersistentTreeMap'black((:key ___right), (.val ___right), ___app, (.right ___right))))
                        )
                    )
                )
            )
        )
    )

    (defn #_"TNode" PersistentTreeMap'balanceLeftDel [#_"Object" ___key, #_"Object" ___val, #_"TNode" ___del, #_"TNode" ___right]
        (cond (ยง instance? Red ___del)
            (do
                (ร red(___key, ___val, (.blacken ___del), ___right))
            )
            (ยง instance? Black ___right)
            (do
                (ร rightBalance(___key, ___val, ___del, (.redden ___right)))
            )
            (and (ยง instance? Red ___right) (ยง instance? Black (.left ___right)))
            (do
                (ร red((:key (.left ___right)), (.left ___right).val(), PersistentTreeMap'black(___key, ___val, ___del, (.left ___right).left()), rightBalance((:key ___right), (.val ___right), (.left ___right).right(), (.right ___right).redden())))
            )
            :else
            (do
                (throw (UnsupportedOperationException. "Invariant violation"))
            )
        )
    )

    (defn #_"TNode" PersistentTreeMap'balanceRightDel [#_"Object" ___key, #_"Object" ___val, #_"TNode" ___left, #_"TNode" ___del]
        (cond (ยง instance? Red ___del)
            (do
                (ร red(___key, ___val, ___left, (.blacken ___del)))
            )
            (ยง instance? Black ___left)
            (do
                (ร leftBalance(___key, ___val, (.redden ___left), ___del))
            )
            (and (ยง instance? Red ___left) (ยง instance? Black (.right ___left)))
            (do
                (ร red((:key (.right ___left)), (.right ___left).val(), leftBalance((:key ___left), (.val ___left), (.left ___left).redden(), (.right ___left).left()), PersistentTreeMap'black(___key, ___val, (.right ___left).right(), ___del)))
            )
            :else
            (do
                (throw (UnsupportedOperationException. "Invariant violation"))
            )
        )
    )

    (defn #_"TNode" PersistentTreeMap'leftBalance [#_"Object" ___key, #_"Object" ___val, #_"TNode" ___ins, #_"TNode" ___right]
        (cond (and (ยง instance? Red ___ins) (ยง instance? Red (.left ___ins)))
            (do
                (ร red((:key ___ins), (.val ___ins), (.left ___ins).blacken(), PersistentTreeMap'black(___key, ___val, (.right ___ins), ___right)))
            )
            (and (ยง instance? Red ___ins) (ยง instance? Red (.right ___ins)))
            (do
                (ร red((:key (.right ___ins)), (.right ___ins).val(), PersistentTreeMap'black((:key ___ins), (.val ___ins), (.left ___ins), (.right ___ins).left()), PersistentTreeMap'black(___key, ___val, (.right ___ins).right(), ___right)))
            )
            :else
            (do
                (PersistentTreeMap'black ___key, ___val, ___ins, ___right)
            )
        )
    )

    (defn #_"TNode" PersistentTreeMap'rightBalance [#_"Object" ___key, #_"Object" ___val, #_"TNode" ___left, #_"TNode" ___ins]
        (cond (and (ยง instance? Red ___ins) (ยง instance? Red (.right ___ins)))
            (do
                (ร red((:key ___ins), (.val ___ins), PersistentTreeMap'black(___key, ___val, ___left, (.left ___ins)), (.right ___ins).blacken()))
            )
            (and (ยง instance? Red ___ins) (ยง instance? Red (.left ___ins)))
            (do
                (ร red((:key (.left ___ins)), (.left ___ins).val(), PersistentTreeMap'black(___key, ___val, ___left, (.left ___ins).left()), PersistentTreeMap'black((:key ___ins), (.val ___ins), (.left ___ins).right(), (.right ___ins))))
            )
            :else
            (do
                (PersistentTreeMap'black ___key, ___val, ___left, ___ins)
            )
        )
    )

    #_method
    (ยง defn #_"TNode" (ยง method replace) [#_"PersistentTreeMap" this, #_"TNode" ___t, #_"Object" ___key, #_"Object" ___val]
        (let [#_"int" ___c (.doCompare this, ___key, (:key ___t))]
            (.replace ___t, (:key ___t), (if (zero? ___c) ___val (.val ___t)), (if (neg? ___c) (.replace this, (.left ___t), ___key, ___val) (.left ___t)), (if (pos? ___c) (.replace this, (.right ___t), ___key, ___val) (.right ___t)))
        )
    )

    (defn #_"PersistentTreeMap" PersistentTreeMap'new-4c [#_"Comparator" ___comp, #_"TNode" ___tree, #_"int" ___count, #_"IPersistentMap" ___meta]
        (let [this (merge (APersistentMap'new) (PersistentTreeMap'init))]
            (ยง ass (:_meta this) ___meta)
            (ยง ass (:comp this) ___comp)
            (ยง ass (:tree this) ___tree)
            (ยง ass (:_count this) ___count)
            this
        )
    )

    (defn #_"Red" PersistentTreeMap'red [#_"Object" ___key, #_"Object" ___val, #_"TNode" ___left, #_"TNode" ___right]
        (when (and (nil? ___left) (nil? ___right))
            (when (nil? ___val)
                (ยง return (Red'new ___key))
            )
            (ยง return (RedVal'new ___key, ___val))
        )
        (when (nil? ___val)
            (ยง return (RedBranch'new ___key, ___left, ___right))
        )
        (RedBranchVal'new ___key, ___val, ___left, ___right)
    )

    (defn #_"Black" PersistentTreeMap'black [#_"Object" ___key, #_"Object" ___val, #_"TNode" ___left, #_"TNode" ___right]
        (when (and (nil? ___left) (nil? ___right))
            (when (nil? ___val)
                (ยง return (Black'new ___key))
            )
            (ยง return (BlackVal'new ___key, ___val))
        )
        (when (nil? ___val)
            (ยง return (BlackBranch'new ___key, ___left, ___right))
        )
        (BlackBranchVal'new ___key, ___val, ___left, ___right)
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method meta) [#_"PersistentTreeMap" this]
        (:_meta this)
    )
)
)

(java-ns cloiure.lang.PersistentTreeSet

(ยง import java.util.Comparator)

(class-ns PersistentTreeSet (ยง extends APersistentSet) (ยง implements IObj, Reversible, Sorted)
    (ยง def #_"PersistentTreeSet" PersistentTreeSet'EMPTY (PersistentTreeSet'new nil, PersistentTreeMap'EMPTY))

    (defn #_"PersistentTreeSet" PersistentTreeSet'create-1 [#_"ISeq" ___items]
        (let [#_"PersistentTreeSet" ___ret PersistentTreeSet'EMPTY]
            (loop-when-recur [___items ___items] (some? ___items) [(next ___items)]
                (ยง ass ___ret (cast' PersistentTreeSet (.cons ___ret, (first ___items))))
            )
            ___ret
        )
    )

    (defn #_"PersistentTreeSet" PersistentTreeSet'create-2 [#_"Comparator" ___comp, #_"ISeq" ___items]
        (let [#_"PersistentTreeSet" ___ret (ร PersistentTreeSet'new(nil, PersistentTreeMap'new-2(nil, ___comp)))]
            (loop-when-recur [___items ___items] (some? ___items) [(next ___items)]
                (ยง ass ___ret (cast' PersistentTreeSet (.cons ___ret, (first ___items))))
            )
            ___ret
        )
    )

    (defn- #_"PersistentTreeSet" PersistentTreeSet'init []
        (hash-map
            #_"IPersistentMap" :_meta nil
        )
    )

    (defn #_"PersistentTreeSet" PersistentTreeSet'new [#_"IPersistentMap" ___meta, #_"IPersistentMap" ___impl]
        (let [this (merge (APersistentSet'new ___impl) (PersistentTreeSet'init))]
            (ยง ass (:_meta this) ___meta)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"PersistentTreeSet" this, #_"Object" ___obj]
        (try
            (.equals super, ___obj)
            (catch ClassCastException ___e
                false
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method equiv) [#_"PersistentTreeSet" this, #_"Object" ___obj]
        (try
            (.equiv super, ___obj)
            (catch ClassCastException ___e
                false
            )
        )
    )

    #_method
    (ยง defn #_"IPersistentSet" (ยง method disjoin) [#_"PersistentTreeSet" this, #_"Object" ___key]
        (when (.contains this, ___key)
            (ยง return (ร PersistentTreeSet'new((.meta this), (:impl this).without(___key))))
        )
        this
    )

    #_method
    (ยง defn #_"IPersistentSet" (ยง method cons) [#_"PersistentTreeSet" this, #_"Object" ___o]
        (when (.contains this, ___o)
            (ยง return this)
        )
        (ร PersistentTreeSet'new((.meta this), (:impl this).assoc(___o, ___o)))
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method empty) [#_"PersistentTreeSet" this]
        (ร PersistentTreeSet'new((.meta this), (cast' PersistentTreeMap (.empty (:impl this)))))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method rseq) [#_"PersistentTreeSet" this]
        (ร KeySeq'create((cast' Reversible (:impl this)).rseq()))
    )

    #_method
    (ยง defn #_"PersistentTreeSet" (ยง method withMeta) [#_"PersistentTreeSet" this, #_"IPersistentMap" ___meta]
        (PersistentTreeSet'new ___meta, (:impl this))
    )

    #_method
    (ยง defn #_"Comparator" (ยง method comparator) [#_"PersistentTreeSet" this]
        (.comparator (cast' Sorted (:impl this)))
    )

    #_method
    (ยง defn #_"Object" (ยง method entryKey) [#_"PersistentTreeSet" this, #_"Object" ___entry]
        ___entry
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seq) [#_"PersistentTreeSet" this, #_"boolean" ___ascending]
        (let [#_"PersistentTreeMap" ___m (cast' PersistentTreeMap (:impl this))]
            (ร RT'keys(___m.seq(___ascending)))
        )
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seqFrom) [#_"PersistentTreeSet" this, #_"Object" ___key, #_"boolean" ___ascending]
        (let [#_"PersistentTreeMap" ___m (cast' PersistentTreeMap (:impl this))]
            (ร RT'keys(___m.seqFrom(___key, ___ascending)))
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method meta) [#_"PersistentTreeSet" this]
        (:_meta this)
    )
)
)

(java-ns cloiure.lang.PersistentVector

(ยง import java.util.ArrayList)
(ยง import java.util.Iterator)
(ยง import java.util.List)
(ยง import java.util.NoSuchElementException)
(ยง import java.util.concurrent.atomic.AtomicReference)

(class-ns VNode
    (defn- #_"VNode" VNode'init []
        (hash-map
            #_transient
            #_"AtomicReference<Thread>" :edit nil
            #_"Object[]" :array nil
        )
    )

    (defn #_"VNode" VNode'new-2 [#_"AtomicReference<Thread>" ___edit, #_"Object[]" ___array]
        (let [this (VNode'init)]
            (ยง ass (:edit this) ___edit)
            (ยง ass (:array this) ___array)
            this
        )
    )

    (defn #_"VNode" VNode'new-1 [#_"AtomicReference<Thread>" ___edit]
        (let [this (VNode'init)]
            (ยง ass (:edit this) ___edit)
            (ยง ass (:array this) (make-array Object 32))
            this
        )
    )
)

(class-ns ChunkedSeq (ยง extends ASeq) (ยง implements IChunkedSeq, Counted)
    (defn- #_"ChunkedSeq" ChunkedSeq'init []
        (hash-map
            #_"PersistentVector" :vec nil
            #_"Object[]" :node nil
            #_"int" :i 0
            #_"int" :offset 0
        )
    )

    (defn #_"ChunkedSeq" ChunkedSeq'new-3 [#_"PersistentVector" ___vec, #_"int" ___i, #_"int" ___offset]
        (let [this (merge (ASeq'new) (ChunkedSeq'init))]
            (ยง ass (:vec this) ___vec)
            (ยง ass (:i this) ___i)
            (ยง ass (:offset this) ___offset)
            (ยง ass (:node this) (.arrayFor ___vec, ___i))
            this
        )
    )

    (defn #_"ChunkedSeq" ChunkedSeq'new-5 [#_"IPersistentMap" ___meta, #_"PersistentVector" ___vec, #_"Object[]" ___node, #_"int" ___i, #_"int" ___offset]
        (let [this (merge (ASeq'new ___meta) (ChunkedSeq'init))]
            (ยง ass (:vec this) ___vec)
            (ยง ass (:node this) ___node)
            (ยง ass (:i this) ___i)
            (ยง ass (:offset this) ___offset)
            this
        )
    )

    (defn #_"ChunkedSeq" ChunkedSeq'new-4 [#_"PersistentVector" ___vec, #_"Object[]" ___node, #_"int" ___i, #_"int" ___offset]
        (let [this (merge (ASeq'new) (ChunkedSeq'init))]
            (ยง ass (:vec this) ___vec)
            (ยง ass (:node this) ___node)
            (ยง ass (:i this) ___i)
            (ยง ass (:offset this) ___offset)
            this
        )
    )

    #_method
    (ยง defn #_"IChunk" (ยง method chunkedFirst) [#_"ChunkedSeq" this]
        (ArrayChunk'new-2 (:node this), (:offset this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method chunkedNext) [#_"ChunkedSeq" this]
        (when (ร (:i this) + (ยง alength (:node this)) < (:cnt (:vec this)))
            (ยง return (ร ChunkedSeq'new-3((:vec this), (:i this) + (ยง alength (:node this)), 0)))
        )
        nil
    )

    #_method
    (ยง defn #_"ISeq" (ยง method chunkedMore) [#_"ChunkedSeq" this]
        (let [#_"ISeq" ___s (.chunkedNext this)]
            (when (nil? ___s)
                (ยง return PersistentList'EMPTY)
            )
            ___s
        )
    )

    #_method
    (ยง defn #_"Obj" (ยง method withMeta) [#_"ChunkedSeq" this, #_"IPersistentMap" ___meta]
        (when (ร ___meta == (:_meta this))
            (ยง return this)
        )
        (ChunkedSeq'new-5 ___meta, (:vec this), (:node this), (:i this), (:offset this))
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"ChunkedSeq" this]
        (ยง aget (:node this) (:offset this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"ChunkedSeq" this]
        (when (ร (:offset this) + 1 < (ยง alength (:node this)))
            (ยง return (ร ChunkedSeq'new-4((:vec this), (:node this), (:i this), (:offset this) + 1)))
        )
        (.chunkedNext this)
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"ChunkedSeq" this]
        (ร (:cnt (:vec this)) - ((:i this) + (:offset this)))
    )
)

(class-ns TransientVector (ยง extends AFn) (ยง implements ITransientVector, ITransientAssociative2, Counted)
    (defn- #_"TransientVector" TransientVector'init []
        (hash-map
            #_volatile
            #_"int" :cnt 0
            #_volatile
            #_"int" :shift 0
            #_volatile
            #_"VNode" :root nil
            #_volatile
            #_"Object[]" :tail nil
        )
    )

    (defn #_"TransientVector" TransientVector'new-4 [#_"int" ___cnt, #_"int" ___shift, #_"VNode" ___root, #_"Object[]" ___tail]
        (let [this (merge (AFn'new) (TransientVector'init))]
            (ยง ass (:cnt this) ___cnt)
            (ยง ass (:shift this) ___shift)
            (ยง ass (:root this) ___root)
            (ยง ass (:tail this) ___tail)
            this
        )
    )

    (defn #_"TransientVector" TransientVector'new-1 [#_"PersistentVector" ___v]
        (TransientVector'new-4 (:cnt ___v), (:shift ___v), (.editableRoot (:root ___v)), (.editableTail (:tail ___v)))
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"TransientVector" this]
        (.ensureEditable this)
        (:cnt this)
    )

    #_method
    (ยง defn #_"VNode" (ยง method ensureEditable) [#_"TransientVector" this, #_"VNode" ___node]
        (when (ร (:edit ___node) == (:edit (:root this)))
            (ยง return ___node)
        )
        (ร VNode'new-2((:edit (:root this)), (:array ___node).clone()))
    )

    #_method
    (ยง defn #_"void" (ยง method ensureEditable) [#_"TransientVector" this]
        (when (nil? (.get (:edit (:root this))))
            (throw (IllegalAccessError. "Transient used after persistent! call"))
        )
        nil
    )

    (defn #_"VNode" TransientVector'editableRoot [#_"VNode" ___node]
        (VNode'new-2 (AtomicReference. (Thread/currentThread)), (.clone (:array ___node)))
    )

    #_method
    (ยง defn #_"PersistentVector" (ยง method persistent) [#_"TransientVector" this]
        (.ensureEditable this)
        (.set (:edit (:root this)), nil)
        (let [#_"Object[]" ___trimmedTail (make-array Object (ร (:cnt this) - (.tailoff this)))]
            (ร System/arraycopy((:tail this), 0, ___trimmedTail, 0, (ยง alength ___trimmedTail)))
            (PersistentVector'new-4 (:cnt this), (:shift this), (:root this), ___trimmedTail)
        )
    )

    (defn #_"Object[]" TransientVector'editableTail [#_"Object[]" ___tl]
        (let [#_"Object[]" ___ret (make-array Object 32)]
            (ร System/arraycopy(___tl, 0, ___ret, 0, (ยง alength ___tl)))
            ___ret
        )
    )

    #_method
    (ยง defn #_"TransientVector" (ยง method conj) [#_"TransientVector" this, #_"Object" ___val]
        (.ensureEditable this)
        (let [#_"int" ___i (:cnt this)]
            ;; room in tail?
            (when (ร ___i - (.tailoff this) < 32)
                (ยง ass (ยง aget (:tail this) (ร ___i & 0x01f)) ___val)
                (ยง ass (:cnt this) (+ (:cnt this) 1))
                (ยง return this)
            )
            ;; full tail, push into tree
            (ยง let [#_"VNode" ___newroot]
                (let [#_"VNode" ___tailnode (ร VNode'new-2((:edit (:root this)), (:tail this)))]
                    (ยง ass (:tail this) (make-array Object 32))
                    (ยง ass (ยง aget (:tail this) (ร 0)) ___val)
                    (let [#_"int" ___newshift (:shift this)]
                        ;; overflow root?
                        (if (ร ((:cnt this) >>> 5) > (1 << (:shift this)))
                            (do
                                (ยง ass ___newroot (VNode'new-1 (:edit (:root this))))
                                (ยง ass (ยง aget (:array ___newroot) (ร 0)) (:root this))
                                (ยง ass (ยง aget (:array ___newroot) (ร 1)) (ร newPath((:edit (:root this)), (:shift this), ___tailnode)))
                                (ยง ass ___newshift (+ ___newshift 5))
                            )
                            (do
                                (ยง ass ___newroot (.pushTail this, (:shift this), (:root this), ___tailnode))
                            )
                        )
                        (ยง ass (:root this) ___newroot)
                        (ยง ass (:shift this) ___newshift)
                        (ยง ass (:cnt this) (+ (:cnt this) 1))
                        this
                    )
                )
            )
        )
    )

    #_method
    (ยง defn- #_"VNode" (ยง method pushTail) [#_"TransientVector" this, #_"int" ___level, #_"VNode" ___parent, #_"VNode" ___tailnode]
        ;; if parent is leaf, insert node,
        ;; else does it map to an existing child? -> nodeToInsert = pushNode one more level
        ;; else alloc new path
        ;; return nodeToInsert placed in parent
        (ยง ass ___parent (.ensureEditable this, ___parent))
        (let [#_"int" ___subidx (ร (((:cnt this) - 1) >>> ___level) & 0x01f)]
            (let [#_"VNode" ___ret ___parent]
                (ยง let [#_"VNode" ___nodeToInsert]
                    (if (= ___level 5)
                        (do
                            (ยง ass ___nodeToInsert ___tailnode)
                        )
                        (do
                            (let [#_"VNode" ___child (cast' VNode (ยง aget (:array ___parent) ___subidx))]
                                (ยง ass ___nodeToInsert (if (some? ___child) (.pushTail this, (- ___level 5), ___child, ___tailnode) (newPath (:edit (:root this)), (- ___level 5), ___tailnode)))
                            )
                        )
                    )
                    (ยง ass (ยง aget (:array ___ret) ___subidx) ___nodeToInsert)
                    ___ret
                )
            )
        )
    )

    #_method
    (ยง defn- #_"int" (ยง method tailoff) [#_"TransientVector" this]
        (when (< (:cnt this) 32)
            (ยง return 0)
        )
        (ร (((:cnt this) - 1) >>> 5) << 5)
    )

    #_method
    (ยง defn- #_"Object[]" (ยง method arrayFor) [#_"TransientVector" this, #_"int" ___i]
        (when (and (<= 0 ___i) (< ___i (:cnt this)))
            (when (ร ___i >= (.tailoff this))
                (ยง return (:tail this))
            )
            (let [#_"VNode" ___node (:root this)]
                (loop-when-recur [#_"int" ___level (:shift this)] (> ___level 0) [(- ___level 5)]
                    (ยง ass ___node (cast' VNode (ยง aget (:array ___node) (ร (___i >>> ___level) & 0x01f))))
                )
                (ยง return (:array ___node))
            )
        )
        (throw (IndexOutOfBoundsException.))
    )

    #_method
    (ยง defn- #_"Object[]" (ยง method editableArrayFor) [#_"TransientVector" this, #_"int" ___i]
        (when (and (<= 0 ___i) (< ___i (:cnt this)))
            (when (ร ___i >= (.tailoff this))
                (ยง return (:tail this))
            )
            (let [#_"VNode" ___node (:root this)]
                (loop-when-recur [#_"int" ___level (:shift this)] (> ___level 0) [(- ___level 5)]
                    (ยง ass ___node (ร this.ensureEditable((cast' VNode (ยง aget (:array ___node) (ร (___i >>> ___level) & 0x01f))))))
                )
                (ยง return (:array ___node))
            )
        )
        (throw (IndexOutOfBoundsException.))
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"TransientVector" this, #_"Object" ___key]
        ;; note - relies on ensureEditable in 2-arg valAt
        (.valAt this, ___key, nil)
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"TransientVector" this, #_"Object" ___key, #_"Object" ___notFound]
        (.ensureEditable this)
        (when (Util'isInteger ___key)
            (let [#_"int" ___i (.intValue (cast Number ___key))]
                (when (and (<= 0 ___i) (< ___i (:cnt this)))
                    (ยง return (.nth this, ___i))
                )
            )
        )
        ___notFound
    )

    (def- #_"Object" TransientVector'NOT_FOUND (Object.))

    #_method
    (ยง defn #_"boolean" (ยง method containsKey) [#_"TransientVector" this, #_"Object" ___key]
        (ร (this.valAt(___key, TransientVector'NOT_FOUND) != TransientVector'NOT_FOUND))
    )

    #_method
    (ยง defn #_"IMapEntry" (ยง method entryAt) [#_"TransientVector" this, #_"Object" ___key]
        (let [#_"Object" ___v (.valAt this, ___key, TransientVector'NOT_FOUND)]
            (when (not= ___v TransientVector'NOT_FOUND)
                (ยง return (MapEntry'create ___key, ___v))
            )
            nil
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"TransientVector" this, #_"Object" ___arg1]
        ;; note - relies on ensureEditable in nth
        (when (Util'isInteger ___arg1)
            (ยง return (ร this.nth((cast Number ___arg1).intValue())))
        )
        (throw (IllegalArgumentException. "Key must be integer"))
    )

    #_method
    (ยง defn #_"Object" (ยง method nth) [#_"TransientVector" this, #_"int" ___i]
        (.ensureEditable this)
        (let [#_"Object[]" ___node (.arrayFor this, ___i)]
            (ยง aget ___node (ร ___i & 0x01f))
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method nth) [#_"TransientVector" this, #_"int" ___i, #_"Object" ___notFound]
        (when (and (<= 0 ___i) (< ___i (count this)))
            (ยง return (.nth this, ___i))
        )
        ___notFound
    )

    #_method
    (ยง defn #_"TransientVector" (ยง method assocN) [#_"TransientVector" this, #_"int" ___i, #_"Object" ___val]
        (.ensureEditable this)
        (when (and (<= 0 ___i) (< ___i (:cnt this)))
            (when (ร ___i >= (.tailoff this))
                (ยง ass (ยง aget (:tail this) (ร ___i & 0x01f)) ___val)
                (ยง return this)
            )

            (ยง ass (:root this) (.doAssoc this, (:shift this), (:root this), ___i, ___val))
            (ยง return this)
        )
        (when (ร ___i == (:cnt this))
            (ยง return (.conj this, ___val))
        )
        (throw (IndexOutOfBoundsException.))
    )

    #_method
    (ยง defn #_"TransientVector" (ยง method assoc) [#_"TransientVector" this, #_"Object" ___key, #_"Object" ___val]
        ;; note - relies on ensureEditable in assocN
        (when (Util'isInteger ___key)
            (let [#_"int" ___i (.intValue (cast Number ___key))]
                (ยง return (.assocN this, ___i, ___val))
            )
        )
        (throw (IllegalArgumentException. "Key must be integer"))
    )

    #_method
    (ยง defn- #_"VNode" (ยง method doAssoc) [#_"TransientVector" this, #_"int" ___level, #_"VNode" ___node, #_"int" ___i, #_"Object" ___val]
        (ยง ass ___node (.ensureEditable this, ___node))
        (let [#_"VNode" ___ret ___node]
            (if (zero? ___level)
                (do
                    (ยง ass (ยง aget (:array ___ret) (ร ___i & 0x01f)) ___val)
                )
                (do
                    (let [#_"int" ___subidx (ร (___i >>> ___level) & 0x01f)]
                        (ยง ass (ยง aget (:array ___ret) ___subidx) (ร this.doAssoc((- ___level 5), (cast' VNode (ยง aget (:array ___node) ___subidx)), ___i, ___val)))
                    )
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"TransientVector" (ยง method pop) [#_"TransientVector" this]
        (.ensureEditable this)
        (when (zero? (:cnt this))
            (throw (IllegalStateException. "Can't pop empty vector"))
        )
        (when (ร (:cnt this) == 1)
            (ยง ass (:cnt this) 0)
            (ยง return this)
        )
        (let [#_"int" ___i (- (:cnt this) 1)]
            ;; pop in tail?
            (when (pos? (___i & 0x01f))
                (ยง ass (:cnt this) (- (:cnt this) 1))
                (ยง return this)
            )

            (let [#_"Object[]" ___newtail (ร this.editableArrayFor((:cnt this) - 2))]
                (let [#_"VNode" ___newroot (.popTail this, (:shift this), (:root this))]
                    (let [#_"int" ___newshift (:shift this)]
                        (when (nil? ___newroot)
                            (ยง ass ___newroot (VNode'new-1 (:edit (:root this))))
                        )
                        (when (and (< 5 (:shift this)) (nil? (ยง aget (:array ___newroot) (ร 1))))
                            (ยง ass ___newroot (ร this.ensureEditable((cast' VNode (ยง aget (:array ___newroot) (ร 0))))))
                            (ยง ass ___newshift (- ___newshift 5))
                        )
                        (ยง ass (:root this) ___newroot)
                        (ยง ass (:shift this) ___newshift)
                        (ยง ass (:cnt this) (- (:cnt this) 1))
                        (ยง ass (:tail this) ___newtail)
                        this
                    )
                )
            )
        )
    )

    #_method
    (ยง defn- #_"VNode" (ยง method popTail) [#_"TransientVector" this, #_"int" ___level, #_"VNode" ___node]
        (ยง ass ___node (.ensureEditable this, ___node))
        (let [#_"int" ___subidx (ร (((:cnt this) - 2) >>> ___level) & 0x01f)]
            (cond (> ___level 5)
                (do
                    (let [#_"VNode" ___newchild (ร this.popTail((- ___level 5), (cast' VNode (ยง aget (:array ___node) ___subidx))))]
                        (if (and (nil? ___newchild) (zero? ___subidx))
                            (do
                                nil
                            )
                            (do
                                (let [#_"VNode" ___ret ___node]
                                    (ยง ass (ยง aget (:array ___ret) ___subidx) ___newchild)
                                    ___ret
                                )
                            )
                        )
                    )
                )
                (zero? ___subidx)
                (do
                    nil
                )
                :else
                (do
                    (let [#_"VNode" ___ret ___node]
                        (ยง ass (ยง aget (:array ___ret) ___subidx) nil)
                        ___ret
                    )
                )
            )
        )
    )
)

(class-ns PersistentVector (ยง extends APersistentVector) (ยง implements IObj, IEditableCollection, IReduce, IKVReduce)
    (def #_"AtomicReference<Thread>" PersistentVector'NOEDIT (AtomicReference. nil))
    (def #_"VNode" PersistentVector'EMPTY_NODE (ร VNode'new-2(PersistentVector'NOEDIT, new Object[32])))

    (def #_"PersistentVector" PersistentVector'EMPTY (ร PersistentVector'new-4(0, 5, PersistentVector'EMPTY_NODE, (object-array 0))))

    (def- #_"IFn" PersistentVector'TRANSIENT_VECTOR_CONJ
        (ยง reify AFn()
            #_method
            (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___coll, #_"Object" ___val]
                (.conj (cast' ITransientVector ___coll), ___val)
            )
            #_method
            (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___coll]
                ___coll
            )
        )
    )

    (defn #_"PersistentVector" PersistentVector'adopt [#_"Object[]" ___items]
        (ร PersistentVector'new-4((ยง alength ___items), 5, PersistentVector'EMPTY_NODE, ___items))
    )

    (defn #_"PersistentVector" PersistentVector'create-1r [#_"IReduceInit" ___items]
        (let [#_"TransientVector" ___ret (.asTransient PersistentVector'EMPTY)]
            (.reduce ___items, PersistentVector'TRANSIENT_VECTOR_CONJ, ___ret)
            (.persistent ___ret)
        )
    )

    (defn #_"PersistentVector" PersistentVector'create-1s [#_"ISeq" ___items]
        (let [#_"Object[]" ___arr (make-array Object 32)]
            (let [#_"int" ___i 0]
                (loop-when-recur [___items ___items] (and (some? ___items) (< ___i 32)) [(next ___items)]
                    (ยง ass (ยง aget ___arr ___i) (first ___items))
                    (ยง ass ___i (inc ___i))
                )

                (cond (some? ___items) ;; >32, construct with array directly
                    (do
                        (let [#_"PersistentVector" ___start (PersistentVector'new-4 32, 5, PersistentVector'EMPTY_NODE, ___arr)]
                            (let [#_"TransientVector" ___ret (.asTransient ___start)]
                                (loop-when-recur [___items ___items] (some? ___items) [(next ___items)]
                                    (ยง ass ___ret (.conj ___ret, (first ___items)))
                                )
                                (.persistent ___ret)
                            )
                        )
                    )
                    (= ___i 32) ;; exactly 32, skip copy
                    (do
                        (PersistentVector'new-4 32, 5, PersistentVector'EMPTY_NODE, ___arr)
                    )
                    :else ;; <32, copy to minimum array and construct
                    (do
                        (let [#_"Object[]" ___arr2 (make-array Object ___i)]
                            (System/arraycopy ___arr, 0, ___arr2, 0, ___i)
                            (PersistentVector'new-4 ___i, 5, PersistentVector'EMPTY_NODE, ___arr2)
                        )
                    )
                )
            )
        )
    )

    (defn #_"PersistentVector" PersistentVector'create-1l [#_"List" ___list]
        (let [#_"int" ___size (.size ___list)]
            (when (<= ___size 32)
                (ยง return (ร PersistentVector'new-4(___size, 5, PersistentVector'EMPTY_NODE, (.toArray ___list))))
            )

            (let [#_"TransientVector" ___ret (.asTransient PersistentVector'EMPTY)]
                (loop-when-recur [#_"int" ___i 0] (< ___i ___size) [(inc ___i)]
                    (ยง ass ___ret (ร ___ret.conj(___list.get(___i))))
                )
                (.persistent ___ret)
            )
        )
    )

    (defn #_"PersistentVector" PersistentVector'create-1i [#_"Iterable" ___items]
        ;; optimize common case
        (when (instance? ArrayList ___items)
            (ยง return (.create this, (cast ArrayList ___items)))
        )

        (let [#_"Iterator" ___iter (.iterator ___items)]
            (let [#_"TransientVector" ___ret (.asTransient PersistentVector'EMPTY)]
                (while (.hasNext ___iter)
                    (ยง ass ___ret (.conj ___ret, (next ___iter)))
                )
                (.persistent ___ret)
            )
        )
    )

    (defn #_"PersistentVector" PersistentVector'create-1a [#_"Object..." ___items]
        (let [#_"TransientVector" ___ret (.asTransient PersistentVector'EMPTY)]
            (doseq [#_"Object" ___item ___items]
                (ยง ass ___ret (.conj ___ret, ___item))
            )
            (.persistent ___ret)
        )
    )

    (defn- #_"PersistentVector" PersistentVector'init []
        (hash-map
            #_"int" :cnt 0
            #_"int" :shift 0
            #_"VNode" :root nil
            #_"Object[]" :tail nil
            #_"IPersistentMap" :_meta nil
        )
    )

    (defn #_"PersistentVector" PersistentVector'new-4 [#_"int" ___cnt, #_"int" ___shift, #_"VNode" ___root, #_"Object[]" ___tail]
        (let [this (merge (APersistentVector'new) (PersistentVector'init))]
            (ยง ass (:_meta this) nil)
            (ยง ass (:cnt this) ___cnt)
            (ยง ass (:shift this) ___shift)
            (ยง ass (:root this) ___root)
            (ยง ass (:tail this) ___tail)
            this
        )
    )

    (defn #_"PersistentVector" PersistentVector'new-5 [#_"IPersistentMap" ___meta, #_"int" ___cnt, #_"int" ___shift, #_"VNode" ___root, #_"Object[]" ___tail]
        (let [this (merge (APersistentVector'new) (PersistentVector'init))]
            (ยง ass (:_meta this) ___meta)
            (ยง ass (:cnt this) ___cnt)
            (ยง ass (:shift this) ___shift)
            (ยง ass (:root this) ___root)
            (ยง ass (:tail this) ___tail)
            this
        )
    )

    #_method
    (ยง defn #_"TransientVector" (ยง method asTransient) [#_"PersistentVector" this]
        (TransientVector'new-1 this)
    )

    #_method
    (ยง defn #_"int" (ยง method tailoff) [#_"PersistentVector" this]
        (when (< (:cnt this) 32)
            (ยง return 0)
        )
        (ร (((:cnt this) - 1) >>> 5) << 5)
    )

    #_method
    (ยง defn #_"Object[]" (ยง method arrayFor) [#_"PersistentVector" this, #_"int" ___i]
        (when (and (<= 0 ___i) (< ___i (:cnt this)))
            (when (ร ___i >= (.tailoff this))
                (ยง return (:tail this))
            )
            (let [#_"VNode" ___node (:root this)]
                (loop-when-recur [#_"int" ___level (:shift this)] (> ___level 0) [(- ___level 5)]
                    (ยง ass ___node (cast' VNode (ยง aget (:array ___node) (ร (___i >>> ___level) & 0x01f))))
                )
                (ยง return (:array ___node))
            )
        )
        (throw (IndexOutOfBoundsException.))
    )

    #_method
    (ยง defn #_"Object" (ยง method nth) [#_"PersistentVector" this, #_"int" ___i]
        (let [#_"Object[]" ___node (.arrayFor this, ___i)]
            (ยง aget ___node (ร ___i & 0x01f))
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method nth) [#_"PersistentVector" this, #_"int" ___i, #_"Object" ___notFound]
        (when (and (<= 0 ___i) (< ___i (:cnt this)))
            (ยง return (.nth this, ___i))
        )
        ___notFound
    )

    #_method
    (ยง defn #_"PersistentVector" (ยง method assocN) [#_"PersistentVector" this, #_"int" ___i, #_"Object" ___val]
        (when (and (<= 0 ___i) (< ___i (:cnt this)))
            (when (ร ___i >= (.tailoff this))
                (let [#_"Object[]" ___newTail (make-array Object (ยง alength (:tail this)))]
                    (ร System/arraycopy((:tail this), 0, ___newTail, 0, (ยง alength (:tail this))))
                    (ยง ass (ยง aget ___newTail (ร ___i & 0x01f)) ___val)

                    (ยง return (ร PersistentVector'new-5((.meta this), (:cnt this), (:shift this), (:root this), ___newTail)))
                )
            )

            (ยง return (ร PersistentVector'new-5((.meta this), (:cnt this), (:shift this), this.doAssoc((:shift this), (:root this), ___i, ___val), (:tail this))))
        )
        (when (ร ___i == (:cnt this))
            (ยง return (.cons this, ___val))
        )
        (throw (IndexOutOfBoundsException.))
    )

    (defn- #_"VNode" PersistentVector'doAssoc [#_"int" ___level, #_"VNode" ___node, #_"int" ___i, #_"Object" ___val]
        (let [#_"VNode" ___ret (ร VNode'new-2((:edit ___node), (:array ___node).clone()))]
            (if (zero? ___level)
                (do
                    (ยง ass (ยง aget (:array ___ret) (ร ___i & 0x01f)) ___val)
                )
                (do
                    (let [#_"int" ___subidx (ร (___i >>> ___level) & 0x01f)]
                        (ยง ass (ยง aget (:array ___ret) ___subidx) (ร this.doAssoc((- ___level 5), (cast' VNode (ยง aget (:array ___node) ___subidx)), ___i, ___val)))
                    )
                )
            )
            ___ret
        )
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"PersistentVector" this]
        (:cnt this)
    )

    #_method
    (ยง defn #_"PersistentVector" (ยง method withMeta) [#_"PersistentVector" this, #_"IPersistentMap" ___meta]
        (PersistentVector'new-5 ___meta, (:cnt this), (:shift this), (:root this), (:tail this))
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method meta) [#_"PersistentVector" this]
        (:_meta this)
    )

    #_method
    (ยง defn #_"PersistentVector" (ยง method cons) [#_"PersistentVector" this, #_"Object" ___val]
        ;; room in tail?
        (when (ร (:cnt this) - (.tailoff this) < 32)
            (let [#_"Object[]" ___newTail (make-array Object (inc (ยง alength (:tail this))))]
                (ร System/arraycopy((:tail this), 0, ___newTail, 0, (ยง alength (:tail this))))
                (ยง ass (ยง aget ___newTail (ร (ยง alength (:tail this)))) ___val)
                (ยง return (ร PersistentVector'new-5((.meta this), (:cnt this) + 1, (:shift this), (:root this), ___newTail)))
            )
        )
        ;; full tail, push into tree
        (ยง let [#_"VNode" ___newroot]
            (let [#_"VNode" ___tailnode (ร VNode'new-2((:edit (:root this)), (:tail this)))]
                (let [#_"int" ___newshift (:shift this)]
                    ;; overflow root?
                    (if (ร ((:cnt this) >>> 5) > (1 << (:shift this)))
                        (do
                            (ยง ass ___newroot (VNode'new-1 (:edit (:root this))))
                            (ยง ass (ยง aget (:array ___newroot) (ร 0)) (:root this))
                            (ยง ass (ยง aget (:array ___newroot) (ร 1)) (ร PersistentVector'newPath((:edit (:root this)), (:shift this), ___tailnode)))
                            (ยง ass ___newshift (+ ___newshift 5))
                        )
                        (do
                            (ยง ass ___newroot (.pushTail this, (:shift this), (:root this), ___tailnode))
                        )
                    )
                    (ร PersistentVector'new-5((.meta this), (:cnt this) + 1, ___newshift, ___newroot, (object-array [ ___val ])))
                )
            )
        )
    )

    #_method
    (ยง defn- #_"VNode" (ยง method pushTail) [#_"PersistentVector" this, #_"int" ___level, #_"VNode" ___parent, #_"VNode" ___tailnode]
        ;; if parent is leaf, insert node,
        ;; else does it map to an existing child? -> nodeToInsert = pushNode one more level
        ;; else alloc new path
        ;; return nodeToInsert placed in copy of parent
        (let [#_"int" ___subidx (ร (((:cnt this) - 1) >>> ___level) & 0x01f)]
            (let [#_"VNode" ___ret (ร VNode'new-2((:edit ___parent), (:array ___parent).clone()))]
                (ยง let [#_"VNode" ___nodeToInsert]
                    (if (= ___level 5)
                        (do
                            (ยง ass ___nodeToInsert ___tailnode)
                        )
                        (do
                            (let [#_"VNode" ___child (cast' VNode (ยง aget (:array ___parent) ___subidx))]
                                (ยง ass ___nodeToInsert (if (some? ___child) (.pushTail this, (- ___level 5), ___child, ___tailnode) (PersistentVector'newPath (:edit (:root this)), (- ___level 5), ___tailnode)))
                            )
                        )
                    )
                    (ยง ass (ยง aget (:array ___ret) ___subidx) ___nodeToInsert)
                    ___ret
                )
            )
        )
    )

    (defn- #_"VNode" PersistentVector'newPath [#_"AtomicReference<Thread>" ___edit, #_"int" ___level, #_"VNode" ___node]
        (when (zero? ___level)
            (ยง return ___node)
        )
        (let [#_"VNode" ___ret (VNode'new-1 ___edit)]
            (ยง ass (ยง aget (:array ___ret) (ร 0)) (ร PersistentVector'newPath(___edit, ___level - 5, ___node)))
            ___ret
        )
    )

    #_method
    (ยง defn #_"IChunkedSeq" (ยง method chunkedSeq) [#_"PersistentVector" this]
        (when (zero? (count this))
            (ยง return nil)
        )
        (ChunkedSeq'new-3 this, 0, 0)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method seq) [#_"PersistentVector" this]
        (.chunkedSeq this)
    )

    #_override
    #_method
    (ยง defn #_"Iterator" (ยง method rangedIterator) [#_"PersistentVector" this, #_"int" ___start, #_"int" ___end]
        (ยง reify Iterator()
            (ยง init
                (hash-map
                    #_"int" :i ___start
                    #_"int" :base (- (:i this) (% (:i this) 32))
                    #_"Object[]" :array (when (< ___start (count this)) (.arrayFor this, (:i this)))
                )
            )

            #_method
            (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                (ร ((:i this) < ___end))
            )

            #_method
            (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                (if (< (:i this) ___end)
                    (do
                        (when (ร (:i this) - (:base this) == 32)
                            (ยง ass (:array this) (.arrayFor this, (:i this)))
                            (ยง ass (:base this) (+ (:base this) 32))
                        )
                        (let [_ (ยง aget (:array this) (ร (:i this) & 0x01f))]
                            (ยง ass (:i this) (+ (:i this) 1))
                            _
                        )
                    )
                    (do
                        (throw (NoSuchElementException.))
                    )
                )
            )

            #_method
            (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                (throw (UnsupportedOperationException.))
            )
        )
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"PersistentVector" this]
        (ร this.rangedIterator(0, (count this)))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"PersistentVector" this, #_"IFn" ___f]
        (ยง let [#_"Object" ___init]
            (if (> (:cnt this) 0)
                (do
                    (ยง ass ___init (ร this.arrayFor(0)[0]))
                )
                (do
                    (ยง return (.invoke ___f))
                )
            )
            (let [#_"int" ___step 0]
                (loop-when-recur [#_"int" ___i 0] (< ___i (:cnt this)) [(+ ___i ___step)]
                    (let [#_"Object[]" ___array (.arrayFor this, ___i)]
                        (loop-when-recur [#_"int" ___j (if (zero? ___i) 1 0)] (< ___j (ยง alength ___array)) [(inc ___j)]
                            (ยง ass ___init (ร ___f.invoke(___init, ___array[___j])))
                            (when (RT'isReduced ___init)
                                (ยง return (.deref (cast' IDeref ___init)))
                            )
                        )
                        (ยง ass ___step (ยง alength ___array))
                    )
                )
                ___init
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"PersistentVector" this, #_"IFn" ___f, #_"Object" ___init]
        (let [#_"int" ___step 0]
            (loop-when-recur [#_"int" ___i 0] (< ___i (:cnt this)) [(+ ___i ___step)]
                (let [#_"Object[]" ___array (.arrayFor this, ___i)]
                    (loop-when-recur [#_"int" ___j 0] (< ___j (ยง alength ___array)) [(inc ___j)]
                        (ยง ass ___init (ร ___f.invoke(___init, ___array[___j])))
                        (when (RT'isReduced ___init)
                            (ยง return (.deref (cast' IDeref ___init)))
                        )
                    )
                    (ยง ass ___step (ยง alength ___array))
                )
            )
            ___init
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method kvreduce) [#_"PersistentVector" this, #_"IFn" ___f, #_"Object" ___init]
        (let [#_"int" ___step 0]
            (loop-when-recur [#_"int" ___i 0] (< ___i (:cnt this)) [(+ ___i ___step)]
                (let [#_"Object[]" ___array (.arrayFor this, ___i)]
                    (loop-when-recur [#_"int" ___j 0] (< ___j (ยง alength ___array)) [(inc ___j)]
                        (ยง ass ___init (ร ___f.invoke(___init, ___j + ___i, ___array[___j])))
                        (when (RT'isReduced ___init)
                            (ยง return (.deref (cast' IDeref ___init)))
                        )
                    )
                    (ยง ass ___step (ยง alength ___array))
                )
            )
            ___init
        )
    )

    #_method
    (ยง defn #_"IPersistentCollection" (ยง method empty) [#_"PersistentVector" this]
        (.withMeta PersistentVector'EMPTY, (.meta this))
    )

    #_method
    (ยง defn #_"PersistentVector" (ยง method pop) [#_"PersistentVector" this]
        (when (zero? (:cnt this))
            (throw (IllegalStateException. "Can't pop empty vector"))
        )
        (when (ร (:cnt this) == 1)
            (ยง return (.withMeta PersistentVector'EMPTY, (.meta this)))
        )
        (when (ร (:cnt this) - (.tailoff this) > 1)
            (let [#_"Object[]" ___newTail (make-array Object (dec (ยง alength (:tail this))))]
                (ร System/arraycopy((:tail this), 0, ___newTail, 0, (ยง alength ___newTail)))
                (ยง return (ร PersistentVector'new-5((.meta this), (:cnt this) - 1, (:shift this), (:root this), ___newTail)))
            )
        )
        (let [#_"Object[]" ___newtail (ร this.arrayFor((:cnt this) - 2))]
            (let [#_"VNode" ___newroot (.popTail this, (:shift this), (:root this))]
                (let [#_"int" ___newshift (:shift this)]
                    (when (nil? ___newroot)
                        (ยง ass ___newroot PersistentVector'EMPTY_NODE)
                    )
                    (when (and (< 5 (:shift this)) (nil? (ยง aget (:array ___newroot) (ร 1))))
                        (ยง ass ___newroot (cast' VNode (ยง aget (:array ___newroot) (ร 0))))
                        (ยง ass ___newshift (- ___newshift 5))
                    )
                    (ร PersistentVector'new-5((.meta this), (:cnt this) - 1, ___newshift, ___newroot, ___newtail))
                )
            )
        )
    )

    #_method
    (ยง defn- #_"VNode" (ยง method popTail) [#_"PersistentVector" this, #_"int" ___level, #_"VNode" ___node]
        (let [#_"int" ___subidx (ร (((:cnt this) - 2) >>> ___level) & 0x01f)]
            (cond (> ___level 5)
                (do
                    (let [#_"VNode" ___newchild (ร this.popTail((- ___level 5), (cast' VNode (ยง aget (:array ___node) ___subidx))))]
                        (if (and (nil? ___newchild) (zero? ___subidx))
                            (do
                                nil
                            )
                            (do
                                (let [#_"VNode" ___ret (ร VNode'new-2((:edit (:root this)), (:array ___node).clone()))]
                                    (ยง ass (ยง aget (:array ___ret) ___subidx) ___newchild)
                                    ___ret
                                )
                            )
                        )
                    )
                )
                (zero? ___subidx)
                (do
                    nil
                )
                :else
                (do
                    (let [#_"VNode" ___ret (ร VNode'new-2((:edit (:root this)), (:array ___node).clone()))]
                        (ยง ass (ยง aget (:array ___ret) ___subidx) nil)
                        ___ret
                    )
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.ProxyHandler

(ยง import java.lang.reflect.InvocationHandler)
(ยง import java.lang.reflect.Method)

(class-ns ProxyHandler (ยง implements InvocationHandler)
    (defn- #_"ProxyHandler" ProxyHandler'init []
        (hash-map
            ;; method-name-string->fn
            #_"IPersistentMap" :fns nil
        )
    )

    (defn #_"ProxyHandler" ProxyHandler'new [#_"IPersistentMap" ___fns]
        (let [this (ProxyHandler'init)]
            (ยง ass (:fns this) ___fns)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"ProxyHandler" this, #_"Object" ___proxy, #_"java.lang.reflect.Method" ___method, #_"Object[]" ___args] #_(ยง throws Throwable)
        (let [#_"Class" ___rt (.getReturnType ___method)]
            (let [#_"IFn" ___fn (cast' IFn (.valAt (:fns this), (.getName ___method)))]
                (when (nil? ___fn)
                    (cond (= ___rt Void/TYPE)
                        (do
                            (ยง return nil)
                        )
                        (ร (.getName ___method).equals("equals"))
                        (do
                            (ยง return (ร ___proxy == ___args[0]))
                        )
                        (ร (.getName ___method).equals("hashCode"))
                        (do
                            (ยง return (System/identityHashCode ___proxy))
                        )
                        (ร (.getName ___method).equals("toString"))
                        (do
                            (ยง return (str "Proxy: " (System/identityHashCode ___proxy)))
                        )
                    )
                    (throw (UnsupportedOperationException.))
                )
                (let [#_"Object" ___ret (ร ___fn.applyTo(ArraySeq'create-1(___args)))]
                    (cond (= ___rt Void/TYPE)
                        (do
                            (ยง return nil)
                        )
                        (.isPrimitive ___rt)
                        (do
                            (cond (= ___rt Character/TYPE)
                                (do
                                    (ยง return ___ret)
                                )
                                (= ___rt Integer/TYPE)
                                (do
                                    (ยง return (.intValue (cast Number ___ret)))
                                )
                                (= ___rt Long/TYPE)
                                (do
                                    (ยง return (.longValue (cast Number ___ret)))
                                )
                                (= ___rt Float/TYPE)
                                (do
                                    (ยง return (.floatValue (cast Number ___ret)))
                                )
                                (= ___rt Double/TYPE)
                                (do
                                    (ยง return (.doubleValue (cast Number ___ret)))
                                )
                                (and (= ___rt Boolean/TYPE) (not (instance? Boolean ___ret)))
                                (do
                                    (ยง return (if (nil? ___ret) Boolean/FALSE Boolean/TRUE))
                                )
                                (= ___rt Byte/TYPE)
                                (do
                                    (ยง return (ร (byte) (cast Number ___ret).intValue()))
                                )
                                (= ___rt Short/TYPE)
                                (do
                                    (ยง return (ร (short) (cast Number ___ret).intValue()))
                                )
                            )
                        )
                    )
                    ___ret
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.Range

(ยง import java.util.*)

#_private
(ยง defprotocol RangeBoundsCheck
    #_abstract
    (#_"boolean" RangeBoundsCheck'''(ยง method exceededBounds) [#_"RangeBoundsCheck" this, #_"Object" ___val])
)

#_private
#_non-static
(class-ns RangeIterator (ยง implements Iterator)
    (defn- #_"RangeIterator" RangeIterator'init []
        (hash-map
            #_"Object" :next nil
        )
    )

    (defn #_"RangeIterator" RangeIterator'new []
        (let [this (RangeIterator'init)]
            (ยง ass (:next this) (:start this))
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"RangeIterator" this]
        (not (.exceededBounds (:boundsCheck this), (:next this)))
    )

    #_method
    (ยง defn #_"Object" (ยง method next) [#_"RangeIterator" this]
        (if (.hasNext this)
            (do
                (let [#_"Object" ___ret (:next this)]
                    (ยง ass (:next this) (Numbers'addP-2oo (:next this), (:step this)))
                    ___ret
                )
            )
            (do
                (throw (NoSuchElementException.))
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"RangeIterator" this]
        (throw (UnsupportedOperationException.))
    )
)

;;;
 ; Implements generic numeric (potentially infinite) range.
 ;;
(class-ns Range (ยง extends ASeq) (ยง implements IChunkedSeq, IReduce)
    (def- #_"int" Range'CHUNK_SIZE 32)

    (defn- #_"RangeBoundsCheck" Range'positiveStep [#_"Object" ___end]
        (ยง reify RangeBoundsCheck()
            #_method
            (ยง defn #_"boolean" (ยง method exceededBounds) [#_"RangeBoundsCheck" this, #_"Object" ___val]
                (Numbers'gte-2oo ___val, ___end)
            )
        )
    )

    (defn- #_"RangeBoundsCheck" Range'negativeStep [#_"Object" ___end]
        (ยง reify RangeBoundsCheck()
            #_method
            (ยง defn #_"boolean" (ยง method exceededBounds) [#_"RangeBoundsCheck" this, #_"Object" ___val]
                (Numbers'lte-2oo ___val, ___end)
            )
        )
    )

    (defn- #_"Range" Range'init []
        (hash-map
            ;; Invariants guarantee this is never an "empty" seq
            #_"Object" :end nil
            #_"Object" :start nil
            #_"Object" :step nil
            #_"RangeBoundsCheck" :boundsCheck nil

            #_volatile
            #_"IChunk" :_chunk nil ;; lazy
            #_volatile
            #_"ISeq" :_chunkNext nil ;; lazy
            #_volatile
            #_"ISeq" :_next nil ;; cached
        )
    )

    (defn- #_"Range" Range'new-4 [#_"Object" ___start, #_"Object" ___end, #_"Object" ___step, #_"RangeBoundsCheck" ___boundsCheck]
        (let [this (merge (ASeq'new) (Range'init))]
            (ยง ass (:end this) ___end)
            (ยง ass (:start this) ___start)
            (ยง ass (:step this) ___step)
            (ยง ass (:boundsCheck this) ___boundsCheck)
            this
        )
    )

    (defn- #_"Range" Range'new-6 [#_"Object" ___start, #_"Object" ___end, #_"Object" ___step, #_"RangeBoundsCheck" ___boundsCheck, #_"IChunk" ___chunk, #_"ISeq" ___chunkNext]
        (let [this (merge (ASeq'new) (Range'init))]
            (ยง ass (:end this) ___end)
            (ยง ass (:start this) ___start)
            (ยง ass (:step this) ___step)
            (ยง ass (:boundsCheck this) ___boundsCheck)
            (ยง ass (:_chunk this) ___chunk)
            (ยง ass (:_chunkNext this) ___chunkNext)
            this
        )
    )

    (defn- #_"Range" Range'new-7 [#_"IPersistentMap" ___meta, #_"Object" ___start, #_"Object" ___end, #_"Object" ___step, #_"RangeBoundsCheck" ___boundsCheck, #_"IChunk" ___chunk, #_"ISeq" ___chunkNext]
        (let [this (merge (ASeq'new ___meta) (Range'init))]
            (ยง ass (:end this) ___end)
            (ยง ass (:start this) ___start)
            (ยง ass (:step this) ___step)
            (ยง ass (:boundsCheck this) ___boundsCheck)
            (ยง ass (:_chunk this) ___chunk)
            (ยง ass (:_chunkNext this) ___chunkNext)
            this
        )
    )

    (defn #_"ISeq" Range'create-1 [#_"Object" ___end]
        (when (Numbers'isPos-1o ___end)
            (ยง return (ร Range'new-4(0, ___end, 1, Range'positiveStep(___end))))
        )
        PersistentList'EMPTY
    )

    (defn #_"ISeq" Range'create-2 [#_"Object" ___start, #_"Object" ___end]
        (Range'create-3 ___start, ___end, 1)
    )

    (defn #_"ISeq" Range'create-3 [#_"Object" ___start, #_"Object" ___end, #_"Object" ___step]
        (when (or (and (Numbers'isPos-1o ___step) (Numbers'gt-2oo ___start, ___end)) (and (Numbers'isNeg-1o ___step) (Numbers'gt-2oo ___end, ___start)) (Numbers'equiv-2oo ___start, ___end))
            (ยง return PersistentList'EMPTY)
        )
        (when (Numbers'isZero-1o ___step)
            (ยง return (Repeat'create-1 ___start))
        )
        (Range'new-4 ___start, ___end, ___step, (if (Numbers'isPos-1o ___step) (Range'positiveStep ___end) (Range'negativeStep ___end)))
    )

    #_method
    (ยง defn #_"Obj" (ยง method withMeta) [#_"Range" this, #_"IPersistentMap" ___meta]
        (when (ร ___meta == (:_meta this))
            (ยง return this)
        )
        (Range'new-7 ___meta, (:end this), (:start this), (:step this), (:boundsCheck this), (:_chunk this), (:_chunkNext this))
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"Range" this]
        (:start this)
    )

    #_method
    (ยง defn #_"void" (ยง method forceChunk) [#_"Range" this]
        (when (some? (:_chunk this))
            (ยง return nil)
        )

        (let [#_"Object[]" ___arr (make-array Object Range'CHUNK_SIZE)]
            (let [#_"int" ___n 0]
                (let [#_"Object" ___val (:start this)]
                    (while (< ___n Range'CHUNK_SIZE)
                        (ยง ass (ยง aget ___arr ___n) ___val)
                        (ยง ass ___n (inc ___n))
                        (ยง ass ___val (Numbers'addP-2oo ___val, (:step this)))
                        (when (.exceededBounds (:boundsCheck this), ___val)
                            ;; partial last chunk
                            (ยง ass (:_chunk this) (ArrayChunk'new-3 ___arr, 0, ___n))
                            (ยง return nil)
                        )
                    )

                    ;; full last chunk
                    (when (.exceededBounds (:boundsCheck this), ___val)
                        (ยง ass (:_chunk this) (ArrayChunk'new-3 ___arr, 0, Range'CHUNK_SIZE))
                        (ยง return nil)
                    )

                    ;; full intermediate chunk
                    (ยง ass (:_chunk this) (ArrayChunk'new-3 ___arr, 0, Range'CHUNK_SIZE))
                    (ยง ass (:_chunkNext this) (Range'new-4 ___val, (:end this), (:step this), (:boundsCheck this)))
                    nil
                )
            )
        )
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"Range" this]
        (when (some? (:_next this))
            (ยง return (:_next this))
        )

        (.forceChunk this)
        (when (ร (:_chunk this).count() > 1)
            (let [#_"IChunk" ___smallerChunk (.dropFirst (:_chunk this))]
                (ยง ass (:_next this) (ร Range'new-6(___smallerChunk.nth(0), (:end this), (:step this), (:boundsCheck this), ___smallerChunk, (:_chunkNext this))))
                (ยง return (:_next this))
            )
        )
        (.chunkedNext this)
    )

    #_method
    (ยง defn #_"IChunk" (ยง method chunkedFirst) [#_"Range" this]
        (.forceChunk this)
        (:_chunk this)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method chunkedNext) [#_"Range" this]
        (.seq (.chunkedMore this))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method chunkedMore) [#_"Range" this]
        (.forceChunk this)
        (when (nil? (:_chunkNext this))
            (ยง return PersistentList'EMPTY)
        )
        (:_chunkNext this)
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"Range" this, #_"IFn" ___f]
        (let [#_"Object" ___acc (:start this)]
            (let [#_"Number" ___i (Numbers'addP-2oo (:start this), (:step this))]
                (while (not (.exceededBounds (:boundsCheck this), ___i))
                    (ยง ass ___acc (.invoke ___f, ___acc, ___i))
                    (when (RT'isReduced ___acc)
                        (ยง return (.deref (cast' Reduced ___acc)))
                    )
                    (ยง ass ___i (Numbers'addP-2oo ___i, (:step this)))
                )
                ___acc
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"Range" this, #_"IFn" ___f, #_"Object" ___val]
        (let [#_"Object" ___acc ___val]
            (let [#_"Object" ___i (:start this)]
                (while (not (.exceededBounds (:boundsCheck this), ___i))
                    (ยง ass ___acc (.invoke ___f, ___acc, ___i))
                    (when (RT'isReduced ___acc)
                        (ยง return (.deref (cast' Reduced ___acc)))
                    )
                    (ยง ass ___i (Numbers'addP-2oo ___i, (:step this)))
                )
                ___acc
            )
        )
    )

    #_method
    (ยง defn #_"Iterator" (ยง method iterator) [#_"Range" this]
        (RangeIterator'new)
    )
)
)

(java-ns cloiure.lang.Ratio

(ยง import java.math.BigInteger)
(ยง import java.math.BigDecimal)
(ยง import java.math.MathContext)

(class-ns Ratio (ยง extends Number) (ยง implements Comparable)
    (defn- #_"Ratio" Ratio'init []
        (hash-map
            #_"BigInteger" :numerator nil
            #_"BigInteger" :denominator nil
        )
    )

    (defn #_"Ratio" Ratio'new [#_"BigInteger" ___numerator, #_"BigInteger" ___denominator]
        (let [this (merge (Number'new) (Ratio'init))]
            (ยง ass (:numerator this) ___numerator)
            (ยง ass (:denominator this) ___denominator)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"Ratio" this, #_"Object" ___arg0]
        (and (some? ___arg0) (ยง instance? Ratio ___arg0) (ร (:numerator (cast' Ratio ___arg0)).equals((:numerator this))) (ร (:denominator (cast' Ratio ___arg0)).equals((:denominator this))))
    )

    #_method
    (ยง defn #_"int" (ยง method hashCode) [#_"Ratio" this]
        (ร (:numerator this).hashCode() :xor (:denominator this).hashCode())
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"Ratio" this]
        (str (.toString (:numerator this)) "/" (.toString (:denominator this)))
    )

    #_method
    (ยง defn #_"int" (ยง method intValue) [#_"Ratio" this]
        (ร (int) (.doubleValue this))
    )

    #_method
    (ยง defn #_"long" (ยง method longValue) [#_"Ratio" this]
        (.longValue (.bigIntegerValue this))
    )

    #_method
    (ยง defn #_"float" (ยง method floatValue) [#_"Ratio" this]
        (ร (float)this.doubleValue())
    )

    #_method
    (ยง defn #_"double" (ยง method doubleValue) [#_"Ratio" this]
        (ร this.decimalValue(MathContext/DECIMAL64).doubleValue())
    )

    #_method
    (ยง defn #_"BigDecimal" (ยง method decimalValue) [#_"Ratio" this]
        (.decimalValue this, MathContext/UNLIMITED)
    )

    #_method
    (ยง defn #_"BigDecimal" (ยง method decimalValue) [#_"Ratio" this, #_"MathContext" ___mc]
        (let [#_"BigDecimal" ___numerator (ยง unsure BigDecimal. (:numerator this))]
            (let [#_"BigDecimal" ___denominator (ยง unsure BigDecimal. (:denominator this))]
                (.divide ___numerator, ___denominator, ___mc)
            )
        )
    )

    #_method
    (ยง defn #_"BigInteger" (ยง method bigIntegerValue) [#_"Ratio" this]
        (.divide (:numerator this), (:denominator this))
    )

    #_method
    (ยง defn #_"int" (ยง method compareTo) [#_"Ratio" this, #_"Object" ___o]
        (let [#_"Number" ___other (cast Number ___o)]
            (Numbers'compare this, ___other)
        )
    )
)
)

(java-ns cloiure.lang.ReaderConditional

(class-ns ReaderConditional (ยง implements ILookup)
    (ยง def #_"Keyword" ReaderConditional'FORM_KW (Keyword'intern-1 "form"))
    (ยง def #_"Keyword" ReaderConditional'SPLICING_KW (Keyword'intern-1 "splicing?"))

    (defn #_"ReaderConditional" ReaderConditional'create [#_"Object" ___form, #_"boolean" ___splicing]
        (ReaderConditional'new ___form, ___splicing)
    )

    (defn- #_"ReaderConditional" ReaderConditional'init []
        (hash-map
            #_"Object" :form nil
            #_"Boolean" :splicing nil
        )
    )

    (defn- #_"ReaderConditional" ReaderConditional'new [#_"Object" ___form, #_"boolean" ___splicing]
        (let [this (ReaderConditional'init)]
            (ยง ass (:form this) ___form)
            (ยง ass (:splicing this) ___splicing)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"ReaderConditional" this, #_"Object" ___key]
        (.valAt this, ___key, nil)
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"ReaderConditional" this, #_"Object" ___key, #_"Object" ___notFound]
        (cond (.equals ReaderConditional'FORM_KW, ___key)
            (do
                (:form this)
            )
            (.equals ReaderConditional'SPLICING_KW, ___key)
            (do
                (:splicing this)
            )
            :else
            (do
                ___notFound
            )
        )
    )

    #_override
    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"ReaderConditional" this, #_"Object" ___o]
        (when (= this ___o)
            (ยง return true)
        )
        (when (or (nil? ___o) (ร getClass() != (.getClass ___o)))
            (ยง return false)
        )

        (let [#_"ReaderConditional" ___that (cast' ReaderConditional ___o)]
            (when (if (some? (:form this)) (not (.equals (:form this), (:form ___that))) (some? (:form ___that)))
                (ยง return false)
            )
            (when (if (some? (:splicing this)) (not (.equals (:splicing this), (:splicing ___that))) (some? (:splicing ___that)))
                (ยง return false)
            )
            true
        )
    )

    #_override
    #_method
    (ยง defn #_"int" (ยง method hashCode) [#_"ReaderConditional" this]
        (let [#_"int" ___result (Util'hash (:form this))]
            (ยง ass ___result (ร 31 * ___result + Util'hash((:splicing this))))
            ___result
        )
    )
)
)

(java-ns cloiure.lang.RecordIterator

(ยง import java.util.Iterator)

(class-ns RecordIterator (ยง implements Iterator)
    (defn- #_"RecordIterator" RecordIterator'init []
        (hash-map
            #_"int" :i 0
            #_"int" :basecnt 0
            #_"ILookup" :rec nil
            #_"IPersistentVector" :basefields nil
            #_"Iterator" :extmap nil
        )
    )

    (defn #_"RecordIterator" RecordIterator'new [#_"ILookup" ___rec, #_"IPersistentVector" ___basefields, #_"Iterator" ___extmap]
        (let [this (RecordIterator'init)]
            (ยง ass (:rec this) ___rec)
            (ยง ass (:basefields this) ___basefields)
            (ยง ass (:basecnt this) (count ___basefields))
            (ยง ass (:extmap this) ___extmap)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"RecordIterator" this]
        (if (< (:i this) (:basecnt this))
            (do
                true
            )
            (do
                (.hasNext (:extmap this))
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method next) [#_"RecordIterator" this]
        (if (< (:i this) (:basecnt this))
            (do
                (let [#_"Object" ___k (.nth (:basefields this), (:i this))]
                    (ยง ass (:i this) (+ (:i this) 1))
                    (ร MapEntry'create(___k, (:rec this).valAt(___k)))
                )
            )
            (do
                (next (:extmap this))
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"RecordIterator" this]
        (throw (UnsupportedOperationException.))
    )
)
)

(java-ns cloiure.lang.Reduced

(class-ns Reduced (ยง implements IDeref)
    (defn- #_"Reduced" Reduced'init []
        (hash-map
            #_"Object" :val nil
        )
    )

    (defn #_"Reduced" Reduced'new [#_"Object" ___val]
        (let [this (Reduced'init)]
            (ยง ass (:val this) ___val)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method deref) [#_"Reduced" this]
        (:val this)
    )
)
)

(java-ns cloiure.lang.Ref

(ยง import java.util.concurrent.atomic.AtomicInteger)
(ยง import java.util.concurrent.atomic.AtomicLong)
(ยง import java.util.concurrent.locks.ReentrantReadWriteLock)

(class-ns RefTVal
    (defn- #_"RefTVal" RefTVal'init []
        (hash-map
            #_"Object" :val nil
            #_"long" :point 0
            #_"RefTVal" :prior nil
            #_"RefTVal" :next nil
        )
    )

    (defn #_"RefTVal" RefTVal'new-3 [#_"Object" ___val, #_"long" ___point, #_"RefTVal" ___prior]
        (let [this (RefTVal'init)]
            (ยง ass (:val this) ___val)
            (ยง ass (:point this) ___point)
            (ยง ass (:prior this) ___prior)
            (ยง ass (:next this) (:next ___prior))
            (ยง ass (:next (:prior this)) this)
            (ยง ass (:prior (:next this)) this)
            this
        )
    )

    (defn #_"RefTVal" RefTVal'new-2 [#_"Object" ___val, #_"long" ___point]
        (let [this (RefTVal'init)]
            (ยง ass (:val this) ___val)
            (ยง ass (:point this) ___point)
            (ยง ass (:next this) this)
            (ยง ass (:prior this) this)
            this
        )
    )
)

(class-ns Ref (ยง extends ARef) (ยง implements IFn, Comparable<Ref>, IRef)
    (def #_"AtomicLong" Ref'ids (AtomicLong.))

    (defn- #_"Ref" Ref'init []
        (hash-map
            #_"RefTVal" :tvals nil
            #_"AtomicInteger" :faults nil
            #_"ReentrantReadWriteLock" :lock nil
            #_"LockingTransactionInfo" :tinfo nil
            #_"long" :id 0

            #_volatile
            #_"int" :minHistory 0
            #_volatile
            #_"int" :maxHistory 10
        )
    )

    (defn #_"Ref" Ref'new-1 [#_"Object" ___initVal]
        (Ref'new-2 ___initVal, nil)
    )

    (defn #_"Ref" Ref'new-2 [#_"Object" ___initVal, #_"IPersistentMap" ___meta]
        (let [this (merge (ARef'new-1 ___meta) (Ref'init))]
            (ยง ass (:id this) (.getAndIncrement Ref'ids))
            (ยง ass (:faults this) (AtomicInteger.))
            (ยง ass (:lock this) (ReentrantReadWriteLock.))
            (ยง ass (:tvals this) (RefTVal'new-2 ___initVal, 0))
            this
        )
    )

    #_method
    (ยง defn #_"int" (ยง method compareTo) [#_"Ref" this, #_"Ref" ___ref]
        (cond (ร (:id this) == (:id ___ref))
            (do
                0
            )
            (ร (:id this) < (:id ___ref))
            (do
                -1
            )
            :else
            (do
                1
            )
        )
    )

    #_method
    (ยง defn #_"int" (ยง method getMinHistory) [#_"Ref" this]
        (:minHistory this)
    )

    #_method
    (ยง defn #_"Ref" (ยง method setMinHistory) [#_"Ref" this, #_"int" ___minHistory]
        (ยง ass (:minHistory this) ___minHistory)
        this
    )

    #_method
    (ยง defn #_"int" (ยง method getMaxHistory) [#_"Ref" this]
        (:maxHistory this)
    )

    #_method
    (ยง defn #_"Ref" (ยง method setMaxHistory) [#_"Ref" this, #_"int" ___maxHistory]
        (ยง ass (:maxHistory this) ___maxHistory)
        this
    )

    ;; the latest val

    ;; ok out of transaction
    #_method
    (ยง defn #_"Object" (ยง method currentVal) [#_"Ref" this]
        (try
            (ร (:lock this).readLock().lock())
            (when (some? (:tvals this))
                (ยง return (:val (:tvals this)))
            )
            (throw (IllegalStateException. (str (.toString this) " is unbound.")))
            (finally
                (ร (:lock this).readLock().unlock())
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method deref) [#_"Ref" this]
        (let [#_"LockingTransaction" ___t (LockingTransaction'getRunning)]
            (when (nil? ___t)
                (ยง return (.currentVal this))
            )
            (.doGet ___t, this)
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method set) [#_"Ref" this, #_"Object" ___val]
        (ร LockingTransaction'getEx().doSet(this, ___val))
    )

    #_method
    (ยง defn #_"Object" (ยง method commute) [#_"Ref" this, #_"IFn" ___fn, #_"ISeq" ___args]
        (ร LockingTransaction'getEx().doCommute(this, ___fn, ___args))
    )

    #_method
    (ยง defn #_"Object" (ยง method alter) [#_"Ref" this, #_"IFn" ___fn, #_"ISeq" ___args]
        (let [#_"LockingTransaction" ___t (LockingTransaction'getEx)]
            (ร ___t.doSet(this, ___fn.applyTo(RT'cons(___t.doGet(this), ___args))))
        )
    )

    #_method
    (ยง defn #_"void" (ยง method touch) [#_"Ref" this]
        (ร LockingTransaction'getEx().doEnsure(this))
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method isBound) [#_"Ref" this]
        (try
            (ร (:lock this).readLock().lock())
            (some? (:tvals this))
            (finally
                (ร (:lock this).readLock().unlock())
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method trimHistory) [#_"Ref" this]
        (try
            (ร (:lock this).writeLock().lock())
            (when (some? (:tvals this))
                (ยง ass (:next (:tvals this)) (:tvals this))
                (ยง ass (:prior (:tvals this)) (:tvals this))
            )
            (finally
                (ร (:lock this).writeLock().unlock())
            )
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method getHistoryCount) [#_"Ref" this]
        (try
            (ร (:lock this).writeLock().lock())
            (.histCount this)
            (finally
                (ร (:lock this).writeLock().unlock())
            )
        )
    )

    #_method
    (ยง defn #_"int" (ยง method histCount) [#_"Ref" this]
        (if (nil? (:tvals this))
            (do
                0
            )
            (do
                (let [#_"int" ___count 0]
                    (loop-when-recur [#_"RefTVal" ___tv (:next (:tvals this))] (ร ___tv != (:tvals this)) [(:next ___tv)]
                        (ยง ass ___count (inc ___count))
                    )
                    ___count
                )
            )
        )
    )

    #_method
    (ยง defn #_"IFn" (ยง method fn) [#_"Ref" this]
        (cast' IFn (.deref this))
    )

    #_method
    (ยง defn #_"Object" (ยง method call) [#_"Ref" this]
        (.invoke this)
    )

    #_method
    (ยง defn #_"void" (ยง method run) [#_"Ref" this]
        (.invoke this)
        nil
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this]
        (.invoke (.fn this))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1]
        (ร (.fn this).invoke(___arg1))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2]
        (ร (.fn this).invoke(___arg1, ___arg2))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14, ___arg15))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14, ___arg15,
                ___arg16))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14, ___arg15,
                ___arg16, ___arg17))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14, ___arg15,
                ___arg16, ___arg17, ___arg18))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14, ___arg15,
                ___arg16, ___arg17, ___arg18, ___arg19))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___arg20]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14, ___arg15,
                ___arg16, ___arg17, ___arg18, ___arg19, ___arg20))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Ref" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___arg20, #_"Object..." ___args]
        (ร (.fn this).invoke(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9, ___arg10, ___arg11, ___arg12, ___arg13, ___arg14, ___arg15,
                ___arg16, ___arg17, ___arg18, ___arg19, ___arg20, ___args))
    )

    #_method
    (ยง defn #_"Object" (ยง method applyTo) [#_"Ref" this, #_"ISeq" ___arglist]
        (AFn'applyToHelper this, ___arglist)
    )
)
)

(java-ns cloiure.lang.Reflector

(ยง import java.lang.reflect.Constructor)
(ยง import java.lang.reflect.Field)
(ยง import java.lang.reflect.Method)
(ยง import java.lang.reflect.Modifier)
(ยง import java.util.ArrayList)
(ยง import java.util.Iterator)
(ยง import java.util.List)

#_stateless
(class-ns Reflector
    (defn #_"Object" Reflector'invokeInstanceMethod [#_"Object" ___target, #_"String" ___methodName, #_"Object[]" ___args]
        (let [#_"Class" ___c (.getClass ___target)]
            (let [#_"List" ___methods (ร Reflector'getMethods(___c, (ยง alength ___args), ___methodName, false))]
                (Reflector'invokeMatchingMethod ___methodName, ___methods, ___target, ___args)
            )
        )
    )

    (defn- #_"Throwable" Reflector'getCauseOrElse [#_"Exception" ___e]
        (when (some? (.getCause ___e))
            (ยง return (.getCause ___e))
        )
        ___e
    )

    (defn- #_"RuntimeException" Reflector'throwCauseOrElseException [#_"Exception" ___e]
        (when (some? (.getCause ___e))
            (throw (Util'sneakyThrow (.getCause ___e)))
        )
        (throw (Util'sneakyThrow ___e))
    )

    (defn- #_"String" Reflector'noMethodReport [#_"String" ___methodName, #_"Object" ___target]
        (str "No matching method found: " ___methodName (if (nil? ___target) "" (str " for " (.getClass ___target))))
    )

    (defn #_"Object" Reflector'invokeMatchingMethod [#_"String" ___methodName, #_"List" ___methods, #_"Object" ___target, #_"Object[]" ___args]
        (let [#_"java.lang.reflect.Method" ___m nil]
            (let [#_"Object[]" ___boxedArgs nil]
                (cond (.isEmpty ___methods)
                    (do
                        (throw (ยง unsure IllegalArgumentException. (Reflector'noMethodReport ___methodName, ___target)))
                    )
                    (ร (.size ___methods) == 1)
                    (do
                        (ยง ass ___m (ร (java.lang.reflect.Method) ___methods.get(0)))
                        (ยง ass ___boxedArgs (ร Reflector'boxArgs((.getParameterTypes ___m), ___args)))
                    )
                    :else ;; overloaded w/same arity
                    (do
                        (let [#_"java.lang.reflect.Method" ___foundm nil]
                            (loop-when-recur [#_"Iterator" ___i (.iterator ___methods)] (.hasNext ___i) [___i]
                                (ยง ass ___m (ร (java.lang.reflect.Method) (next ___i)))

                                (let [#_"Class[]" ___params (.getParameterTypes ___m)]
                                    (when (Reflector'isCongruent ___params, ___args)
                                        (when (or (nil? ___foundm) (Compiler'subsumes ___params, (.getParameterTypes ___foundm)))
                                            (ยง ass ___foundm ___m)
                                            (ยง ass ___boxedArgs (Reflector'boxArgs ___params, ___args))
                                        )
                                    )
                                )
                            )
                            (ยง ass ___m ___foundm)
                        )
                    )
                )
                (when (nil? ___m)
                    (throw (ยง unsure IllegalArgumentException. (Reflector'noMethodReport ___methodName, ___target)))
                )

                (when (not (Modifier/isPublic (.getModifiers (.getDeclaringClass ___m))))
                    ;; public method of non-public class, try to find it in hierarchy
                    (let [#_"java.lang.reflect.Method" ___oldm ___m]
                        (ยง ass ___m (ร Reflector'getAsMethodOfPublicBase((.getClass ___target), ___m)))
                        (when (nil? ___m)
                            (throw (IllegalArgumentException. (str "Can't call public method of non-public class: " (.toString ___oldm))))
                        )
                    )
                )
                (try
                    (ร Reflector'prepRet((.getReturnType ___m), ___m.invoke(___target, ___boxedArgs)))
                    (catch Exception ___e
                        (throw (ร Util'sneakyThrow(Reflector'getCauseOrElse(___e))))
                    )
                )
            )
        )
    )

    (defn #_"java.lang.reflect.Method" Reflector'getAsMethodOfPublicBase [#_"Class" ___c, #_"java.lang.reflect.Method" ___m]
        (doseq [#_"Class" ___iface (.getInterfaces ___c)]
            (doseq [#_"java.lang.reflect.Method" ___im (.getMethods ___iface)]
                (when (Reflector'isMatch ___im, ___m)
                    (ยง return ___im)
                )
            )
        )
        (let [#_"Class" ___sc (.getSuperclass ___c)]
            (when (nil? ___sc)
                (ยง return nil)
            )
            (doseq [#_"java.lang.reflect.Method" ___scm (.getMethods ___sc)]
                (when (Reflector'isMatch ___scm, ___m)
                    (ยง return ___scm)
                )
            )
            (Reflector'getAsMethodOfPublicBase ___sc, ___m)
        )
    )

    (defn #_"boolean" Reflector'isMatch [#_"java.lang.reflect.Method" ___lhs, #_"java.lang.reflect.Method" ___rhs]
        (when (or (not (ร ___lhs.getName().equals((.getName ___rhs)))) (not (Modifier/isPublic (.getModifiers (.getDeclaringClass ___lhs)))))
            (ยง return false)
        )

        (let [#_"Class[]" ___types1 (.getParameterTypes ___lhs)]
            (let [#_"Class[]" ___types2 (.getParameterTypes ___rhs)]
                (when (not= (ยง alength ___types1) (ยง alength ___types2))
                    (ยง return false)
                )

                (let [#_"boolean" ___match true]
                    (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___types1)) [(inc ___i)]
                        (when (not (ร ___types1[___i].isAssignableFrom(___types2[___i])))
                            (ยง ass ___match false)
                            (ยง break )
                        )
                    )
                    ___match
                )
            )
        )
    )

    (defn #_"Object" Reflector'invokeConstructor [#_"Class" ___c, #_"Object[]" ___args]
        (try
            (let [#_"Constructor[]" ___allctors (.getConstructors ___c)]
                (let [#_"ArrayList" ___ctors (ArrayList.)]
                    (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___allctors)) [(inc ___i)]
                        (let [#_"Constructor" ___ctor (ยง aget ___allctors ___i)]
                            (when (ร (ยง alength (.getParameterTypes ___ctor)) == (ยง alength ___args))
                                (.add ___ctors, ___ctor)
                            )
                        )
                    )
                    (cond (.isEmpty ___ctors)
                        (do
                            (throw (IllegalArgumentException. (str "No matching ctor found for " ___c)))
                        )
                        (ร (.size ___ctors) == 1)
                        (do
                            (let [#_"Constructor" ___ctor (cast Constructor (.get ___ctors, 0))]
                                (ร ___ctor.newInstance(Reflector'boxArgs((.getParameterTypes ___ctor), ___args)))
                            )
                        )
                        :else ;; overloaded w/same arity
                        (do
                            (loop-when-recur [#_"Iterator" ___iterator (.iterator ___ctors)] (.hasNext ___iterator) [___iterator]
                                (let [#_"Constructor" ___ctor (cast Constructor (next ___iterator))]
                                    (let [#_"Class[]" ___params (.getParameterTypes ___ctor)]
                                        (when (Reflector'isCongruent ___params, ___args)
                                            (let [#_"Object[]" ___boxedArgs (Reflector'boxArgs ___params, ___args)]
                                                (ยง return (.newInstance ___ctor, ___boxedArgs))
                                            )
                                        )
                                    )
                                )
                            )
                            (throw (IllegalArgumentException. (str "No matching ctor found for " ___c)))
                        )
                    )
                )
            )
            (catch Exception ___e
                (throw (ร Util'sneakyThrow(Reflector'getCauseOrElse(___e))))
            )
        )
    )

    (defn #_"Object" Reflector'invokeStaticMethodVariadic [#_"String" ___className, #_"String" ___methodName, #_"Object..." ___args]
        (Reflector'invokeStaticMethod-3s ___className, ___methodName, ___args)
    )

    (defn #_"Object" Reflector'invokeStaticMethod-3s [#_"String" ___className, #_"String" ___methodName, #_"Object[]" ___args]
        (let [#_"Class" ___c (RT'classForName-1 ___className)]
            (Reflector'invokeStaticMethod-3c ___c, ___methodName, ___args)
        )
    )

    (defn #_"Object" Reflector'invokeStaticMethod-3c [#_"Class" ___c, #_"String" ___methodName, #_"Object[]" ___args]
        (when (.equals ___methodName, "new")
            (ยง return (Reflector'invokeConstructor ___c, ___args))
        )
        (let [#_"List" ___methods (ร Reflector'getMethods(___c, (ยง alength ___args), ___methodName, true))]
            (Reflector'invokeMatchingMethod ___methodName, ___methods, nil, ___args)
        )
    )

    (defn #_"Object" Reflector'getStaticField-2s [#_"String" ___className, #_"String" ___fieldName]
        (let [#_"Class" ___c (RT'classForName-1 ___className)]
            (Reflector'getStaticField-2c ___c, ___fieldName)
        )
    )

    (defn #_"Object" Reflector'getStaticField-2c [#_"Class" ___c, #_"String" ___fieldName]
        (let [#_"Field" ___f (Reflector'getField ___c, ___fieldName, true)]
            (when (some? ___f)
                (try
                    (ยง return (ร Reflector'prepRet((.getType ___f), ___f.get(nil))))
                    (catch IllegalAccessException ___e
                        (throw (Util'sneakyThrow ___e))
                    )
                )
            )
            (throw (IllegalArgumentException. (str "No matching field found: " ___fieldName " for " ___c)))
        )
    )

    (defn #_"Object" Reflector'setStaticField-3s [#_"String" ___className, #_"String" ___fieldName, #_"Object" ___val]
        (let [#_"Class" ___c (RT'classForName-1 ___className)]
            (Reflector'setStaticField-3c ___c, ___fieldName, ___val)
        )
    )

    (defn #_"Object" Reflector'setStaticField-3c [#_"Class" ___c, #_"String" ___fieldName, #_"Object" ___val]
        (let [#_"Field" ___f (Reflector'getField ___c, ___fieldName, true)]
            (when (some? ___f)
                (try
                    (ร ___f.set(nil, Reflector'boxArg((.getType ___f), ___val)))
                    (catch IllegalAccessException ___e
                        (throw (Util'sneakyThrow ___e))
                    )
                )
                (ยง return ___val)
            )
            (throw (IllegalArgumentException. (str "No matching field found: " ___fieldName " for " ___c)))
        )
    )

    (defn #_"Object" Reflector'getInstanceField [#_"Object" ___target, #_"String" ___fieldName]
        (let [#_"Class" ___c (.getClass ___target)]
            (let [#_"Field" ___f (Reflector'getField ___c, ___fieldName, false)]
                (when (some? ___f)
                    (try
                        (ยง return (ร Reflector'prepRet((.getType ___f), ___f.get(___target))))
                        (catch IllegalAccessException ___e
                            (throw (Util'sneakyThrow ___e))
                        )
                    )
                )
                (throw (IllegalArgumentException. (str "No matching field found: " ___fieldName " for " (.getClass ___target))))
            )
        )
    )

    (defn #_"Object" Reflector'setInstanceField [#_"Object" ___target, #_"String" ___fieldName, #_"Object" ___val]
        (let [#_"Class" ___c (.getClass ___target)]
            (let [#_"Field" ___f (Reflector'getField ___c, ___fieldName, false)]
                (when (some? ___f)
                    (try
                        (ร ___f.set(___target, Reflector'boxArg((.getType ___f), ___val)))
                        (catch IllegalAccessException ___e
                            (throw (Util'sneakyThrow ___e))
                        )
                    )
                    (ยง return ___val)
                )
                (throw (IllegalArgumentException. (str "No matching field found: " ___fieldName " for " (.getClass ___target))))
            )
        )
    )

    ;; not used as of Clojure 1.6, but left for runtime compatibility with compiled bytecode from older versions
    (defn #_"Object" Reflector'invokeNoArgInstanceMember-2 [#_"Object" ___target, #_"String" ___name]
        (Reflector'invokeNoArgInstanceMember-3 ___target, ___name, false)
    )

    (defn #_"Object" Reflector'invokeNoArgInstanceMember-3 [#_"Object" ___target, #_"String" ___name, #_"boolean" ___requireField]
        (let [#_"Class" ___c (.getClass ___target)]
            (if ___requireField
                (do
                    (let [#_"Field" ___f (Reflector'getField ___c, ___name, false)]
                        (if (some? ___f)
                            (do
                                (Reflector'getInstanceField ___target, ___name)
                            )
                            (do
                                (throw (IllegalArgumentException. (str "No matching field found: " ___name " for " (.getClass ___target))))
                            )
                        )
                    )
                )
                (do
                    (let [#_"List" ___meths (Reflector'getMethods ___c, 0, ___name, false)]
                        (if (pos? (.size ___meths))
                            (do
                                (Reflector'invokeMatchingMethod ___name, ___meths, ___target, RT'EMPTY_ARRAY)
                            )
                            (do
                                (Reflector'getInstanceField ___target, ___name)
                            )
                        )
                    )
                )
            )
        )
    )

    (defn #_"Object" Reflector'invokeInstanceMember-2 [#_"Object" ___target, #_"String" ___name]
        ;; check for field first
        (let [#_"Class" ___c (.getClass ___target)]
            (let [#_"Field" ___f (Reflector'getField ___c, ___name, false)]
                (when (some? ___f) ;; field get
                    (try
                        (ยง return (ร Reflector'prepRet((.getType ___f), ___f.get(___target))))
                        (catch IllegalAccessException ___e
                            (throw (Util'sneakyThrow ___e))
                        )
                    )
                )
                (Reflector'invokeInstanceMethod ___target, ___name, RT'EMPTY_ARRAY)
            )
        )
    )

    (defn #_"Object" Reflector'invokeInstanceMember-3o [#_"String" ___name, #_"Object" ___target, #_"Object" ___arg1]
        ;; check for field first
        (let [#_"Class" ___c (.getClass ___target)]
            (let [#_"Field" ___f (Reflector'getField ___c, ___name, false)]
                (when (some? ___f) ;; field set
                    (try
                        (ร ___f.set(___target, Reflector'boxArg((.getType ___f), ___arg1)))
                        (catch IllegalAccessException ___e
                            (throw (Util'sneakyThrow ___e))
                        )
                    )
                    (ยง return ___arg1)
                )
                (ร Reflector'invokeInstanceMethod(___target, ___name, (object-array [ ___arg1 ])))
            )
        )
    )

    (defn #_"Object" Reflector'invokeInstanceMember-3a [#_"String" ___name, #_"Object" ___target, #_"Object..." ___args]
        (Reflector'invokeInstanceMethod ___target, ___name, ___args)
    )

    (defn #_"Field" Reflector'getField [#_"Class" ___c, #_"String" ___name, #_"boolean" ___getStatics]
        (let [#_"Field[]" ___allfields (.getFields ___c)]
            (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___allfields)) [(inc ___i)]
                (when (and (ร ___name.equals(___allfields[___i].getName())) (ร (ร Modifier/isStatic(___allfields[___i].getModifiers())) == ___getStatics))
                    (ยง return (ยง aget ___allfields ___i))
                )
            )
            nil
        )
    )

    (defn #_"List" Reflector'getMethods [#_"Class" ___c, #_"int" ___arity, #_"String" ___name, #_"boolean" ___getStatics]
        (let [#_"java.lang.reflect.Method[]" ___allmethods (.getMethods ___c)]
            (let [#_"ArrayList" ___methods (ArrayList.)]
                (let [#_"ArrayList" ___bridgeMethods (ArrayList.)]
                    (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___allmethods)) [(inc ___i)]
                        (let [#_"java.lang.reflect.Method" ___method (ยง aget ___allmethods ___i)]
                            (when (and (.equals ___name, (.getName ___method)) (ร (Modifier/isStatic (.getModifiers ___method)) == ___getStatics) (ร (ยง alength (.getParameterTypes ___method)) == ___arity))
                                (try
                                    (if (and (.isBridge ___method) (.equals (ร ___c.getMethod((.getName ___method), (.getParameterTypes ___method))), ___method))
                                        (do
                                            (.add ___bridgeMethods, ___method)
                                        )
                                        (do
                                            (.add ___methods, ___method)
                                        )
                                    )
                                    (catch NoSuchMethodException ___e
                                    )
                                )
                            )
                        )
                    )

                    (when (.isEmpty ___methods)
                        (.addAll ___methods, ___bridgeMethods)
                    )
                    (when (and (not ___getStatics) (.isInterface ___c))
                        (ยง ass ___allmethods (.getMethods Object))
                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___allmethods)) [(inc ___i)]
                            (when (and (.equals ___name, (ร ___allmethods[___i].getName())) (= (ร Modifier/isStatic(___allmethods[___i].getModifiers())) ___getStatics) (= (ยง alength (ร ___allmethods[___i].getParameterTypes())) ___arity))
                                (ร ___methods.add(___allmethods[___i]))
                            )
                        )
                    )
                    ___methods
                )
            )
        )
    )

    (defn #_"Object" Reflector'boxArg [#_"Class" ___paramType, #_"Object" ___arg]
        (cond (not (.isPrimitive ___paramType))
            (do
                (ยง return (.cast ___paramType, ___arg))
            )
            (= ___paramType Boolean/TYPE)
            (do
                (ยง return (.cast Boolean, ___arg))
            )
            (= ___paramType Character/TYPE)
            (do
                (ยง return (.cast Character, ___arg))
            )
            (instance? Number ___arg)
            (do
                (let [#_"Number" ___n (cast Number ___arg)]
                    (cond (= ___paramType Integer/TYPE)
                        (do
                            (ยง return (.intValue ___n))
                        )
                        (= ___paramType Float/TYPE)
                        (do
                            (ยง return (.floatValue ___n))
                        )
                        (= ___paramType Double/TYPE)
                        (do
                            (ยง return (.doubleValue ___n))
                        )
                        (= ___paramType Long/TYPE)
                        (do
                            (ยง return (.longValue ___n))
                        )
                        (= ___paramType Short/TYPE)
                        (do
                            (ยง return (.shortValue ___n))
                        )
                        (= ___paramType Byte/TYPE)
                        (do
                            (ยง return (.byteValue ___n))
                        )
                    )
                )
            )
        )
        (throw (IllegalArgumentException. (str "Unexpected param type, expected: " ___paramType ", given: " (.getName (.getClass ___arg)))))
    )

    (defn #_"Object[]" Reflector'boxArgs [#_"Class[]" ___params, #_"Object[]" ___args]
        (when (zero? (ยง alength ___params))
            (ยง return nil)
        )
        (let [#_"Object[]" ___ret (make-array Object (ยง alength ___params))]
            (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___params)) [(inc ___i)]
                (let [#_"Object" ___arg (ยง aget ___args ___i)]
                    (let [#_"Class" ___paramType (ยง aget ___params ___i)]
                        (ยง ass (ยง aget ___ret ___i) (Reflector'boxArg ___paramType, ___arg))
                    )
                )
            )
            ___ret
        )
    )

    (defn #_"boolean" Reflector'paramArgTypeMatch [#_"Class" ___paramType, #_"Class" ___argType]
        (when (nil? ___argType)
            (ยง return (not (.isPrimitive ___paramType)))
        )
        (when (or (ร ___paramType == ___argType) (.isAssignableFrom ___paramType, ___argType))
            (ยง return true)
        )
        (cond (= ___paramType Integer/TYPE)
            (do
                (ยง return (or (ร ___argType == Integer) (ร ___argType == Long/TYPE) (ร ___argType == Long) (ร ___argType == Short/TYPE) (ร ___argType == Byte/TYPE)))
            )
            (= ___paramType Float/TYPE)
            (do
                (ยง return (or (ร ___argType == Float) (ร ___argType == Double/TYPE)))
            )
            (= ___paramType Double/TYPE)
            (do
                (ยง return (or (ร ___argType == Double) (ร ___argType == Float/TYPE)))
            )
            (= ___paramType Long/TYPE)
            (do
                (ยง return (or (ร ___argType == Long) (ร ___argType == Integer/TYPE) (ร ___argType == Short/TYPE) (ร ___argType == Byte/TYPE)))
            )
            (= ___paramType Character/TYPE)
            (do
                (ยง return (= ___argType Character))
            )
            (= ___paramType Short/TYPE)
            (do
                (ยง return (= ___argType Short))
            )
            (= ___paramType Byte/TYPE)
            (do
                (ยง return (= ___argType Byte))
            )
            (= ___paramType Boolean/TYPE)
            (do
                (ยง return (= ___argType Boolean))
            )
        )
        false
    )

    (defn #_"boolean" Reflector'isCongruent [#_"Class[]" ___params, #_"Object[]" ___args]
        (let [#_"boolean" ___ret false]
            (when (nil? ___args)
                (ยง return (zero? (ยง alength ___params)))
            )
            (when (= (ยง alength ___params) (ยง alength ___args))
                (ยง ass ___ret true)
                (loop-when-recur [#_"int" ___i 0] (and ___ret (< ___i (ยง alength ___params))) [(inc ___i)]
                    (let [#_"Object" ___arg (ยง aget ___args ___i)]
                        (let [#_"Class" ___argType (when (some? ___arg) (.getClass ___arg))]
                            (let [#_"Class" ___paramType (ยง aget ___params ___i)]
                                (ยง ass ___ret (Reflector'paramArgTypeMatch ___paramType, ___argType))
                            )
                        )
                    )
                )
            )
            ___ret
        )
    )

    (defn #_"Object" Reflector'prepRet [#_"Class" ___c, #_"Object" ___x]
        (when (not (or (.isPrimitive ___c) (ร ___c == Boolean)))
            (ยง return ___x)
        )
        (when (instance? Boolean ___x)
            (ยง return (if (cast Boolean ___x) Boolean/TRUE Boolean/FALSE))
        )
        ___x
    )
)
)

(java-ns cloiure.lang.Repeat

(class-ns Repeat (ยง extends ASeq) (ยง implements IReduce)
    (def- #_"long" Repeat'INFINITE -1)

    (defn- #_"Repeat" Repeat'init []
        (hash-map
            #_"long" :count 0 ;; always INFINITE or >0
            #_"Object" :val nil
            #_volatile
            #_"ISeq" :_next nil ;; cached
        )
    )

    (defn- #_"Repeat" Repeat'new-2 [#_"long" ___count, #_"Object" ___val]
        (let [this (merge (ASeq'new) (Repeat'init))]
            (ยง ass (:count this) ___count)
            (ยง ass (:val this) ___val)
            this
        )
    )

    (defn- #_"Repeat" Repeat'new-3 [#_"IPersistentMap" ___meta, #_"long" ___count, #_"Object" ___val]
        (let [this (merge (ASeq'new ___meta) (Repeat'init))]
            (ยง ass (:count this) ___count)
            (ยง ass (:val this) ___val)
            this
        )
    )

    (defn #_"Repeat" Repeat'create-1 [#_"Object" ___val]
        (Repeat'new-2 Repeat'INFINITE, ___val)
    )

    (defn #_"ISeq" Repeat'create-2 [#_"long" ___count, #_"Object" ___val]
        (when (<= ___count 0)
            (ยง return PersistentList'EMPTY)
        )
        (Repeat'new-2 ___count, ___val)
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"Repeat" this]
        (:val this)
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"Repeat" this]
        (when (nil? (:_next this))
            (cond (> (:count this) 1)
                (do
                    (ยง ass (:_next this) (ร Repeat'new-2((:count this) - 1, (:val this))))
                )
                (ร (:count this) == Repeat'INFINITE)
                (do
                    (ยง ass (:_next this) this)
                )
            )
        )
        (:_next this)
    )

    #_method
    (ยง defn #_"Repeat" (ยง method withMeta) [#_"Repeat" this, #_"IPersistentMap" ___meta]
        (Repeat'new-3 ___meta, (:count this), (:val this))
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"Repeat" this, #_"IFn" ___f]
        (let [#_"Object" ___ret (:val this)]
            (if (ร (:count this) == Repeat'INFINITE)
                (do
                    (while true
                        (ยง ass ___ret (.invoke ___f, ___ret, (:val this)))
                        (when (RT'isReduced ___ret)
                            (ยง return (.deref (cast' IDeref ___ret)))
                        )
                    )
                )
                (do
                    (loop-when-recur [#_"long" ___i 1] (< ___i (:count this)) [(inc ___i)]
                        (ยง ass ___ret (.invoke ___f, ___ret, (:val this)))
                        (when (RT'isReduced ___ret)
                            (ยง return (.deref (cast' IDeref ___ret)))
                        )
                    )
                    ___ret
                )
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method reduce) [#_"Repeat" this, #_"IFn" ___f, #_"Object" ___start]
        (let [#_"Object" ___ret ___start]
            (if (ร (:count this) == Repeat'INFINITE)
                (do
                    (while true
                        (ยง ass ___ret (.invoke ___f, ___ret, (:val this)))
                        (when (RT'isReduced ___ret)
                            (ยง return (.deref (cast' IDeref ___ret)))
                        )
                    )
                )
                (do
                    (loop-when-recur [#_"long" ___i 0] (< ___i (:count this)) [(inc ___i)]
                        (ยง ass ___ret (.invoke ___f, ___ret, (:val this)))
                        (when (RT'isReduced ___ret)
                            (ยง return (.deref (cast' IDeref ___ret)))
                        )
                    )
                    ___ret
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.RestFn

#_stateless
#_abstract
(class-ns RestFn (ยง extends AFunction)
    #_protected
    (defn #_"RestFn" RestFn'new []
        (AFunction'new)
    )

    #_abstract
    (ยง defn #_"int" (ยง method getRequiredArity) [#_"RestFn" this])

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___args]
        nil
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method doInvoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___arg20, #_"Object" ___args]
        nil
    )

    #_method
    (ยง defn #_"Object" (ยง method applyTo) [#_"RestFn" this, #_"ISeq" ___args]
        (when (ร RT'boundedLength(___args, (.getRequiredArity this)) <= (.getRequiredArity this))
            (ยง return (ร AFn'applyToHelper(this, Util'ret1(___args, (ยง ass ___args nil)))))
        )
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ยง return (ร this.doInvoke(Util'ret1(___args, (ยง ass ___args nil)))))
            )
            (ยง case 1)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 2)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 3)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 4)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 5)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 6)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 7)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 8)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 9)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 10)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 11)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 12)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 13)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 14)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 15)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 16)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 17)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 18)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 19)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
            (ยง case 20)
            (do
                (ยง return (ร this.doInvoke((first ___args),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        (ยง ass ___args (next ___args)).first(),
                        Util'ret1((next ___args), (ยง ass ___args nil)))))
            )
        )
        (.throwArity this, -1)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (.doInvoke this, nil)
            )
            (ยง default )
            (do
                (.throwArity this, 0)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(ArraySeq'create-1(Util'ret1(___arg1, (ยง ass ___arg1 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 1)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    ArraySeq'create-1(
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 2)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    ArraySeq'create-1(
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    ArraySeq'create-1(
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 3)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    ArraySeq'create-1(
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    ArraySeq'create-1(
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    ArraySeq'create-1(
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 4)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 5)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 6)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    ArraySeq'create-1(
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 7)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    ArraySeq'create-1(
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 8)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    ArraySeq'create-1(
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)))))
            )
            (ยง case 9)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 9)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        Util'ret1(___arg10, (ยง ass ___arg10 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    ArraySeq'create-1(
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        Util'ret1(___arg10, (ยง ass ___arg10 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)))))
            )
            (ยง case 9)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)))))
            )
            (ยง case 10)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 10)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        Util'ret1(___arg11, (ยง ass ___arg11 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)))))
            )
            (ยง case 9)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)))))
            )
            (ยง case 10)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)))))
            )
            (ยง case 11)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 11)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        Util'ret1(___arg12, (ยง ass ___arg12 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)))))
            )
            (ยง case 9)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)))))
            )
            (ยง case 10)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)))))
            )
            (ยง case 11)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)))))
            )
            (ยง case 12)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 12)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        Util'ret1(___arg13, (ยง ass ___arg13 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)))))
            )
            (ยง case 9)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)))))
            )
            (ยง case 10)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)))))
            )
            (ยง case 11)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)))))
            )
            (ยง case 12)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)))))
            )
            (ยง case 13)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 13)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 9)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 10)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 11)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 12)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 13)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)))))
            )
            (ยง case 14)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 14)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 9)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 10)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 11)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 12)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 13)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 14)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)))))
            )
            (ยง case 15)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 15)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                        Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 9)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 10)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 11)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 12)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 13)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 14)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 15)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)))))
            )
            (ยง case 16)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 16)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                        Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                        Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 9)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 10)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 11)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 12)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 13)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 14)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 15)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 16)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)))))
            )
            (ยง case 17)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 17)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                        Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                        Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                        Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 9)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 10)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 11)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 12)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 13)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 14)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 15)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 16)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 17)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)))))
            )
            (ยง case 18)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                    Util'ret1(___arg18, (ยง ass ___arg18 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 18)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                        Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                        Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                        Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                        Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 9)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 10)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 11)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 12)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 13)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 14)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 15)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 16)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 17)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 18)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                    Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)))))
            )
            (ยง case 19)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                    Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                    Util'ret1(___arg19, (ยง ass ___arg19 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 19)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___arg20]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ArraySeq'create-1(
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                        Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                        Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                        Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                        Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                        Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 9)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 10)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 11)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 12)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 13)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 14)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 15)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 16)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 17)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 18)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                    Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 19)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                    Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                    Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                        ArraySeq'create-1(
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 20)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                    Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                    Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                    Util'ret1(___arg20, (ยง ass ___arg20 nil)), nil))
            )
            (ยง default )
            (do
                (.throwArity this, 20)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"RestFn" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___arg20, #_"Object..." ___args]
        (ยง switch (.getRequiredArity this)
            (ยง case 0)
            (do
                (ร this.doInvoke(
                    ontoArrayPrepend(___args,
                        Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                        Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                        Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                        Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                        Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                        Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 1)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 2)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 3)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 4)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 5)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 6)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 7)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 8)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 9)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 10)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 11)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 12)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 13)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 14)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 15)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 16)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 17)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 18)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                    Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 19)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                    Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                    Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                        ontoArrayPrepend(___args,
                            Util'ret1(___arg20, (ยง ass ___arg20 nil)))))
            )
            (ยง case 20)
            (do
                (ร this.doInvoke(
                    Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                    Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                    Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                    Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                    Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                    Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                    Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                    Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                    Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                    Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                    Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                    Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                    Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                    Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                    Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                    Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                    Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                    Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                    Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                    Util'ret1(___arg20, (ยง ass ___arg20 nil)),
                        ArraySeq'create-1(___args)))
            )
            (ยง default )
            (do
                (.throwArity this, 21)
            )
        )
    )

    #_protected
    (defn #_"ISeq" RestFn'ontoArrayPrepend [#_"Object[]" ___array, #_"Object..." ___args]
        (let [#_"ISeq" ___ret (ArraySeq'create-1 ___array)]
            (loop-when-recur [#_"int" ___i (- (ยง alength ___args) 1)] (>= ___i 0) [(dec ___i)]
                (ยง ass ___ret (ร RT'cons(___args[___i], ___ret)))
            )
            ___ret
        )
    )

    #_protected
    (defn #_"ISeq" RestFn'findKey [#_"Object" ___key, #_"ISeq" ___args]
        (while (some? ___args)
            (when (ร ___key == (first ___args))
                (ยง return (next ___args))
            )
            (ยง ass ___args (RT'next ___args))
            (ยง ass ___args (RT'next ___args))
        )
        nil
    )
)
)

(java-ns cloiure.lang.Reversible

(ยง defprotocol Reversible
    #_abstract
    (#_"ISeq" Reversible'''(ยง method rseq) [#_"Reversible" this])
)
)

(java-ns cloiure.lang.RT

(ยง import java.net.MalformedURLException)
(ยง import java.util.concurrent.atomic.AtomicInteger)
(ยง import java.util.concurrent.Callable)
(ยง import java.util.*)
(ยง import java.util.regex.Matcher)
(ยง import java.util.regex.Pattern)
(ยง import java.io.*)
(ยง import java.lang.reflect.Array)
(ยง import java.math.BigDecimal)
(ยง import java.math.BigInteger)
(ยง import java.security.AccessController)
(ยง import java.security.PrivilegedAction)
(ยง import java.net.URL)
(ยง import java.net.JarURLConnection)
(ยง import java.nio.charset.Charset)
(ยง import java.net.URLConnection)

#_private
#_closure
(class-ns DefaultComparator (ยง implements Comparator)
    (defn #_"DefaultComparator" DefaultComparator'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"int" (ยง method compare) [#_"DefaultComparator" this, #_"Object" ___o1, #_"Object" ___o2]
        (Util'compare ___o1, ___o2)
    )
)

#_stateless
(class-ns RT
    (def #_"Boolean" RT'T Boolean/TRUE)
    (def #_"Boolean" RT'F Boolean/FALSE)
    (def #_"String" RT'LOADER_SUFFIX "__init")

    ;; simple-symbol->class
    (def #_"IPersistentMap" RT'DEFAULT_IMPORTS (ร map(
        (object-array [
            (Symbol'intern-1 "Boolean")                         Boolean
            (Symbol'intern-1 "Byte")                            Byte
            (Symbol'intern-1 "Character")                       Character
            (Symbol'intern-1 "Class")                           Class
            (Symbol'intern-1 "ClassLoader")                     ClassLoader
            (Symbol'intern-1 "Compiler")                        Compiler
            (Symbol'intern-1 "Double")                          Double
            (Symbol'intern-1 "Enum")                            Enum
            (Symbol'intern-1 "Float")                           Float
            (Symbol'intern-1 "InheritableThreadLocal")          InheritableThreadLocal
            (Symbol'intern-1 "Integer")                         Integer
            (Symbol'intern-1 "Long")                            Long
            (Symbol'intern-1 "Math")                            Math
            (Symbol'intern-1 "Number")                          Number
            (Symbol'intern-1 "Object")                          Object
            (Symbol'intern-1 "Package")                         Package
            (Symbol'intern-1 "Process")                         Process
            (Symbol'intern-1 "ProcessBuilder")                  ProcessBuilder
            (Symbol'intern-1 "Runtime")                         Runtime
            (Symbol'intern-1 "RuntimePermission")               RuntimePermission
            (Symbol'intern-1 "SecurityManager")                 SecurityManager
            (Symbol'intern-1 "Short")                           Short
            (Symbol'intern-1 "StackTraceElement")               StackTraceElement
            (Symbol'intern-1 "StrictMath")                      StrictMath
            (Symbol'intern-1 "String")                          String
            (Symbol'intern-1 "StringBuffer")                    StringBuffer
            (Symbol'intern-1 "StringBuilder")                   StringBuilder
            (Symbol'intern-1 "System")                          System
            (Symbol'intern-1 "Thread")                          Thread
            (Symbol'intern-1 "ThreadGroup")                     ThreadGroup
            (Symbol'intern-1 "ThreadLocal")                     ThreadLocal
            (Symbol'intern-1 "Throwable")                       Throwable
            (Symbol'intern-1 "Void")                            Void
            (Symbol'intern-1 "Appendable")                      Appendable
            (Symbol'intern-1 "CharSequence")                    CharSequence
            (Symbol'intern-1 "Cloneable")                       Cloneable
            (Symbol'intern-1 "Comparable")                      Comparable
            (Symbol'intern-1 "Iterable")                        Iterable
            (Symbol'intern-1 "Readable")                        Readable
            (Symbol'intern-1 "Runnable")                        Runnable
            (Symbol'intern-1 "Callable")                        Callable
            (Symbol'intern-1 "BigInteger")                      BigInteger
            (Symbol'intern-1 "BigDecimal")                      BigDecimal
            (Symbol'intern-1 "ArithmeticException")             ArithmeticException
            (Symbol'intern-1 "ArrayIndexOutOfBoundsException")  ArrayIndexOutOfBoundsException
            (Symbol'intern-1 "ArrayStoreException")             ArrayStoreException
            (Symbol'intern-1 "ClassCastException")              ClassCastException
            (Symbol'intern-1 "ClassNotFoundException")          ClassNotFoundException
            (Symbol'intern-1 "CloneNotSupportedException")      CloneNotSupportedException
            (Symbol'intern-1 "EnumConstantNotPresentException") EnumConstantNotPresentException
            (Symbol'intern-1 "Exception")                       Exception
            (Symbol'intern-1 "IllegalAccessException")          IllegalAccessException
            (Symbol'intern-1 "IllegalArgumentException")        IllegalArgumentException
            (Symbol'intern-1 "IllegalMonitorStateException")    IllegalMonitorStateException
            (Symbol'intern-1 "IllegalStateException")           IllegalStateException
            (Symbol'intern-1 "IllegalThreadStateException")     IllegalThreadStateException
            (Symbol'intern-1 "IndexOutOfBoundsException")       IndexOutOfBoundsException
            (Symbol'intern-1 "InstantiationException")          InstantiationException
            (Symbol'intern-1 "InterruptedException")            InterruptedException
            (Symbol'intern-1 "NegativeArraySizeException")      NegativeArraySizeException
            (Symbol'intern-1 "NoSuchFieldException")            NoSuchFieldException
            (Symbol'intern-1 "NoSuchMethodException")           NoSuchMethodException
            (Symbol'intern-1 "NullPointerException")            NullPointerException
            (Symbol'intern-1 "NumberFormatException")           NumberFormatException
            (Symbol'intern-1 "RuntimeException")                RuntimeException
            (Symbol'intern-1 "SecurityException")               SecurityException
            (Symbol'intern-1 "StringIndexOutOfBoundsException") StringIndexOutOfBoundsException
            (Symbol'intern-1 "TypeNotPresentException")         TypeNotPresentException
            (Symbol'intern-1 "UnsupportedOperationException")   UnsupportedOperationException
            (Symbol'intern-1 "AbstractMethodError")             AbstractMethodError
            (Symbol'intern-1 "AssertionError")                  AssertionError
            (Symbol'intern-1 "ClassCircularityError")           ClassCircularityError
            (Symbol'intern-1 "ClassFormatError")                ClassFormatError
            (Symbol'intern-1 "Error")                           Error
            (Symbol'intern-1 "ExceptionInInitializerError")     ExceptionInInitializerError
            (Symbol'intern-1 "IllegalAccessError")              IllegalAccessError
            (Symbol'intern-1 "IncompatibleClassChangeError")    IncompatibleClassChangeError
            (Symbol'intern-1 "InstantiationError")              InstantiationError
            (Symbol'intern-1 "InternalError")                   InternalError
            (Symbol'intern-1 "LinkageError")                    LinkageError
            (Symbol'intern-1 "NoClassDefFoundError")            NoClassDefFoundError
            (Symbol'intern-1 "NoSuchFieldError")                NoSuchFieldError
            (Symbol'intern-1 "NoSuchMethodError")               NoSuchMethodError
            (Symbol'intern-1 "OutOfMemoryError")                OutOfMemoryError
            (Symbol'intern-1 "StackOverflowError")              StackOverflowError
            (Symbol'intern-1 "ThreadDeath")                     ThreadDeath
            (Symbol'intern-1 "UnknownError")                    UnknownError
            (Symbol'intern-1 "UnsatisfiedLinkError")            UnsatisfiedLinkError
            (Symbol'intern-1 "UnsupportedClassVersionError")    UnsupportedClassVersionError
            (Symbol'intern-1 "VerifyError")                     VerifyError
            (Symbol'intern-1 "VirtualMachineError")             VirtualMachineError
            (Symbol'intern-1 "Thread$UncaughtExceptionHandler") Thread$UncaughtExceptionHandler
            (Symbol'intern-1 "Thread$State")                    Thread$State
            (Symbol'intern-1 "Deprecated")                      Deprecated
            (Symbol'intern-1 "Override")                        Override
            (Symbol'intern-1 "SuppressWarnings")                SuppressWarnings
        ])
    )))

    ;; single instance of UTF-8 Charset, so as to avoid catching UnsupportedCharsetExceptions everywhere
    (def #_"Charset" RT'UTF8 (Charset/forName "UTF-8"))

    (defn #_"Object" RT'readTrueFalseUnknown [#_"String" ___s]
        (cond (.equals ___s, "true")
            (do
                (ยง return Boolean/TRUE)
            )
            (.equals ___s, "false")
            (do
                (ยง return Boolean/FALSE)
            )
        )
        (Keyword'intern-2 nil, "unknown")
    )

    (def #_"Namespace" RT'CLOIURE_NS (ร Namespace'findOrCreate(Symbol'intern-1("cloiure.core"))))
    (def #_"Var" RT'OUT (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*out*"), (OutputStreamWriter. System/out)).setDynamic()))
    (def #_"Var" RT'IN (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*in*"), LineNumberingPushbackReader'new-1((InputStreamReader. System/in))).setDynamic()))
    (def #_"Var" RT'ERR (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*err*"), (PrintWriter. (OutputStreamWriter. System/err), true)).setDynamic()))
    (ยง def #_"Keyword" RT'TAG_KEY (Keyword'intern-2 nil, "tag"))
    (ยง def #_"Keyword" RT'CONST_KEY (Keyword'intern-2 nil, "const"))
    (def #_"Var" RT'AGENT (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*agent*"), nil).setDynamic()))
    (def #_"Object" RT'readeval (ร readTrueFalseUnknown(System/getProperty("cloiure.read.eval", "true"))))
    (def #_"Var" RT'READEVAL (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*read-eval*"), readeval).setDynamic()))
    (def #_"Var" RT'DATA_READERS (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*data-readers*"), RT'map()).setDynamic()))
    (def #_"Var" RT'DEFAULT_DATA_READER_FN (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*default-data-reader-fn*"), RT'map()).setDynamic()))
    (def #_"Var" RT'DEFAULT_DATA_READERS (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("default-data-readers"), RT'map())))
    (def #_"Var" RT'SUPPRESS_READ (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*suppress-read*"), nil).setDynamic()))
    (def #_"Var" RT'ASSERT (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*assert*"), RT'T).setDynamic()))
    (def #_"Var" RT'MATH_CONTEXT (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*math-context*"), nil).setDynamic()))
    (ยง def #_"Keyword" RT'LINE_KEY (Keyword'intern-2 nil, "line"))
    (ยง def #_"Keyword" RT'COLUMN_KEY (Keyword'intern-2 nil, "column"))
    (ยง def #_"Keyword" RT'FILE_KEY (Keyword'intern-2 nil, "file"))
    (ยง def #_"Keyword" RT'DECLARED_KEY (Keyword'intern-2 nil, "declared"))
    (ยง def #_"Keyword" RT'DOC_KEY (Keyword'intern-2 nil, "doc"))
    (def #_"Var" RT'USE_CONTEXT_CLASSLOADER (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*use-context-classloader*"), RT'T).setDynamic()))
    ;; boolean
    (def #_"Var" RT'UNCHECKED_MATH (ร Var'intern-3(Namespace'findOrCreate(Symbol'intern-1("cloiure.core")), Symbol'intern-1("*unchecked-math*"), Boolean/FALSE).setDynamic()))

    (ยง def #_"Symbol" RT'LOAD_FILE (Symbol'intern-1 "load-file"))
    (ยง def #_"Symbol" RT'IN_NAMESPACE (Symbol'intern-1 "in-ns"))
    (ยง def #_"Symbol" RT'NAMESPACE (Symbol'intern-1 "ns"))
    (ยง def #_"Symbol" RT'IDENTICAL (Symbol'intern-1 "identical?"))
    (def #_"Var" RT'CMD_LINE_ARGS (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*command-line-args*"), nil).setDynamic()))
    ;; symbol
    (def #_"Var" RT'CURRENT_NS (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*ns*"), RT'CLOIURE_NS).setDynamic()))

    (def #_"Var" RT'FLUSH_ON_NEWLINE (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*flush-on-newline*"), RT'T).setDynamic()))
    (def #_"Var" RT'PRINT_META (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*print-meta*"), RT'F).setDynamic()))
    (def #_"Var" RT'PRINT_READABLY (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*print-readably*"), RT'T).setDynamic()))
    (def #_"Var" RT'PRINT_DUP (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*print-dup*"), RT'F).setDynamic()))
    (def #_"Var" RT'WARN_ON_REFLECTION (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*warn-on-reflection*"), RT'F).setDynamic()))
    (def #_"Var" RT'ALLOW_UNRESOLVED_VARS (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*allow-unresolved-vars*"), RT'F).setDynamic()))
    (def #_"Var" RT'READER_RESOLVER (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*reader-resolver*"), nil).setDynamic()))

    (def #_"Var" RT'IN_NS_VAR (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("in-ns"), RT'F)))
    (def #_"Var" RT'NS_VAR (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("ns"), RT'F)))
    (def #_"Var" RT'FN_LOADER_VAR (ร Var'intern-3(RT'CLOIURE_NS, Symbol'intern-1("*fn-loader*"), nil).setDynamic()))
    (def #_"Var" RT'PRINT_INITIALIZED (ร Var'intern-2n(RT'CLOIURE_NS, Symbol'intern-1("print-initialized"))))
    (def #_"Var" RT'PR_ON (ร Var'intern-2n(RT'CLOIURE_NS, Symbol'intern-1("pr-on"))))

    (def #_"IFn" RT'inNamespace
        (ยง reify AFn()
            #_method
            (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1]
                (let [#_"Symbol" ___nsname (cast' Symbol ___arg1)]
                    (let [#_"Namespace" ___ns (Namespace'findOrCreate ___nsname)]
                        (.set RT'CURRENT_NS, ___ns)
                        ___ns
                    )
                )
            )
        )
    )

    (def #_"IFn" RT'bootNamespace
        (ยง reify AFn()
            #_method
            (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" _____form, #_"Object" _____env, #_"Object" ___arg1]
                (let [#_"Symbol" ___nsname (cast' Symbol ___arg1)]
                    (let [#_"Namespace" ___ns (Namespace'findOrCreate ___nsname)]
                        (.set RT'CURRENT_NS, ___ns)
                        ___ns
                    )
                )
            )
        )
    )

    (defn #_"List<String>" RT'processCommandLine [#_"String[]" ___args]
        (let [#_"List<String>" ___arglist (Arrays/asList ___args)]
            (let [#_"int" ___split (.indexOf ___arglist, "--")]
                (when (>= ___split 0)
                    (ร RT'CMD_LINE_ARGS.bindRoot(RT'seq(___arglist.subList(___split + 1, (ยง alength ___args)))))
                    (ยง return (.subList ___arglist, 0, ___split))
                )
                ___arglist
            )
        )
    )

    ;; duck typing stderr plays nice with e.g. swank
    (defn #_"PrintWriter" RT'errPrintWriter []
        (let [#_"Writer" ___w (cast Writer (.deref RT'ERR))]
            (if (instance? PrintWriter ___w)
                (do
                    (cast PrintWriter ___w)
                )
                (do
                    (ยง unsure PrintWriter. ___w)
                )
            )
        )
    )

    (def #_"Object[]" RT'EMPTY_ARRAY (make-array Object 0))
    (ยง def #_"Comparator" RT'DEFAULT_COMPARATOR (DefaultComparator'new))

    (def #_"AtomicInteger" RT'ID (AtomicInteger. 1))

    (defn #_"void" RT'addURL [#_"Object" ___url] #_(ยง throws MalformedURLException)
        (let [#_"URL" ___u (if (instance? String ___url) (URL. (cast String ___url)) (cast URL ___url))]
            (let [#_"ClassLoader" ___ccl (ร Thread/currentThread().getContextClassLoader())]
                (if (ยง instance? DynamicClassLoader ___ccl)
                    (do
                        (.addURL (cast' DynamicClassLoader ___ccl), ___u)
                    )
                    (do
                        (throw (IllegalAccessError. "Context classloader is not a DynamicClassLoader"))
                    )
                )
                nil
            )
        )
    )

    (def #_"boolean" RT'CHECK_SPEC_ASSERTS false #_"cloiure.spec.check-asserts")
    (def #_"boolean" RT'INSTRUMENT_MACROS true #_"cloiure.spec.skip-macros")
    #_volatile
    (def #_"boolean" RT'CHECK_SPECS false)

    (ยง static
        (let [#_"Keyword" ___arglistskw (Keyword'intern-2 nil, "arglists")]
            (let [#_"Symbol" ___namesym (Symbol'intern-1 "name")]
                (ร RT'OUT.setTag(Symbol'intern-1("java.io.Writer")))
                (ร RT'CURRENT_NS.setTag(Symbol'intern-1("cloiure.lang.Namespace")))
                (ร RT'AGENT.setMeta(map(RT'DOC_KEY, "The agent currently running an action on this thread, else nil")))
                (ร RT'AGENT.setTag(Symbol'intern-1("cloiure.lang.Agent")))
                (ร RT'MATH_CONTEXT.setTag(Symbol'intern-1("java.math.MathContext")))
                (let [#_"Var" ___nv (Var'intern-3 RT'CLOIURE_NS, RT'NAMESPACE, bootNamespace)]
                    (.setMacro ___nv)
                    (ยง let [#_"Var" ___v]
                        (ยง ass ___v (Var'intern-3 RT'CLOIURE_NS, RT'IN_NAMESPACE, inNamespace))
                        (ร ___v.setMeta(map(RT'DOC_KEY, "Sets *ns* to the namespace named by the symbol, creating it if needed.", ___arglistskw, list(vector(___namesym)))))
                        (ยง ass ___v (ร Var'intern-3(RT'CLOIURE_NS, RT'LOAD_FILE,
                                (ยง reify AFn()
                                    #_method
                                    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___arg1]
                                        (try
                                            (Compiler'loadFile (cast String ___arg1))
                                            (catch IOException ___e
                                                (throw (Util'sneakyThrow ___e))
                                            )
                                        )
                                    )
                                )
                            ))
                        )
                        (ร ___v.setMeta(map(RT'DOC_KEY, "Sequentially read and evaluate the set of forms contained in the file.", ___arglistskw, list(vector(___namesym)))))
                        (try
                            (doInit)
                            (catch Exception ___e
                                (throw (Util'sneakyThrow ___e))
                            )
                        )

                        (ยง ass RT'CHECK_SPECS RT'INSTRUMENT_MACROS)
                    )
                )
            )
        )
    )

    (defn #_"Keyword" RT'keyword [#_"String" ___ns, #_"String" ___name]
        (Keyword'intern (Symbol'intern-2 ___ns, ___name))
    )

    (defn #_"Var" RT'var-2 [#_"String" ___ns, #_"String" ___name]
        (ร Var'intern-2n(Namespace'findOrCreate(Symbol'intern-2(nil, ___ns)), Symbol'intern-2(nil, ___name)))
    )

    (defn #_"Var" RT'var-3 [#_"String" ___ns, #_"String" ___name, #_"Object" ___init]
        (ร Var'intern-3(Namespace'findOrCreate(Symbol'intern-2(nil, ___ns)), Symbol'intern-2(nil, ___name), ___init))
    )

    (defn #_"void" RT'loadResourceScript-1 [#_"String" ___name] #_(ยง throws IOException)
        (RT'loadResourceScript-2s ___name, true)
        nil
    )

    (defn #_"void" RT'maybeLoadResourceScript [#_"String" ___name] #_(ยง throws IOException)
        (RT'loadResourceScript-2s ___name, false)
        nil
    )

    (defn #_"void" RT'loadResourceScript-2s [#_"String" ___name, #_"boolean" ___failIfNotFound] #_(ยง throws IOException)
        (ร RT'loadResourceScript-3((ยง class RT), ___name, ___failIfNotFound))
        nil
    )

    (defn #_"void" RT'loadResourceScript-2c [#_"Class" ___c, #_"String" ___name] #_(ยง throws IOException)
        (RT'loadResourceScript-3 ___c, ___name, true)
        nil
    )

    (defn #_"void" RT'loadResourceScript-3 [#_"Class" ___c, #_"String" ___name, #_"boolean" ___failIfNotFound] #_(ยง throws IOException)
        (let [#_"int" ___slash (.lastIndexOf ___name, \/)]
            (let [#_"String" ___file (if (>= ___slash 0) (ร ___name.substring(___slash + 1)) ___name)]
                (let [#_"InputStream" ___ins (ร resourceAsStream(baseLoader(), ___name))]
                    (cond (some? ___ins)
                        (do
                            (try
                                (Compiler'load-3 (InputStreamReader. ___ins, RT'UTF8), ___name, ___file)
                                (finally
                                    (.close ___ins)
                                )
                            )
                        )
                        ___failIfNotFound
                        (do
                            (throw (FileNotFoundException. (str "Could not locate Cloiure resource on classpath: " ___name)))
                        )
                    )
                    nil
                )
            )
        )
    )

    (defn #_"long" RT'lastModified [#_"URL" ___url, #_"String" ___libfile] #_(ยง throws IOException)
        (let [#_"URLConnection" ___connection (.openConnection ___url)]
            (try
                (if (ร (.getProtocol ___url).equals("jar"))
                    (do
                        (ร (cast JarURLConnection ___connection).getJarFile().getEntry(___libfile).getTime())
                    )
                    (do
                        (.getLastModified ___connection)
                    )
                )
                (finally
                    (let [#_"InputStream" ___ins (.getInputStream ___connection)]
                        (when (some? ___ins)
                            (.close ___ins)
                        )
                    )
                )
            )
        )
    )

    (defn #_"void" RT'compile [#_"String" ___cljfile] #_(ยง throws IOException)
        (let [#_"InputStream" ___ins (ร resourceAsStream(baseLoader(), ___cljfile))]
            (if (some? ___ins)
                (do
                    (try
                        (ร Compiler'compile((InputStreamReader. ___ins, RT'UTF8), ___cljfile, ___cljfile.substring(1 + ___cljfile.lastIndexOf("/"))))
                        (finally
                            (.close ___ins)
                        )
                    )
                )
                (do
                    (throw (FileNotFoundException. (str "Could not locate Cloiure resource on classpath: " ___cljfile)))
                )
            )
            nil
        )
    )

    (defn #_"void" RT'load-1 [#_"String" ___scriptbase] #_(ยง throws IOException, ClassNotFoundException)
        (RT'load-2 ___scriptbase, true)
        nil
    )

    (defn #_"void" RT'load-2 [#_"String" ___scriptbase, #_"boolean" ___failIfNotFound] #_(ยง throws IOException, ClassNotFoundException)
        (let [#_"String" ___classfile (str ___scriptbase RT'LOADER_SUFFIX ".class")]
            (let [#_"String" ___cljfile (str ___scriptbase ".cli")]
                (let [#_"String" ___scriptfile ___cljfile]
                    (let [#_"URL" ___classURL (ร RT'getResource(baseLoader(), ___classfile))]
                        (let [#_"URL" ___cljURL (ร RT'getResource(baseLoader(), ___scriptfile))]
                            (when (nil? ___cljURL)
                                (ยง ass ___scriptfile (str ___scriptbase ".clic"))
                                (ยง ass ___cljURL (ร RT'getResource(baseLoader(), ___scriptfile)))
                            )
                            (let [#_"boolean" ___loaded false]
                                (when (or (and (some? ___classURL) (or (nil? ___cljURL) (< (RT'lastModified ___cljURL, ___scriptfile) (RT'lastModified ___classURL, ___classfile)))) (nil? ___classURL))
                                    (try
                                        (ร Var'pushThreadBindings(RT'mapUniqueKeys(
                                            (object-array [
                                                RT'CURRENT_NS         (.deref RT'CURRENT_NS)
                                                RT'WARN_ON_REFLECTION (.deref RT'WARN_ON_REFLECTION)
                                                RT'UNCHECKED_MATH     (.deref RT'UNCHECKED_MATH)
                                            ])
                                        )))
                                        (ยง ass ___loaded (some? (RT'loadClassForName (str (ร ___scriptbase.replace(\/, \.)) RT'LOADER_SUFFIX))))
                                        (finally
                                            (Var'popThreadBindings)
                                        )
                                    )
                                )
                                (cond (and (not ___loaded) (some? ___cljURL))
                                    (do
                                        (if (ร RT'booleanCast-1o(Compiler'COMPILE_FILES.deref()))
                                            (do
                                                (RT'compile ___scriptfile)
                                            )
                                            (do
                                                (ร RT'loadResourceScript-2c((ยง class RT), ___scriptfile))
                                            )
                                        )
                                    )
                                    (and (not ___loaded) ___failIfNotFound)
                                    (do
                                        (throw (FileNotFoundException. (String/format "Could not locate %s or %s on classpath.%s", (object-array [ ___classfile, ___cljfile, (if (.contains ___scriptbase, "_") " Please check that namespaces with dashes use underscores in the Cloiure file name." "") ]))))
                                    )
                                )
                                nil
                            )
                        )
                    )
                )
            )
        )
    )

    (defn #_"void" RT'doInit [] #_(ยง throws ClassNotFoundException, IOException)
        (RT'load-1 "cloiure/core")

        (ร Var'pushThreadBindings(RT'mapUniqueKeys(
            (object-array [
                RT'CURRENT_NS         (.deref RT'CURRENT_NS)
                RT'WARN_ON_REFLECTION (.deref RT'WARN_ON_REFLECTION)
                RT'UNCHECKED_MATH     (.deref RT'UNCHECKED_MATH)
            ])
        )))
        (try
            (let [#_"Symbol" ___USER (Symbol'intern-1 "user")]
                (let [#_"Symbol" ___CLOIURE (Symbol'intern-1 "cloiure.core")]
                    (let [#_"Var" ___in_ns (RT'var-2 "cloiure.core", "in-ns")]
                        (let [#_"Var" ___refer (RT'var-2 "cloiure.core", "refer")]
                            (.invoke ___in_ns, ___USER)
                            (.invoke ___refer, ___CLOIURE)
                            (RT'maybeLoadResourceScript "user.cli")

                            ;; start socket servers
                            (let [#_"Var" ___require (RT'var-2 "cloiure.core", "require")]
                                (let [#_"Symbol" ___SERVER (Symbol'intern-1 "cloiure.core.server")]
                                    (.invoke ___require, ___SERVER)
                                    (let [#_"Var" ___start_servers (RT'var-2 "cloiure.core.server", "start-servers")]
                                        (ร ___start_servers.invoke(System/getProperties()))
                                    )
                                )
                            )
                        )
                    )
                )
            )
            (finally
                (Var'popThreadBindings)
            )
        )
        nil
    )

    (defn #_"int" RT'nextID []
        (.getAndIncrement RT'ID)
    )

    ;; Load a library in the System ClassLoader instead of Cloiure's own.
    (defn #_"void" RT'loadLibrary [#_"String" ___libname]
        (System/loadLibrary ___libname)
        nil
    )

    (def- #_"int" RT'CHUNK_SIZE 32)

    (defn #_"ISeq" RT'chunkIteratorSeq [#_"Iterator" ___iter]
        (when (.hasNext ___iter)
            (ยง return (ร LazySeq'new-1(
                    (ยง reify AFn()
                        #_method
                        (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this]
                            (let [#_"Object[]" ___arr (make-array Object RT'CHUNK_SIZE)]
                                (let [#_"int" ___n 0]
                                    (while (and (.hasNext ___iter) (< ___n RT'CHUNK_SIZE))
                                        (ยง ass (ยง aget ___arr ___n) (next ___iter))
                                        (ยง ass ___n (inc ___n))
                                    )
                                    (ร ChunkedCons'new-2(ArrayChunk'new-3(___arr, 0, ___n), chunkIteratorSeq(___iter)))
                                )
                            )
                        )
                    )
                ))
            )
        )
        nil
    )

    (defn #_"ISeq" RT'seq [#_"Object" ___coll]
        (cond (ยง instance? ASeq ___coll)
            (do
                (cast' ASeq ___coll)
            )
            (ยง instance? LazySeq ___coll)
            (do
                (.seq (cast' LazySeq ___coll))
            )
            :else
            (do
                (RT'seqFrom ___coll)
            )
        )
    )

    ;; N.B. canSeq must be kept in sync with this!
    (defn #_"ISeq" RT'seqFrom [#_"Object" ___coll]
        (cond (ยง instance? Seqable ___coll)
            (do
                (.seq (cast' Seqable ___coll))
            )
            (nil? ___coll)
            (do
                nil
            )
            (instance? Iterable ___coll)
            (do
                (ร chunkIteratorSeq((cast Iterable ___coll).iterator()))
            )
            (.isArray (.getClass ___coll))
            (do
                (ArraySeq'createFromObject ___coll)
            )
            (instance? CharSequence ___coll)
            (do
                (StringSeq'create (cast CharSequence ___coll))
            )
            (instance? Map ___coll)
            (do
                (RT'seq (.entrySet (cast Map ___coll)))
            )
            :else
            (do
                (throw (IllegalArgumentException. (str "Don't know how to create ISeq from: " (.getName (.getClass ___coll)))))
            )
        )
    )

    (defn #_"boolean" RT'canSeq [#_"Object" ___coll]
        (or (ยง instance? ISeq ___coll)
            (ยง instance? Seqable ___coll)
            (nil? ___coll)
            (instance? Iterable ___coll)
            (.isArray (.getClass ___coll))
            (instance? CharSequence ___coll)
            (instance? Map ___coll))
    )

    (defn #_"Iterator" RT'iter [#_"Object" ___coll]
        (cond (instance? Iterable ___coll)
            (do
                (.iterator (cast Iterable ___coll))
            )
            (nil? ___coll)
            (do
                (ยง reify Iterator()
                    #_method
                    (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                        false
                    )

                    #_method
                    (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                        (throw (NoSuchElementException.))
                    )

                    #_method
                    (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                        (throw (UnsupportedOperationException.))
                    )
                )
            )
            (instance? Map ___coll)
            (do
                (ร (cast Map ___coll).entrySet().iterator())
            )
            (instance? String ___coll)
            (do
                (let [#_"String" ___s (cast String ___coll)]
                    (ยง reify Iterator()
                        (let [#_"int" ___i 0]
                            #_method
                            (ยง defn #_"boolean" (ยง method hasNext) [#_"Iterator" this]
                                (ร (___i < (.length ___s)))
                            )

                            #_method
                            (ยง defn #_"Object" (ยง method next) [#_"Iterator" this]
                                (let [_ (.charAt ___s, ___i)]
                                    (ยง ass ___i (inc ___i))
                                    _
                                )
                            )

                            #_method
                            (ยง defn #_"void" (ยง method remove) [#_"Iterator" this]
                                (throw (UnsupportedOperationException.))
                            )
                        )
                    )
                )
            )
            (.isArray (.getClass ___coll))
            (do
                (ArrayIter'createFromObject ___coll)
            )
            :else
            (do
                (RT'iter (RT'seq ___coll))
            )
        )
    )

    (defn #_"Object" RT'seqOrElse [#_"Object" ___o]
        (when (some? (RT'seq ___o)) ___o)
    )

    (defn #_"ISeq" RT'keys [#_"Object" ___coll]
        (if (ยง instance? IPersistentMap ___coll)
            (do
                (KeySeq'createFromMap (cast' IPersistentMap ___coll))
            )
            (do
                (KeySeq'create (RT'seq ___coll))
            )
        )
    )

    (defn #_"ISeq" RT'vals [#_"Object" ___coll]
        (if (ยง instance? IPersistentMap ___coll)
            (do
                (ValSeq'createFromMap (cast' IPersistentMap ___coll))
            )
            (do
                (ValSeq'create (RT'seq ___coll))
            )
        )
    )

    (defn #_"IPersistentMap" RT'meta [#_"Object" ___x]
        (when (ยง instance? IMeta ___x)
            (ยง return (.meta (cast' IMeta ___x)))
        )
        nil
    )

    (defn #_"int" RT'count [#_"Object" ___o]
        (when (ยง instance? Counted ___o)
            (ยง return (.count (cast' Counted ___o)))
        )
        (ร countFrom(Util'ret1(___o, (ยง ass ___o nil))))
    )

    (defn #_"int" RT'countFrom [#_"Object" ___o]
        (cond (nil? ___o)
            (do
                (ยง return 0)
            )
            (ยง instance? IPersistentCollection ___o)
            (do
                (let [#_"ISeq" ___s (RT'seq ___o)]
                    (ยง ass ___o nil)
                    (let [#_"int" ___i 0]
                        (loop-when-recur [___s ___s] (some? ___s) [(next ___s)]
                            (when (ยง instance? Counted ___s)
                                (ยง return (ร ___i + (count ___s)))
                            )
                            (ยง ass ___i (inc ___i))
                        )
                        (ยง return ___i)
                    )
                )
            )
            (instance? CharSequence ___o)
            (do
                (ยง return (.length (cast CharSequence ___o)))
            )
            (instance? Collection ___o)
            (do
                (ยง return (.size (cast Collection ___o)))
            )
            (instance? Map ___o)
            (do
                (ยง return (.size (cast Map ___o)))
            )
            (instance? Map$Entry ___o)
            (do
                (ยง return 2)
            )
            (.isArray (.getClass ___o))
            (do
                (ยง return (Array/getLength ___o))
            )
        )

        (throw (UnsupportedOperationException. (str "count not supported on this type: " (.getSimpleName (.getClass ___o)))))
    )

    (defn #_"IPersistentCollection" RT'conj [#_"IPersistentCollection" ___coll, #_"Object" ___x]
        (when (nil? ___coll)
            (ยง return (PersistentList'new-1 ___x))
        )
        (.cons ___coll, ___x)
    )

    (defn #_"ISeq" RT'cons [#_"Object" ___x, #_"Object" ___coll]
        (cond (nil? ___coll)
            (do
                (PersistentList'new-1 ___x)
            )
            (ยง instance? ISeq ___coll)
            (do
                (ร Cons'new-2(___x, (cast' ISeq ___coll)))
            )
            :else
            (do
                (ร Cons'new-2(___x, (RT'seq ___coll)))
            )
        )
    )

    (defn #_"Object" RT'first [#_"Object" ___x]
        (when (ยง instance? ISeq ___x)
            (ยง return (.first (cast' ISeq ___x)))
        )
        (let [#_"ISeq" ___seq (RT'seq ___x)]
            (when (nil? ___seq)
                (ยง return nil)
            )
            (first ___seq)
        )
    )

    (defn #_"Object" RT'second [#_"Object" ___x]
        (RT'first (RT'next ___x))
    )

    (defn #_"Object" RT'third [#_"Object" ___x]
        (RT'first (RT'next (RT'next ___x)))
    )

    (defn #_"Object" RT'fourth [#_"Object" ___x]
        (RT'first (RT'next (RT'next (RT'next ___x))))
    )

    (defn #_"ISeq" RT'next [#_"Object" ___x]
        (when (ยง instance? ISeq ___x)
            (ยง return (.next (cast' ISeq ___x)))
        )
        (let [#_"ISeq" ___seq (RT'seq ___x)]
            (when (nil? ___seq)
                (ยง return nil)
            )
            (next ___seq)
        )
    )

    (defn #_"ISeq" RT'more [#_"Object" ___x]
        (when (ยง instance? ISeq ___x)
            (ยง return (.more (cast' ISeq ___x)))
        )
        (let [#_"ISeq" ___seq (RT'seq ___x)]
            (when (nil? ___seq)
                (ยง return PersistentList'EMPTY)
            )
            (.more ___seq)
        )
    )

    (defn #_"Object" RT'peek [#_"Object" ___x]
        (when (nil? ___x)
            (ยง return nil)
        )
        (.peek (cast' IPersistentStack ___x))
    )

    (defn #_"Object" RT'pop [#_"Object" ___x]
        (when (nil? ___x)
            (ยง return nil)
        )
        (.pop (cast' IPersistentStack ___x))
    )

    (defn #_"Object" RT'get-2 [#_"Object" ___coll, #_"Object" ___key]
        (when (ยง instance? ILookup ___coll)
            (ยง return (.valAt (cast' ILookup ___coll), ___key))
        )
        (RT'getFrom-2 ___coll, ___key)
    )

    (defn #_"Object" RT'getFrom-2 [#_"Object" ___coll, #_"Object" ___key]
        (cond (nil? ___coll)
            (do
                (ยง return nil)
            )
            (instance? Map ___coll)
            (do
                (let [#_"Map" ___m (cast Map ___coll)]
                    (ยง return (.get ___m, ___key))
                )
            )
            (ยง instance? IPersistentSet ___coll)
            (do
                (let [#_"IPersistentSet" ___set (cast' IPersistentSet ___coll)]
                    (ยง return (.get ___set, ___key))
                )
            )
            (and (instance? Number ___key) (or (instance? String ___coll) (.isArray (.getClass ___coll))))
            (do
                (let [#_"int" ___n (.intValue (cast Number ___key))]
                    (when (and (<= 0 ___n) (< ___n (RT'count ___coll)))
                        (ยง return (RT'nth ___coll, ___n))
                    )
                    (ยง return nil)
                )
            )
            (ยง instance? ITransientSet ___coll)
            (do
                (let [#_"ITransientSet" ___set (cast' ITransientSet ___coll)]
                    (ยง return (.get ___set, ___key))
                )
            )
        )

        nil
    )

    (defn #_"Object" RT'get-3 [#_"Object" ___coll, #_"Object" ___key, #_"Object" ___notFound]
        (when (ยง instance? ILookup ___coll)
            (ยง return (.valAt (cast' ILookup ___coll), ___key, ___notFound))
        )
        (RT'getFrom-3 ___coll, ___key, ___notFound)
    )

    (defn #_"Object" RT'getFrom-3 [#_"Object" ___coll, #_"Object" ___key, #_"Object" ___notFound]
        (cond (nil? ___coll)
            (do
                (ยง return ___notFound)
            )
            (instance? Map ___coll)
            (do
                (let [#_"Map" ___m (cast Map ___coll)]
                    (when (.containsKey ___m, ___key)
                        (ยง return (.get ___m, ___key))
                    )
                    (ยง return ___notFound)
                )
            )
            (ยง instance? IPersistentSet ___coll)
            (do
                (let [#_"IPersistentSet" ___set (cast' IPersistentSet ___coll)]
                    (when (.contains ___set, ___key)
                        (ยง return (.get ___set, ___key))
                    )
                    (ยง return ___notFound)
                )
            )
            (and (instance? Number ___key) (or (instance? String ___coll) (.isArray (.getClass ___coll))))
            (do
                (let [#_"int" ___n (.intValue (cast Number ___key))]
                    (ยง return (if (and (<= 0 ___n) (< ___n (RT'count ___coll))) (RT'nth ___coll, ___n) ___notFound))
                )
            )
            (ยง instance? ITransientSet ___coll)
            (do
                (let [#_"ITransientSet" ___set (cast' ITransientSet ___coll)]
                    (when (.contains ___set, ___key)
                        (ยง return (.get ___set, ___key))
                    )
                    (ยง return ___notFound)
                )
            )
        )
        ___notFound
    )

    (defn #_"Associative" RT'assoc [#_"Object" ___coll, #_"Object" ___key, #_"Object" ___val]
        (when (nil? ___coll)
            (ยง return (PersistentArrayMap'new-1 (object-array [ ___key, ___val ])))
        )
        (.assoc (cast' Associative ___coll), ___key, ___val)
    )

    (defn #_"Object" RT'contains [#_"Object" ___coll, #_"Object" ___key]
        (cond (nil? ___coll)
            (do
                (ยง return RT'F)
            )
            (ยง instance? Associative ___coll)
            (do
                (ยง return (if (.containsKey (cast' Associative ___coll), ___key) RT'T RT'F))
            )
            (ยง instance? IPersistentSet ___coll)
            (do
                (ยง return (if (.contains (cast' IPersistentSet ___coll), ___key) RT'T RT'F))
            )
            (instance? Map ___coll)
            (do
                (let [#_"Map" ___m (cast Map ___coll)]
                    (ยง return (if (.containsKey ___m, ___key) RT'T RT'F))
                )
            )
            (instance? Set ___coll)
            (do
                (let [#_"Set" ___s (cast Set ___coll)]
                    (ยง return (if (.contains ___s, ___key) RT'T RT'F))
                )
            )
            (and (instance? Number ___key) (or (instance? String ___coll) (.isArray (.getClass ___coll))))
            (do
                (let [#_"int" ___n (.intValue (cast Number ___key))]
                    (ยง return (if (and (<= 0 ___n) (< ___n (RT'count ___coll))) RT'T RT'F))
                )
            )
            (ยง instance? ITransientSet ___coll)
            (do
                (ยง return (if (.contains (cast' ITransientSet ___coll), ___key) RT'T RT'F))
            )
            (ยง instance? ITransientAssociative2 ___coll)
            (do
                (ยง return (if (.containsKey (cast' ITransientAssociative2 ___coll), ___key) RT'T RT'F))
            )
        )
        (throw (IllegalArgumentException. (str "contains? not supported on type: " (.getName (.getClass ___coll)))))
    )

    (defn #_"Object" RT'find [#_"Object" ___coll, #_"Object" ___key]
        (cond (nil? ___coll)
            (do
                (ยง return nil)
            )
            (ยง instance? Associative ___coll)
            (do
                (ยง return (.entryAt (cast' Associative ___coll), ___key))
            )
            (instance? Map ___coll)
            (do
                (let [#_"Map" ___m (cast Map ___coll)]
                    (when (.containsKey ___m, ___key)
                        (ยง return (ร MapEntry'create(___key, ___m.get(___key))))
                    )
                    (ยง return nil)
                )
            )
            (ยง instance? ITransientAssociative2 ___coll)
            (do
                (ยง return (.entryAt (cast' ITransientAssociative2 ___coll), ___key))
            )
        )
        (throw (IllegalArgumentException. (str "find not supported on type: " (.getName (.getClass ___coll)))))
    )

    ;; takes a seq of key, val, key, val

    ;; returns tail starting at val of matching key if found, else nil
    (defn #_"ISeq" RT'findKey [#_"Keyword" ___key, #_"ISeq" ___keyvals]
        (while (some? ___keyvals)
            (let [#_"ISeq" ___r (next ___keyvals)]
                (when (nil? ___r)
                    (throw (Util'runtimeException-1 "Malformed keyword argslist"))
                )
                (when (ร (first ___keyvals) == ___key)
                    (ยง return ___r)
                )
                (ยง ass ___keyvals (next ___r))
            )
        )
        nil
    )

    (defn #_"Object" RT'dissoc [#_"Object" ___coll, #_"Object" ___key]
        (when (nil? ___coll)
            (ยง return nil)
        )
        (.without (cast' IPersistentMap ___coll), ___key)
    )

    (defn #_"Object" RT'nth-2 [#_"Object" ___coll, #_"int" ___n]
        (when (ยง instance? Indexed ___coll)
            (ยง return (.nth (cast' Indexed ___coll), ___n))
        )
        (ร RT'nthFrom-2(Util'ret1(___coll, (ยง ass ___coll nil)), ___n))
    )

    (defn #_"Object" RT'nthFrom-2 [#_"Object" ___coll, #_"int" ___n]
        (cond (nil? ___coll)
            (do
                nil
            )
            (instance? CharSequence ___coll)
            (do
                (ร Character/valueOf((cast CharSequence ___coll).charAt(___n)))
            )
            (.isArray (.getClass ___coll))
            (do
                (ร Reflector'prepRet((.getClass ___coll).getComponentType(), Array/get(___coll, ___n)))
            )
            (instance? RandomAccess ___coll)
            (do
                (.get (cast List ___coll), ___n)
            )
            (instance? Matcher ___coll)
            (do
                (.group (cast Matcher ___coll), ___n)
            )
            (instance? Map$Entry ___coll)
            (do
                (let [#_"Map$Entry" ___e (cast Map$Entry ___coll)]
                    (cond (zero? ___n)
                        (do
                            (ยง return (.getKey ___e))
                        )
                        (= ___n 1)
                        (do
                            (ยง return (.getValue ___e))
                        )
                    )
                    (throw (IndexOutOfBoundsException.))
                )
            )
            (ยง instance? Sequential ___coll)
            (do
                (let [#_"ISeq" ___seq (RT'seq ___coll)]
                    (ยง ass ___coll nil)
                    (loop-when-recur [#_"int" ___i 0 ___seq ___seq] (and (<= ___i ___n) (some? ___seq)) [(inc ___i) (next ___seq)]
                        (when (= ___i ___n)
                            (ยง return (first ___seq))
                        )
                    )
                    (throw (IndexOutOfBoundsException.))
                )
            )
            :else
            (do
                (throw (UnsupportedOperationException. (str "nth not supported on this type: " (.getSimpleName (.getClass ___coll)))))
            )
        )
    )

    (defn #_"Object" RT'nth-3 [#_"Object" ___coll, #_"int" ___n, #_"Object" ___notFound]
        (when (ยง instance? Indexed ___coll)
            (let [#_"Indexed" ___v (cast' Indexed ___coll)]
                (ยง return (.nth ___v, ___n, ___notFound))
            )
        )
        (RT'nthFrom-3 ___coll, ___n, ___notFound)
    )

    (defn #_"Object" RT'nthFrom-3 [#_"Object" ___coll, #_"int" ___n, #_"Object" ___notFound]
        (cond (nil? ___coll)
            (do
                ___notFound
            )
            (< ___n 0)
            (do
                ___notFound
            )
            (instance? CharSequence ___coll)
            (do
                (let [#_"CharSequence" ___s (cast CharSequence ___coll)]
                    (when (ร ___n < (.length ___s))
                        (ยง return (ร Character/valueOf(___s.charAt(___n))))
                    )
                    ___notFound
                )
            )
            (.isArray (.getClass ___coll))
            (do
                (when (ร ___n < Array/getLength(___coll))
                    (ยง return (ร Reflector'prepRet((.getClass ___coll).getComponentType(), Array/get(___coll, ___n))))
                )
                ___notFound
            )
            (instance? RandomAccess ___coll)
            (do
                (let [#_"List" ___list (cast List ___coll)]
                    (when (ร ___n < (.size ___list))
                        (ยง return (.get ___list, ___n))
                    )
                    ___notFound
                )
            )
            (instance? Matcher ___coll)
            (do
                (let [#_"Matcher" ___m (cast Matcher ___coll)]
                    (when (ร ___n < (.groupCount ___m))
                        (ยง return (.group ___m, ___n))
                    )
                    ___notFound
                )
            )
            (instance? Map$Entry ___coll)
            (do
                (let [#_"Map$Entry" ___e (cast Map$Entry ___coll)]
                    (cond (zero? ___n)
                        (do
                            (ยง return (.getKey ___e))
                        )
                        (= ___n 1)
                        (do
                            (ยง return (.getValue ___e))
                        )
                    )
                    ___notFound
                )
            )
            (ยง instance? Sequential ___coll)
            (do
                (let [#_"ISeq" ___seq (RT'seq ___coll)]
                    (ยง ass ___coll nil)
                    (loop-when-recur [#_"int" ___i 0 ___seq ___seq] (and (<= ___i ___n) (some? ___seq)) [(inc ___i) (next ___seq)]
                        (when (= ___i ___n)
                            (ยง return (first ___seq))
                        )
                    )
                    ___notFound
                )
            )
            :else
            (do
                (throw (UnsupportedOperationException. (str "nth not supported on this type: " (.getSimpleName (.getClass ___coll)))))
            )
        )
    )

    (defn #_"Object" RT'assocN [#_"int" ___n, #_"Object" ___val, #_"Object" ___coll]
        (cond (nil? ___coll)
            (do
                nil
            )
            (ยง instance? IPersistentVector ___coll)
            (do
                (.assocN (cast' IPersistentVector ___coll), ___n, ___val)
            )
            (ยง instance? Object[] ___coll)
            (do
                ;; hmm... this is not persistent
                (let [#_"Object[]" ___array (ร ((Object[]) ___coll))]
                    (ยง ass (ยง aget ___array ___n) ___val)
                    ___array
                )
            )
            :else
            (do
                nil
            )
        )
    )

    (defn #_"boolean" RT'hasTag [#_"Object" ___o, #_"Object" ___tag]
        (ร Util'equals(___tag, RT'get-2(RT'meta(___o), RT'TAG_KEY)))
    )

    (defn #_"Object" RT'box-1o [#_"Object" ___x]
        ___x
    )

    (defn #_"Character" RT'box-1c [#_"char" ___x]
        (Character/valueOf ___x)
    )

    (defn #_"Object" RT'box-1z [#_"boolean" ___x]
        (if ___x RT'T RT'F)
    )

    (defn #_"Object" RT'box-1Z [#_"Boolean" ___x]
        ___x
    )

    (defn #_"Number" RT'box-1b [#_"byte" ___x]
        ___x
    )

    (defn #_"Number" RT'box-1s [#_"short" ___x]
        ___x
    )

    (defn #_"Number" RT'box-1i [#_"int" ___x]
        ___x
    )

    (defn #_"Number" RT'box-1l [#_"long" ___x]
        ___x
    )

    (defn #_"Number" RT'box-1f [#_"float" ___x]
        ___x
    )

    (defn #_"Number" RT'box-1d [#_"double" ___x]
        ___x
    )

    (defn #_"char" RT'charCast-1o [#_"Object" ___x]
        (when (instance? Character ___x)
            (ยง return (.charValue (cast Character ___x)))
        )
        (let [#_"long" ___n (.longValue (cast Number ___x))]
            (when (or (< ___n Character/MIN_VALUE) (< Character/MAX_VALUE ___n))
                (throw (IllegalArgumentException. (str "Value out of range for char: " ___x)))
            )
            (ร (char) ___n)
        )
    )

    (defn #_"char" RT'charCast-1b [#_"byte" ___x]
        (let [#_"char" ___i (ร (char) ___x)]
            (when (not= ___i ___x)
                (throw (IllegalArgumentException. (str "Value out of range for char: " ___x)))
            )
            ___i
        )
    )

    (defn #_"char" RT'charCast-1s [#_"short" ___x]
        (let [#_"char" ___i (ร (char) ___x)]
            (when (not= ___i ___x)
                (throw (IllegalArgumentException. (str "Value out of range for char: " ___x)))
            )
            ___i
        )
    )

    (defn #_"char" RT'charCast-1c [#_"char" ___x]
        ___x
    )

    (defn #_"char" RT'charCast-1i [#_"int" ___x]
        (let [#_"char" ___i (ร (char) ___x)]
            (when (not= ___i ___x)
                (throw (IllegalArgumentException. (str "Value out of range for char: " ___x)))
            )
            ___i
        )
    )

    (defn #_"char" RT'charCast-1l [#_"long" ___x]
        (let [#_"char" ___i (ร (char) ___x)]
            (when (not= ___i ___x)
                (throw (IllegalArgumentException. (str "Value out of range for char: " ___x)))
            )
            ___i
        )
    )

    (defn #_"char" RT'charCast-1f [#_"float" ___x]
        (when (<= Character/MIN_VALUE ___x Character/MAX_VALUE)
            (ยง return (ร (char) ___x))
        )
        (throw (IllegalArgumentException. (str "Value out of range for char: " ___x)))
    )

    (defn #_"char" RT'charCast-1d [#_"double" ___x]
        (when (<= Character/MIN_VALUE ___x Character/MAX_VALUE)
            (ยง return (ร (char) ___x))
        )
        (throw (IllegalArgumentException. (str "Value out of range for char: " ___x)))
    )

    (defn #_"boolean" RT'booleanCast-1o [#_"Object" ___x]
        (when (instance? Boolean ___x)
            (ยง return (.booleanValue (cast Boolean ___x)))
        )
        (some? ___x)
    )

    (defn #_"boolean" RT'booleanCast-1b [#_"boolean" ___x]
        ___x
    )

    (defn #_"byte" RT'byteCast-1o [#_"Object" ___x]
        (when (instance? Byte ___x)
            (ยง return (.byteValue (cast Byte ___x)))
        )
        (let [#_"long" ___n (RT'longCast-1o ___x)]
            (when (or (< ___n Byte/MIN_VALUE) (< Byte/MAX_VALUE ___n))
                (throw (IllegalArgumentException. (str "Value out of range for byte: " ___x)))
            )
            (ร (byte) ___n)
        )
    )

    (defn #_"byte" RT'byteCast-1b [#_"byte" ___x]
        ___x
    )

    (defn #_"byte" RT'byteCast-1s [#_"short" ___x]
        (let [#_"byte" ___i (ร (byte) ___x)]
            (when (not= ___i ___x)
                (throw (IllegalArgumentException. (str "Value out of range for byte: " ___x)))
            )
            ___i
        )
    )

    (defn #_"byte" RT'byteCast-1i [#_"int" ___x]
        (let [#_"byte" ___i (ร (byte) ___x)]
            (when (not= ___i ___x)
                (throw (IllegalArgumentException. (str "Value out of range for byte: " ___x)))
            )
            ___i
        )
    )

    (defn #_"byte" RT'byteCast-1l [#_"long" ___x]
        (let [#_"byte" ___i (ร (byte) ___x)]
            (when (not= ___i ___x)
                (throw (IllegalArgumentException. (str "Value out of range for byte: " ___x)))
            )
            ___i
        )
    )

    (defn #_"byte" RT'byteCast-1f [#_"float" ___x]
        (when (<= Byte/MIN_VALUE ___x Byte/MAX_VALUE)
            (ยง return (ร (byte) ___x))
        )
        (throw (IllegalArgumentException. (str "Value out of range for byte: " ___x)))
    )

    (defn #_"byte" RT'byteCast-1d [#_"double" ___x]
        (when (<= Byte/MIN_VALUE ___x Byte/MAX_VALUE)
            (ยง return (ร (byte) ___x))
        )
        (throw (IllegalArgumentException. (str "Value out of range for byte: " ___x)))
    )

    (defn #_"short" RT'shortCast-1o [#_"Object" ___x]
        (when (instance? Short ___x)
            (ยง return (.shortValue (cast Short ___x)))
        )
        (let [#_"long" ___n (RT'longCast-1o ___x)]
            (when (or (< ___n Short/MIN_VALUE) (< Short/MAX_VALUE ___n))
                (throw (IllegalArgumentException. (str "Value out of range for short: " ___x)))
            )
            (ร (short) ___n)
        )
    )

    (defn #_"short" RT'shortCast-1b [#_"byte" ___x]
        ___x
    )

    (defn #_"short" RT'shortCast-1s [#_"short" ___x]
        ___x
    )

    (defn #_"short" RT'shortCast-1i [#_"int" ___x]
        (let [#_"short" ___i (ร (short) ___x)]
            (when (not= ___i ___x)
                (throw (IllegalArgumentException. (str "Value out of range for short: " ___x)))
            )
            ___i
        )
    )

    (defn #_"short" RT'shortCast-1l [#_"long" ___x]
        (let [#_"short" ___i (ร (short) ___x)]
            (when (not= ___i ___x)
                (throw (IllegalArgumentException. (str "Value out of range for short: " ___x)))
            )
            ___i
        )
    )

    (defn #_"short" RT'shortCast-1f [#_"float" ___x]
        (when (<= Short/MIN_VALUE ___x Short/MAX_VALUE)
            (ยง return (ร (short) ___x))
        )
        (throw (IllegalArgumentException. (str "Value out of range for short: " ___x)))
    )

    (defn #_"short" RT'shortCast-1d [#_"double" ___x]
        (when (<= Short/MIN_VALUE ___x Short/MAX_VALUE)
            (ยง return (ร (short) ___x))
        )
        (throw (IllegalArgumentException. (str "Value out of range for short: " ___x)))
    )

    (defn #_"int" RT'intCast-1o [#_"Object" ___x]
        (when (instance? Integer ___x)
            (ยง return (.intValue (cast Integer ___x)))
        )
        (when (instance? Number ___x)
            (let [#_"long" ___n (RT'longCast-1o ___x)]
                (ยง return (intCast ___n))
            )
        )
        (.charValue (cast Character ___x))
    )

    (defn #_"int" RT'intCast-1c [#_"char" ___x]
        ___x
    )

    (defn #_"int" RT'intCast-1b [#_"byte" ___x]
        ___x
    )

    (defn #_"int" RT'intCast-1s [#_"short" ___x]
        ___x
    )

    (defn #_"int" RT'intCast-1i [#_"int" ___x]
        ___x
    )

    (defn #_"int" RT'intCast-1f [#_"float" ___x]
        (when (or (< ___x Integer/MIN_VALUE) (< Integer/MAX_VALUE ___x))
            (throw (IllegalArgumentException. (str "Value out of range for int: " ___x)))
        )
        (ร (int) ___x)
    )

    (defn #_"int" RT'intCast-1l [#_"long" ___x]
        (let [#_"int" ___i (ร (int) ___x)]
            (when (not= ___i ___x)
                (throw (IllegalArgumentException. (str "Value out of range for int: " ___x)))
            )
            ___i
        )
    )

    (defn #_"int" RT'intCast-1d [#_"double" ___x]
        (when (or (< ___x Integer/MIN_VALUE) (< Integer/MAX_VALUE ___x))
            (throw (IllegalArgumentException. (str "Value out of range for int: " ___x)))
        )
        (ร (int) ___x)
    )

    (defn #_"long" RT'longCast-1o [#_"Object" ___x]
        (cond (or (instance? Integer ___x) (instance? Long ___x))
            (do
                (.longValue (cast Number ___x))
            )
            (ยง instance? BigInt ___x)
            (do
                (let [#_"BigInt" ___bi (cast' BigInt ___x)]
                    (if (ร (nil? (:bipart ___bi)))
                        (do
                            (:lpart ___bi)
                        )
                        (do
                            (throw (IllegalArgumentException. (str "Value out of range for long: " ___x)))
                        )
                    )
                )
            )
            (instance? BigInteger ___x)
            (do
                (let [#_"BigInteger" ___bi (cast BigInteger ___x)]
                    (if (ร (.bitLength ___bi) < 64)
                        (do
                            (.longValue ___bi)
                        )
                        (do
                            (throw (IllegalArgumentException. (str "Value out of range for long: " ___x)))
                        )
                    )
                )
            )
            (or (instance? Byte ___x) (instance? Short ___x))
            (do
                (.longValue (cast Number ___x))
            )
            (ยง instance? Ratio ___x)
            (do
                (ร RT'longCast-1o((cast' Ratio ___x).bigIntegerValue()))
            )
            (instance? Character ___x)
            (do
                (ร RT'longCast-1l((cast Character ___x).charValue()))
            )
            :else
            (do
                (ร RT'longCast-1d((cast Number ___x).doubleValue()))
            )
        )
    )

    (defn #_"long" RT'longCast-1b [#_"byte" ___x]
        ___x
    )

    (defn #_"long" RT'longCast-1s [#_"short" ___x]
        ___x
    )

    (defn #_"long" RT'longCast-1i [#_"int" ___x]
        ___x
    )

    (defn #_"long" RT'longCast-1f [#_"float" ___x]
        (when (or (< ___x Long/MIN_VALUE) (< Long/MAX_VALUE ___x))
            (throw (IllegalArgumentException. (str "Value out of range for long: " ___x)))
        )
        (ร (long) ___x)
    )

    (defn #_"long" RT'longCast-1l [#_"long" ___x]
        ___x
    )

    (defn #_"long" RT'longCast-1d [#_"double" ___x]
        (when (or (< ___x Long/MIN_VALUE) (< Long/MAX_VALUE ___x))
            (throw (IllegalArgumentException. (str "Value out of range for long: " ___x)))
        )
        (ร (long) ___x)
    )

    (defn #_"float" RT'floatCast-1o [#_"Object" ___x]
        (when (instance? Float ___x)
            (ยง return (.floatValue (cast Float ___x)))
        )
        (let [#_"double" ___n (.doubleValue (cast Number ___x))]
            (when (or (ร ___n < (- Float/MAX_VALUE)) (ร ___n > Float/MAX_VALUE))
                (throw (IllegalArgumentException. (str "Value out of range for float: " ___x)))
            )
            (ร (float) ___n)
        )
    )

    (defn #_"float" RT'floatCast-1b [#_"byte" ___x]
        ___x
    )

    (defn #_"float" RT'floatCast-1s [#_"short" ___x]
        ___x
    )

    (defn #_"float" RT'floatCast-1i [#_"int" ___x]
        ___x
    )

    (defn #_"float" RT'floatCast-1f [#_"float" ___x]
        ___x
    )

    (defn #_"float" RT'floatCast-1l [#_"long" ___x]
        ___x
    )

    (defn #_"float" RT'floatCast-1d [#_"double" ___x]
        (when (or (ร ___x < (- Float/MAX_VALUE)) (ร ___x > Float/MAX_VALUE))
            (throw (IllegalArgumentException. (str "Value out of range for float: " ___x)))
        )
        (ร (float) ___x)
    )

    (defn #_"double" RT'doubleCast-1o [#_"Object" ___x]
        (.doubleValue (cast Number ___x))
    )

    (defn #_"double" RT'doubleCast-1b [#_"byte" ___x]
        ___x
    )

    (defn #_"double" RT'doubleCast-1s [#_"short" ___x]
        ___x
    )

    (defn #_"double" RT'doubleCast-1i [#_"int" ___x]
        ___x
    )

    (defn #_"double" RT'doubleCast-1f [#_"float" ___x]
        ___x
    )

    (defn #_"double" RT'doubleCast-1l [#_"long" ___x]
        ___x
    )

    (defn #_"double" RT'doubleCast-1d [#_"double" ___x]
        ___x
    )

    (defn #_"byte" RT'uncheckedByteCast-1o [#_"Object" ___x]
        (.byteValue (cast Number ___x))
    )

    (defn #_"byte" RT'uncheckedByteCast-1b [#_"byte" ___x]
        ___x
    )

    (defn #_"byte" RT'uncheckedByteCast-1s [#_"short" ___x]
        (ร (byte) ___x)
    )

    (defn #_"byte" RT'uncheckedByteCast-1i [#_"int" ___x]
        (ร (byte) ___x)
    )

    (defn #_"byte" RT'uncheckedByteCast-1l [#_"long" ___x]
        (ร (byte) ___x)
    )

    (defn #_"byte" RT'uncheckedByteCast-1f [#_"float" ___x]
        (ร (byte) ___x)
    )

    (defn #_"byte" RT'uncheckedByteCast-1d [#_"double" ___x]
        (ร (byte) ___x)
    )

    (defn #_"short" RT'uncheckedShortCast-1o [#_"Object" ___x]
        (.shortValue (cast Number ___x))
    )

    (defn #_"short" RT'uncheckedShortCast-1b [#_"byte" ___x]
        ___x
    )

    (defn #_"short" RT'uncheckedShortCast-1s [#_"short" ___x]
        ___x
    )

    (defn #_"short" RT'uncheckedShortCast-1i [#_"int" ___x]
        (ร (short) ___x)
    )

    (defn #_"short" RT'uncheckedShortCast-1l [#_"long" ___x]
        (ร (short) ___x)
    )

    (defn #_"short" RT'uncheckedShortCast-1f [#_"float" ___x]
        (ร (short) ___x)
    )

    (defn #_"short" RT'uncheckedShortCast-1d [#_"double" ___x]
        (ร (short) ___x)
    )

    (defn #_"char" RT'uncheckedCharCast-1o [#_"Object" ___x]
        (when (instance? Character ___x)
            (ยง return (.charValue (cast Character ___x)))
        )
        (ร (char) (cast Number ___x).longValue())
    )

    (defn #_"char" RT'uncheckedCharCast-1b [#_"byte" ___x]
        (ร (char) ___x)
    )

    (defn #_"char" RT'uncheckedCharCast-1s [#_"short" ___x]
        (ร (char) ___x)
    )

    (defn #_"char" RT'uncheckedCharCast-1c [#_"char" ___x]
        ___x
    )

    (defn #_"char" RT'uncheckedCharCast-1i [#_"int" ___x]
        (ร (char) ___x)
    )

    (defn #_"char" RT'uncheckedCharCast-1l [#_"long" ___x]
        (ร (char) ___x)
    )

    (defn #_"char" RT'uncheckedCharCast-1f [#_"float" ___x]
        (ร (char) ___x)
    )

    (defn #_"char" RT'uncheckedCharCast-1d [#_"double" ___x]
        (ร (char) ___x)
    )

    (defn #_"int" RT'uncheckedIntCast-1o [#_"Object" ___x]
        (when (instance? Number ___x)
            (ยง return (.intValue (cast Number ___x)))
        )
        (.charValue (cast Character ___x))
    )

    (defn #_"int" RT'uncheckedIntCast-1b [#_"byte" ___x]
        ___x
    )

    (defn #_"int" RT'uncheckedIntCast-1s [#_"short" ___x]
        ___x
    )

    (defn #_"int" RT'uncheckedIntCast-1c [#_"char" ___x]
        ___x
    )

    (defn #_"int" RT'uncheckedIntCast-1i [#_"int" ___x]
        ___x
    )

    (defn #_"int" RT'uncheckedIntCast-1l [#_"long" ___x]
        (ร (int) ___x)
    )

    (defn #_"int" RT'uncheckedIntCast-1f [#_"float" ___x]
        (ร (int) ___x)
    )

    (defn #_"int" RT'uncheckedIntCast-1d [#_"double" ___x]
        (ร (int) ___x)
    )

    (defn #_"long" RT'uncheckedLongCast-1o [#_"Object" ___x]
        (.longValue (cast Number ___x))
    )

    (defn #_"long" RT'uncheckedLongCast-1b [#_"byte" ___x]
        ___x
    )

    (defn #_"long" RT'uncheckedLongCast-1s [#_"short" ___x]
        ___x
    )

    (defn #_"long" RT'uncheckedLongCast-1i [#_"int" ___x]
        ___x
    )

    (defn #_"long" RT'uncheckedLongCast-1l [#_"long" ___x]
        ___x
    )

    (defn #_"long" RT'uncheckedLongCast-1f [#_"float" ___x]
        (ร (long) ___x)
    )

    (defn #_"long" RT'uncheckedLongCast-1d [#_"double" ___x]
        (ร (long) ___x)
    )

    (defn #_"float" RT'uncheckedFloatCast-1o [#_"Object" ___x]
        (.floatValue (cast Number ___x))
    )

    (defn #_"float" RT'uncheckedFloatCast-1b [#_"byte" ___x]
        ___x
    )

    (defn #_"float" RT'uncheckedFloatCast-1s [#_"short" ___x]
        ___x
    )

    (defn #_"float" RT'uncheckedFloatCast-1i [#_"int" ___x]
        ___x
    )

    (defn #_"float" RT'uncheckedFloatCast-1l [#_"long" ___x]
        ___x
    )

    (defn #_"float" RT'uncheckedFloatCast-1f [#_"float" ___x]
        ___x
    )

    (defn #_"float" RT'uncheckedFloatCast-1d [#_"double" ___x]
        (ร (float) ___x)
    )

    (defn #_"double" RT'uncheckedDoubleCast-1o [#_"Object" ___x]
        (.doubleValue (cast Number ___x))
    )

    (defn #_"double" RT'uncheckedDoubleCast-1b [#_"byte" ___x]
        ___x
    )

    (defn #_"double" RT'uncheckedDoubleCast-1s [#_"short" ___x]
        ___x
    )

    (defn #_"double" RT'uncheckedDoubleCast-1i [#_"int" ___x]
        ___x
    )

    (defn #_"double" RT'uncheckedDoubleCast-1l [#_"long" ___x]
        ___x
    )

    (defn #_"double" RT'uncheckedDoubleCast-1f [#_"float" ___x]
        ___x
    )

    (defn #_"double" RT'uncheckedDoubleCast-1d [#_"double" ___x]
        ___x
    )

    (defn #_"IPersistentMap" RT'map [#_"Object..." ___init]
        (cond (nil? ___init)
            (do
                (ยง return PersistentArrayMap'EMPTY)
            )
            (<= (ยง alength ___init) PersistentArrayMap'HASHTABLE_THRESHOLD)
            (do
                (ยง return (PersistentArrayMap'createWithCheck ___init))
            )
        )
        (PersistentHashMap'createWithCheck-1a ___init)
    )

    (defn #_"IPersistentMap" RT'mapUniqueKeys [#_"Object..." ___init]
        (cond (nil? ___init)
            (do
                (ยง return PersistentArrayMap'EMPTY)
            )
            (<= (ยง alength ___init) PersistentArrayMap'HASHTABLE_THRESHOLD)
            (do
                (ยง return (PersistentArrayMap'new-1 ___init))
            )
        )
        (PersistentHashMap'create-1a ___init)
    )

    (defn #_"IPersistentSet" RT'set [#_"Object..." ___init]
        (PersistentHashSet'createWithCheck-1a ___init)
    )

    (defn #_"IPersistentVector" RT'vector [#_"Object..." ___init]
        (LazilyPersistentVector'createOwning ___init)
    )

    (defn #_"IPersistentVector" RT'subvec [#_"IPersistentVector" ___v, #_"int" ___start, #_"int" ___end]
        (when-not (<= 0 ___start ___end (count ___v))
            (throw (IndexOutOfBoundsException.))
        )
        (when (= ___start ___end)
            (ยง return PersistentVector'EMPTY)
        )
        (SubVector'new nil, ___v, ___start, ___end)
    )

    (defn #_"ISeq" RT'list-0 []
        nil
    )

    (defn #_"ISeq" RT'list-1 [#_"Object" ___arg1]
        (PersistentList'new-1 ___arg1)
    )

    (defn #_"ISeq" RT'list-2 [#_"Object" ___arg1, #_"Object" ___arg2]
        (RT'listStar-3 ___arg1, ___arg2, nil)
    )

    (defn #_"ISeq" RT'list-3 [#_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3]
        (RT'listStar-4 ___arg1, ___arg2, ___arg3, nil)
    )

    (defn #_"ISeq" RT'list-4 [#_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4]
        (RT'listStar-5 ___arg1, ___arg2, ___arg3, ___arg4, nil)
    )

    (defn #_"ISeq" RT'list-5 [#_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5]
        (RT'listStar-6 ___arg1, ___arg2, ___arg3, ___arg4, ___arg5, nil)
    )

    (defn #_"ISeq" RT'listStar-2 [#_"Object" ___arg1, #_"ISeq" ___rest]
        (cast' ISeq (RT'cons ___arg1, ___rest))
    )

    (defn #_"ISeq" RT'listStar-3 [#_"Object" ___arg1, #_"Object" ___arg2, #_"ISeq" ___rest]
        (cast' ISeq (ร RT'cons(___arg1, RT'cons(___arg2, ___rest))))
    )

    (defn #_"ISeq" RT'listStar-4 [#_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"ISeq" ___rest]
        (cast' ISeq (ร RT'cons(___arg1, RT'cons(___arg2, RT'cons(___arg3, ___rest)))))
    )

    (defn #_"ISeq" RT'listStar-5 [#_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"ISeq" ___rest]
        (cast' ISeq (ร RT'cons(___arg1, RT'cons(___arg2, RT'cons(___arg3, RT'cons(___arg4, ___rest))))))
    )

    (defn #_"ISeq" RT'listStar-6 [#_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"ISeq" ___rest]
        (cast' ISeq (ร RT'cons(___arg1, RT'cons(___arg2, RT'cons(___arg3, RT'cons(___arg4, RT'cons(___arg5, ___rest)))))))
    )

    (defn #_"ISeq" RT'arrayToList [#_"Object[]" ___a]
        (let [#_"ISeq" ___ret nil]
            (loop-when-recur [#_"int" ___i (- (ยง alength ___a) 1)] (>= ___i 0) [(dec ___i)]
                (ยง ass ___ret (cast' ISeq (ร RT'cons(___a[___i], ___ret))))
            )
            ___ret
        )
    )

    (defn #_"Object[]" RT'object_array [#_"Object" ___sizeOrSeq]
        (if (instance? Number ___sizeOrSeq)
            (do
                (make-array Object (.intValue (cast Number ___sizeOrSeq)))
            )
            (do
                (let [#_"ISeq" ___s (RT'seq ___sizeOrSeq)]
                    (let [#_"int" ___size (RT'count ___s)]
                        (let [#_"Object[]" ___ret (make-array Object ___size)]
                            (loop-when-recur [#_"int" ___i 0 ___s ___s] (and (< ___i ___size) (some? ___s)) [(inc ___i) (next ___s)]
                                (ยง ass (ยง aget ___ret ___i) (first ___s))
                            )
                            ___ret
                        )
                    )
                )
            )
        )
    )

    (defn #_"Object[]" RT'toArray [#_"Object" ___coll]
        (cond (nil? ___coll)
            (do
                RT'EMPTY_ARRAY
            )
            (ยง instance? Object[] ___coll)
            (do
                (ร (Object[]) ___coll)
            )
            (instance? Collection ___coll)
            (do
                (.toArray (cast Collection ___coll))
            )
            (instance? Iterable ___coll)
            (do
                (let [#_"ArrayList" ___ret (ArrayList.)]
                    (doseq [#_"Object" ___o (cast Iterable ___coll)]
                        (.add ___ret, ___o)
                    )
                    (.toArray ___ret)
                )
            )
            (instance? Map ___coll)
            (do
                (ร (cast Map ___coll).entrySet().toArray())
            )
            (instance? String ___coll)
            (do
                (let [#_"char[]" ___chars (.toCharArray (cast String ___coll))]
                    (let [#_"Object[]" ___ret (make-array Object (ยง alength ___chars))]
                        (loop-when-recur [#_"int" ___i 0] (< ___i (ยง alength ___chars)) [(inc ___i)]
                            (ยง ass (ยง aget ___ret ___i) (ยง aget ___chars ___i))
                        )
                        ___ret
                    )
                )
            )
            (.isArray (.getClass ___coll))
            (do
                (let [#_"ISeq" ___s (RT'seq ___coll)]
                    (let [#_"Object[]" ___ret (make-array Object (RT'count ___s))]
                        (loop-when-recur [#_"int" ___i 0 ___s ___s] (< ___i (ยง alength ___ret)) [(inc ___i) (next ___s)]
                            (ยง ass (ยง aget ___ret ___i) (first ___s))
                        )
                        ___ret
                    )
                )
            )
            :else
            (do
                (throw (Util'runtimeException-1 (str "Unable to convert: " (.getClass ___coll) " to Object[]")))
            )
        )
    )

    (defn #_"Object[]" RT'seqToArray [#_"ISeq" ___seq]
        (let [#_"int" ___len (RT'length ___seq)]
            (let [#_"Object[]" ___ret (make-array Object ___len)]
                (loop-when-recur [#_"int" ___i 0 ___seq ___seq] (some? ___seq) [(inc ___i) (next ___seq)]
                    (ยง ass (ยง aget ___ret ___i) (first ___seq))
                )
                ___ret
            )
        )
    )

    ;; supports java Collection.toArray(T[])
    (defn #_"Object[]" RT'seqToPassedArray [#_"ISeq" ___seq, #_"Object[]" ___passed]
        (let [#_"Object[]" ___dest ___passed]
            (let [#_"int" ___len (RT'count ___seq)]
                (when (> ___len (ยง alength ___dest))
                    (ยง ass ___dest (ร (Object[]) Array/newInstance((.getClass ___passed).getComponentType(), ___len)))
                )
                (loop-when-recur [#_"int" ___i 0 ___seq ___seq] (some? ___seq) [(inc ___i) (next ___seq)]
                    (ยง ass (ยง aget ___dest ___i) (first ___seq))
                )
                (when (< ___len (ยง alength ___passed))
                    (ยง ass (ยง aget ___dest ___len) nil)
                )
                ___dest
            )
        )
    )

    (defn #_"Object" RT'seqToTypedArray-1 [#_"ISeq" ___seq]
        (let [#_"Class" ___type (if (and (some? ___seq) (some? (first ___seq))) (.getClass (first ___seq)) Object)]
            (RT'seqToTypedArray-2 ___type, ___seq)
        )
    )

    (defn #_"Object" RT'seqToTypedArray-2 [#_"Class" ___type, #_"ISeq" ___seq]
        (let [#_"Object" ___ret (ร Array/newInstance(___type, RT'length(___seq)))]
            (cond (= ___type Integer/TYPE)
                (do
                    (loop-when-recur [#_"int" ___i 0 ___seq ___seq] (some? ___seq) [(inc ___i) (next ___seq)]
                        (ร Array/set(___ret, ___i, intCast((first ___seq))))
                    )
                )
                (= ___type Byte/TYPE)
                (do
                    (loop-when-recur [#_"int" ___i 0 ___seq ___seq] (some? ___seq) [(inc ___i) (next ___seq)]
                        (ร Array/set(___ret, ___i, byteCast((first ___seq))))
                    )
                )
                (= ___type Float/TYPE)
                (do
                    (loop-when-recur [#_"int" ___i 0 ___seq ___seq] (some? ___seq) [(inc ___i) (next ___seq)]
                        (ร Array/set(___ret, ___i, floatCast((first ___seq))))
                    )
                )
                (= ___type Short/TYPE)
                (do
                    (loop-when-recur [#_"int" ___i 0 ___seq ___seq] (some? ___seq) [(inc ___i) (next ___seq)]
                        (ร Array/set(___ret, ___i, shortCast((first ___seq))))
                    )
                )
                (= ___type Character/TYPE)
                (do
                    (loop-when-recur [#_"int" ___i 0 ___seq ___seq] (some? ___seq) [(inc ___i) (next ___seq)]
                        (ร Array/set(___ret, ___i, charCast((first ___seq))))
                    )
                )
                :else
                (do
                    (loop-when-recur [#_"int" ___i 0 ___seq ___seq] (some? ___seq) [(inc ___i) (next ___seq)]
                        (ร Array/set(___ret, ___i, (first ___seq)))
                    )
                )
            )
            ___ret
        )
    )

    (defn #_"int" RT'length [#_"ISeq" ___list]
        (let [#_"int" ___i 0]
            (loop-when-recur [#_"ISeq" ___c ___list] (some? ___c) [(next ___c)]
                (ยง ass ___i (inc ___i))
            )
            ___i
        )
    )

    (defn #_"int" RT'boundedLength [#_"ISeq" ___list, #_"int" ___limit]
        (let [#_"int" ___i 0]
            (loop-when-recur [#_"ISeq" ___c ___list] (and (some? ___c) (ร ___i <= ___limit)) [(next ___c)]
                (ยง ass ___i (inc ___i))
            )
            ___i
        )
    )

    (defn #_"Character" RT'readRet [#_"int" ___ret]
        (when (= ___ret -1)
            (ยง return nil)
        )
        (RT'box-1c (char ___ret))
    )

    (defn #_"Character" RT'readChar [#_"Reader" ___r] #_(ยง throws IOException)
        (let [#_"int" ___ret (.read ___r)]
            (RT'readRet ___ret)
        )
    )

    (defn #_"Character" RT'peekChar [#_"Reader" ___r] #_(ยง throws IOException)
        (ยง let [#_"int" ___ret]
            (if (instance? PushbackReader ___r)
                (do
                    (ยง ass ___ret (.read ___r))
                    (.unread (cast PushbackReader ___r), ___ret)
                )
                (do
                    (.mark ___r, 1)
                    (ยง ass ___ret (.read ___r))
                    (.reset ___r)
                )
            )

            (RT'readRet ___ret)
        )
    )

    (defn #_"int" RT'getLineNumber [#_"Reader" ___r]
        (when (ยง instance? LineNumberingPushbackReader ___r)
            (ยง return (.getLineNumber (cast' LineNumberingPushbackReader ___r)))
        )
        0
    )

    (defn #_"int" RT'getColumnNumber [#_"Reader" ___r]
        (when (ยง instance? LineNumberingPushbackReader ___r)
            (ยง return (.getColumnNumber (cast' LineNumberingPushbackReader ___r)))
        )
        0
    )

    (defn #_"LineNumberingPushbackReader" RT'getLineNumberingReader [#_"Reader" ___r]
        (when (RT'isLineNumberingReader ___r)
            (ยง return (cast' LineNumberingPushbackReader ___r))
        )
        (LineNumberingPushbackReader'new-1 ___r)
    )

    (defn #_"boolean" RT'isLineNumberingReader [#_"Reader" ___r]
        (ยง instance? LineNumberingPushbackReader ___r)
    )

    (defn #_"boolean" RT'isReduced [#_"Object" ___r]
        (ยง instance? Reduced ___r)
    )

    (defn #_"String" RT'resolveClassNameInContext [#_"String" ___className]
        ;; todo - look up in context var
        ___className
    )

    (defn #_"boolean" RT'suppressRead []
        (ร RT'booleanCast-1o(RT'SUPPRESS_READ.deref()))
    )

    (defn #_"String" RT'printString [#_"Object" ___x]
        (try
            (let [#_"StringWriter" ___sw (StringWriter.)]
                (print ___x, ___sw)
                (.toString ___sw)
            )
            (catch Exception ___e
                (throw (Util'sneakyThrow ___e))
            )
        )
    )

    (defn #_"Object" RT'readString-1 [#_"String" ___s]
        (RT'readString-2 ___s, nil)
    )

    (defn #_"Object" RT'readString-2 [#_"String" ___s, #_"Object" ___opts]
        (let [#_"PushbackReader" ___r (PushbackReader. (StringReader. ___s))]
            (LispReader'read-2 ___r, ___opts)
        )
    )

    (defn #_"void" RT'print [#_"Object" ___x, #_"Writer" ___w] #_(ยง throws IOException)
        ;; call multimethod
        (if (and (.isBound RT'PRINT_INITIALIZED) (RT'booleanCast-1o (.deref RT'PRINT_INITIALIZED)))
            (do
                (.invoke RT'PR_ON, ___x, ___w)
            )
            (do
                (let [#_"boolean" ___readably (RT'booleanCast-1o (.deref RT'PRINT_READABLY))]
                    (when (ยง instance? Obj ___x)
                        (let [#_"Obj" ___o (cast' Obj ___x)]
                            (when (and (pos? (RT'count (.meta ___o))) (or (and ___readably (RT'booleanCast-1o (.deref RT'PRINT_META))) (RT'booleanCast-1o (.deref RT'PRINT_DUP))))
                                (let [#_"IPersistentMap" ___meta (.meta ___o)]
                                    (.write ___w, "#^")
                                    (if (and (ร (count ___meta) == 1) (.containsKey ___meta, RT'TAG_KEY))
                                        (do
                                            (ร print(___meta.valAt(RT'TAG_KEY), ___w))
                                        )
                                        (do
                                            (print ___meta, ___w)
                                        )
                                    )
                                    (.write ___w, \space)
                                )
                            )
                        )
                    )
                    (cond (nil? ___x)
                        (do
                            (.write ___w, "nil")
                        )
                        (or (ยง instance? ISeq ___x) (ยง instance? IPersistentList ___x))
                        (do
                            (ร ___w.write(\())
                            (ร printInnerSeq(RT'seq(___x), ___w))
                            (.write ___w, \))
                        )
                        (instance? String ___x)
                        (do
                            (let [#_"String" ___s (cast String ___x)]
                                (if (not ___readably)
                                    (do
                                        (.write ___w, ___s)
                                    )
                                    (do
                                        (ร ___w.write(\")) ;; oops! "
                                        (loop-when-recur [#_"int" ___i 0] (ร ___i < (.length ___s)) [(inc ___i)]
                                            (let [#_"char" ___c (.charAt ___s, ___i)]
                                                (ยง switch ___c
                                                    (ยง case \newline)
                                                    (do
                                                        (.write ___w, "\\n")
                                                        (ยง break )
                                                    )
                                                    (ยง case \tab)
                                                    (do
                                                        (.write ___w, "\\t")
                                                        (ยง break )
                                                    )
                                                    (ยง case \return)
                                                    (do
                                                        (.write ___w, "\\r")
                                                        (ยง break )
                                                    )
                                                    (ยง case \")
                                                    (do
                                                        (ร ___w.write("\\\""))
                                                        (ยง break )
                                                    )
                                                    (ยง case \\)
                                                    (do
                                                        (.write ___w, "\\\\")
                                                        (ยง break )
                                                    )
                                                    (ยง case \formfeed)
                                                    (do
                                                        (.write ___w, "\\f")
                                                        (ยง break )
                                                    )
                                                    (ยง case \backspace)
                                                    (do
                                                        (.write ___w, "\\b")
                                                        (ยง break )
                                                    )
                                                    (ยง default )
                                                    (do
                                                        (.write ___w, ___c)
                                                        (ยง break )
                                                    )
                                                )
                                            )
                                        )
                                        (ร ___w.write(\")) ;; oops! "
                                    )
                                )
                            )
                        )
                        (ยง instance? IPersistentMap ___x)
                        (do
                            (ร ___w.write(\{))
                            (loop-when-recur [#_"ISeq" ___s (RT'seq ___x)] (some? ___s) [(next ___s)]
                                (let [#_"IMapEntry" ___e (cast' IMapEntry (first ___s))]
                                    (ร print((.key ___e), ___w))
                                    (.write ___w, \space)
                                    (ร print((.val ___e), ___w))
                                    (when (some? (next ___s))
                                        (.write ___w, ", ")
                                    )
                                )
                            )
                            (ร ___w.write(\}))
                        )
                        (ยง instance? IPersistentVector ___x)
                        (do
                            (let [#_"IPersistentVector" ___a (cast' IPersistentVector ___x)]
                                (ร ___w.write(\[))
                                (loop-when-recur [#_"int" ___i 0] (ร ___i < (count ___a)) [(inc ___i)]
                                    (ร print(___a.nth(___i), ___w))
                                    (when (ร ___i < (count ___a) - 1)
                                        (.write ___w, \space)
                                    )
                                )
                                (ร ___w.write(\]))
                            )
                        )
                        (ยง instance? IPersistentSet ___x)
                        (do
                            (.write ___w, "#{")
                            (loop-when-recur [#_"ISeq" ___s (RT'seq ___x)] (some? ___s) [(next ___s)]
                                (ร print((first ___s), ___w))
                                (when (some? (next ___s))
                                    (.write ___w, " ")
                                )
                            )
                            (ร ___w.write(\}))
                        )
                        (instance? Character ___x)
                        (do
                            (let [#_"char" ___c (.charValue (cast Character ___x))]
                                (if (not ___readably)
                                    (do
                                        (.write ___w, ___c)
                                    )
                                    (do
                                        (.write ___w, \\)
                                        (ยง switch ___c
                                            (ยง case \newline)
                                            (do
                                                (.write ___w, "newline")
                                                (ยง break )
                                            )
                                            (ยง case \tab)
                                            (do
                                                (.write ___w, "tab")
                                                (ยง break )
                                            )
                                            (ยง case \space)
                                            (do
                                                (.write ___w, "space")
                                                (ยง break )
                                            )
                                            (ยง case \backspace)
                                            (do
                                                (.write ___w, "backspace")
                                                (ยง break )
                                            )
                                            (ยง case \formfeed)
                                            (do
                                                (.write ___w, "formfeed")
                                                (ยง break )
                                            )
                                            (ยง case \return)
                                            (do
                                                (.write ___w, "return")
                                                (ยง break )
                                            )
                                            (ยง default )
                                            (do
                                                (.write ___w, ___c)
                                                (ยง break )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        (instance? Class ___x)
                        (do
                            (.write ___w, "#=")
                            (ร ___w.write((cast Class ___x).getName()))
                        )
                        (and (instance? BigDecimal ___x) ___readably)
                        (do
                            (.write ___w, (.toString ___x))
                            (.write ___w, \M)
                        )
                        (and (ยง instance? BigInt ___x) ___readably)
                        (do
                            (.write ___w, (.toString ___x))
                            (.write ___w, \N)
                        )
                        (and (instance? BigInteger ___x) ___readably)
                        (do
                            (.write ___w, (.toString ___x))
                            (.write ___w, "BIGINT")
                        )
                        (ยง instance? Var ___x)
                        (do
                            (let [#_"Var" ___v (cast' Var ___x)]
                                (.write ___w, (str "#=(var " (:name (:ns ___v)) "/" (:sym ___v) ")"))
                            )
                        )
                        (instance? Pattern ___x)
                        (do
                            (let [#_"Pattern" ___p (cast Pattern ___x)]
                                (.write ___w, (str "#\"" (.pattern ___p) "\""))
                            )
                        )
                        :else
                        (do
                            (.write ___w, (.toString ___x))
                        )
                    )
                )
            )
        )
        nil
    )

    (defn- #_"void" RT'printInnerSeq [#_"ISeq" ___x, #_"Writer" ___w] #_(ยง throws IOException)
        (loop-when-recur [#_"ISeq" ___s ___x] (some? ___s) [(next ___s)]
            (ร print((first ___s), ___w))
            (when (some? (next ___s))
                (.write ___w, \space)
            )
        )
        nil
    )

    (defn #_"void" RT'formatAesthetic [#_"Writer" ___w, #_"Object" ___obj] #_(ยง throws IOException)
        (if (nil? ___obj)
            (do
                (.write ___w, "nil")
            )
            (do
                (.write ___w, (.toString ___obj))
            )
        )
        nil
    )

    (defn #_"void" RT'formatStandard [#_"Writer" ___w, #_"Object" ___obj] #_(ยง throws IOException)
        (cond (nil? ___obj)
            (do
                (.write ___w, "nil")
            )
            (instance? String ___obj)
            (do
                (ร ___w.write(\")) ;; oops! "
                (.write ___w, (cast String ___obj))
                (ร ___w.write(\")) ;; oops! "
            )
            (instance? Character ___obj)
            (do
                (.write ___w, \\)
                (let [#_"char" ___c (.charValue (cast Character ___obj))]
                    (ยง switch ___c
                        (ยง case \newline)
                        (do
                            (.write ___w, "newline")
                            (ยง break )
                        )
                        (ยง case \tab)
                        (do
                            (.write ___w, "tab")
                            (ยง break )
                        )
                        (ยง case \space)
                        (do
                            (.write ___w, "space")
                            (ยง break )
                        )
                        (ยง case \backspace)
                        (do
                            (.write ___w, "backspace")
                            (ยง break )
                        )
                        (ยง case \formfeed)
                        (do
                            (.write ___w, "formfeed")
                            (ยง break )
                        )
                        (ยง default )
                        (do
                            (.write ___w, ___c)
                            (ยง break )
                        )
                    )
                )
            )
            :else
            (do
                (.write ___w, (.toString ___obj))
            )
        )
        nil
    )

    (defn #_"Object" RT'format [#_"Object" ___o, #_"String" ___s, #_"Object..." ___args] #_(ยง throws IOException)
        (ยง let [#_"Writer" ___w]
            (cond (nil? ___o)
                (do
                    (ยง ass ___w (StringWriter.))
                )
                (Util'equals ___o, RT'T)
                (do
                    (ยง ass ___w (cast Writer (.deref RT'OUT)))
                )
                :else
                (do
                    (ยง ass ___w (cast Writer ___o))
                )
            )
            (ร doFormat(___w, ___s, ArraySeq'create-1(___args)))
            (when (nil? ___o)
                (ยง return (.toString ___w))
            )
            nil
        )
    )

    (defn #_"ISeq" RT'doFormat [#_"Writer" ___w, #_"String" ___s, #_"ISeq" ___args] #_(ยง throws IOException)
        (loop-when-recur [#_"int" ___i 0] (ร ___i < (.length ___s)) [___i]
            (let [#_"char" ___c (.charAt ___s, ___i)]
                (ยง ass ___i (inc ___i))
                (ยง switch (Character/toLowerCase ___c)
                    (ยง case \~)
                    (do
                        (let [#_"char" ___d (.charAt ___s, ___i)]
                            (ยง ass ___i (inc ___i))
                            (ยง switch (Character/toLowerCase ___d)
                                (ยง case \%)
                                (do
                                    (.write ___w, \newline)
                                    (ยง break )
                                )
                                (ยง case \t)
                                (do
                                    (.write ___w, \tab)
                                    (ยง break )
                                )
                                (ยง case \a)
                                (do
                                    (when (nil? ___args)
                                        (throw (IllegalArgumentException. "Missing argument"))
                                    )
                                    (ร RT'formatAesthetic(___w, RT'first(___args)))
                                    (ยง ass ___args (RT'next ___args))
                                    (ยง break )
                                )
                                (ยง case \s)
                                (do
                                    (when (nil? ___args)
                                        (throw (IllegalArgumentException. "Missing argument"))
                                    )
                                    (ร RT'formatStandard(___w, RT'first(___args)))
                                    (ยง ass ___args (RT'next ___args))
                                    (ยง break )
                                )
                                (ยง case \{)
                                (do
                                    (let [#_"int" ___j (.indexOf ___s, "~}", ___i)] ;; note - does not nest
                                        (when (= ___j -1)
                                            (throw (IllegalArgumentException. "Missing ~}"))
                                        )
                                        (let [#_"String" ___subs (.substring ___s, ___i, ___j)]
                                            (loop-when-recur [#_"ISeq" ___sargs (ร RT'seq(RT'first(___args)))] (some? ___sargs) [___sargs]
                                                (ยง ass ___sargs (doFormat ___w, ___subs, ___sargs))
                                            )
                                            (ยง ass ___args (RT'next ___args))
                                            (ยง ass ___i (+ ___j 2)) ;; skip "~}"
                                            (ยง break )
                                        )
                                    )
                                )
                                (ยง case \^)
                                (do
                                    (when (nil? ___args)
                                        (ยง return nil)
                                    )
                                    (ยง break )
                                )
                                (ยง case \~)
                                (do
                                    (ร ___w.write(\~))
                                    (ยง break )
                                )
                                (ยง default )
                                (do
                                    (throw (IllegalArgumentException. (str "Unsupported ~ directive: " ___d)))
                                )
                            )
                            (ยง break )
                        )
                    )
                    (ยง default )
                    (do
                        (.write ___w, ___c)
                        (ยง break )
                    )
                )
            )
        )
        ___args
    )

    (defn #_"Object[]" RT'setValues [#_"Object..." ___vals]
        (when (> (ยง alength ___vals) 0)
            (ยง return ___vals)
        )
        nil
    )

    (defn #_"ClassLoader" RT'makeClassLoader []
        (cast ClassLoader (AccessController/doPrivileged(
                (ยง reify PrivilegedAction()
                    #_method
                    (ยง defn #_"Object" (ยง method run) [#_"PrivilegedAction" this]
                        (try
                            (ร Var'pushThreadBindings(RT'map(RT'USE_CONTEXT_CLASSLOADER, RT'T)))
                            (ร DynamicClassLoader'new-1(baseLoader()))
                            (finally
                                (Var'popThreadBindings)
                            )
                        )
                    )
                )
            )
        ))
    )

    (defn #_"ClassLoader" RT'baseLoader []
        (cond (.isBound Compiler'LOADER)
            (do
                (ยง return (cast ClassLoader (.deref Compiler'LOADER)))
            )
            (ร RT'booleanCast-1o(RT'USE_CONTEXT_CLASSLOADER.deref()))
            (do
                (ยง return (ร Thread/currentThread().getContextClassLoader()))
            )
        )
        (.getClassLoader (ยง class Compiler))
    )

    (defn #_"InputStream" RT'resourceAsStream [#_"ClassLoader" ___loader, #_"String" ___name]
        (if (nil? ___loader)
            (do
                (ClassLoader/getSystemResourceAsStream ___name)
            )
            (do
                (.getResourceAsStream ___loader, ___name)
            )
        )
    )

    (defn #_"URL" RT'getResource [#_"ClassLoader" ___loader, #_"String" ___name]
        (if (nil? ___loader)
            (do
                (ClassLoader/getSystemResource ___name)
            )
            (do
                (.getResource ___loader, ___name)
            )
        )
    )

    (defn #_"Class" RT'classForName-3 [#_"String" ___name, #_"boolean" ___load, #_"ClassLoader" ___loader]
        (try
            (let [#_"Class" ___c nil]
                (when (not (ยง instance? DynamicClassLoader ___loader))
                    (ยง ass ___c (DynamicClassLoader'findInMemoryClass ___name))
                )
                (when (some? ___c)
                    (ยง return ___c)
                )
                (Class/forName ___name, ___load, ___loader)
            )
            (catch ClassNotFoundException ___e
                (throw (Util'sneakyThrow ___e))
            )
        )
    )

    (defn #_"Class" RT'classForName-1 [#_"String" ___name]
        (ร RT'classForName-3(___name, true, baseLoader()))
    )

    (defn #_"Class" RT'classForNameNonLoading [#_"String" ___name]
        (ร RT'classForName-3(___name, false, baseLoader()))
    )

    (defn #_"Class" RT'loadClassForName [#_"String" ___name]
        (try
            (RT'classForNameNonLoading ___name)
            (catch Exception ___e
                (if (instance? ClassNotFoundException ___e)
                    (do
                        (ยง return nil)
                    )
                    (do
                        (throw (Util'sneakyThrow ___e))
                    )
                )
            )
        )
        (RT'classForName-1 ___name)
    )

    (defn #_"float" RT'aget-2f [#_"float[]" ___xs, #_"int" ___i]
        (ยง aget ___xs ___i)
    )

    (defn #_"float" RT'aset-3f [#_"float[]" ___xs, #_"int" ___i, #_"float" ___v]
        (ยง ass (ยง aget ___xs ___i) ___v)
        ___v
    )

    (defn #_"int" RT'alength-1f [#_"float[]" ___xs]
        (ยง alength ___xs)
    )

    (defn #_"float[]" RT'aclone-1f [#_"float[]" ___xs]
        (.clone ___xs)
    )

    (defn #_"double" RT'aget-2d [#_"double[]" ___xs, #_"int" ___i]
        (ยง aget ___xs ___i)
    )

    (defn #_"double" RT'aset-3d [#_"double[]" ___xs, #_"int" ___i, #_"double" ___v]
        (ยง ass (ยง aget ___xs ___i) ___v)
        ___v
    )

    (defn #_"int" RT'alength-1d [#_"double[]" ___xs]
        (ยง alength ___xs)
    )

    (defn #_"double[]" RT'aclone-1d [#_"double[]" ___xs]
        (.clone ___xs)
    )

    (defn #_"int" RT'aget-2i [#_"int[]" ___xs, #_"int" ___i]
        (ยง aget ___xs ___i)
    )

    (defn #_"int" RT'aset-3i [#_"int[]" ___xs, #_"int" ___i, #_"int" ___v]
        (ยง ass (ยง aget ___xs ___i) ___v)
        ___v
    )

    (defn #_"int" RT'alength-1i [#_"int[]" ___xs]
        (ยง alength ___xs)
    )

    (defn #_"int[]" RT'aclone-1i [#_"int[]" ___xs]
        (.clone ___xs)
    )

    (defn #_"long" RT'aget-2l [#_"long[]" ___xs, #_"int" ___i]
        (ยง aget ___xs ___i)
    )

    (defn #_"long" RT'aset-3l [#_"long[]" ___xs, #_"int" ___i, #_"long" ___v]
        (ยง ass (ยง aget ___xs ___i) ___v)
        ___v
    )

    (defn #_"int" RT'alength-1l [#_"long[]" ___xs]
        (ยง alength ___xs)
    )

    (defn #_"long[]" RT'aclone-1l [#_"long[]" ___xs]
        (.clone ___xs)
    )

    (defn #_"char" RT'aget-2c [#_"char[]" ___xs, #_"int" ___i]
        (ยง aget ___xs ___i)
    )

    (defn #_"char" RT'aset-3c [#_"char[]" ___xs, #_"int" ___i, #_"char" ___v]
        (ยง ass (ยง aget ___xs ___i) ___v)
        ___v
    )

    (defn #_"int" RT'alength-1c [#_"char[]" ___xs]
        (ยง alength ___xs)
    )

    (defn #_"char[]" RT'aclone-1c [#_"char[]" ___xs]
        (.clone ___xs)
    )

    (defn #_"byte" RT'aget-2b [#_"byte[]" ___xs, #_"int" ___i]
        (ยง aget ___xs ___i)
    )

    (defn #_"byte" RT'aset-3b [#_"byte[]" ___xs, #_"int" ___i, #_"byte" ___v]
        (ยง ass (ยง aget ___xs ___i) ___v)
        ___v
    )

    (defn #_"int" RT'alength-1b [#_"byte[]" ___xs]
        (ยง alength ___xs)
    )

    (defn #_"byte[]" RT'aclone-1b [#_"byte[]" ___xs]
        (.clone ___xs)
    )

    (defn #_"short" RT'aget-2s [#_"short[]" ___xs, #_"int" ___i]
        (ยง aget ___xs ___i)
    )

    (defn #_"short" RT'aset-3s [#_"short[]" ___xs, #_"int" ___i, #_"short" ___v]
        (ยง ass (ยง aget ___xs ___i) ___v)
        ___v
    )

    (defn #_"int" RT'alength-1s [#_"short[]" ___xs]
        (ยง alength ___xs)
    )

    (defn #_"short[]" RT'aclone-1s [#_"short[]" ___xs]
        (.clone ___xs)
    )

    (defn #_"boolean" RT'aget-2z [#_"boolean[]" ___xs, #_"int" ___i]
        (ยง aget ___xs ___i)
    )

    (defn #_"boolean" RT'aset-3z [#_"boolean[]" ___xs, #_"int" ___i, #_"boolean" ___v]
        (ยง ass (ยง aget ___xs ___i) ___v)
        ___v
    )

    (defn #_"int" RT'alength-1z [#_"boolean[]" ___xs]
        (ยง alength ___xs)
    )

    (defn #_"boolean[]" RT'aclone-1z [#_"boolean[]" ___xs]
        (.clone ___xs)
    )

    (defn #_"Object" RT'aget-2o [#_"Object[]" ___xs, #_"int" ___i]
        (ยง aget ___xs ___i)
    )

    (defn #_"Object" RT'aset-3o [#_"Object[]" ___xs, #_"int" ___i, #_"Object" ___v]
        (ยง ass (ยง aget ___xs ___i) ___v)
        ___v
    )

    (defn #_"int" RT'alength-1o [#_"Object[]" ___xs]
        (ยง alength ___xs)
    )

    (defn #_"Object[]" RT'aclone-1o [#_"Object[]" ___xs]
        (.clone ___xs)
    )
)
)

(java-ns cloiure.lang.Seqable

(ยง defprotocol Seqable
    #_abstract
    (#_"ISeq" Seqable'''(ยง method seq) [#_"Seqable" this])
)
)

(java-ns cloiure.lang.SeqEnumeration

(ยง import java.util.Enumeration)

(class-ns SeqEnumeration (ยง implements Enumeration)
    (defn- #_"SeqEnumeration" SeqEnumeration'init []
        (hash-map
            #_"ISeq" :seq nil
        )
    )

    (defn #_"SeqEnumeration" SeqEnumeration'new [#_"ISeq" ___seq]
        (let [this (SeqEnumeration'init)]
            (ยง ass (:seq this) ___seq)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasMoreElements) [#_"SeqEnumeration" this]
        (some? (:seq this))
    )

    #_method
    (ยง defn #_"Object" (ยง method nextElement) [#_"SeqEnumeration" this]
        (let [#_"Object" ___ret (RT'first (:seq this))]
            (ยง ass (:seq this) (RT'next (:seq this)))
            ___ret
        )
    )
)
)

(java-ns cloiure.lang.SeqIterator

(ยง import java.util.Iterator)
(ยง import java.util.NoSuchElementException)

(class-ns SeqIterator (ยง implements Iterator)
    (def #_"Object" SeqIterator'START (Object.))

    (defn- #_"SeqIterator" SeqIterator'init []
        (hash-map
            #_"Object" :seq nil
            #_"Object" :next nil
        )
    )

    (defn #_"SeqIterator" SeqIterator'new [#_"Object" ___o]
        (let [this (SeqIterator'init)]
            (ยง ass (:seq this) SeqIterator'START)
            (ยง ass (:next this) ___o)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"SeqIterator" this]
        (cond (ร (:seq this) == SeqIterator'START)
            (do
                (ยง ass (:seq this) nil)
                (ยง ass (:next this) (RT'seq (:next this)))
            )
            (ร (:seq this) == (:next this))
            (do
                (ยง ass (:next this) (RT'next (:seq this)))
            )
        )
        (some? (:next this))
    )

    #_method
    (ยง defn #_"Object" (ยง method next) [#_"SeqIterator" this] #_(ยง throws NoSuchElementException)
        (when (not (.hasNext this))
            (throw (NoSuchElementException.))
        )
        (ยง ass (:seq this) (:next this))
        (RT'first (:next this))
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"SeqIterator" this]
        (throw (UnsupportedOperationException.))
    )
)
)

(java-ns cloiure.lang.Sequential

(ยง defprotocol Sequential
)
)

(java-ns cloiure.lang.Settable

(ยง defprotocol Settable
    #_abstract
    (#_"Object" Settable'''(ยง method doSet) [#_"Settable" this, #_"Object" ___val])
    #_abstract
    (#_"Object" Settable'''(ยง method doReset) [#_"Settable" this, #_"Object" ___val])
)
)

(java-ns cloiure.lang.Sorted

(ยง import java.util.Comparator)

(ยง defprotocol Sorted
    #_abstract
    (#_"Comparator" Sorted'''(ยง method comparator) [#_"Sorted" this])
    #_abstract
    (#_"Object" Sorted'''(ยง method entryKey) [#_"Sorted" this, #_"Object" ___entry])
    #_abstract
    (#_"ISeq" Sorted'''(ยง method seq) [#_"Sorted" this, #_"boolean" ___ascending])
    #_abstract
    (#_"ISeq" Sorted'''(ยง method seqFrom) [#_"Sorted" this, #_"Object" ___key, #_"boolean" ___ascending])
)
)

(java-ns cloiure.lang.StringSeq

(class-ns StringSeq (ยง extends ASeq) (ยง implements IndexedSeq)
    (defn #_"StringSeq" StringSeq'create [#_"CharSequence" ___s]
        (when (zero? (.length ___s))
            (ยง return nil)
        )
        (StringSeq'new nil, ___s, 0)
    )

    (defn- #_"StringSeq" StringSeq'init []
        (hash-map
            #_"CharSequence" :s nil
            #_"int" :i 0
        )
    )

    (defn #_"StringSeq" StringSeq'new [#_"IPersistentMap" ___meta, #_"CharSequence" ___s, #_"int" ___i]
        (let [this (merge (ASeq'new ___meta) (StringSeq'init))]
            (ยง ass (:s this) ___s)
            (ยง ass (:i this) ___i)
            this
        )
    )

    #_method
    (ยง defn #_"Obj" (ยง method withMeta) [#_"StringSeq" this, #_"IPersistentMap" ___meta]
        (when (ร ___meta == (.meta this))
            (ยง return this)
        )
        (StringSeq'new ___meta, (:s this), (:i this))
    )

    #_method
    (ยง defn #_"Object" (ยง method first) [#_"StringSeq" this]
        (ร Character/valueOf((:s this).charAt((:i this))))
    )

    #_method
    (ยง defn #_"ISeq" (ยง method next) [#_"StringSeq" this]
        (when (ร (:i this) + 1 < (:s this).length())
            (ยง return (ร StringSeq'new((:_meta this), (:s this), (:i this) + 1)))
        )
        nil
    )

    #_method
    (ยง defn #_"int" (ยง method index) [#_"StringSeq" this]
        (:i this)
    )

    #_method
    (ยง defn #_"int" (ยง method count) [#_"StringSeq" this]
        (ร (:s this).length() - (:i this))
    )
)
)

(java-ns cloiure.lang.Symbol

(class-ns Symbol (ยง extends AFn) (ยง implements IObj, Comparable, Named, IHashEq)
    ;; the create thunks preserve binary compatibility with code compiled
    ;; against earlier version of Cloiure and can be removed (at some point).
    (defn #_"Symbol" Symbol'create-2 [#_"String" ___ns, #_"String" ___name]
        (Symbol'intern-2 ___ns, ___name)
    )

    (defn #_"Symbol" Symbol'create-1 [#_"String" ___nsname]
        (Symbol'intern-1 ___nsname)
    )

    (defn #_"Symbol" Symbol'intern-2 [#_"String" ___ns, #_"String" ___name]
        (Symbol'new-2 ___ns, ___name)
    )

    (defn #_"Symbol" Symbol'intern-1 [#_"String" ___nsname]
        (let [#_"int" ___i (.indexOf ___nsname, \/)]
            (if (or (ร ___i == -1) (.equals ___nsname, "/"))
                (do
                    (Symbol'new-2 nil, ___nsname)
                )
                (do
                    (ร Symbol'new-2(___nsname.substring(0, ___i), ___nsname.substring(___i + 1)))
                )
            )
        )
    )

    (defn- #_"Symbol" Symbol'init []
        (hash-map
            #_"String" :ns nil
            #_"String" :name nil
            #_"int" :_hasheq 0
            #_"IPersistentMap" :_meta nil
            #_transient
            #_"String" :_str nil
        )
    )

    (defn- #_"Symbol" Symbol'new-2 [#_"String" ___ns_interned, #_"String" ___name_interned]
        (let [this (merge (AFn'new) (Symbol'init))]
            (ยง ass (:name this) ___name_interned)
            (ยง ass (:ns this) ___ns_interned)
            (ยง ass (:_meta this) nil)
            this
        )
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"Symbol" this]
        (when (nil? (:_str this))
            (if (some? (:ns this))
                (do
                    (ยง ass (:_str this) (str (:ns this) "/" (:name this)))
                )
                (do
                    (ยง ass (:_str this) (:name this))
                )
            )
        )
        (:_str this)
    )

    #_method
    (ยง defn #_"String" (ยง method getNamespace) [#_"Symbol" this]
        (:ns this)
    )

    #_method
    (ยง defn #_"String" (ยง method getName) [#_"Symbol" this]
        (:name this)
    )

    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"Symbol" this, #_"Object" ___o]
        (when (= this ___o)
            (ยง return true)
        )
        (when (not (ยง instance? Symbol ___o))
            (ยง return false)
        )

        (let [#_"Symbol" ___symbol (cast' Symbol ___o)]
            (and (Util'equals (:ns this), (:ns ___symbol)) (.equals (:name this), (:name ___symbol)))
        )
    )

    #_method
    (ยง defn #_"int" (ยง method hashCode) [#_"Symbol" this]
        (ร Util'hashCombine((:name this).hashCode(), Util'hash((:ns this))))
    )

    #_method
    (ยง defn #_"int" (ยง method hasheq) [#_"Symbol" this]
        (when (zero? (:_hasheq this))
            (ยง ass (:_hasheq this) (ร Util'hashCombine(Murmur3'hashUnencodedChars((:name this)), Util'hash((:ns this)))))
        )
        (:_hasheq this)
    )

    #_method
    (ยง defn #_"IObj" (ยง method withMeta) [#_"Symbol" this, #_"IPersistentMap" ___meta]
        (Symbol'new-3 ___meta, (:ns this), (:name this))
    )

    (defn- #_"Symbol" Symbol'new-3 [#_"IPersistentMap" ___meta, #_"String" ___ns, #_"String" ___name]
        (let [this (merge (AFn'new) (Symbol'init))]
            (ยง ass (:name this) ___name)
            (ยง ass (:ns this) ___ns)
            (ยง ass (:_meta this) ___meta)
            this
        )
    )

    #_method
    (ยง defn #_"int" (ยง method compareTo) [#_"Symbol" this, #_"Object" ___o]
        (let [#_"Symbol" ___s (cast' Symbol ___o)]
            (when (.equals this, ___o)
                (ยง return 0)
            )
            (when (and (nil? (:ns this)) (some? (:ns ___s)))
                (ยง return -1)
            )
            (when (ร (some? (:ns this)))
                (when (ร (nil? (:ns ___s)))
                    (ยง return 1)
                )
                (let [#_"int" ___nsc (.compareTo (:ns this), (:ns ___s))]
                    (when (not= ___nsc 0)
                        (ยง return ___nsc)
                    )
                )
            )
            (.compareTo (:name this), (:name ___s))
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Symbol" this, #_"Object" ___obj]
        (RT'get-2 ___obj, this)
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Symbol" this, #_"Object" ___obj, #_"Object" ___notFound]
        (RT'get-3 ___obj, this, ___notFound)
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method meta) [#_"Symbol" this]
        (:_meta this)
    )
)
)

(java-ns cloiure.lang.TaggedLiteral

(class-ns TaggedLiteral (ยง implements ILookup)
    (ยง def #_"Keyword" TaggedLiteral'TAG_KW (Keyword'intern-1 "tag"))
    (ยง def #_"Keyword" TaggedLiteral'FORM_KW (Keyword'intern-1 "form"))

    (defn #_"TaggedLiteral" TaggedLiteral'create [#_"Symbol" ___tag, #_"Object" ___form]
        (TaggedLiteral'new ___tag, ___form)
    )

    (defn- #_"TaggedLiteral" TaggedLiteral'init []
        (hash-map
            #_"Symbol" :tag nil
            #_"Object" :form nil
        )
    )

    (defn- #_"TaggedLiteral" TaggedLiteral'new [#_"Symbol" ___tag, #_"Object" ___form]
        (let [this (TaggedLiteral'init)]
            (ยง ass (:tag this) ___tag)
            (ยง ass (:form this) ___form)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"TaggedLiteral" this, #_"Object" ___key]
        (.valAt this, ___key, nil)
    )

    #_method
    (ยง defn #_"Object" (ยง method valAt) [#_"TaggedLiteral" this, #_"Object" ___key, #_"Object" ___notFound]
        (cond (.equals TaggedLiteral'FORM_KW, ___key)
            (do
                (:form this)
            )
            (.equals TaggedLiteral'TAG_KW, ___key)
            (do
                (:tag this)
            )
            :else
            (do
                ___notFound
            )
        )
    )

    #_override
    #_method
    (ยง defn #_"boolean" (ยง method equals) [#_"TaggedLiteral" this, #_"Object" ___o]
        (when (= this ___o)
            (ยง return true)
        )
        (when (or (nil? ___o) (ร getClass() != (.getClass ___o)))
            (ยง return false)
        )

        (let [#_"TaggedLiteral" ___that (cast' TaggedLiteral ___o)]
            (when (if (some? (:form this)) (not (.equals (:form this), (:form ___that))) (some? (:form ___that)))
                (ยง return false)
            )
            (when (if (some? (:tag this)) (not (.equals (:tag this), (:tag ___that))) (some? (:tag ___that)))
                (ยง return false)
            )

            true
        )
    )

    #_override
    #_method
    (ยง defn #_"int" (ยง method hashCode) [#_"TaggedLiteral" this]
        (let [#_"int" ___result (Util'hash (:tag this))]
            (ยง ass ___result (ร 31 * ___result + Util'hash((:form this))))
            ___result
        )
    )
)
)

(java-ns cloiure.lang.TransactionalHashMap

(ยง import java.util.concurrent.ConcurrentMap)
(ยง import java.util.*)

(class-ns TransactionalHashMap #_"<K, V>" (ยง extends AbstractMap #_"<K, V>") (ยง implements ConcurrentMap #_"<K, V>")
    (defn- #_"TransactionalHashMap" TransactionalHashMap'init []
        (hash-map
            #_"Ref[]" :bins nil
        )
    )

    (defn #_"TransactionalHashMap" TransactionalHashMap'new-0 []
        (TransactionalHashMap'new-1i 421)
    )

    (defn #_"TransactionalHashMap" TransactionalHashMap'new-1i [#_"int" ___nBins]
        (let [this (merge (AbstractMap'new) (TransactionalHashMap'init))]
            (ยง ass (:bins this) (ยง typeless make-array Ref ___nBins))
            (loop-when-recur [#_"int" ___i 0] (< ___i ___nBins) [(inc ___i)]
                (ยง ass (ยง aget (:bins this) ___i) (Ref'new-1 PersistentHashMap'EMPTY))
            )
            this
        )
    )

    (defn #_"TransactionalHashMap" TransactionalHashMap'new-1m [#_"Map<? extends K, ? extends V>" ___m]
        (let [this (TransactionalHashMap'new-1i (.size ___m))]
            (.putAll this, ___m)
            this
        )
    )

    #_method
    (ยง defn #_"IPersistentMap" (ยง method mapAt) [#_"TransactionalHashMap" this, #_"int" ___bin]
        (cast' IPersistentMap (ร (:bins this)[___bin].deref()))
    )

    #_method
    (ยง defn #_"int" (ยง method binFor) [#_"TransactionalHashMap" this, #_"Object" ___k]
        ;; spread hashes, a la Cliff Click
        (let [#_"int" ___h (.hashCode ___k)]
            (ยง ass ___h (ร ___h :xor ((___h >>> 20) :xor (___h >>> 12))))
            (ยง ass ___h (ร ___h :xor ((___h >>> 7) :xor (___h >>> 4))))
            (ร ___h % (ยง alength (:bins this)))
        )
    )

    #_method
    (ยง defn #_"Entry" (ยง method entryAt) [#_"TransactionalHashMap" this, #_"Object" ___k]
        (ร this.mapAt(this.binFor(___k)).entryAt(___k))
    )

    #_method
    (ยง defn #_"int" (ยง method size) [#_"TransactionalHashMap" this]
        (let [#_"int" ___n 0]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength (:bins this))) [(inc ___i)]
                (ยง ass ___n (ร ___n + this.mapAt(___i).count()))
            )
            ___n
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method isEmpty) [#_"TransactionalHashMap" this]
        (zero? (.size this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method containsKey) [#_"TransactionalHashMap" this, #_"Object" ___k]
        (some? (.entryAt this, ___k))
    )

    #_method
    (ยง defn #_"V" (ยง method get) [#_"TransactionalHashMap" this, #_"Object" ___k]
        (let [#_"Entry" ___e (.entryAt this, ___k)]
            (when (some? ___e)
                (ยง return (cast' V (.getValue ___e)))
            )
            nil
        )
    )

    #_method
    (ยง defn #_"V" (ยง method put) [#_"TransactionalHashMap" this, #_"K" ___k, #_"V" ___v]
        (let [#_"Ref" ___r (ยง aget (:bins this) (ร this.binFor(___k)))]
            (let [#_"IPersistentMap" ___map (cast' IPersistentMap (.deref ___r))]
                (let [#_"Object" ___ret (.valAt ___map, ___k)]
                    (ร ___r.set(___map.assoc(___k, ___v)))
                    (cast' V ___ret)
                )
            )
        )
    )

    #_method
    (ยง defn #_"V" (ยง method remove) [#_"TransactionalHashMap" this, #_"Object" ___k]
        (let [#_"Ref" ___r (ยง aget (:bins this) (ร this.binFor(___k)))]
            (let [#_"IPersistentMap" ___map (cast' IPersistentMap (.deref ___r))]
                (let [#_"Object" ___ret (.valAt ___map, ___k)]
                    (ร ___r.set(___map.without(___k)))
                    (cast' V ___ret)
                )
            )
        )
    )

    #_method
    (ยง defn #_"void" (ยง method putAll) [#_"TransactionalHashMap" this, #_"Map<? extends K, ? extends V>" ___map]
        (loop-when-recur [#_"Iterator" ___i (.iterator (.entrySet ___map))] (.hasNext ___i) [___i]
            (let [#_"Entry<K, V>" ___e (cast' Entry (next ___i))]
                (ร this.put((.getKey ___e), (.getValue ___e)))
            )
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method clear) [#_"TransactionalHashMap" this]
        (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength (:bins this))) [(inc ___i)]
            (let [#_"Ref" ___r (ยง aget (:bins this) ___i)]
                (let [#_"IPersistentMap" ___map (cast' IPersistentMap (.deref ___r))]
                    (when (pos? (count ___map))
                        (.set ___r, PersistentHashMap'EMPTY)
                    )
                )
            )
        )
        nil
    )

    #_method
    (ยง defn #_"Set<Entry<K, V>>" (ยง method entrySet) [#_"TransactionalHashMap" this]
        (let [#_"ArrayList<Map$Entry<K, V>>" ___entries (ArrayList. (ยง alength (:bins this)))]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength (:bins this))) [(inc ___i)]
                (let [#_"IPersistentMap" ___map (.mapAt this, ___i)]
                    (when (pos? (count ___map))
                        (ร ___entries.addAll((cast Collection (RT'seq ___map))))
                    )
                )
            )
            (ยง reify AbstractSet<Entry<K, V>>()
                #_method
                (ยง defn #_"Iterator" (ยง method iterator) [#_"AbstractSet<Entry<K, V>>" this]
                    (ร Collections/unmodifiableList(___entries).iterator())
                )

                #_method
                (ยง defn #_"int" (ยง method size) [#_"AbstractSet<Entry<K, V>>" this]
                    (.size ___entries)
                )
            )
        )
    )

    #_method
    (ยง defn #_"V" (ยง method putIfAbsent) [#_"TransactionalHashMap" this, #_"K" ___k, #_"V" ___v]
        (let [#_"Ref" ___r (ยง aget (:bins this) (ร this.binFor(___k)))]
            (let [#_"IPersistentMap" ___map (cast' IPersistentMap (.deref ___r))]
                (let [#_"Entry" ___e (.entryAt ___map, ___k)]
                    (if (nil? ___e)
                        (do
                            (ร ___r.set(___map.assoc(___k, ___v)))
                            nil
                        )
                        (do
                            (cast' V (.getValue ___e))
                        )
                    )
                )
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method remove) [#_"TransactionalHashMap" this, #_"Object" ___k, #_"Object" ___v]
        (let [#_"Ref" ___r (ยง aget (:bins this) (ร this.binFor(___k)))]
            (let [#_"IPersistentMap" ___map (cast' IPersistentMap (.deref ___r))]
                (let [#_"Entry" ___e (.entryAt ___map, ___k)]
                    (when (and (some? ___e) (ร (.getValue ___e).equals(___v)))
                        (ร ___r.set(___map.without(___k)))
                        (ยง return true)
                    )
                    false
                )
            )
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method replace) [#_"TransactionalHashMap" this, #_"K" ___k, #_"V" ___oldv, #_"V" ___newv]
        (let [#_"Ref" ___r (ยง aget (:bins this) (ร this.binFor(___k)))]
            (let [#_"IPersistentMap" ___map (cast' IPersistentMap (.deref ___r))]
                (let [#_"Entry" ___e (.entryAt ___map, ___k)]
                    (when (and (some? ___e) (ร (.getValue ___e).equals(___oldv)))
                        (ร ___r.set(___map.assoc(___k, ___newv)))
                        (ยง return true)
                    )
                    false
                )
            )
        )
    )

    #_method
    (ยง defn #_"V" (ยง method replace) [#_"TransactionalHashMap" this, #_"K" ___k, #_"V" ___v]
        (let [#_"Ref" ___r (ยง aget (:bins this) (ร this.binFor(___k)))]
            (let [#_"IPersistentMap" ___map (cast' IPersistentMap (.deref ___r))]
                (let [#_"Entry" ___e (.entryAt ___map, ___k)]
                    (when (some? ___e)
                        (ร ___r.set(___map.assoc(___k, ___v)))
                        (ยง return (cast' V (.getValue ___e)))
                    )
                    nil
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.TransformerIterator

(ยง import java.util.Iterator)
(ยง import java.util.List)
(ยง import java.util.NoSuchElementException)
(ยง import java.util.Queue)
(ยง import java.util.LinkedList)

#_private
(ยง defprotocol Buffer
    #_abstract
    (#_"Buffer" Buffer'''(ยง method add) [#_"Buffer" this, #_"Object" ___o])
    #_abstract
    (#_"Object" Buffer'''(ยง method remove) [#_"Buffer" this])
    #_abstract
    (#_"boolean" Buffer'''(ยง method isEmpty) [#_"Buffer" this])
)

#_private
(class-ns EmptyBuffer (ยง implements Buffer)
    (defn #_"EmptyBuffer" EmptyBuffer'new []
        (hash-map)
    )

    #_method
    (ยง defn #_"Buffer" (ยง method add) [#_"EmptyBuffer" this, #_"Object" ___o]
        (SingleBuffer'new ___o)
    )

    #_method
    (ยง defn #_"Object" (ยง method remove) [#_"EmptyBuffer" this]
        (throw (IllegalStateException. "Removing object from empty buffer"))
    )

    #_method
    (ยง defn #_"boolean" (ยง method isEmpty) [#_"EmptyBuffer" this]
        true
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"EmptyBuffer" this]
        "EmptyBuffer"
    )
)

#_private
(class-ns SingleBuffer (ยง implements Buffer)
    (defn- #_"SingleBuffer" SingleBuffer'init []
        (hash-map
            #_volatile
            #_"Object" :val nil
        )
    )

    (defn #_"SingleBuffer" SingleBuffer'new [#_"Object" ___o]
        (let [this (SingleBuffer'init)]
            (ยง ass (:val this) ___o)
            this
        )
    )

    #_method
    (ยง defn #_"Buffer" (ยง method add) [#_"SingleBuffer" this, #_"Object" ___o]
        (if (ร (:val this) == TransformerIterator'NONE)
            (do
                (ยง ass (:val this) ___o)
                this
            )
            (do
                (ManyBuffer'new (:val this), ___o)
            )
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method remove) [#_"SingleBuffer" this]
        (when (ร (:val this) == TransformerIterator'NONE)
            (throw (IllegalStateException. "Removing object from empty buffer"))
        )
        (let [#_"Object" ___ret (:val this)]
            (ยง ass (:val this) TransformerIterator'NONE)
            ___ret
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method isEmpty) [#_"SingleBuffer" this]
        (ร ((:val this) == TransformerIterator'NONE))
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"SingleBuffer" this]
        (str "SingleBuffer: " (:val this))
    )
)

#_private
(class-ns ManyBuffer (ยง implements Buffer)
    (defn- #_"ManyBuffer" ManyBuffer'init []
        (hash-map
            #_"Queue" :vals (LinkedList.)
        )
    )

    (defn #_"ManyBuffer" ManyBuffer'new [#_"Object" ___o1, #_"Object" ___o2]
        (let [this (ManyBuffer'init)]
            (.add (:vals this), ___o1)
            (.add (:vals this), ___o2)
            this
        )
    )

    #_method
    (ยง defn #_"Buffer" (ยง method add) [#_"ManyBuffer" this, #_"Object" ___o]
        (.add (:vals this), ___o)
        this
    )

    #_method
    (ยง defn #_"Object" (ยง method remove) [#_"ManyBuffer" this]
        (.remove (:vals this))
    )

    #_method
    (ยง defn #_"boolean" (ยง method isEmpty) [#_"ManyBuffer" this]
        (.isEmpty (:vals this))
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"ManyBuffer" this]
        (str "ManyBuffer: " (.toString (:vals this)))
    )
)

#_private
(class-ns MultiIterator (ยง implements Iterator)
    (defn- #_"MultiIterator" MultiIterator'init []
        (hash-map
            #_"Iterator[]" :iters nil
        )
    )

    (defn #_"MultiIterator" MultiIterator'new [#_"Iterator[]" ___iters]
        (let [this (MultiIterator'init)]
            (ยง ass (:iters this) ___iters)
            this
        )
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"MultiIterator" this]
        (doseq [#_"Iterator" ___iter (:iters this)]
            (when (not (.hasNext ___iter))
                (ยง return false)
            )
        )
        true
    )

    #_method
    (ยง defn #_"Object" (ยง method next) [#_"MultiIterator" this]
        (let [#_"Object[]" ___nexts (make-array Object (ยง alength (:iters this)))]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (ยง alength (:iters this))) [(inc ___i)]
                (ยง ass (ยง aget ___nexts ___i) (ร (:iters this)[___i].next()))
            )
            (ArraySeq'new-2 ___nexts, 0)
        )
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"MultiIterator" this]
        (throw (UnsupportedOperationException.))
    )
)

(class-ns TransformerIterator (ยง implements Iterator)
    (def- #_"Buffer" TransformerIterator'EMPTY (EmptyBuffer'new))
    (def- #_"Object" TransformerIterator'NONE (Object.))

    (defn- #_"TransformerIterator" TransformerIterator'init []
        (hash-map
            ;; Source
            #_"Iterator" :sourceIter nil
            #_"IFn" :xf nil
            #_"boolean" :multi false

            ;; Iteration state
            #_volatile
            #_"Buffer" :buffer TransformerIterator'EMPTY
            #_volatile
            #_"Object" :next TransformerIterator'NONE
            #_volatile
            #_"boolean" :completed false
        )
    )

    (defn- #_"TransformerIterator" TransformerIterator'new [#_"IFn" ___xform, #_"Iterator" ___sourceIter, #_"boolean" ___multi]
        (let [this (TransformerIterator'init)]
            (ยง ass (:sourceIter this) ___sourceIter)
            (ยง ass (:xf this) (cast' IFn (.invoke ___xform,
                (ยง reify AFn()
                    #_method
                    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this]
                        nil
                    )

                    #_method
                    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___acc]
                        ___acc
                    )

                    #_method
                    (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___acc, #_"Object" ___o]
                        (ยง ass (:buffer this) (.add (:buffer this), ___o))
                        ___acc
                    )
                )
            )))
            (ยง ass (:multi this) ___multi)
            this
        )
    )

    (defn #_"Iterator" TransformerIterator'create [#_"IFn" ___xform, #_"Iterator" ___source]
        (TransformerIterator'new ___xform, ___source, false)
    )

    (defn #_"Iterator" TransformerIterator'createMulti [#_"IFn" ___xform, #_"List" ___sources]
        (let [#_"Iterator[]" ___iters (make-array Iterator (.size ___sources))]
            (loop-when-recur [#_"int" ___i 0] (ร ___i < (.size ___sources)) [(inc ___i)]
                (ยง ass (ยง aget ___iters ___i) (cast Iterator (.get ___sources, ___i)))
            )
            (ร TransformerIterator'new(___xform, MultiIterator'new(___iters), true))
        )
    )

    #_method
    (ยง defn- #_"boolean" (ยง method step) [#_"TransformerIterator" this]
        (when (ร (:next this) != TransformerIterator'NONE)
            (ยง return true)
        )

        (while (ร (:next this) == TransformerIterator'NONE)
            (if (.isEmpty (:buffer this))
                (do
                    (cond (:completed this)
                        (do
                            (ยง return false)
                        )
                        (.hasNext (:sourceIter this))
                        (do
                            (let [#_"Object" ___iter nil]
                                (if (:multi this)
                                    (do
                                        (ยง ass ___iter (ร (:xf this).applyTo(RT'cons(nil, (:sourceIter this).next()))))
                                    )
                                    (do
                                        (ยง ass ___iter (ร (:xf this).invoke(nil, (:sourceIter this).next())))
                                    )
                                )

                                (when (RT'isReduced ___iter)
                                    (.invoke (:xf this), nil)
                                    (ยง ass (:completed this) true)
                                )
                            )
                        )
                        :else
                        (do
                            (.invoke (:xf this), nil)
                            (ยง ass (:completed this) true)
                        )
                    )
                )
                (do
                    (ยง ass (:next this) (.remove (:buffer this)))
                )
            )
        )
        true
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasNext) [#_"TransformerIterator" this]
        (.step this)
    )

    #_method
    (ยง defn #_"Object" (ยง method next) [#_"TransformerIterator" this]
        (when (.hasNext this)
            (let [#_"Object" ___ret (:next this)]
                (ยง ass (:next this) TransformerIterator'NONE)
                (ยง return ___ret)
            )
        )
        (throw (NoSuchElementException.))
    )

    #_method
    (ยง defn #_"void" (ยง method remove) [#_"TransformerIterator" this]
        (throw (UnsupportedOperationException.))
    )
)
)

(java-ns cloiure.lang.Tuple

(ยง import java.util.Collection)
(ยง import java.util.RandomAccess)

#_stateless
(class-ns Tuple
    (def #_"int" Tuple'MAX_SIZE 6)

    (defn #_"IPersistentVector" Tuple'create-0 []
        PersistentVector'EMPTY
    )

    (defn #_"IPersistentVector" Tuple'create-1 [#_"Object" ___v0]
        (RT'vector ___v0)
    )

    (defn #_"IPersistentVector" Tuple'create-2 [#_"Object" ___v0, #_"Object" ___v1]
        (RT'vector ___v0, ___v1)
    )

    (defn #_"IPersistentVector" Tuple'create-3 [#_"Object" ___v0, #_"Object" ___v1, #_"Object" ___v2]
        (RT'vector ___v0, ___v1, ___v2)
    )

    (defn #_"IPersistentVector" Tuple'create-4 [#_"Object" ___v0, #_"Object" ___v1, #_"Object" ___v2, #_"Object" ___v3]
        (RT'vector ___v0, ___v1, ___v2, ___v3)
    )

    (defn #_"IPersistentVector" Tuple'create-5 [#_"Object" ___v0, #_"Object" ___v1, #_"Object" ___v2, #_"Object" ___v3, #_"Object" ___v4]
        (RT'vector ___v0, ___v1, ___v2, ___v3, ___v4)
    )

    (defn #_"IPersistentVector" Tuple'create-6 [#_"Object" ___v0, #_"Object" ___v1, #_"Object" ___v2, #_"Object" ___v3, #_"Object" ___v4, #_"Object" ___v5]
        (RT'vector ___v0, ___v1, ___v2, ___v3, ___v4, ___v5)
    )
)
)

(java-ns cloiure.lang.Util

(ยง import java.io.IOException)
(ยง import java.lang.ref.Reference)
(ยง import java.math.BigInteger)
(ยง import java.util.Collection)
(ยง import java.util.Map)
(ยง import java.util.concurrent.ConcurrentHashMap)
(ยง import java.lang.ref.ReferenceQueue)

(ยง defprotocol EquivPred
    #_abstract
    (#_"boolean" EquivPred'''(ยง method equiv) [#_"EquivPred" this, #_"Object" ___k1, #_"Object" ___k2])
)

#_stateless
(class-ns Util
    (defn #_"boolean" Util'equiv-2oo [#_"Object" ___k1, #_"Object" ___k2]
        (when (= ___k1 ___k2)
            (ยง return true)
        )
        (when (some? ___k1)
            (cond (and (instance? Number ___k1) (instance? Number ___k2))
                (do
                    (ยง return (ร Numbers'equal((cast Number ___k1), (cast Number ___k2))))
                )
                (or (ยง instance? IPersistentCollection ___k1) (ยง instance? IPersistentCollection ___k2))
                (do
                    (ยง return (Util'pcequiv ___k1, ___k2))
                )
            )
            (ยง return (.equals ___k1, ___k2))
        )
        false
    )

    (def #_"EquivPred" Util'equivNull
        (ยง reify EquivPred()
            #_method
            (ยง defn #_"boolean" (ยง method equiv) [#_"EquivPred" this, #_"Object" ___k1, #_"Object" ___k2]
                (nil? ___k2)
            )
        )
    )

    (def #_"EquivPred" Util'equivEquals
        (ยง reify EquivPred()
            #_method
            (ยง defn #_"boolean" (ยง method equiv) [#_"EquivPred" this, #_"Object" ___k1, #_"Object" ___k2]
                (.equals ___k1, ___k2)
            )
        )
    )

    (def #_"EquivPred" Util'equivNumber
        (ยง reify EquivPred()
            #_method
            (ยง defn #_"boolean" (ยง method equiv) [#_"EquivPred" this, #_"Object" ___k1, #_"Object" ___k2]
                (when (instance? Number ___k2)
                    (ยง return (ร Numbers'equal((cast Number ___k1), (cast Number ___k2))))
                )
                false
            )
        )
    )

    (def #_"EquivPred" Util'equivColl
        (ยง reify EquivPred()
            #_method
            (ยง defn #_"boolean" (ยง method equiv) [#_"EquivPred" this, #_"Object" ___k1, #_"Object" ___k2]
                (when (or (ยง instance? IPersistentCollection ___k1) (ยง instance? IPersistentCollection ___k2))
                    (ยง return (Util'pcequiv ___k1, ___k2))
                )
                (.equals ___k1, ___k2)
            )
        )
    )

    (defn #_"EquivPred" Util'equivPred [#_"Object" ___k1]
        (cond (nil? ___k1)
            (do
                (ยง return Util'equivNull)
            )
            (instance? Number ___k1)
            (do
                (ยง return Util'equivNumber)
            )
            (or (instance? String ___k1) (ยง instance? Symbol ___k1))
            (do
                (ยง return Util'equivEquals)
            )
            (or (instance? Collection ___k1) (instance? Map ___k1))
            (do
                (ยง return Util'equivColl)
            )
        )
        Util'equivEquals
    )

    (defn #_"boolean" Util'equiv-2ll [#_"long" ___k1, #_"long" ___k2]
        (= ___k1 ___k2)
    )

    (defn #_"boolean" Util'equiv-2ol [#_"Object" ___k1, #_"long" ___k2]
        (ร this.equiv(___k1, (cast Object ___k2)))
    )

    (defn #_"boolean" Util'equiv-2lo [#_"long" ___k1, #_"Object" ___k2]
        (ร this.equiv((cast Object ___k1), ___k2))
    )

    (defn #_"boolean" Util'equiv-2dd [#_"double" ___k1, #_"double" ___k2]
        (= ___k1 ___k2)
    )

    (defn #_"boolean" Util'equiv-2od [#_"Object" ___k1, #_"double" ___k2]
        (ร this.equiv(___k1, (cast Object ___k2)))
    )

    (defn #_"boolean" Util'equiv-2do [#_"double" ___k1, #_"Object" ___k2]
        (ร this.equiv((cast Object ___k1), ___k2))
    )

    (defn #_"boolean" Util'equiv-2bb [#_"boolean" ___k1, #_"boolean" ___k2]
        (= ___k1 ___k2)
    )

    (defn #_"boolean" Util'equiv-2ob [#_"Object" ___k1, #_"boolean" ___k2]
        (ร this.equiv(___k1, (cast Object ___k2)))
    )

    (defn #_"boolean" Util'equiv-2bo [#_"boolean" ___k1, #_"Object" ___k2]
        (ร this.equiv((cast Object ___k1), ___k2))
    )

    (defn #_"boolean" Util'equiv-2cc [#_"char" ___c1, #_"char" ___c2]
        (= ___c1 ___c2)
    )

    (defn #_"boolean" Util'pcequiv [#_"Object" ___k1, #_"Object" ___k2]
        (when (ยง instance? IPersistentCollection ___k1)
            (ยง return (.equiv (cast' IPersistentCollection ___k1), ___k2))
        )
        (.equiv (cast' IPersistentCollection ___k2), ___k1)
    )

    (defn #_"boolean" Util'equals [#_"Object" ___k1, #_"Object" ___k2]
        (when (= ___k1 ___k2)
            (ยง return true)
        )
        (and (some? ___k1) (.equals ___k1, ___k2))
    )

    (defn #_"boolean" Util'identical [#_"Object" ___k1, #_"Object" ___k2]
        (= ___k1 ___k2)
    )

    (defn #_"Class" Util'classOf [#_"Object" ___x]
        (when (some? ___x)
            (ยง return (.getClass ___x))
        )
        nil
    )

    (defn #_"int" Util'compare [#_"Object" ___k1, #_"Object" ___k2]
        (when (= ___k1 ___k2)
            (ยง return 0)
        )
        (when (some? ___k1)
            (when (nil? ___k2)
                (ยง return 1)
            )
            (when (instance? Number ___k1)
                (ยง return (ร Numbers'compare((cast Number ___k1), (cast Number ___k2))))
            )
            (ยง return (.compareTo (cast Comparable ___k1), ___k2))
        )
        -1
    )

    (defn #_"int" Util'hash [#_"Object" ___o]
        (when (nil? ___o)
            (ยง return 0)
        )
        (.hashCode ___o)
    )

    (defn #_"int" Util'hasheq [#_"Object" ___o]
        (when (nil? ___o)
            (ยง return 0)
        )
        (when (ยง instance? IHashEq ___o)
            (ยง return (Util'dohasheq (cast' IHashEq ___o)))
        )
        (when (instance? Number ___o)
            (ยง return (Numbers'hasheq (cast Number ___o)))
        )
        (when (instance? String ___o)
            (ยง return (Murmur3'hashInt (.hashCode ___o)))
        )
        (.hashCode ___o)
    )

    (defn- #_"int" Util'dohasheq [#_"IHashEq" ___o]
        (.hasheq ___o)
    )

    (defn #_"int" Util'hashCombine [#_"int" ___seed, #_"int" ___hash]
        ;; a la boost
        (ยง ass ___seed (ร ___seed :xor (___hash + 0x9e3779b9 + (___seed << 6) + (___seed >> 2))))
        ___seed
    )

    (defn #_"boolean" Util'isPrimitive [#_"Class" ___c]
        (and (some? ___c) (.isPrimitive ___c) (not (= ___c Void/TYPE)))
    )

    (defn #_"boolean" Util'isInteger [#_"Object" ___x]
        (or (instance? Integer ___x) (instance? Long ___x) (ยง instance? BigInt ___x) (instance? BigInteger ___x))
    )

    (defn #_"Object" Util'ret1 [#_"Object" ___ret, #_"Object" ___nil]
        ___ret
    )

    (defn #_"<K, V> void" Util'clearCache [#_"ReferenceQueue" ___rq, #_"ConcurrentHashMap<K, Reference<V>>" ___cache]
        ;; cleanup any dead entries
        (when (some? (.poll ___rq))
            (while (some? (.poll ___rq))
            )
            (doseq [#_"Map$Entry<K, Reference<V>>" ___e (.entrySet ___cache)]
                (let [#_"Reference<V>" ___val (.getValue ___e)]
                    (when (and (some? ___val) (nil? (.get ___val)))
                        (ร ___cache.remove((.getKey ___e), ___val))
                    )
                )
            )
        )
        nil
    )

    (defn #_"RuntimeException" Util'runtimeException-1 [#_"String" ___s]
        (RuntimeException. ___s)
    )

    (defn #_"RuntimeException" Util'runtimeException-2 [#_"String" ___s, #_"Throwable" ___e]
        (RuntimeException. ___s, ___e)
    )

    ;;;
     ; Throw even checked exceptions without being required
     ; to declare them or catch them. Suggested idiom:
     ;
     ; <code>throw sneakyThrow(some exception);</code>
     ;;
    (defn #_"RuntimeException" Util'sneakyThrow [#_"Throwable" ___t]
        ;; http://www.mail-archive.com/javaposse@googlegroups.com/msg05984.html
        (when (nil? ___t)
            (throw (NullPointerException.))
        )
        (ร Util'<RuntimeException>sneakyThrow0(___t))
        nil
    )

    (defn- #_"<T extends Throwable> void" Util'sneakyThrow0 [#_"Throwable" ___t] #_(ยง throws T)
        (throw (cast' T ___t))
    )

    (defn #_"Object" Util'loadWithClass [#_"String" ___scriptbase, #_"Class<?>" ___loadFrom] #_(ยง throws IOException, ClassNotFoundException)
        (ร Var'pushThreadBindings(RT'map(
            (object-array [
                Compiler'LOADER (.getClassLoader ___loadFrom)
            ])
        )))
        (try
            (ร RT'var-2("cloiure.core", "load").invoke(___scriptbase))
            (finally
                (Var'popThreadBindings)
            )
        )
    )
)
)

(java-ns cloiure.lang.Var

(ยง import java.util.concurrent.atomic.AtomicBoolean)

(class-ns TBox
    (defn- #_"TBox" TBox'init []
        (hash-map
            #_volatile
            #_"Object" :val nil
            #_"Thread" :thread nil
        )
    )

    (defn #_"TBox" TBox'new [#_"Thread" ___t, #_"Object" ___val]
        (let [this (TBox'init)]
            (ยง ass (:thread this) ___t)
            (ยง ass (:val this) ___val)
            this
        )
    )
)

(class-ns Unbound (ยง extends AFn)
    (defn- #_"Unbound" Unbound'init []
        (hash-map
            #_"Var" :v nil
        )
    )

    (defn #_"Unbound" Unbound'new [#_"Var" ___v]
        (let [this (merge (AFn'new) (Unbound'init))]
            (ยง ass (:v this) ___v)
            this
        )
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"Unbound" this]
        (str "Unbound: " (:v this))
    )

    #_method
    (ยง defn #_"Object" (ยง method throwArity) [#_"Unbound" this, #_"int" ___n]
        (throw (IllegalStateException. (str "Attempting to call unbound fn: " (:v this))))
    )
)

(class-ns Frame
    (ยง def #_"Frame" Frame'TOP (Frame'new PersistentHashMap'EMPTY, nil))

    (defn- #_"Frame" Frame'init []
        (hash-map
            ;; Var->TBox
            #_"Associative" :bindings nil
            ;; Var->val
            #_"Frame" :prev nil
        )
    )

    (defn #_"Frame" Frame'new [#_"Associative" ___bindings, #_"Frame" ___prev]
        (let [this (Frame'init)]
            (ยง ass (:bindings this) ___bindings)
            (ยง ass (:prev this) ___prev)
            this
        )
    )

    #_protected
    #_method
    (ยง defn #_"Object" (ยง method clone) [#_"Frame" this]
        (ร Frame'new((:bindings this), nil))
    )
)

(class-ns Var (ยง extends ARef) (ยง implements IFn, IRef, Settable)
    (def #_"ThreadLocal<Frame>" Var'dvals
        (ยง reify ThreadLocal<Frame>()
            #_protected
            #_method
            (ยง defn #_"Frame" (ยง method initialValue) [#_"ThreadLocal<Frame>" this]
                Frame'TOP
            )
        )
    )

    #_volatile
    (def #_"int" Var'rev 0)

    (ยง def #_"Keyword" Var'privateKey (Keyword'intern-2 nil, "private"))
    (ยง def #_"IPersistentMap" Var'privateMeta (PersistentArrayMap'new-1 (object-array [ privateKey, Boolean/TRUE ])))
    (ยง def #_"Keyword" Var'macroKey (Keyword'intern-2 nil, "macro"))
    (ยง def #_"Keyword" Var'nameKey (Keyword'intern-2 nil, "name"))
    (ยง def #_"Keyword" Var'nsKey (Keyword'intern-2 nil, "ns"))

    (defn #_"Object" Var'getThreadBindingFrame []
        (.get Var'dvals)
    )

    (defn #_"Object" Var'cloneThreadBindingFrame []
        (.clone (.get Var'dvals))
    )

    (defn #_"void" Var'resetThreadBindingFrame [#_"Object" ___frame]
        (.set Var'dvals, (cast' Frame ___frame))
        nil
    )

    (defn #_"Var" Var'intern-3 [#_"Namespace" ___ns, #_"Symbol" ___sym, #_"Object" ___root]
        (Var'intern-4 ___ns, ___sym, ___root, true)
    )

    (defn #_"Var" Var'intern-4 [#_"Namespace" ___ns, #_"Symbol" ___sym, #_"Object" ___root, #_"boolean" ___replaceRoot]
        (let [#_"Var" ___dvout (.intern ___ns, ___sym)]
            (when (or (not (.hasRoot ___dvout)) ___replaceRoot)
                (.bindRoot ___dvout, ___root)
            )
            ___dvout
        )
    )

    (defn #_"Var" Var'find [#_"Symbol" ___nsQualifiedSym]
        (when (ร (nil? (:ns ___nsQualifiedSym)))
            (throw (IllegalArgumentException. "Symbol must be namespace-qualified"))
        )
        (let [#_"Namespace" ___ns (ร Namespace'find(Symbol'intern-1((:ns ___nsQualifiedSym))))]
            (when (nil? ___ns)
                (throw (IllegalArgumentException. (str "No such namespace: " (:ns ___nsQualifiedSym))))
            )
            (ร ___ns.findInternedVar(Symbol'intern-1((:name ___nsQualifiedSym))))
        )
    )

    (defn #_"Var" Var'intern-2n [#_"Namespace" ___ns, #_"Symbol" ___sym]
        (.intern ___ns, ___sym)
    )

    (defn #_"Var" Var'intern-2s [#_"Symbol" ___nsName, #_"Symbol" ___sym]
        (let [#_"Namespace" ___ns (Namespace'findOrCreate ___nsName)]
            (Var'intern-2n ___ns, ___sym)
        )
    )

    (defn #_"Var" Var'internPrivate [#_"String" ___nsName, #_"String" ___sym]
        (let [#_"Namespace" ___ns (ร Namespace'findOrCreate(Symbol'intern-1(___nsName)))]
            (let [#_"Var" ___ret (Var'intern-2n ___ns, (Symbol'intern-1 ___sym))]
                (.setMeta ___ret, Var'privateMeta)
                ___ret
            )
        )
    )

    (defn #_"Var" Var'create-0 []
        (Var'new-2 nil, nil)
    )

    (defn #_"Var" Var'create-1 [#_"Object" ___root]
        (Var'new-3 nil, nil, ___root)
    )

    (defn- #_"Var" Var'init []
        (hash-map
            #_volatile
            #_"Object" :root nil

            #_volatile
            #_"boolean" :dynamic false
            #_transient
            #_"AtomicBoolean" :threadBound nil
            #_"Symbol" :sym nil
            #_"Namespace" :ns nil
        )
    )

    (defn #_"Var" Var'new-2 [#_"Namespace" ___ns, #_"Symbol" ___sym]
        (let [this (merge (ARef'new-0) (Var'init))]
            (ยง ass (:ns this) ___ns)
            (ยง ass (:sym this) ___sym)
            (ยง ass (:threadBound this) (AtomicBoolean. false))
            (ยง ass (:root this) (Unbound'new this))
            (.setMeta this, PersistentHashMap'EMPTY)
            this
        )
    )

    (defn #_"Var" Var'new-3 [#_"Namespace" ___ns, #_"Symbol" ___sym, #_"Object" ___root]
        (let [this (Var'new-2 ___ns, ___sym)]
            (ยง ass (:root this) ___root)
            (ยง ass rev (+ rev 1))
            this
        )
    )

    #_method
    (ยง defn #_"Var" (ยง method setDynamic) [#_"Var" this]
        (ยง ass (:dynamic this) true)
        this
    )

    #_method
    (ยง defn #_"Var" (ยง method setDynamic) [#_"Var" this, #_"boolean" ___b]
        (ยง ass (:dynamic this) ___b)
        this
    )

    #_method
    (ยง defn #_"boolean" (ยง method isDynamic) [#_"Var" this]
        (:dynamic this)
    )

    #_method
    (ยง defn #_"String" (ยง method toString) [#_"Var" this]
        (when (some? (:ns this))
            (ยง return (str "#'" (:name (:ns this)) "/" (:sym this)))
        )
        (str "#<Var: " (if (some? (:sym this)) (.toString (:sym this)) "--unnamed--") ">")
    )

    #_method
    (ยง defn #_"boolean" (ยง method isBound) [#_"Var" this]
        (or (.hasRoot this) (and (.get (:threadBound this)) (.containsKey (:bindings (.get Var'dvals)), this)))
    )

    #_method
    (ยง defn #_"Object" (ยง method get) [#_"Var" this]
        (when (not (.get (:threadBound this)))
            (ยง return (:root this))
        )
        (.deref this)
    )

    #_method
    (ยง defn #_"Object" (ยง method deref) [#_"Var" this]
        (let [#_"TBox" ___b (.getThreadBinding this)]
            (when (some? ___b)
                (ยง return (:val ___b))
            )
            (:root this)
        )
    )

    #_method
    (ยง defn #_"void" (ยง method setValidator) [#_"Var" this, #_"IFn" ___vf]
        (when (.hasRoot this)
            (.validate this, ___vf, (:root this))
        )
        (ยง ass (:validator this) ___vf)
        nil
    )

    #_method
    (ยง defn #_"Object" (ยง method alter) [#_"Var" this, #_"IFn" ___fn, #_"ISeq" ___args]
        (ร this.set(___fn.applyTo(RT'cons((.deref this), ___args))))
        this
    )

    #_method
    (ยง defn #_"Object" (ยง method set) [#_"Var" this, #_"Object" ___val]
        (ร this.validate((.getValidator this), ___val))
        (let [#_"TBox" ___b (.getThreadBinding this)]
            (when (some? ___b)
                (when (ร Thread/currentThread() != (:thread ___b))
                    (throw (IllegalStateException. (String/format "Can't set!: %s from non-binding thread", (object-array [ (:sym this) ]))))
                )
                (ยง ass (:val ___b) ___val)
                (ยง return ___val)
            )
            (throw (IllegalStateException. (String/format "Can't change/establish root binding of: %s with set", (object-array [ (:sym this) ]))))
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method doSet) [#_"Var" this, #_"Object" ___val]
        (.set this, ___val)
    )

    #_method
    (ยง defn #_"Object" (ยง method doReset) [#_"Var" this, #_"Object" ___val]
        (.bindRoot this, ___val)
        ___val
    )

    #_method
    (ยง defn #_"void" (ยง method setMeta) [#_"Var" this, #_"IPersistentMap" ___m]
        ;; ensure these basis keys
        (ร this.resetMeta(___m.assoc(nameKey, (:sym this)).assoc(nsKey, (:ns this))))
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method setMacro) [#_"Var" this]
        (ร this.alterMeta(assoc, RT'list-2(macroKey, RT'T)))
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method isMacro) [#_"Var" this]
        (ร RT'booleanCast-1o((.meta this).valAt(macroKey)))
    )

    #_method
    (ยง defn #_"boolean" (ยง method isPublic) [#_"Var" this]
        (not (RT'booleanCast-1o (ร (.meta this).valAt(privateKey))))
    )

    #_method
    (ยง defn #_"Object" (ยง method getRawRoot) [#_"Var" this]
        (:root this)
    )

    #_method
    (ยง defn #_"Object" (ยง method getTag) [#_"Var" this]
        (ร (.meta this).valAt(RT'TAG_KEY))
    )

    #_method
    (ยง defn #_"void" (ยง method setTag) [#_"Var" this, #_"Symbol" ___tag]
        (ร this.alterMeta(assoc, RT'list-2(RT'TAG_KEY, ___tag)))
        nil
    )

    #_method
    (ยง defn #_"boolean" (ยง method hasRoot) [#_"Var" this]
        (not (ยง instance? Unbound (:root this)))
    )

    ;; binding root always clears macro flag
    #_method
    (ยง defn #_"void" (ยง method bindRoot) [#_"Var" this, #_"Object" ___root]
        (ยง sync this
            (ร this.validate((.getValidator this), ___root))
            (let [#_"Object" ___oldroot (:root this)]
                (ยง ass (:root this) ___root)
                (ยง ass rev (+ rev 1))
                (ร this.alterMeta(Var'dissoc, RT'list-1(macroKey)))
                (.notifyWatches this, ___oldroot, (:root this))
            )
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method swapRoot) [#_"Var" this, #_"Object" ___root]
        (ยง sync this
            (ร this.validate((.getValidator this), ___root))
            (let [#_"Object" ___oldroot (:root this)]
                (ยง ass (:root this) ___root)
                (ยง ass rev (+ rev 1))
                (.notifyWatches this, ___oldroot, ___root)
            )
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method unbindRoot) [#_"Var" this]
        (ยง sync this
            (ยง ass (:root this) (Unbound'new this))
            (ยง ass rev (+ rev 1))
        )
        nil
    )

    #_method
    (ยง defn #_"void" (ยง method commuteRoot) [#_"Var" this, #_"IFn" ___fn]
        (ยง sync this
            (let [#_"Object" ___newRoot (.invoke ___fn, (:root this))]
                (ร this.validate((.getValidator this), ___newRoot))
                (let [#_"Object" ___oldroot (:root this)]
                    (ยง ass (:root this) ___newRoot)
                    (ยง ass rev (+ rev 1))
                    (.notifyWatches this, ___oldroot, ___newRoot)
                )
            )
        )
        nil
    )

    #_method
    (ยง defn #_"Object" (ยง method alterRoot) [#_"Var" this, #_"IFn" ___fn, #_"ISeq" ___args]
        (ยง sync this
            (let [#_"Object" ___newRoot (ร ___fn.applyTo(RT'cons((:root this), ___args)))]
                (ร this.validate((.getValidator this), ___newRoot))
                (let [#_"Object" ___oldroot (:root this)]
                    (ยง ass (:root this) ___newRoot)
                    (ยง ass rev (+ rev 1))
                    (.notifyWatches this, ___oldroot, ___newRoot)
                    ___newRoot
                )
            )
        )
    )

    (defn #_"void" Var'pushThreadBindings [#_"Associative" ___bindings]
        (let [#_"Frame" ___f (.get Var'dvals)]
            (let [#_"Associative" ___bmap (:bindings ___f)]
                (loop-when-recur [#_"ISeq" ___bs (.seq ___bindings)] (some? ___bs) [(next ___bs)]
                    (let [#_"IMapEntry" ___e (cast' IMapEntry (first ___bs))]
                        (let [#_"Var" ___v (cast' Var (.key ___e))]
                            (when (not (:dynamic ___v))
                                (throw (IllegalStateException. (String/format "Can't dynamically bind non-dynamic var: %s/%s", (object-array [ (:ns ___v), (:sym ___v) ]))))
                            )
                            (ร ___v.validate((.getValidator ___v), (.val ___e)))
                            (.set (:threadBound ___v), true)
                            (ยง ass ___bmap (ร ___bmap.assoc(___v, TBox'new(Thread/currentThread(), (.val ___e)))))
                        )
                    )
                )
                (ร Var'dvals.set(Frame'new(___bmap, ___f)))
                nil
            )
        )
    )

    (defn #_"void" Var'popThreadBindings []
        (let [#_"Frame" ___f (:prev (.get Var'dvals))]
            (cond (nil? ___f)
                (do
                    (throw (IllegalStateException. "Pop without matching push"))
                )
                (= ___f Frame'TOP)
                (do
                    (.remove Var'dvals)
                )
                :else
                (do
                    (.set Var'dvals, ___f)
                )
            )
            nil
        )
    )

    (defn #_"Associative" Var'getThreadBindings []
        (let [#_"Frame" ___f (.get Var'dvals)]
            (let [#_"IPersistentMap" ___ret PersistentHashMap'EMPTY]
                (loop-when-recur [#_"ISeq" ___bs (.seq (:bindings ___f))] (some? ___bs) [(next ___bs)]
                    (let [#_"IMapEntry" ___e (cast' IMapEntry (first ___bs))]
                        (let [#_"Var" ___v (cast' Var (.key ___e))]
                            (let [#_"TBox" ___b (cast' TBox (.val ___e))]
                                (ยง ass ___ret (.assoc ___ret, ___v, (:val ___b)))
                            )
                        )
                    )
                )
                ___ret
            )
        )
    )

    #_method
    (ยง defn #_"TBox" (ยง method getThreadBinding) [#_"Var" this]
        (when (.get (:threadBound this))
            (let [#_"IMapEntry" ___e (.entryAt (:bindings (.get Var'dvals)), this)]
                (when (some? ___e)
                    (ยง return (cast' TBox (.val ___e)))
                )
            )
        )
        nil
    )

    #_method
    (ยง defn #_"IFn" (ยง method fn) [#_"Var" this]
        (cast' IFn (.deref this))
    )

    #_method
    (ยง defn #_"Object" (ยง method call) [#_"Var" this]
        (.invoke this)
    )

    #_method
    (ยง defn #_"void" (ยง method run) [#_"Var" this]
        (.invoke this)
        nil
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this]
        (.invoke (.fn this))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                Util'ret1(___arg9, (ยง ass ___arg9 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                Util'ret1(___arg10, (ยง ass ___arg10 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                Util'ret1(___arg11, (ยง ass ___arg11 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                Util'ret1(___arg12, (ยง ass ___arg12 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                Util'ret1(___arg13, (ยง ass ___arg13 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                Util'ret1(___arg14, (ยง ass ___arg14 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                Util'ret1(___arg15, (ยง ass ___arg15 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                Util'ret1(___arg16, (ยง ass ___arg16 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                Util'ret1(___arg17, (ยง ass ___arg17 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                Util'ret1(___arg18, (ยง ass ___arg18 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                Util'ret1(___arg19, (ยง ass ___arg19 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___arg20]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                Util'ret1(___arg20, (ยง ass ___arg20 nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method invoke) [#_"Var" this, #_"Object" ___arg1, #_"Object" ___arg2, #_"Object" ___arg3, #_"Object" ___arg4, #_"Object" ___arg5, #_"Object" ___arg6, #_"Object" ___arg7, #_"Object" ___arg8, #_"Object" ___arg9, #_"Object" ___arg10, #_"Object" ___arg11, #_"Object" ___arg12, #_"Object" ___arg13, #_"Object" ___arg14, #_"Object" ___arg15, #_"Object" ___arg16, #_"Object" ___arg17, #_"Object" ___arg18, #_"Object" ___arg19, #_"Object" ___arg20, #_"Object..." ___args]
        (ร (.fn this).invoke(Util'ret1(___arg1, (ยง ass ___arg1 nil)),
                Util'ret1(___arg2, (ยง ass ___arg2 nil)),
                Util'ret1(___arg3, (ยง ass ___arg3 nil)),
                Util'ret1(___arg4, (ยง ass ___arg4 nil)),
                Util'ret1(___arg5, (ยง ass ___arg5 nil)),
                Util'ret1(___arg6, (ยง ass ___arg6 nil)),
                Util'ret1(___arg7, (ยง ass ___arg7 nil)),
                Util'ret1(___arg8, (ยง ass ___arg8 nil)),
                Util'ret1(___arg9, (ยง ass ___arg9 nil)),
                Util'ret1(___arg10, (ยง ass ___arg10 nil)),
                Util'ret1(___arg11, (ยง ass ___arg11 nil)),
                Util'ret1(___arg12, (ยง ass ___arg12 nil)),
                Util'ret1(___arg13, (ยง ass ___arg13 nil)),
                Util'ret1(___arg14, (ยง ass ___arg14 nil)),
                Util'ret1(___arg15, (ยง ass ___arg15 nil)),
                Util'ret1(___arg16, (ยง ass ___arg16 nil)),
                Util'ret1(___arg17, (ยง ass ___arg17 nil)),
                Util'ret1(___arg18, (ยง ass ___arg18 nil)),
                Util'ret1(___arg19, (ยง ass ___arg19 nil)),
                Util'ret1(___arg20, (ยง ass ___arg20 nil)),
                (Object[])Util'ret1(___args, (ยง ass ___args nil))))
    )

    #_method
    (ยง defn #_"Object" (ยง method applyTo) [#_"Var" this, #_"ISeq" ___arglist]
        (ร (.fn this).applyTo(___arglist))
    )

    (def #_"IFn" Var'assoc
        (ยง reify AFn()
            #_override
            #_method
            (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___m, #_"Object" ___k, #_"Object" ___v]
                (RT'assoc ___m, ___k, ___v)
            )
        )
    )

    (def #_"IFn" Var'dissoc
        (ยง reify AFn()
            #_override
            #_method
            (ยง defn #_"Object" (ยง method invoke) [#_"AFn" this, #_"Object" ___c, #_"Object" ___k]
                (RT'dissoc ___c, ___k)
            )
        )
    )
)
)

(java-ns cloiure.lang.Volatile

(class-ns Volatile (ยง implements IDeref)
    (defn- #_"Volatile" Volatile'init []
        (hash-map
            #_volatile
            #_"Object" :val nil
        )
    )

    (defn #_"Volatile" Volatile'new [#_"Object" ___val]
        (let [this (Volatile'init)]
            (ยง ass (:val this) ___val)
            this
        )
    )

    #_method
    (ยง defn #_"Object" (ยง method deref) [#_"Volatile" this]
        (:val this)
    )

    #_method
    (ยง defn #_"Object" (ยง method reset) [#_"Volatile" this, #_"Object" ___newval]
        (ยง ass (:val this) ___newval)
    )
)
)

(java-ns cloiure.main

(ยง import cloiure.lang.Symbol)
(ยง import cloiure.lang.Var)
(ยง import cloiure.lang.RT)

#_stateless
(class-ns main
    (ยง def- #_"Symbol" main'CLOIURE_MAIN (Symbol'intern-1 "cloiure.main"))
    (ยง def- #_"Var" main'REQUIRE (RT'var-2 "cloiure.core", "require"))
    (ยง def- #_"Var" main'MAIN (RT'var-2 "cloiure.main", "main"))

    (defn #_"void" -main [#_"String[]" ___args]
        (.invoke main'REQUIRE, main'CLOIURE_MAIN)
        (ร main'MAIN.applyTo(RT'seq(___args)))
        nil
    )
)
)
