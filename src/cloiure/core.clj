(ns #_cloiure.slang cloiure.core
    (:refer-clojure :exclude [when when-not]))

(import
    [java.lang ArithmeticException Character Class ClassCastException ClassLoader ClassNotFoundException Exception IndexOutOfBoundsException Integer Number Object RuntimeException String StringBuilder Thread Throwable]
)

(defmacro § [& _])
(defmacro ß [& _])

(defmacro def-
    ([s] `(def ~(vary-meta s assoc :private true)))
    ([s i] `(def ~(vary-meta s assoc :private true) ~i)))

(defmacro any
    ([f x y] `(~f ~x ~y))
    ([f x y & z] `(let [f# ~f x# ~x _# (any f# x# ~y)] (if _# _# (any f# x# ~@z)))))
(defn =?
    ([x y] (if (sequential? x) (if (seq x) (or (=? (first x) y) (recur (rest x) y)) false) (if (sequential? y) (recur y x) (= x y))))
    ([x y & z] (=? x (cons y z))))

(letfn [(w' [w] (if (= '=> (first w)) (rest w) (cons nil w)))]
    (defmacro     when       [y & w] (let [[_ & w] (w' w)]            `(if     ~y (do ~@w) ~_)))
    (defmacro     when-not   [y & w] (let [[_ & w] (w' w)]            `(if-not ~y (do ~@w) ~_)))
    (defmacro let-when     [x y & w] (let [[_ & w] (w' w)] `(let [~@x] (if     ~y (do ~@w) ~_))))
    (defmacro let-when-not [x y & w] (let [[_ & w] (w' w)] `(let [~@x] (if-not ~y (do ~@w) ~_)))))

(letfn [(z' [z] (cond (vector? z) `((recur ~@z)) (some? z) `((recur ~z))))
        (w' [w] (if (= '=> (first w)) (rest w) (cons nil w)))
        (l' [x y z w] (let [x (cond (vector? x) x (symbol? x) [x x] :else [`_# x]) z (z' z) [_ & w] (w' w)] `(loop [~@x] (if ~y (do ~@w ~@z) ~_))))]
    (defmacro loop-when [x y & w] (l' x y nil w))
    (defmacro loop-when-recur [x y z & w] (l' x y z w)))

(letfn [(z' [z] (cond (vector? z) `(recur ~@z) (some? z) `(recur ~z)))
        (w' [w] (if (= '=> (first w)) (second w)))]
    (defmacro recur-if [y z & w] (let [z (z' z) _ (w' w)] `(if ~y ~z ~_))))

(defmacro cond-let [x y & w]
    (let [x (if (vector? x) x [`_# x]) z (when (seq w) `(cond-let ~@w))]
        `(if-let ~x ~y ~z)))

(defn third [s] (first (next (next s))))
(defn fourth [s] (first (next (next (next s)))))

(defmacro update! [x f & z] `(set! ~x (~f ~x ~@z)))

(def % rem)
(def & bit-and)
(def | bit-or)
(def << bit-shift-left)
(def >> bit-shift-right)
(def >>> unsigned-bit-shift-right)

(defmacro throw! [^String s] `(throw (RuntimeException. ~s)))

(defmacro java-ns [name & _] #_(ensure symbol? name) `(do ~@_))
(defmacro class-ns [name & _] #_(ensure symbol? name) `(do ~@_))

(defmacro interface! [name [& sups] & sigs]
    (let [tag- #(or (:tag (meta %)) Object)
          sig- (fn [[name [this & args]]] [name (vec (map tag- args)) (tag- name) (map meta args)])
          cname (with-meta (symbol (str (namespace-munge *ns*) "." name)) (meta name))]
        `(do
            (gen-interface :name ~cname :extends ~(vec (map resolve sups)) :methods ~(vec (map sig- sigs)))
            (import ~cname)
        )
    )
)
(defmacro class! [& _] `(interface! ~@_))

#_(ns cloiure.core
    (:refer-clojure :exclude [when when-not])
    (:use [cloiure slang]))

(import
    [java.io InputStreamReader OutputStreamWriter PrintWriter PushbackReader Reader #_StringReader StringWriter Writer]
    [java.lang.ref Reference ReferenceQueue SoftReference WeakReference]
    [java.lang.reflect Array Constructor Field #_Method Modifier]
    [java.math BigDecimal BigInteger MathContext]
    [java.security AccessController PrivilegedAction]
    [java.util AbstractCollection AbstractSet ArrayList Arrays Collection Comparator EmptyStackException HashMap HashSet IdentityHashMap Iterator LinkedList List Map Map$Entry NoSuchElementException Queue Set Stack TreeMap]
    [java.util.concurrent Callable ConcurrentHashMap]
    [java.util.concurrent.atomic AtomicBoolean AtomicInteger AtomicReference]
    [java.util.concurrent.locks ReentrantReadWriteLock]
    [java.util.regex Matcher Pattern]
    [cloiure.asm ClassVisitor ClassWriter Label MethodVisitor Opcodes Type]
    [cloiure.asm.commons GeneratorAdapter Method]
)

(import
    [clojure.lang AFn AFunction APersistentMap APersistentSet APersistentVector ArraySeq BigInt DynamicClassLoader PersistentList$EmptyList IFn ILookup ILookupSite ILookupThunk IMapEntry IMeta IObj IPersistentCollection IPersistentList IPersistentMap IPersistentSet IPersistentVector IReference ISeq IType Keyword KeywordLookupSite LazySeq Namespace Numbers PersistentArrayMap PersistentHashSet PersistentList PersistentVector RestFn RT Symbol Tuple Util Var]
)

(defn- ßsym  [x] (condp instance? x                      Keyword (.sym x)                          Var (.sym x)  (:sym x) ))
(defn- ßns   [x] (condp instance? x Symbol (namespace x) Keyword (namespace x)                     Var (.ns x)   (:ns x)  ))
(defn- ßname [x] (condp instance? x Symbol (name x)                            Namespace (.name x)               (:name x)))

(declare RT'CLOIURE_NS)
(declare RT'printString)
(declare RT'seqToPassedArray)

(java-ns cloiure.lang.Reflector
    (§ soon definterface Reflector) (import [clojure.lang Reflector])
)

(java-ns cloiure.lang.Compiler
    (defprotocol Expr
        (#_"Object" Expr'''eval [#_"Expr" this])
        (#_"void" Expr'''emit [#_"Expr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen])
        (#_"Class" Expr'''getClass [#_"Expr" this])
    )

    (defprotocol Assignable
        (#_"Object" Assignable'''evalAssign [#_"Assignable" this, #_"Expr" val])
        (#_"void" Assignable'''emitAssign [#_"Assignable" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Expr" val])
    )

    (defprotocol MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"MaybePrimitive" this])
        (#_"void" MaybePrimitive'''emitUnboxed [#_"MaybePrimitive" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen])
    )

    (defprotocol Literal
        (#_"Object" Literal'''literal [#_"Literal" this])
    )

    (defprotocol Untyped)

    (defprotocol Interop)

    (defprotocol IopMethod
        (#_"int" IopMethod'''numParams [#_"IopMethod" this])
        (#_"String" IopMethod'''getMethodName [#_"IopMethod" this])
        (#_"Type" IopMethod'''getReturnType [#_"IopMethod" this])
        (#_"Type[]" IopMethod'''getArgTypes [#_"IopMethod" this])
        (#_"void" IopMethod'''emit [#_"IopMethod" this, #_"IopObject" fn, #_"ClassVisitor" cv])
    )

    (defprotocol IopObject
        (#_"boolean" IopObject'''supportsMeta [#_"IopObject" this])
        (#_"void" IopObject'''emitStatics [#_"IopObject" this, #_"ClassVisitor" gen])
        (#_"void" IopObject'''emitMethods [#_"IopObject" this, #_"ClassVisitor" gen])
    )

    (defprotocol IParser
        (#_"Expr" IParser'''parse [#_"IParser" this, #_"Context" context, #_"ISeq" form])
    )

    (definterface Recur)
)

(java-ns cloiure.lang.Compiler
    (defrecord NilExpr            [] #_"Expr" #_"Literal")
    (defrecord BooleanExpr        [] #_"Expr" #_"Literal")
    (defrecord MonitorEnterExpr   [] #_"Expr" #_"Untyped")
    (defrecord MonitorExitExpr    [] #_"Expr" #_"Untyped")
    (defrecord AssignExpr         [] #_"Expr")
    (defrecord ImportExpr         [] #_"Expr")
    (defrecord EmptyExpr          [] #_"Expr")
    (defrecord ConstantExpr       [] #_"Expr" #_"Literal")
    (defrecord NumberExpr         [] #_"Expr" #_"Literal" #_"MaybePrimitive")
    (defrecord StringExpr         [] #_"Expr" #_"Literal")
    (defrecord KeywordExpr        [] #_"Expr" #_"Literal")
    (defrecord InstanceFieldExpr  [] #_"Expr" #_"MaybePrimitive" #_"Assignable" #_"Interop")
    (defrecord StaticFieldExpr    [] #_"Expr" #_"MaybePrimitive" #_"Assignable" #_"Interop")
    (defrecord InstanceMethodExpr [] #_"Expr" #_"MaybePrimitive" #_"Interop")
    (defrecord StaticMethodExpr   [] #_"Expr" #_"MaybePrimitive" #_"Interop")
    (defrecord UnresolvedVarExpr  [] #_"Expr")
    (defrecord VarExpr            [] #_"Expr" #_"Assignable")
    (defrecord TheVarExpr         [] #_"Expr")
    (defrecord BodyExpr           [] #_"Expr" #_"MaybePrimitive")
    (defrecord CatchClause        [])
    (defrecord TryExpr            [] #_"Expr")
    (defrecord ThrowExpr          [] #_"Expr" #_"Untyped")
    (defrecord NewExpr            [] #_"Expr")
    (defrecord MetaExpr           [] #_"Expr")
    (defrecord IfExpr             [] #_"Expr" #_"MaybePrimitive")
    (defrecord ListExpr           [] #_"Expr")
    (defrecord MapExpr            [] #_"Expr")
    (defrecord SetExpr            [] #_"Expr")
    (defrecord VectorExpr         [] #_"Expr")
    (defrecord KeywordInvokeExpr  [] #_"Expr")
    (defrecord InstanceOfExpr     [] #_"Expr" #_"MaybePrimitive")
    (defrecord InvokeExpr         [] #_"Expr")
    (defrecord LocalBinding       [])
    (defrecord LocalBindingExpr   [] #_"Expr" #_"MaybePrimitive" #_"Assignable")
    (defrecord MethodParamExpr    [] #_"Expr" #_"MaybePrimitive")
    (defrecord FnMethod           [] #_"IopMethod")
    (defrecord FnExpr             [] #_"Expr" #_"IopObject")
    (defrecord DefExpr            [] #_"Expr")
    (defrecord BindingInit        [])
    (defrecord LetFnExpr          [] #_"Expr")
    (defrecord LetExpr            [] #_"Expr" #_"MaybePrimitive")
    (defrecord RecurExpr          [] #_"Expr" #_"MaybePrimitive")
    (defrecord NewInstanceMethod  [] #_"IopMethod")
    (defrecord NewInstanceExpr    [] #_"Expr" #_"IopObject")
    (defrecord CaseExpr           [] #_"Expr" #_"MaybePrimitive")
)

(java-ns cloiure.lang.Intrinsics

(class-ns Intrinsics
    (def #_"{String int|[int]}" Intrinsics'ops
        (hash-map
            "public static int clojure.lang.Numbers.shiftLeftInt(int,int)"                  Opcodes/ISHL
            "public static int clojure.lang.Numbers.shiftRightInt(int,int)"                 Opcodes/ISHR
            "public static int clojure.lang.Numbers.unsignedShiftRightInt(int,int)"         Opcodes/IUSHR
            "public static int clojure.lang.Numbers.unchecked_int_add(int,int)"             Opcodes/IADD
            "public static int clojure.lang.Numbers.unchecked_int_subtract(int,int)"        Opcodes/ISUB
            "public static int clojure.lang.Numbers.unchecked_int_negate(int)"              Opcodes/INEG
            "public static int clojure.lang.Numbers.unchecked_int_inc(int)"               [ Opcodes/ICONST_1 Opcodes/IADD ]
            "public static int clojure.lang.Numbers.unchecked_int_dec(int)"               [ Opcodes/ICONST_1 Opcodes/ISUB ]
            "public static int clojure.lang.Numbers.unchecked_int_multiply(int,int)"        Opcodes/IMUL
            "public static int clojure.lang.Numbers.unchecked_int_divide(int,int)"          Opcodes/IDIV
            "public static int clojure.lang.Numbers.unchecked_int_remainder(int,int)"       Opcodes/IREM

            "public static long clojure.lang.Numbers.and(long,long)"                        Opcodes/LAND
            "public static long clojure.lang.Numbers.or(long,long)"                         Opcodes/LOR
            "public static long clojure.lang.Numbers.xor(long,long)"                        Opcodes/LXOR
            "public static long clojure.lang.Numbers.shiftLeft(long,long)"                [ Opcodes/L2I Opcodes/LSHL ]
            "public static long clojure.lang.Numbers.shiftRight(long,long)"               [ Opcodes/L2I Opcodes/LSHR ]
            "public static long clojure.lang.Numbers.unsignedShiftRight(long,long)"       [ Opcodes/L2I Opcodes/LUSHR ]
            "public static long clojure.lang.Numbers.quotient(long,long)"                   Opcodes/LDIV
            "public static long clojure.lang.Numbers.remainder(long,long)"                  Opcodes/LREM
            "public static long clojure.lang.Numbers.unchecked_add(long,long)"              Opcodes/LADD
            "public static long clojure.lang.Numbers.unchecked_minus(long)"                 Opcodes/LNEG
            "public static long clojure.lang.Numbers.unchecked_minus(long,long)"            Opcodes/LSUB
            "public static long clojure.lang.Numbers.unchecked_multiply(long,long)"         Opcodes/LMUL
            "public static long clojure.lang.Numbers.unchecked_inc(long)"                 [ Opcodes/LCONST_1 Opcodes/LADD ]
            "public static long clojure.lang.Numbers.unchecked_dec(long)"                 [ Opcodes/LCONST_1 Opcodes/LSUB ]

            "public static double clojure.lang.Numbers.add(double,double)"                  Opcodes/DADD
            "public static double clojure.lang.Numbers.minus(double)"                       Opcodes/DNEG
            "public static double clojure.lang.Numbers.minus(double,double)"                Opcodes/DSUB
            "public static double clojure.lang.Numbers.multiply(double,double)"             Opcodes/DMUL
            "public static double clojure.lang.Numbers.divide(double,double)"               Opcodes/DDIV
            "public static double clojure.lang.Numbers.inc(double)"                       [ Opcodes/DCONST_1 Opcodes/DADD ]
            "public static double clojure.lang.Numbers.dec(double)"                       [ Opcodes/DCONST_1 Opcodes/DSUB ]
            "public static double clojure.lang.Numbers.unchecked_add(double,double)"        Opcodes/DADD
            "public static double clojure.lang.Numbers.unchecked_minus(double)"             Opcodes/DNEG
            "public static double clojure.lang.Numbers.unchecked_minus(double,double)"      Opcodes/DSUB
            "public static double clojure.lang.Numbers.unchecked_multiply(double,double)"   Opcodes/DMUL
            "public static double clojure.lang.Numbers.unchecked_inc(double)"             [ Opcodes/DCONST_1 Opcodes/DADD ]
            "public static double clojure.lang.Numbers.unchecked_dec(double)"             [ Opcodes/DCONST_1 Opcodes/DSUB ]

            "public static boolean clojure.lang.RT.aget_boolean(boolean[],int)"                  Opcodes/BALOAD
            "public static byte clojure.lang.RT.aget_byte(byte[],int)"                           Opcodes/BALOAD
            "public static short clojure.lang.RT.aget_short(short[],int)"                        Opcodes/SALOAD
            "public static char clojure.lang.RT.aget_char(char[],int)"                           Opcodes/CALOAD
            "public static int clojure.lang.RT.aget_int(int[],int)"                              Opcodes/IALOAD
            "public static long clojure.lang.RT.aget_long(long[],int)"                           Opcodes/LALOAD
            "public static float clojure.lang.RT.aget_float(float[],int)"                        Opcodes/FALOAD
            "public static double clojure.lang.RT.aget_double(double[],int)"                     Opcodes/DALOAD
            "public static java.lang.Object clojure.lang.RT.aget_object(java.lang.Object[],int)" Opcodes/AALOAD

            "public static int clojure.lang.RT.alength_boolean(boolean[])"         Opcodes/ARRAYLENGTH
            "public static int clojure.lang.RT.alength_byte(byte[])"               Opcodes/ARRAYLENGTH
            "public static int clojure.lang.RT.alength_short(short[])"             Opcodes/ARRAYLENGTH
            "public static int clojure.lang.RT.alength_char(char[])"               Opcodes/ARRAYLENGTH
            "public static int clojure.lang.RT.alength_int(int[])"                 Opcodes/ARRAYLENGTH
            "public static int clojure.lang.RT.alength_long(long[])"               Opcodes/ARRAYLENGTH
            "public static int clojure.lang.RT.alength_float(float[])"             Opcodes/ARRAYLENGTH
            "public static int clojure.lang.RT.alength_double(double[])"           Opcodes/ARRAYLENGTH
            "public static int clojure.lang.RT.alength_object(java.lang.Object[])" Opcodes/ARRAYLENGTH

            "public static long clojure.lang.RT.longCast(byte)"                Opcodes/I2L
            "public static long clojure.lang.RT.longCast(short)"               Opcodes/I2L
            "public static long clojure.lang.RT.longCast(int)"                 Opcodes/I2L
            "public static long clojure.lang.RT.longCast(long)"                Opcodes/NOP

            "public static double clojure.lang.RT.doubleCast(byte)"            Opcodes/I2D
            "public static double clojure.lang.RT.doubleCast(short)"           Opcodes/I2D
            "public static double clojure.lang.RT.doubleCast(int)"             Opcodes/I2D
            "public static double clojure.lang.RT.doubleCast(long)"            Opcodes/L2D
            "public static double clojure.lang.RT.doubleCast(float)"           Opcodes/F2D
            "public static double clojure.lang.RT.doubleCast(double)"          Opcodes/NOP

            "public static int clojure.lang.RT.uncheckedIntCast(byte)"         Opcodes/NOP
            "public static int clojure.lang.RT.uncheckedIntCast(short)"        Opcodes/NOP
            "public static int clojure.lang.RT.uncheckedIntCast(char)"         Opcodes/NOP
            "public static int clojure.lang.RT.uncheckedIntCast(int)"          Opcodes/NOP
            "public static int clojure.lang.RT.uncheckedIntCast(long)"         Opcodes/L2I
            "public static int clojure.lang.RT.uncheckedIntCast(float)"        Opcodes/F2I
            "public static int clojure.lang.RT.uncheckedIntCast(double)"       Opcodes/D2I

            "public static long clojure.lang.RT.uncheckedLongCast(byte)"       Opcodes/I2L
            "public static long clojure.lang.RT.uncheckedLongCast(short)"      Opcodes/I2L
            "public static long clojure.lang.RT.uncheckedLongCast(int)"        Opcodes/I2L
            "public static long clojure.lang.RT.uncheckedLongCast(long)"       Opcodes/NOP
            "public static long clojure.lang.RT.uncheckedLongCast(float)"      Opcodes/F2L
            "public static long clojure.lang.RT.uncheckedLongCast(double)"     Opcodes/D2L

            "public static double clojure.lang.RT.uncheckedDoubleCast(byte)"   Opcodes/I2D
            "public static double clojure.lang.RT.uncheckedDoubleCast(short)"  Opcodes/I2D
            "public static double clojure.lang.RT.uncheckedDoubleCast(int)"    Opcodes/I2D
            "public static double clojure.lang.RT.uncheckedDoubleCast(long)"   Opcodes/L2D
            "public static double clojure.lang.RT.uncheckedDoubleCast(float)"  Opcodes/F2D
            "public static double clojure.lang.RT.uncheckedDoubleCast(double)" Opcodes/NOP
        )
    )

    ;; map to instructions terminated with comparator for branch to false
    (def #_"{String [int]}" Intrinsics'preds
        (hash-map
            "public static boolean clojure.lang.Numbers.equiv(long,long)"     [ Opcodes/LCMP  Opcodes/IFNE ]
            "public static boolean clojure.lang.Numbers.equiv(double,double)" [ Opcodes/DCMPL Opcodes/IFNE ]
            "public static boolean clojure.lang.Numbers.lt(long,long)"        [ Opcodes/LCMP  Opcodes/IFGE ]
            "public static boolean clojure.lang.Numbers.lt(double,double)"    [ Opcodes/DCMPG Opcodes/IFGE ]
            "public static boolean clojure.lang.Numbers.lte(long,long)"       [ Opcodes/LCMP  Opcodes/IFGT ]
            "public static boolean clojure.lang.Numbers.lte(double,double)"   [ Opcodes/DCMPG Opcodes/IFGT ]
            "public static boolean clojure.lang.Numbers.gt(long,long)"        [ Opcodes/LCMP  Opcodes/IFLE ]
            "public static boolean clojure.lang.Numbers.gt(double,double)"    [ Opcodes/DCMPL Opcodes/IFLE ]
            "public static boolean clojure.lang.Numbers.gte(long,long)"       [ Opcodes/LCMP  Opcodes/IFLT ]
            "public static boolean clojure.lang.Numbers.gte(double,double)"   [ Opcodes/DCMPL Opcodes/IFLT ]

            "public static boolean clojure.lang.Util.equiv(long,long)"        [ Opcodes/LCMP  Opcodes/IFNE ]
            "public static boolean clojure.lang.Util.equiv(double,double)"    [ Opcodes/DCMPL Opcodes/IFNE ]
            "public static boolean clojure.lang.Util.equiv(boolean,boolean)"  [ Opcodes/IF_ICMPNE ]

            "public static boolean clojure.lang.Numbers.isZero(long)"         [ Opcodes/LCONST_0 Opcodes/LCMP  Opcodes/IFNE ]
            "public static boolean clojure.lang.Numbers.isZero(double)"       [ Opcodes/DCONST_0 Opcodes/DCMPL Opcodes/IFNE ]
            "public static boolean clojure.lang.Numbers.isPos(long)"          [ Opcodes/LCONST_0 Opcodes/LCMP  Opcodes/IFLE ]
            "public static boolean clojure.lang.Numbers.isPos(double)"        [ Opcodes/DCONST_0 Opcodes/DCMPL Opcodes/IFLE ]
            "public static boolean clojure.lang.Numbers.isNeg(long)"          [ Opcodes/LCONST_0 Opcodes/LCMP  Opcodes/IFGE ]
            "public static boolean clojure.lang.Numbers.isNeg(double)"        [ Opcodes/DCONST_0 Opcodes/DCMPG Opcodes/IFGE ]
        )
    )
)
)

(java-ns cloiure.lang.Reflector

(class-ns Reflector
    (defn #_"Class" Reflector'classOf [#_"Object" o]
        (class o)
    )

    (defn #_"boolean" Reflector'isPrimitive [#_"Class" c]
        (and (some? c) (.isPrimitive c) (not (= c Void/TYPE)))
    )

    (defn #_"Field" Reflector'getField [#_"Class" c, #_"String" name, #_"boolean" static?]
        (let [#_"Field[]" allfields (.getFields c)]
            (loop-when [#_"int" i 0] (< i (alength allfields))
                (let [#_"Field" f (aget allfields i)]
                    (if (and (= name (.getName f)) (= (Modifier/isStatic (.getModifiers f)) static?))
                        f
                        (recur (inc i))
                    )
                )
            )
        )
    )

    (defn #_"PersistentVector" Reflector'getMethods [#_"Class" c, #_"int" arity, #_"String" name, #_"boolean" static?]
        (let [matches- #(and (= name (.getName %)) (= (Modifier/isStatic (.getModifiers %)) static?) (= (alength (.getParameterTypes %)) arity))
              #_"java.lang.reflect.Method[]" allmethods (.getMethods c)
              [#_"PersistentVector" methods #_"PersistentVector" bridges]
                (loop-when [methods [] bridges [] #_"int" i 0] (< i (alength allmethods)) => [methods bridges]
                    (let [#_"java.lang.reflect.Method" m (aget allmethods i)
                          [methods bridges]
                            (when (matches- m) => [methods bridges]
                                (try
                                    (if (and (.isBridge m) (= (.getMethod c, (.getName m), (.getParameterTypes m)) m))
                                        [methods (conj bridges m)]
                                        [(conj methods m) bridges]
                                    )
                                    (catch NoSuchMethodException _
                                        [methods bridges]
                                    )
                                )
                            )]
                        (recur methods bridges (inc i))
                    )
                )
              methods
                (when (zero? (count methods)) => methods
                    (loop-when [methods methods #_"int" i 0] (< i (count bridges)) => methods
                        (recur (conj methods (nth bridges i)) (inc i))
                    )
                )
              methods
                (when (and (not static?) (.isInterface c)) => methods
                    (let [allmethods (.getMethods Object)]
                        (loop-when [methods methods #_"int" i 0] (< i (alength allmethods)) => methods
                            (let [#_"java.lang.reflect.Method" m (aget allmethods i)]
                                (recur (if (matches- m) (conj methods m) methods) (inc i))
                            )
                        )
                    )
                )]
            methods
        )
    )

    (defn #_"Object" Reflector'boxArg [#_"Class" c, #_"Object" arg]
        (let [unexpected! #(throw! (str "unexpected param type, expected: " c ", given: " (.getName (class arg))))]
            (cond
                (not (.isPrimitive c)) (cast c arg)
                (= c Boolean/TYPE)     (cast Boolean arg)
                (= c Character/TYPE)   (cast Character arg)
                (number? arg)
                    (condp = c
                        Integer/TYPE   (.intValue arg)
                        Float/TYPE     (.floatValue arg)
                        Double/TYPE    (.doubleValue arg)
                        Long/TYPE      (.longValue arg)
                        Short/TYPE     (.shortValue arg)
                        Byte/TYPE      (.byteValue arg)
                        (unexpected!)
                    )
                :else
                    (unexpected!)
            )
        )
    )

    (defn #_"Object[]" Reflector'boxArgs [#_"Class[]" params, #_"Object[]" args]
        (when (pos? (alength params))
            (let [#_"Object[]" a (make-array Object (alength params))]
                (dotimes [#_"int" i (alength params)]
                    (aset a i (Reflector'boxArg (aget params i), (aget args i)))
                )
                a
            )
        )
    )

    (defn #_"boolean" Reflector'paramArgTypeMatch [#_"Class" paramType, #_"Class" argType]
        (cond
            (nil? argType)
                (not (.isPrimitive paramType))
            (or (= paramType argType) (.isAssignableFrom paramType, argType))
                true
            :else
                (condp = paramType
                    Integer/TYPE   (any = argType Integer Long/TYPE Long Short/TYPE Byte/TYPE)
                    Float/TYPE     (any = argType Float Double/TYPE)
                    Double/TYPE    (any = argType Double Float/TYPE)
                    Long/TYPE      (any = argType Long Integer/TYPE Short/TYPE Byte/TYPE)
                    Character/TYPE (= argType Character)
                    Short/TYPE     (= argType Short)
                    Byte/TYPE      (= argType Byte)
                    Boolean/TYPE   (= argType Boolean)
                                   false
                )
        )
    )

    (defn #_"boolean" Reflector'isCongruent [#_"Class[]" params, #_"Object[]" args]
        (when (some? args) => (zero? (alength params))
            (and (= (alength params) (alength args))
                (loop-when-recur [#_"boolean" ? true #_"int" i 0]
                                 (and ? (< i (alength params)))
                                 [(Reflector'paramArgTypeMatch (aget params i), (class (aget args i))) (inc i)]
                              => ?
                )
            )
        )
    )

    (defn #_"boolean" Reflector'isMatch [#_"java.lang.reflect.Method" lhs, #_"java.lang.reflect.Method" rhs]
        (and (= (.getName lhs), (.getName rhs)) (Modifier/isPublic (.getModifiers (.getDeclaringClass lhs)))
            (let [#_"Class[]" types1 (.getParameterTypes lhs) #_"Class[]" types2 (.getParameterTypes rhs)]
                (and (= (alength types1) (alength types2))
                    (loop-when [#_"int" i 0] (< i (alength types1)) => true
                        (and (.isAssignableFrom (aget types1 i), (aget types2 i))
                            (recur (inc i))
                        )
                    )
                )
            )
        )
    )

    (defn #_"java.lang.reflect.Method" Reflector'getAsMethodOfPublicBase [#_"Class" c, #_"java.lang.reflect.Method" m]
        (or
            (let [#_"Class[]" ifaces (.getInterfaces c)]
                (loop-when [#_"int" j 0] (< j (alength ifaces))
                    (let [#_"java.lang.reflect.Method[]" methods (.getMethods (aget ifaces j))]
                        (or
                            (loop-when [#_"int" i 0] (< i (alength methods))
                                (let-when [#_"java.lang.reflect.Method" im (aget methods i)] (Reflector'isMatch im, m) => (recur (inc i))
                                    im
                                )
                            )
                            (recur (inc j))
                        )
                    )
                )
            )
            (when-let [#_"Class" sc (.getSuperclass c)]
                (let [#_"java.lang.reflect.Method[]" methods (.getMethods sc)]
                    (loop-when [#_"int" i 0] (< i (alength methods)) => (Reflector'getAsMethodOfPublicBase sc, m)
                        (let-when [#_"java.lang.reflect.Method" scm (aget methods i)] (Reflector'isMatch scm, m) => (recur (inc i))
                            scm
                        )
                    )
                )
            )
        )
    )

    (defn #_"Object" Reflector'prepRet [#_"Class" c, #_"Object" x]
        (cond
            (not (or (.isPrimitive c) (= c Boolean))) x
            (instance? Boolean x)                     (if x true false)
            :else                                     x
        )
    )

    (defn #_"boolean" Reflector'subsumes [#_"Class[]" c1, #_"Class[]" c2]
        ;; presumes matching lengths
        (loop-when [#_"boolean" better false #_"int" i 0] (< i (alength c1)) => better
            (when-not (= (aget c1 i) (aget c2 i)) => (recur better (inc i))
                (and (or (and (not (.isPrimitive (aget c1 i))) (.isPrimitive (aget c2 i))) (.isAssignableFrom (aget c2 i), (aget c1 i)))
                    (recur true (inc i))
                )
            )
        )
    )

    (defn #_"Object" Reflector'invokeMatchingMethod [#_"String" methodName, #_"PersistentVector" methods, #_"Object" target, #_"Object[]" args]
        (let-when [#_"int" n (count methods)] (pos? n) => (throw! (str "no matching method found: " methodName (when (some? target) (str " for " (class target)))))
            (let [[#_"java.lang.reflect.Method" m #_"Object[]" boxedArgs]
                    (if (= n 1)
                        (let [m (nth methods 0)]
                            [m (Reflector'boxArgs (.getParameterTypes m), args)]
                        )
                        ;; overloaded w/same arity
                        (loop-when [#_"java.lang.reflect.Method" found nil boxedArgs nil #_"ISeq" s (seq methods)] (some? s) => [found boxedArgs]
                            (let [m (first s) #_"Class[]" params (.getParameterTypes m)
                                  [found boxedArgs]
                                    (if (and (Reflector'isCongruent params, args) (or (nil? found) (Reflector'subsumes params, (.getParameterTypes found))))
                                        [m (Reflector'boxArgs params, args)]
                                        [found boxedArgs]
                                    )]
                                (recur found boxedArgs (next s))
                            )
                        )
                    )]
                (when (some? m) => (throw! (str "no matching method found: " methodName (when (some? target) (str " for " (class target)))))
                    (let [m (when-not (Modifier/isPublic (.getModifiers (.getDeclaringClass m))) => m
                                ;; public method of non-public class, try to find it in hierarchy
                                (or (Reflector'getAsMethodOfPublicBase (class target), m)
                                    (throw! (str "can't call public method of non-public class: " m))
                                )
                            )]
                        (try
                            (Reflector'prepRet (.getReturnType m), (.invoke m, target, boxedArgs))
                            (catch Exception e
                                (throw (or (.getCause e) e))
                            )
                        )
                    )
                )
            )
        )
    )

    (defn #_"Object" Reflector'invokeInstanceMethod [#_"Object" target, #_"String" methodName, #_"Object[]" args]
        (let [#_"PersistentVector" methods (Reflector'getMethods (class target), (alength args), methodName, false)]
            (Reflector'invokeMatchingMethod methodName, methods, target, args)
        )
    )

    (defn #_"Object" Reflector'invokeConstructor [#_"Class" c, #_"Object[]" args]
        (try
            (let [#_"Constructor[]" allctors (.getConstructors c)
                  #_"PersistentVector" ctors
                    (loop-when [ctors [] #_"int" i 0] (< i (alength allctors)) => ctors
                        (let [#_"Constructor" ctor (aget allctors i)
                              ctors
                                (when (= (alength (.getParameterTypes ctor)) (alength args)) => ctors
                                    (conj ctors ctor)
                                )]
                            (recur ctors (inc i))
                        )
                    )]
                (condp = (count ctors)
                    0   (throw! (str "no matching ctor found for " c))
                    1   (let [#_"Constructor" ctor (nth ctors 0)]
                            (.newInstance ctor, (Reflector'boxArgs (.getParameterTypes ctor), args))
                        )
                    (or ;; overloaded w/same arity
                        (loop-when-recur [#_"ISeq" s (seq ctors)] (some? s) [(next s)]
                            (let [#_"Constructor" ctor (first s)]
                                (let-when [#_"Class[]" params (.getParameterTypes ctor)] (Reflector'isCongruent params, args)
                                    (.newInstance ctor, (Reflector'boxArgs params, args))
                                )
                            )
                        )
                        (throw! (str "no matching ctor found for " c))
                    )
                )
            )
            (catch Exception e
                (throw (or (.getCause e) e))
            )
        )
    )

    (defn #_"Object" Reflector'invokeStaticMethod [#_"Class" c, #_"String" methodName, #_"Object[]" args]
        (if (= methodName "new")
            (Reflector'invokeConstructor c, args)
            (let [#_"PersistentVector" methods (Reflector'getMethods c, (alength args), methodName, true)]
                (Reflector'invokeMatchingMethod methodName, methods, nil, args)
            )
        )
    )

    (defn #_"Object" Reflector'getStaticField [#_"Class" c, #_"String" fieldName]
        (let [#_"Field" f (Reflector'getField c, fieldName, true)]
            (when (some? f) => (throw! (str "no matching field found: " fieldName " for " c))
                (Reflector'prepRet (.getType f), (.get f, nil))
            )
        )
    )

    (defn #_"Object" Reflector'setStaticField [#_"Class" c, #_"String" fieldName, #_"Object" val]
        (let [#_"Field" f (Reflector'getField c, fieldName, true)]
            (when (some? f) => (throw! (str "no matching field found: " fieldName " for " c))
                (.set f, nil, (Reflector'boxArg (.getType f), val))
                val
            )
        )
    )

    (defn #_"Object" Reflector'getInstanceField [#_"Object" target, #_"String" fieldName]
        (let [#_"Class" c (class target) #_"Field" f (Reflector'getField c, fieldName, false)]
            (when (some? f) => (throw! (str "no matching field found: " fieldName " for " c))
                (Reflector'prepRet (.getType f), (.get f, target))
            )
        )
    )

    (defn #_"Object" Reflector'setInstanceField [#_"Object" target, #_"String" fieldName, #_"Object" val]
        (let [#_"Class" c (class target) #_"Field" f (Reflector'getField c, fieldName, false)]
            (when (some? f) => (throw! (str "no matching field found: " fieldName " for " (class target)))
                (.set f, target, (Reflector'boxArg (.getType f), val))
                val
            )
        )
    )

    (defn #_"Object" Reflector'invokeNoArgInstanceMember [#_"Object" target, #_"String" name, #_"boolean" requireField]
        (let [#_"Class" c (class target)]
            (if requireField
                (let [#_"Field" f (Reflector'getField c, name, false)]
                    (if (some? f)
                        (Reflector'getInstanceField target, name)
                        (throw! (str "no matching field found: " name " for " (class target)))
                    )
                )
                (let [#_"PersistentVector" methods (Reflector'getMethods c, 0, name, false)]
                    (if (pos? (count methods))
                        (Reflector'invokeMatchingMethod name, methods, target, (make-array Object 0))
                        (Reflector'getInstanceField target, name)
                    )
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.Compiler

(def Context'enum-set
    (hash-set
        :Context'STATEMENT ;; value ignored
        :Context'EXPRESSION ;; value required
        :Context'RETURN ;; tail position relative to enclosing recur frame
        :Context'EVAL
    )
)

(class-ns Compiler
    (def #_"Class" Compiler'BOOLEANS_CLASS (Class/forName "[Z"))
    (def #_"Class" Compiler'BYTES_CLASS    (Class/forName "[B"))
    (def #_"Class" Compiler'SHORTS_CLASS   (Class/forName "[S"))
    (def #_"Class" Compiler'CHARS_CLASS    (Class/forName "[C"))
    (def #_"Class" Compiler'INTS_CLASS     (Class/forName "[I"))
    (def #_"Class" Compiler'LONGS_CLASS    (Class/forName "[J"))
    (def #_"Class" Compiler'FLOATS_CLASS   (Class/forName "[F"))
    (def #_"Class" Compiler'DOUBLES_CLASS  (Class/forName "[D"))
    (def #_"Class" Compiler'OBJECTS_CLASS  (Class/forName "[Ljava.lang.Object;"))

    (def #_"int" Compiler'MAX_POSITIONAL_ARITY 20)

    (def #_"String" Compiler'COMPILE_STUB_PREFIX "compile__stub")

    (def #_"Symbol" Compiler'FNONCE (with-meta 'fn* {:once true}))

    (defn #_"String" Compiler'cachedClassName [#_"int" n] (str "__cached_class__" n))
    (defn #_"String" Compiler'constantName    [#_"int" n] (str "const__" n))
    (defn #_"String" Compiler'siteNameStatic  [#_"int" n] (str "__site__" n "__"))
    (defn #_"String" Compiler'thunkNameStatic [#_"int" n] (str "__thunk__" n "__"))
)

(class-ns NilExpr
    (defn #_"NilExpr" NilExpr'new []
        (NilExpr.)
    )

    (extend-type NilExpr Literal
        (#_"Object" Literal'''literal [#_"NilExpr" this]
            nil
        )
    )

    (extend-type NilExpr Expr
        (#_"Object" Expr'''eval [#_"NilExpr" this]
            (Literal'''literal this)
        )

        (#_"void" Expr'''emit [#_"NilExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (.visitInsn gen, Opcodes/ACONST_NULL)
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"NilExpr" this]
            nil
        )
    )

    (def #_"NilExpr" Compiler'NIL_EXPR (NilExpr'new))
)

(class-ns BooleanExpr
    (defn #_"BooleanExpr" BooleanExpr'new [#_"boolean" val]
        (merge (BooleanExpr.)
            (hash-map
                #_"boolean" :val val
            )
        )
    )

    (extend-type BooleanExpr Literal
        (#_"Object" Literal'''literal [#_"BooleanExpr" this]
            (if (:val this) true false)
        )
    )

    (extend-type BooleanExpr Expr
        (#_"Object" Expr'''eval [#_"BooleanExpr" this]
            (Literal'''literal this)
        )

        (#_"void" Expr'''emit [#_"BooleanExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (.getStatic gen, (Type/getType Boolean), (if (:val this) "TRUE" "FALSE"), (Type/getType Boolean))
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"BooleanExpr" this]
            Boolean
        )
    )

    (def #_"BooleanExpr" Compiler'TRUE_EXPR (BooleanExpr'new true))
    (def #_"BooleanExpr" Compiler'FALSE_EXPR (BooleanExpr'new false))
)

(class-ns Compiler
    (def #_"Var" ^:dynamic *class-loader*      ) ;; DynamicClassLoader
    (def #_"Var" ^:dynamic *line*              ) ;; Integer
    (def #_"Var" ^:dynamic *last-unique-id*    ) ;; Integer
    (def #_"Var" ^:dynamic *closes*            ) ;; IPersistentMap
    (def #_"Var" ^:dynamic *method*            ) ;; FnFrame
    (def #_"Var" ^:dynamic *local-env*         ) ;; symbol->localbinding
    (def #_"Var" ^:dynamic *last-local-num*    ) ;; Integer
    (def #_"Var" ^:dynamic *loop-locals*       ) ;; vector<localbinding>
    (def #_"Var" ^:dynamic *loop-label*        ) ;; Label
    (def #_"Var" ^:dynamic *constants*         ) ;; vector<object>
    (def #_"Var" ^:dynamic *constant-ids*      ) ;; IdentityHashMap
    (def #_"Var" ^:dynamic *used-constants*    ) ;; IPersistentSet
    (def #_"Var" ^:dynamic *keyword-callsites* ) ;; vector<keyword>
    (def #_"Var" ^:dynamic *protocol-callsites*) ;; vector<var>
    (def #_"Var" ^:dynamic *keywords*          ) ;; keyword->constid
    (def #_"Var" ^:dynamic *vars*              ) ;; var->constid
    (def #_"Var" ^:dynamic *no-recur*          ) ;; Boolean
    (def #_"Var" ^:dynamic *in-catch-finally*  ) ;; Boolean
    (def #_"Var" ^:dynamic *in-return-context* ) ;; Boolean
    (def #_"Var" ^:dynamic *compile-stub-sym*  ) ;; Symbol
    (def #_"Var" ^:dynamic *compile-stub-class*) ;; Class

    (def #_"[Method]" Compiler'createTupleMethods
        (vector
            (Method/getMethod "clojure.lang.IPersistentVector create()")
            (Method/getMethod "clojure.lang.IPersistentVector create(Object)")
            (Method/getMethod "clojure.lang.IPersistentVector create(Object, Object)")
            (Method/getMethod "clojure.lang.IPersistentVector create(Object, Object, Object)")
            (Method/getMethod "clojure.lang.IPersistentVector create(Object, Object, Object, Object)")
            (Method/getMethod "clojure.lang.IPersistentVector create(Object, Object, Object, Object, Object)")
            (Method/getMethod "clojure.lang.IPersistentVector create(Object, Object, Object, Object, Object, Object)")
        )
    )

    (def- #_"Type[][]" Compiler'ARG_TYPES
        (let [#_"int" n Compiler'MAX_POSITIONAL_ARITY
              #_"Type[][]" a (make-array (Class/forName "[Lcloiure.asm.Type;") (+ n 2))
              #_"Type" t (Type/getType Object)]
            (dotimes [#_"int" i (inc n)]
                (let [#_"Type[]" b (make-array Type i)]
                    (dotimes [#_"int" j i]
                        (aset b j t)
                    )
                    (aset a i b)
                )
            )
            (let [#_"Type[]" b (make-array Type (inc n))]
                (dotimes [#_"int" j n]
                    (aset b j t)
                )
                (aset b n (Type/getType "[Ljava/lang/Object;"))
                (aset a (inc n) b)
                a
            )
        )
    )

    (def- #_"Type[]" Compiler'EXCEPTION_TYPES (make-array Type 0))

    (declare Compiler'specials)

    (defn #_"boolean" Compiler'isSpecial [#_"Object" sym]
        (contains? Compiler'specials sym)
    )

    (defn #_"boolean" Compiler'inTailCall [#_"Context" context]
        (and (= context :Context'RETURN) *in-return-context* (not *in-catch-finally*))
    )

    (defn #_"Namespace" Compiler'namespaceFor
        ([#_"Symbol" sym] (Compiler'namespaceFor *ns*, sym))
        ([#_"Namespace" inns, #_"Symbol" sym]
            ;; note, presumes non-nil sym.ns
            (let [#_"Symbol" nsSym (symbol (ßns sym))]
                ;; first check against currentNS' aliases, otherwise check the Namespaces map
                (or (.lookupAlias inns, nsSym) (find-ns nsSym))
            )
        )
    )

    (defn #_"Symbol" Compiler'resolveSymbol [#_"Symbol" sym]
        ;; already qualified or classname?
        (cond
            (pos? (.indexOf (ßname sym), (int \.)))
                sym
            (some? (ßns sym))
                (let [#_"Namespace" ns (Compiler'namespaceFor sym)]
                    (if (and (some? ns) (not (and (some? (ßname (ßname ns))) (= (ßname (ßname ns)) (ßns sym)))))
                        (symbol (ßname (ßname ns)) (ßname sym))
                        sym
                    )
                )
            :else
                (let [#_"Object" o (.getMapping *ns*, sym)]
                    (cond
                        (nil? o)   (symbol (ßname (ßname *ns*)) (ßname sym))
                        (class? o) (symbol (.getName o))
                        (var? o)   (symbol (ßname (ßname (ßns o))) (ßname (ßsym o)))
                    )
                )
        )
    )

    (defn #_"Class" Compiler'maybePrimitiveType [#_"Expr" e]
        (let-when [#_"Class" c (Expr'''getClass e)] (Reflector'isPrimitive c)
            (when (and (satisfies? MaybePrimitive e) (MaybePrimitive'''canEmitPrimitive e))
                c
            )
        )
    )

    (defn #_"Class" Compiler'maybeClass [#_"IPersistentVector" exprs]
        (loop-when [#_"Class" match nil #_"ISeq" s (seq exprs)] (some? s) => match
            (let [#_"Expr" e (first s)]
                (condp instance? e
                    NilExpr (recur-if (nil? match) [match (next s)])
                    ThrowExpr (recur match (next s))
                    (let [#_"Class" c (Expr'''getClass e)]
                        (recur-if (and (some? c) (any = match nil c)) [c (next s)])
                    )
                )
            )
        )
    )

    (defn #_"String" Compiler'getTypeStringForArgs [#_"IPersistentVector" args]
        (let [#_"StringBuilder" sb (StringBuilder.)]
            (dotimes [#_"int" i (count args)]
                (let [#_"Class" c (Expr'''getClass (nth args i))]
                    (when (pos? i)
                        (.append sb, ", ")
                    )
                    (.append sb, (if (some? c) (.getName c) "unknown"))
                )
            )
            (.toString sb)
        )
    )

    (defn #_"int" Compiler'getMatchingParams [#_"String" methodName, #_"IPersistentVector" pars, #_"IPersistentVector" args, #_"IPersistentVector" rets]
        ;; presumes matching lengths
        (let [[#_"int" matchIdx #_"boolean" tied]
                (loop-when [matchIdx -1 tied false #_"boolean" foundExact false #_"int" i 0] (< i (count pars)) => [matchIdx tied]
                    (let [[#_"int" exact #_"boolean" match]
                            (loop-when [exact 0 match true #_"int" p 0 #_"ISeq" s (seq args)] (and match (< p (count args)) (some? s)) => [exact match]
                                (let [#_"Class" aclass (Expr'''getClass (first s)) #_"Class" pclass (aget (nth pars i) p)
                                      [exact match]
                                        (if (and (some? aclass) (= aclass pclass))
                                            [(inc exact) match]
                                            [exact (Reflector'paramArgTypeMatch pclass, (or aclass Object))]
                                        )]
                                    (recur exact match (inc p) (next s))
                                )
                            )
                          [matchIdx tied foundExact]
                            (cond (= exact (count args))
                                (let [matchIdx
                                        (when (or (not foundExact) (= matchIdx -1) (.isAssignableFrom (nth rets matchIdx), (nth rets i))) => matchIdx
                                            i
                                        )]
                                    [matchIdx false true]
                                )
                                (and match (not foundExact))
                                (let [[matchIdx tied]
                                        (cond (= matchIdx -1)
                                            (do
                                                [i tied]
                                            )
                                            (Reflector'subsumes (nth pars i), (nth pars matchIdx))
                                            (do
                                                [i false]
                                            )
                                            (Arrays/equals (nth pars matchIdx), (nth pars i))
                                            (let [matchIdx
                                                    (when (.isAssignableFrom (nth rets matchIdx), (nth rets i)) => matchIdx
                                                        i
                                                    )]
                                                [matchIdx tied]
                                            )
                                            (not (Reflector'subsumes (nth pars matchIdx), (nth pars i)))
                                            (do
                                                [matchIdx true]
                                            )
                                            :else
                                            (do
                                                [matchIdx tied]
                                            )
                                        )]
                                    [matchIdx tied foundExact]
                                )
                                :else
                                (do
                                    [matchIdx tied foundExact]
                                )
                            )]
                        (recur matchIdx tied foundExact (inc i))
                    )
                )]
            (when tied
                (throw! (str "more than one matching method found: " methodName))
            )
            matchIdx
        )
    )

    (def #_"IPersistentMap" Compiler'CHAR_MAP
        (hash-map
            \- "_"
            \: "_COLON_"
            \+ "_PLUS_"
            \> "_GT_"
            \< "_LT_"
            \= "_EQ_"
            \~ "_TILDE_"
            \! "_BANG_"
            \@ "_CIRCA_"
            \# "_SHARP_"
            \' "_SINGLEQUOTE_"
            \" "_DOUBLEQUOTE_" ;; oops! "
            \% "_PERCENT_"
            \^ "_CARET_"
            \& "_AMPERSAND_"
            \* "_STAR_"
            \| "_BAR_"
            \{ "_LBRACE_"
            \} "_RBRACE_"
            \[ "_LBRACK_"
            \] "_RBRACK_"
            \/ "_SLASH_"
            \\ "_BSLASH_"
            \? "_QMARK_"
        )
    )

    (def #_"IPersistentMap" Compiler'DEMUNGE_MAP
        ;; DEMUNGE_MAP maps strings to characters in the opposite direction that CHAR_MAP does, plus it maps "$" to '/'.
        (loop-when [#_"IPersistentMap" m { "$" \/ } #_"ISeq" s (seq Compiler'CHAR_MAP)] (some? s) => m
            (let [#_"IMapEntry" e (first s)]
                (recur (assoc m (val e) (key e)) (next s))
            )
        )
    )

    (def #_"Pattern" Compiler'DEMUNGE_PATTERN
        ;; DEMUNGE_PATTERN searches for the first of any occurrence of the strings that are keys of DEMUNGE_MAP.
        ;; Note: Regex matching rules mean that #"_|_COLON_" "_COLON_" returns "_", but #"_COLON_|_" "_COLON_"
        ;; returns "_COLON_" as desired. Sorting string keys of DEMUNGE_MAP from longest to shortest ensures
        ;; correct matching behavior, even if some strings are prefixes of others.
        (let [#_"String[]" a (to-array (keys Compiler'DEMUNGE_MAP)) _ (Arrays/sort a, #(- (.length %2) (.length %1)))
              #_"StringBuilder" sb (StringBuilder.)]
            (dotimes [#_"int" i (alength a)]
                (when (pos? i)
                    (.append sb, "|")
                )
                (.append sb, "\\Q")
                (.append sb, (aget a i))
                (.append sb, "\\E")
            )
            (Pattern/compile (.toString sb))
        )
    )

    (defn #_"String" Compiler'munge [#_"String" name]
        (let [#_"StringBuilder" sb (StringBuilder.)]
            (doseq [#_"char" ch (.toCharArray name)]
                (.append sb, (or (get Compiler'CHAR_MAP ch) ch))
            )
            (.toString sb)
        )
    )

    (defn #_"String" Compiler'demunge [#_"String" mungedName]
        (let [#_"StringBuilder" sb (StringBuilder.)
              #_"Matcher" m (.matcher Compiler'DEMUNGE_PATTERN, mungedName)
              #_"int" lastMatchEnd
                (loop-when [lastMatchEnd 0] (.find m) => lastMatchEnd
                    (let [#_"int" start (.start m) #_"int" end (.end m)]
                        ;; keep everything before the match
                        (.append sb, (.substring mungedName, lastMatchEnd, start))
                        ;; replace the match with DEMUNGE_MAP result
                        (.append sb, (get Compiler'DEMUNGE_MAP (.group m)))
                        (recur end)
                    )
                )]
            ;; keep everything after the last match
            (.append sb, (.substring mungedName, lastMatchEnd))
            (.toString sb)
        )
    )

    (defn #_"int" Compiler'nextUniqueId []
        (update! *last-unique-id* inc)
    )

    (defn- #_"int" Compiler'nextLocalNum []
        (update! *last-local-num* inc)
    )

    (declare LocalBinding'new)

    (defn #_"LocalBinding" Compiler'registerLocal [#_"Symbol" sym, #_"Symbol" tag, #_"Expr" init, #_"boolean" isArg]
        (let [#_"LocalBinding" lb (LocalBinding'new (Compiler'nextLocalNum), sym, tag, init, isArg)]
            (update! *local-env* assoc (:sym lb) lb)
            (update! *method* update :locals assoc (:uid lb) lb)
            lb
        )
    )

    (defn #_"LocalBinding" Compiler'complementLocalInit [#_"LocalBinding" lb, #_"Expr" init]
        (let [lb (assoc lb :init init)]
            (update! *local-env* assoc (:sym lb) lb)
            (update! *method* update :locals assoc (:uid lb) lb)
            lb
        )
    )

    (defn- #_"void" Compiler'closeOver [#_"LocalBinding" lb, #_"IopMethod" m]
        (when (and (some? lb) (some? m) (not (contains? (:locals m) (:uid lb))))
            (update! *closes* update (:uid (:objx m)) assoc (:uid lb) lb)
            (Compiler'closeOver lb, (:parent m))
        )
        nil
    )

    (defn #_"LocalBinding" Compiler'referenceLocal [#_"Symbol" sym]
        (when-let [#_"LocalBinding" lb (get *local-env* sym)]
            (Compiler'closeOver lb, *method*)
            lb
        )
    )

    (defn- #_"int" Compiler'registerConstant [#_"Object" o]
        (when (bound? #'*constants*) => -1
            (let [#_"IdentityHashMap<Object, Integer>" ids *constant-ids*]
                (or (get ids o)
                    (let [#_"PersistentVector" v *constants*]
                        (set! *constants* (conj v o))
                        (.put ids, o, (count v))
                        (count v)
                    )
                )
            )
        )
    )

    (defn- #_"int" Compiler'registerKeywordCallsite [#_"Keyword" k]
        (let [#_"IPersistentVector" v (conj *keyword-callsites* k)]
            (set! *keyword-callsites* v)
            (dec (count v))
        )
    )

    (defn- #_"int" Compiler'registerProtocolCallsite [#_"Var" v]
        (let [#_"IPersistentVector" v (conj *protocol-callsites* v)]
            (set! *protocol-callsites* v)
            (dec (count v))
        )
    )

    (defn- #_"void" Compiler'registerVar [#_"Var" var]
        (when (and (bound? #'*vars*) (nil? (get *vars* var)))
            (update! *vars* assoc var (Compiler'registerConstant var))
        )
        nil
    )

    (defn #_"Var" Compiler'lookupVar
        ([#_"Symbol" sym, #_"boolean" internNew] (Compiler'lookupVar sym, internNew, true))
        ([#_"Symbol" sym, #_"boolean" internNew, #_"boolean" registerMacro]
            ;; note - ns-qualified vars in other namespaces must already exist
            (let [#_"Var" var
                    (cond
                        (some? (ßns sym))
                            (when-let [#_"Namespace" ns (Compiler'namespaceFor sym)]
                                (let [#_"Symbol" name (symbol (ßname sym))]
                                    (if (and internNew (= ns *ns*))
                                        (.intern ns, name)
                                        (.findInternedVar ns, name)
                                    )
                                )
                            )
                        (= sym 'ns)    #'ns
                        (= sym 'in-ns) #'in-ns
                        :else ;; is it mapped?
                            (let [#_"Object" o (.getMapping *ns*, sym)]
                                (cond
                                    (nil? o) ;; introduce a new var in the current ns
                                        (when internNew
                                            (.intern *ns*, (symbol (ßname sym)))
                                        )
                                    (var? o)
                                        o
                                    :else
                                        (throw! (str "expecting var, but " sym " is mapped to " o))
                                )
                            )
                    )]
                (when (and (some? var) (or (not (get (meta var) :macro)) registerMacro))
                    (Compiler'registerVar var)
                )
                var
            )
        )
    )

    (defn #_"Var" Compiler'isMacro [#_"Object" op]
        ;; no local macros for now
        (when-not (and (symbol? op) (some? (Compiler'referenceLocal op)))
            (when (or (symbol? op) (var? op))
                (let [#_"Var" v (if (var? op) op (Compiler'lookupVar op, false, false))]
                    (when (and (some? v) (get (meta v) :macro))
                        (when (or (= (ßns v) *ns*) (not (get (meta v) :private))) => (throw! (str "var: " v " is private"))
                            v
                        )
                    )
                )
            )
        )
    )

    (defn #_"IFn" Compiler'isInline [#_"Object" op, #_"int" arity]
        ;; no local inlines for now
        (when-not (and (symbol? op) (some? (Compiler'referenceLocal op)))
            (when (or (symbol? op) (var? op))
                (when-let [#_"Var" v (if (var? op) op (Compiler'lookupVar op, false))]
                    (when (or (= (ßns v) *ns*) (not (get (meta v) :private))) => (throw! (str "var: " v " is private"))
                        (when-let [#_"IFn" f (get (meta v) :inline)]
                            (let [#_"IFn" arityPred (get (meta v) :inline-arities)]
                                (when (or (nil? arityPred) (.invoke arityPred, arity))
                                    f
                                )
                            )
                        )
                    )
                )
            )
        )
    )

    (defn #_"boolean" Compiler'namesStaticMember [#_"Symbol" sym]
        (and (some? (ßns sym)) (nil? (Compiler'namespaceFor sym)))
    )

    (defn- #_"Symbol" Compiler'tagOf [#_"Object" o]
        (let [#_"Object" tag (get (meta o) :tag)]
            (cond
                (symbol? tag) tag
                (string? tag) (symbol tag)
            )
        )
    )

    (defn #_"Object" Compiler'preserveTag [#_"ISeq" src, #_"Object" dst]
        (let-when [#_"Symbol" tag (Compiler'tagOf src)] (and (some? tag) (instance? IObj dst)) => dst
            (vary-meta dst assoc :tag tag)
        )
    )

    (defn #_"String" Compiler'destubClassName [#_"String" name]
        ;; skip over prefix + '.' or '/'
        (when (.startsWith name, Compiler'COMPILE_STUB_PREFIX) => name
            (.substring name, (inc (.length Compiler'COMPILE_STUB_PREFIX)))
        )
    )

    (defn #_"Type" Compiler'getType [#_"Class" c]
        (let [#_"String" desc (.getDescriptor (Type/getType c))
              desc
                (when (.startsWith desc, "L") => desc
                    (str "L" (Compiler'destubClassName (.substring desc, 1)))
                )]
            (Type/getType desc)
        )
    )

    (defn #_"Object" Compiler'resolveIn [#_"Namespace" n, #_"Symbol" sym, #_"boolean" allowPrivate]
        ;; note - ns-qualified vars must already exist
        (cond
            (some? (ßns sym))
                (let-when [#_"Namespace" ns (Compiler'namespaceFor n, sym)] (some? ns)          => (throw! (str "no such namespace: " (ßns sym)))
                    (let-when [#_"Var" v (.findInternedVar ns, (symbol (ßname sym)))] (some? v) => (throw! (str "no such var: " sym))
                        (when (or (= (ßns v) *ns*) (not (get (meta v) :private)) allowPrivate)  => (throw! (str "var: " sym " is private"))
                            v
                        )
                    )
                )
            (or (pos? (.indexOf (ßname sym), (int \.))) (= (.charAt (ßname sym), 0) \[)) (RT/classForName (ßname sym))
            (= sym 'ns)                #'ns
            (= sym 'in-ns)             #'in-ns
            (= sym *compile-stub-sym*) *compile-stub-class*
            :else (or (.getMapping n, sym) (throw! (str "unable to resolve symbol: " sym " in this context")))
        )
    )

    (defn #_"Object" Compiler'resolve
        ([#_"Symbol" sym                          ] (Compiler'resolveIn *ns*, sym, false       ))
        ([#_"Symbol" sym, #_"boolean" allowPrivate] (Compiler'resolveIn *ns*, sym, allowPrivate))
    )

    (defn #_"Object" Compiler'maybeResolveIn [#_"Namespace" n, #_"Symbol" sym]
        ;; note - ns-qualified vars must already exist
        (cond
            (some? (ßns sym))
                (when-let [#_"Namespace" ns (Compiler'namespaceFor n, sym)]
                    (when-let [#_"Var" v (.findInternedVar ns, (symbol (ßname sym)))]
                        v
                    )
                )
            (or (and (pos? (.indexOf (ßname sym), (int \.))) (not (.endsWith (ßname sym), "."))) (= (.charAt (ßname sym), 0) \[))
                (RT/classForName (ßname sym))
            (= sym 'ns)
                #'ns
            (= sym 'in-ns)
                #'in-ns
            :else
                (.getMapping n, sym)
        )
    )

    (defn #_"boolean" Compiler'inty [#_"Class" c] (any = c Integer/TYPE Short/TYPE Byte/TYPE Character/TYPE))

    (defn #_"Class" Compiler'retType [#_"Class" tc, #_"Class" ret]
        (cond
            (nil? tc)
                ret
            (nil? ret)
                tc
            (and (.isPrimitive ret) (.isPrimitive tc))
                (when (or (and (Compiler'inty ret) (Compiler'inty tc)) (= ret tc)) => (throw! (str "cannot coerce " ret " to " tc ": use a cast instead"))
                    tc
                )
            :else
                tc
        )
    )

    (defn #_"Class" Compiler'primClass [#_"Class" c]
        (if (.isPrimitive c) c Object)
    )

    (defn #_"Class" Compiler'boxClass [#_"Class" p]
        (when (.isPrimitive p) => p
            (condp = p
                Integer/TYPE   Integer
                Long/TYPE      Long
                Float/TYPE     Float
                Double/TYPE    Double
                Character/TYPE Character
                Short/TYPE     Short
                Byte/TYPE      Byte
                Boolean/TYPE   Boolean
                               nil
            )
        )
    )
)

(class-ns MonitorEnterExpr
    (defn #_"MonitorEnterExpr" MonitorEnterExpr'new [#_"Expr" target]
        (merge (MonitorEnterExpr.)
            (hash-map
                #_"Expr" :target target
            )
        )
    )

    (extend-type MonitorEnterExpr Expr
        (#_"Object" Expr'''eval [#_"MonitorEnterExpr" this]
            (throw! "can't eval monitor-enter")
        )

        (#_"void" Expr'''emit [#_"MonitorEnterExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (Expr'''emit (:target this), :Context'EXPRESSION, objx, gen)
            (.monitorEnter gen)
            (Expr'''emit Compiler'NIL_EXPR, context, objx, gen)
            nil
        )

        (#_"Class" Expr'''getClass [#_"MonitorEnterExpr" this]
            nil
        )
    )
)

(declare Compiler'analyze)

(class-ns MonitorEnterParser
    (defn #_"IParser" MonitorEnterParser'new []
        (reify IParser
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (MonitorEnterExpr'new (Compiler'analyze :Context'EXPRESSION, (second form)))
            )
        )
    )
)

(class-ns MonitorExitExpr
    (defn #_"MonitorExitExpr" MonitorExitExpr'new [#_"Expr" target]
        (merge (MonitorExitExpr.)
            (hash-map
                #_"Expr" :target target
            )
        )
    )

    (extend-type MonitorExitExpr Expr
        (#_"Object" Expr'''eval [#_"MonitorExitExpr" this]
            (throw! "can't eval monitor-exit")
        )

        (#_"void" Expr'''emit [#_"MonitorExitExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (Expr'''emit (:target this), :Context'EXPRESSION, objx, gen)
            (.monitorExit gen)
            (Expr'''emit Compiler'NIL_EXPR, context, objx, gen)
            nil
        )

        (#_"Class" Expr'''getClass [#_"MonitorExitExpr" this]
            nil
        )
    )
)

(class-ns MonitorExitParser
    (defn #_"IParser" MonitorExitParser'new []
        (reify IParser
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (MonitorExitExpr'new (Compiler'analyze :Context'EXPRESSION, (second form)))
            )
        )
    )
)

(class-ns AssignExpr
    (defn #_"AssignExpr" AssignExpr'new [#_"Assignable" target, #_"Expr" val]
        (merge (AssignExpr.)
            (hash-map
                #_"Assignable" :target target
                #_"Expr" :val val
            )
        )
    )

    (extend-type AssignExpr Expr
        (#_"Object" Expr'''eval [#_"AssignExpr" this]
            (Assignable'''evalAssign (:target this), (:val this))
        )

        (#_"void" Expr'''emit [#_"AssignExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (Assignable'''emitAssign (:target this), context, objx, gen, (:val this))
            nil
        )

        (#_"Class" Expr'''getClass [#_"AssignExpr" this]
            (Expr'''getClass (:val this))
        )
    )
)

(class-ns AssignParser
    (defn #_"IParser" AssignParser'new []
        (reify IParser
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (when (= (count form) 3) => (throw! "malformed assignment, expecting (set! target val)")
                    (let [#_"Expr" target (Compiler'analyze :Context'EXPRESSION, (second form))]
                        (when (satisfies? Assignable target) => (throw! "invalid assignment target")
                            (AssignExpr'new target, (Compiler'analyze :Context'EXPRESSION, (third form)))
                        )
                    )
                )
            )
        )
    )
)

(class-ns ImportExpr
    (defn #_"ImportExpr" ImportExpr'new [#_"String" c]
        (merge (ImportExpr.)
            (hash-map
                #_"String" :c c
            )
        )
    )

    (extend-type ImportExpr Expr
        (#_"Object" Expr'''eval [#_"ImportExpr" this]
            (.importClass *ns*, (RT/classForNameNonLoading (:c this)))
            nil
        )

        (#_"void" Expr'''emit [#_"ImportExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (.getStatic gen, (Type/getType RT), "CURRENT_NS", (Type/getType Var))
            (.invokeVirtual gen, (Type/getType Var), (Method/getMethod "Object deref()"))
            (.checkCast gen, (Type/getType Namespace))
            (.push gen, (:c this))
            (.invokeStatic gen, (Type/getType RT), (Method/getMethod "Class classForNameNonLoading(String)"))
            (.invokeVirtual gen, (Type/getType Namespace), (Method/getMethod "Class importClass(Class)"))
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"ImportExpr" this]
            nil
        )
    )
)

(class-ns ImportParser
    (defn #_"IParser" ImportParser'new []
        (reify IParser
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (ImportExpr'new (second form))
            )
        )
    )
)

(class-ns EmptyExpr
    (defn #_"EmptyExpr" EmptyExpr'new [#_"Object" coll]
        (merge (EmptyExpr.)
            (hash-map
                #_"Object" :coll coll
            )
        )
    )

    (extend-type EmptyExpr Expr
        (#_"Object" Expr'''eval [#_"EmptyExpr" this]
            (:coll this)
        )

        (#_"void" Expr'''emit [#_"EmptyExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (condp instance? (:coll this)
                IPersistentList   (.getStatic gen, (Type/getType PersistentList),     "EMPTY", (Type/getType PersistentList$EmptyList))
                IPersistentVector (.getStatic gen, (Type/getType PersistentVector),   "EMPTY", (Type/getType PersistentVector))
                IPersistentMap    (.getStatic gen, (Type/getType PersistentArrayMap), "EMPTY", (Type/getType PersistentArrayMap))
                IPersistentSet    (.getStatic gen, (Type/getType PersistentHashSet),  "EMPTY", (Type/getType PersistentHashSet))
                                  (throw! "unknown collection type")
            )
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"EmptyExpr" this]
            (condp instance? (:coll this)
                IPersistentList   IPersistentList
                IPersistentVector IPersistentVector
                IPersistentMap    IPersistentMap
                IPersistentSet    IPersistentSet
                                  (throw! "unknown collection type")
            )
        )
    )
)

(class-ns ConstantExpr
    (defn #_"ConstantExpr" ConstantExpr'new [#_"Object" v]
        (merge (ConstantExpr.)
            (hash-map
                #_"Object" :v v
                #_"int" :id (Compiler'registerConstant v)
            )
        )
    )

    (extend-type ConstantExpr Literal
        (#_"Object" Literal'''literal [#_"ConstantExpr" this]
            (:v this)
        )
    )

    (declare IopObject''emitConstant)

    (extend-type ConstantExpr Expr
        (#_"Object" Expr'''eval [#_"ConstantExpr" this]
            (Literal'''literal this)
        )

        (#_"void" Expr'''emit [#_"ConstantExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (IopObject''emitConstant objx, gen, (:id this))
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"ConstantExpr" this]
            (when (Modifier/isPublic (.getModifiers (class (:v this))))
                (condp instance? (:v this)
                    APersistentMap    APersistentMap
                    APersistentSet    APersistentSet
                    APersistentVector APersistentVector
                                      (class (:v this))
                )
            )
        )
    )
)

(class-ns NumberExpr
    (defn #_"NumberExpr" NumberExpr'new [#_"Number" n]
        (merge (NumberExpr.)
            (hash-map
                #_"Number" :n n
                #_"int" :id (Compiler'registerConstant n)
            )
        )
    )

    (extend-type NumberExpr Literal
        (#_"Object" Literal'''literal [#_"NumberExpr" this]
            (:n this)
        )
    )

    (extend-type NumberExpr Expr
        (#_"Object" Expr'''eval [#_"NumberExpr" this]
            (Literal'''literal this)
        )

        (#_"void" Expr'''emit [#_"NumberExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (when-not (= context :Context'STATEMENT)
                (IopObject''emitConstant objx, gen, (:id this))
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"NumberExpr" this]
            (condp instance? (:n this)
                Integer Long/TYPE
                Long    Long/TYPE
                Double  Double/TYPE
                        (throw! (str "unsupported Number type: " (.getName (class (:n this)))))
            )
        )
    )

    (extend-type NumberExpr MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"NumberExpr" this]
            true
        )

        (#_"void" MaybePrimitive'''emitUnboxed [#_"NumberExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (cond
                (instance? Integer (:n this)) (.push gen, (.longValue (:n this)))
                (instance? Double (:n this))  (.push gen, (.doubleValue (:n this)))
                (instance? Long (:n this))    (.push gen, (.longValue (:n this)))
            )
            nil
        )
    )

    (defn #_"Expr" NumberExpr'parse [#_"Number" form]
        (if (or (instance? Integer form) (instance? Double form) (instance? Long form))
            (NumberExpr'new form)
            (ConstantExpr'new form)
        )
    )
)

(class-ns StringExpr
    (defn #_"StringExpr" StringExpr'new [#_"String" str]
        (merge (StringExpr.)
            (hash-map
                #_"String" :str str
            )
        )
    )

    (extend-type StringExpr Literal
        (#_"Object" Literal'''literal [#_"StringExpr" this]
            (:str this)
        )
    )

    (extend-type StringExpr Expr
        (#_"Object" Expr'''eval [#_"StringExpr" this]
            (Literal'''literal this)
        )

        (#_"void" Expr'''emit [#_"StringExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (when-not (= context :Context'STATEMENT)
                (.push gen, (:str this))
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"StringExpr" this]
            String
        )
    )
)

(class-ns KeywordExpr
    (defn #_"KeywordExpr" KeywordExpr'new [#_"Keyword" k]
        (merge (KeywordExpr.)
            (hash-map
                #_"Keyword" :k k
            )
        )
    )

    (extend-type KeywordExpr Literal
        (#_"Object" Literal'''literal [#_"KeywordExpr" this]
            (:k this)
        )
    )

    (declare IopObject''emitKeyword)

    (extend-type KeywordExpr Expr
        (#_"Object" Expr'''eval [#_"KeywordExpr" this]
            (Literal'''literal this)
        )

        (#_"void" Expr'''emit [#_"KeywordExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (IopObject''emitKeyword objx, gen, (:k this))
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"KeywordExpr" this]
            Keyword
        )
    )
)

(class-ns ConstantParser
    (defn #_"IParser" ConstantParser'new []
        (reify IParser
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (let [#_"int" n (dec (count form))]
                    (when (= n 1) => (throw! (str "wrong number of arguments passed to quote: " n))
                        (let [#_"Object" v (second form)]
                            (cond
                                (nil? v)                                                    Compiler'NIL_EXPR
                                (= v true)                                                  Compiler'TRUE_EXPR
                                (= v false)                                                 Compiler'FALSE_EXPR
                                (number? v)                                                 (NumberExpr'parse v)
                                (string? v)                                                 (StringExpr'new v)
                                (and (instance? IPersistentCollection v) (zero? (count v))) (EmptyExpr'new v)
                                :else                                                       (ConstantExpr'new v)
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns Interop
    (defn #_"void" Interop'emitBoxReturn [#_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Class" returnType]
        (when (.isPrimitive returnType)
            (condp = returnType
                Boolean/TYPE
                    (let [#_"Label" falseLabel (.newLabel gen) #_"Label" endLabel (.newLabel gen)]
                        (.ifZCmp gen, GeneratorAdapter/EQ, falseLabel)
                        (.getStatic gen, (Type/getType Boolean), "TRUE", (Type/getType Boolean))
                        (.goTo gen, endLabel)
                        (.mark gen, falseLabel)
                        (.getStatic gen, (Type/getType Boolean), "FALSE", (Type/getType Boolean))
                        (.mark gen, endLabel)
                    )
                Byte/TYPE      (.invokeStatic gen, (Type/getType Byte), (Method/getMethod "Byte valueOf(byte)"))
                Short/TYPE     (.invokeStatic gen, (Type/getType Short), (Method/getMethod "Short valueOf(short)"))
                Character/TYPE (.invokeStatic gen, (Type/getType Character), (Method/getMethod "Character valueOf(char)"))
                Integer/TYPE   (.invokeStatic gen, (Type/getType Integer), (Method/getMethod "Integer valueOf(int)"))
                Long/TYPE      (.invokeStatic gen, (Type/getType Numbers), (Method/getMethod "Number num(long)"))
                Float/TYPE     (.invokeStatic gen, (Type/getType Float), (Method/getMethod "Float valueOf(float)"))
                Double/TYPE    (.invokeStatic gen, (Type/getType Double), (Method/getMethod "Double valueOf(double)"))
                Void/TYPE      (Expr'''emit Compiler'NIL_EXPR, :Context'EXPRESSION, objx, gen)
            )
        )
        nil
    )

    (defn #_"void" Interop'emitUnboxArg [#_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Class" paramType]
        (when (.isPrimitive paramType) => (.checkCast gen, (Type/getType paramType))
            (condp = paramType
                Boolean/TYPE
                (do
                    (.checkCast gen, (Type/getType Boolean))
                    (.invokeVirtual gen, (Type/getType Boolean), (Method/getMethod "boolean booleanValue()"))
                )
                Character/TYPE
                (do
                    (.checkCast gen, (Type/getType Character))
                    (.invokeVirtual gen, (Type/getType Character), (Method/getMethod "char charValue()"))
                )
                (do
                    (.checkCast gen, (Type/getType Number))
                    (let [#_"Method" m
                            (condp = paramType
                                Integer/TYPE (Method/getMethod "int intCast(Object)")
                                Float/TYPE   (Method/getMethod "float floatCast(Object)")
                                Double/TYPE  (Method/getMethod "double doubleCast(Object)")
                                Long/TYPE    (Method/getMethod "long longCast(Object)")
                                Byte/TYPE    (Method/getMethod "byte byteCast(Object)")
                                Short/TYPE   (Method/getMethod "short shortCast(Object)")
                                             nil
                            )]
                        (.invokeStatic gen, (Type/getType RT), m)
                    )
                )
            )
        )
        nil
    )

    (defn #_"Class" Interop'maybeClass [#_"Object" form, #_"boolean" stringOk]
        (cond
            (class? form)
                form
            (symbol? form)
                (when (nil? (ßns form)) ;; if ns-qualified can't be classname
                    (cond
                        (= form *compile-stub-sym*)
                            *compile-stub-class*
                        (or (pos? (.indexOf (ßname form), (int \.))) (= (.charAt (ßname form), 0) \[))
                            (RT/classForNameNonLoading (ßname form))
                        :else
                            (let [#_"Object" o (.getMapping *ns*, form)]
                                (cond
                                    (class? o)
                                        o
                                    (contains? *local-env* form)
                                        nil
                                    :else
                                        (try
                                            (RT/classForNameNonLoading (ßname form))
                                            (catch Exception _
                                                nil
                                            )
                                        )
                                )
                            )
                    )
                )
            (and stringOk (string? form))
                (RT/classForNameNonLoading form)
        )
    )

    (defn #_"Class" Interop'primClassForName [#_"Symbol" sym]
        (when (some? sym)
            (case (ßname sym)
                "boolean" Boolean/TYPE
                "byte"    Byte/TYPE
                "short"   Short/TYPE
                "char"    Character/TYPE
                "int"     Integer/TYPE
                "long"    Long/TYPE
                "float"   Float/TYPE
                "double"  Double/TYPE
                "void"    Void/TYPE
                          nil
            )
        )
    )

    (defn #_"Class" Interop'maybeSpecialTag [#_"Symbol" sym]
        (or (Interop'primClassForName sym)
            (case (ßname sym)
                "booleans" Compiler'BOOLEANS_CLASS
                "bytes"    Compiler'BYTES_CLASS
                "shorts"   Compiler'SHORTS_CLASS
                "chars"    Compiler'CHARS_CLASS
                "ints"     Compiler'INTS_CLASS
                "longs"    Compiler'LONGS_CLASS
                "floats"   Compiler'FLOATS_CLASS
                "doubles"  Compiler'DOUBLES_CLASS
                "objects"  Compiler'OBJECTS_CLASS
                           nil
            )
        )
    )

    (defn #_"Class" Interop'tagToClass [#_"Object" tag]
        (or
            (when (and (symbol? tag) (nil? (ßns tag))) ;; if ns-qualified can't be classname
                (Interop'maybeSpecialTag tag)
            )
            (Interop'maybeClass tag, true)
            (throw! (str "unable to resolve classname: " tag))
        )
    )

    (defn #_"Class" Interop'tagClass [#_"Object" tag]
        (when (some? tag) => Object
            (or
                (when (symbol? tag)
                    (Interop'primClassForName tag)
                )
                (Interop'tagToClass tag)
            )
        )
    )
)

(class-ns InstanceFieldExpr
    (defn #_"InstanceFieldExpr" InstanceFieldExpr'new [#_"int" line, #_"Expr" target, #_"String" fieldName, #_"Symbol" tag, #_"boolean" requireField]
        (let [#_"Class" c (Expr'''getClass target)
              #_"java.lang.reflect.Field" f (when (some? c) (Reflector'getField c, fieldName, false))]
            (when (and (nil? f) *warn-on-reflection*)
                (if (nil? c)
                    (.println *err*, (str "Reflection warning, line " line " - reference to field " fieldName " can't be resolved."))
                    (.println *err*, (str "Reflection warning, line " line " - reference to field " fieldName " on " (.getName c) " can't be resolved."))
                )
            )
            (merge (InstanceFieldExpr.)
                (hash-map
                    #_"Expr" :target target
                    #_"Class" :targetClass c
                    #_"java.lang.reflect.Field" :field f
                    #_"String" :fieldName fieldName
                    #_"int" :line line
                    #_"Symbol" :tag tag
                    #_"boolean" :requireField requireField
                )
            )
        )
    )

    (extend-type InstanceFieldExpr Expr
        (#_"Object" Expr'''eval [#_"InstanceFieldExpr" this]
            (Reflector'invokeNoArgInstanceMember (Expr'''eval (:target this)), (:fieldName this), (:requireField this))
        )

        (#_"void" Expr'''emit [#_"InstanceFieldExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (if (and (some? (:targetClass this)) (some? (:field this)))
                (do
                    (Expr'''emit (:target this), :Context'EXPRESSION, objx, gen)
                    (.visitLineNumber gen, (:line this), (.mark gen))
                    (.checkCast gen, (Compiler'getType (:targetClass this)))
                    (.getField gen, (Compiler'getType (:targetClass this)), (:fieldName this), (Type/getType (.getType (:field this))))
                    (Interop'emitBoxReturn objx, gen, (.getType (:field this)))
                    (when (= context :Context'STATEMENT)
                        (.pop gen)
                    )
                )
                (do
                    (Expr'''emit (:target this), :Context'EXPRESSION, objx, gen)
                    (.visitLineNumber gen, (:line this), (.mark gen))
                    (.push gen, (:fieldName this))
                    (.push gen, (:requireField this))
                    (.invokeStatic gen, (Type/getType Reflector), (Method/getMethod "Object invokeNoArgInstanceMember(Object, String, boolean)"))
                    (when (= context :Context'STATEMENT)
                        (.pop gen)
                    )
                )
            )
            nil
        )

        #_memoize!
        (#_"Class" Expr'''getClass [#_"InstanceFieldExpr" this]
            (cond (some? (:tag this)) (Interop'tagToClass (:tag this)) (some? (:field this)) (.getType (:field this)))
        )
    )

    (extend-type InstanceFieldExpr MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"InstanceFieldExpr" this]
            (and (some? (:targetClass this)) (some? (:field this)) (Reflector'isPrimitive (.getType (:field this))))
        )

        (#_"void" MaybePrimitive'''emitUnboxed [#_"InstanceFieldExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (when (and (some? (:targetClass this)) (some? (:field this))) => (throw! "unboxed emit of unknown member")
                (Expr'''emit (:target this), :Context'EXPRESSION, objx, gen)
                (.visitLineNumber gen, (:line this), (.mark gen))
                (.checkCast gen, (Compiler'getType (:targetClass this)))
                (.getField gen, (Compiler'getType (:targetClass this)), (:fieldName this), (Type/getType (.getType (:field this))))
            )
            nil
        )
    )

    (extend-type InstanceFieldExpr Assignable
        (#_"Object" Assignable'''evalAssign [#_"InstanceFieldExpr" this, #_"Expr" val]
            (Reflector'setInstanceField (Expr'''eval (:target this)), (:fieldName this), (Expr'''eval val))
        )

        (#_"void" Assignable'''emitAssign [#_"InstanceFieldExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Expr" val]
            (if (and (some? (:targetClass this)) (some? (:field this)))
                (do
                    (Expr'''emit (:target this), :Context'EXPRESSION, objx, gen)
                    (.checkCast gen, (Compiler'getType (:targetClass this)))
                    (Expr'''emit val, :Context'EXPRESSION, objx, gen)
                    (.visitLineNumber gen, (:line this), (.mark gen))
                    (.dupX1 gen)
                    (Interop'emitUnboxArg objx, gen, (.getType (:field this)))
                    (.putField gen, (Compiler'getType (:targetClass this)), (:fieldName this), (Type/getType (.getType (:field this))))
                )
                (do
                    (Expr'''emit (:target this), :Context'EXPRESSION, objx, gen)
                    (.push gen, (:fieldName this))
                    (Expr'''emit val, :Context'EXPRESSION, objx, gen)
                    (.visitLineNumber gen, (:line this), (.mark gen))
                    (.invokeStatic gen, (Type/getType Reflector), (Method/getMethod "Object setInstanceField(Object, String, Object)"))
                )
            )
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )
    )
)

(class-ns StaticFieldExpr
    (defn #_"StaticFieldExpr" StaticFieldExpr'new [#_"int" line, #_"Class" c, #_"String" fieldName, #_"Symbol" tag]
        (merge (StaticFieldExpr.)
            (hash-map
                #_"int" :line line
                #_"Class" :c c
                #_"String" :fieldName fieldName
                #_"Symbol" :tag tag

                #_"java.lang.reflect.Field" :field (.getField c, fieldName)
            )
        )
    )

    (extend-type StaticFieldExpr Expr
        (#_"Object" Expr'''eval [#_"StaticFieldExpr" this]
            (Reflector'getStaticField (:c this), (:fieldName this))
        )

        (#_"void" Expr'''emit [#_"StaticFieldExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (.visitLineNumber gen, (:line this), (.mark gen))

            (.getStatic gen, (Type/getType (:c this)), (:fieldName this), (Type/getType (.getType (:field this))))
            (Interop'emitBoxReturn objx, gen, (.getType (:field this)))
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        #_memoize!
        (#_"Class" Expr'''getClass [#_"StaticFieldExpr" this]
            (if (some? (:tag this)) (Interop'tagToClass (:tag this)) (.getType (:field this)))
        )
    )

    (extend-type StaticFieldExpr MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"StaticFieldExpr" this]
            (Reflector'isPrimitive (.getType (:field this)))
        )

        (#_"void" MaybePrimitive'''emitUnboxed [#_"StaticFieldExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (.visitLineNumber gen, (:line this), (.mark gen))
            (.getStatic gen, (Type/getType (:c this)), (:fieldName this), (Type/getType (.getType (:field this))))
            nil
        )
    )

    (extend-type StaticFieldExpr Assignable
        (#_"Object" Assignable'''evalAssign [#_"StaticFieldExpr" this, #_"Expr" val]
            (Reflector'setStaticField (:c this), (:fieldName this), (Expr'''eval val))
        )

        (#_"void" Assignable'''emitAssign [#_"StaticFieldExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Expr" val]
            (Expr'''emit val, :Context'EXPRESSION, objx, gen)
            (.visitLineNumber gen, (:line this), (.mark gen))
            (.dup gen)
            (Interop'emitUnboxArg objx, gen, (.getType (:field this)))
            (.putStatic gen, (Type/getType (:c this)), (:fieldName this), (Type/getType (.getType (:field this))))
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )
    )
)

(class-ns MethodExpr
    (defn #_"void" MethodExpr'emitArgsAsArray [#_"IPersistentVector" args, #_"IopObject" objx, #_"GeneratorAdapter" gen]
        (.push gen, (count args))
        (.newArray gen, (Type/getType Object))
        (dotimes [#_"int" i (count args)]
            (.dup gen)
            (.push gen, i)
            (Expr'''emit (nth args i), :Context'EXPRESSION, objx, gen)
            (.arrayStore gen, (Type/getType Object))
        )
        nil
    )

    (defn #_"void" MethodExpr'emitTypedArgs [#_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Class[]" parameterTypes, #_"IPersistentVector" args]
        (dotimes [#_"int" i (alength parameterTypes)]
            (let [#_"Expr" e (nth args i) #_"Class" primc (Compiler'maybePrimitiveType e)]
                (cond
                    (= primc (aget parameterTypes i))
                        (do
                            (MaybePrimitive'''emitUnboxed e, :Context'EXPRESSION, objx, gen)
                        )
                    (and (= primc Integer/TYPE) (= (aget parameterTypes i) Long/TYPE))
                        (do
                            (MaybePrimitive'''emitUnboxed e, :Context'EXPRESSION, objx, gen)
                            (.visitInsn gen, Opcodes/I2L)
                        )
                    (and (= primc Long/TYPE) (= (aget parameterTypes i) Integer/TYPE))
                        (do
                            (MaybePrimitive'''emitUnboxed e, :Context'EXPRESSION, objx, gen)
                            (.invokeStatic gen, (Type/getType RT), (Method/getMethod "int intCast(long)"))
                        )
                    (and (= primc Float/TYPE) (= (aget parameterTypes i) Double/TYPE))
                        (do
                            (MaybePrimitive'''emitUnboxed e, :Context'EXPRESSION, objx, gen)
                            (.visitInsn gen, Opcodes/F2D)
                        )
                    (and (= primc Double/TYPE) (= (aget parameterTypes i) Float/TYPE))
                        (do
                            (MaybePrimitive'''emitUnboxed e, :Context'EXPRESSION, objx, gen)
                            (.visitInsn gen, Opcodes/D2F)
                        )
                    :else
                        (do
                            (Expr'''emit e, :Context'EXPRESSION, objx, gen)
                            (Interop'emitUnboxArg objx, gen, (aget parameterTypes i))
                        )
                )
            )
        )
        nil
    )
)

(class-ns IopMethod
    (defn #_"IopMethod" IopMethod'init [#_"IopObject" objx, #_"IopMethod" parent]
        (hash-map
            #_"IopObject" :objx objx
            ;; when closures are defined inside other closures,
            ;; the closed over locals need to be propagated to the enclosing objx
            #_"IopMethod" :parent parent
            ;; uid->localbinding
            #_"IPersistentMap" :locals {}
            #_"Expr" :body nil
            #_"PersistentVector" :argLocals nil
            #_"int" :line 0
            #_"IPersistentMap" :methodMeta nil
        )
    )

    (defn #_"void" IopMethod'emitBody [#_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Class" retClass, #_"Expr" body]
        (if (and (Reflector'isPrimitive retClass) (MaybePrimitive'''canEmitPrimitive body))
            (let [#_"Class" c (Compiler'maybePrimitiveType body)]
                (cond (= c retClass)
                    (do
                        (MaybePrimitive'''emitUnboxed body, :Context'RETURN, objx, gen)
                    )
                    (and (= retClass Long/TYPE) (= c Integer/TYPE))
                    (do
                        (MaybePrimitive'''emitUnboxed body, :Context'RETURN, objx, gen)
                        (.visitInsn gen, Opcodes/I2L)
                    )
                    (and (= retClass Double/TYPE) (= c Float/TYPE))
                    (do
                        (MaybePrimitive'''emitUnboxed body, :Context'RETURN, objx, gen)
                        (.visitInsn gen, Opcodes/F2D)
                    )
                    (and (= retClass Integer/TYPE) (= c Long/TYPE))
                    (do
                        (MaybePrimitive'''emitUnboxed body, :Context'RETURN, objx, gen)
                        (.invokeStatic gen, (Type/getType RT), (Method/getMethod "int intCast(long)"))
                    )
                    (and (= retClass Float/TYPE) (= c Double/TYPE))
                    (do
                        (MaybePrimitive'''emitUnboxed body, :Context'RETURN, objx, gen)
                        (.visitInsn gen, Opcodes/D2F)
                    )
                    :else
                    (do
                        (throw! (str "mismatched primitive return, expected: " retClass ", had: " (Expr'''getClass body)))
                    )
                )
            )
            (do
                (Expr'''emit body, :Context'RETURN, objx, gen)
                (if (= retClass Void/TYPE)
                    (.pop gen)
                    (.unbox gen, (Type/getType retClass))
                )
            )
        )
        nil
    )

    #_method
    (defn #_"void" IopMethod''emitClearLocals [#_"IopMethod" this, #_"GeneratorAdapter" gen]
        nil
    )

    #_method
    (defn #_"void" IopMethod''emitClearThis [#_"IopMethod" this, #_"GeneratorAdapter" gen]
        (.visitInsn gen, Opcodes/ACONST_NULL)
        (.visitVarInsn gen, Opcodes/ASTORE, 0)
        nil
    )
)

(class-ns InstanceMethodExpr
    (defn #_"InstanceMethodExpr" InstanceMethodExpr'new [#_"int" line, #_"Symbol" tag, #_"Expr" target, #_"String" methodName, #_"IPersistentVector" args, #_"boolean" tailPosition]
        (let [#_"java.lang.reflect.Method" method
                (if (some? (Expr'''getClass target))
                    (let [#_"PersistentVector" methods (Reflector'getMethods (Expr'''getClass target), (count args), methodName, false)]
                        (if (zero? (count methods))
                            (do
                                (when *warn-on-reflection*
                                    (.println *err*, (str "Reflection warning, line " line " - call to method " methodName " on " (.getName (Expr'''getClass target)) " can't be resolved (no such method)."))
                                )
                                nil
                            )
                            (let [#_"int" methodidx
                                    (when (< 1 (count methods)) => 0
                                        (let [[#_"PersistentVector" pars #_"PersistentVector" rets]
                                                (loop-when [pars [] rets [] #_"int" i 0] (< i (count methods)) => [pars rets]
                                                    (let [#_"java.lang.reflect.Method" m (nth methods i)]
                                                        (recur (conj pars (.getParameterTypes m)) (conj rets (.getReturnType m)) (inc i))
                                                    )
                                                )]
                                            (Compiler'getMatchingParams methodName, pars, args, rets)
                                        )
                                    )
                                #_"java.lang.reflect.Method" m (when (<= 0 methodidx) (nth methods methodidx))
                                m (when (and (some? m) (not (Modifier/isPublic (.getModifiers (.getDeclaringClass m))))) => m
                                        ;; public method of non-public class, try to find it in hierarchy
                                        (Reflector'getAsMethodOfPublicBase (.getDeclaringClass m), m)
                                    )]
                                (when (and (nil? m) *warn-on-reflection*)
                                    (.println *err*, (str "Reflection warning, line " line " - call to method " methodName " on " (.getName (Expr'''getClass target)) " can't be resolved (argument types: " (Compiler'getTypeStringForArgs args) ")."))
                                )
                                m
                            )
                        )
                    )
                    (do
                        (when *warn-on-reflection*
                            (.println *err*, (str "Reflection warning, line " line " - call to method " methodName " can't be resolved (target class is unknown)."))
                        )
                        nil
                    )
                )]
            (merge (InstanceMethodExpr.)
                (hash-map
                    #_"int" :line line
                    #_"Symbol" :tag tag
                    #_"Expr" :target target
                    #_"String" :methodName methodName
                    #_"IPersistentVector" :args args
                    #_"boolean" :tailPosition tailPosition

                    #_"java.lang.reflect.Method" :method method
                )
            )
        )
    )

    (extend-type InstanceMethodExpr Expr
        (#_"Object" Expr'''eval [#_"InstanceMethodExpr" this]
            (let [#_"Object" target (Expr'''eval (:target this)) #_"Object[]" args (make-array Object (count (:args this)))]
                (dotimes [#_"int" i (count (:args this))]
                    (aset args i (Expr'''eval (nth (:args this) i)))
                )
                (if (some? (:method this))
                    (Reflector'invokeMatchingMethod (:methodName this), [(:method this)], target, args)
                    (Reflector'invokeInstanceMethod target, (:methodName this), args)
                )
            )
        )

        (#_"void" Expr'''emit [#_"InstanceMethodExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (if (some? (:method this))
                (let [#_"Type" type (Type/getType (.getDeclaringClass (:method this)))]
                    (Expr'''emit (:target this), :Context'EXPRESSION, objx, gen)
                    (.checkCast gen, type)
                    (MethodExpr'emitTypedArgs objx, gen, (.getParameterTypes (:method this)), (:args this))
                    (.visitLineNumber gen, (:line this), (.mark gen))
                    (when (= context :Context'RETURN)
                        (IopMethod''emitClearLocals *method*, gen)
                    )
                    (let [#_"Method" m (Method. (:methodName this), (Type/getReturnType (:method this)), (Type/getArgumentTypes (:method this)))]
                        (if (.isInterface (.getDeclaringClass (:method this)))
                            (.invokeInterface gen, type, m)
                            (.invokeVirtual gen, type, m)
                        )
                        (Interop'emitBoxReturn objx, gen, (.getReturnType (:method this)))
                    )
                )
                (do
                    (Expr'''emit (:target this), :Context'EXPRESSION, objx, gen)
                    (.push gen, (:methodName this))
                    (MethodExpr'emitArgsAsArray (:args this), objx, gen)
                    (.visitLineNumber gen, (:line this), (.mark gen))
                    (when (= context :Context'RETURN)
                        (IopMethod''emitClearLocals *method*, gen)
                    )
                    (.invokeStatic gen, (Type/getType Reflector), (Method/getMethod "Object invokeInstanceMethod(Object, String, Object[])"))
                )
            )
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        #_memoize!
        (#_"Class" Expr'''getClass [#_"InstanceMethodExpr" this]
            (Compiler'retType (when (some? (:tag this)) (Interop'tagToClass (:tag this))), (when (some? (:method this)) (.getReturnType (:method this))))
        )
    )

    (extend-type InstanceMethodExpr MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"InstanceMethodExpr" this]
            (and (some? (:method this)) (Reflector'isPrimitive (.getReturnType (:method this))))
        )

        (#_"void" MaybePrimitive'''emitUnboxed [#_"InstanceMethodExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (when (some? (:method this)) => (throw! "unboxed emit of unknown member")
                (let [#_"Type" type (Type/getType (.getDeclaringClass (:method this)))]
                    (Expr'''emit (:target this), :Context'EXPRESSION, objx, gen)
                    (.checkCast gen, type)
                    (MethodExpr'emitTypedArgs objx, gen, (.getParameterTypes (:method this)), (:args this))
                    (.visitLineNumber gen, (:line this), (.mark gen))
                    (when (:tailPosition this)
                        (IopMethod''emitClearThis *method*, gen)
                    )
                    (let [#_"Method" m (Method. (:methodName this), (Type/getReturnType (:method this)), (Type/getArgumentTypes (:method this)))]
                        (if (.isInterface (.getDeclaringClass (:method this)))
                            (.invokeInterface gen, type, m)
                            (.invokeVirtual gen, type, m)
                        )
                    )
                )
            )
            nil
        )
    )
)

(class-ns StaticMethodExpr
    (defn #_"StaticMethodExpr" StaticMethodExpr'new [#_"int" line, #_"Symbol" tag, #_"Class" c, #_"String" methodName, #_"IPersistentVector" args, #_"boolean" tailPosition]
        (let [#_"java.lang.reflect.Method" method
                (let [#_"PersistentVector" methods (Reflector'getMethods c, (count args), methodName, true)]
                    (when-not (zero? (count methods)) => (throw! (str "no matching method: " methodName))
                        (let [#_"int" methodidx
                                (when (< 1 (count methods)) => 0
                                    (let [[#_"PersistentVector" pars #_"PersistentVector" rets]
                                            (loop-when [pars [] rets [] #_"int" i 0] (< i (count methods)) => [pars rets]
                                                (let [#_"java.lang.reflect.Method" m (nth methods i)]
                                                    (recur (conj pars (.getParameterTypes m)) (conj rets (.getReturnType m)) (inc i))
                                                )
                                            )]
                                        (Compiler'getMatchingParams methodName, pars, args, rets)
                                    )
                                )
                              #_"java.lang.reflect.Method" m (when (<= 0 methodidx) (nth methods methodidx))]
                            (when (and (nil? m) *warn-on-reflection*)
                                (.println *err*, (str "Reflection warning, line " line " - call to static method " methodName " on " (.getName c) " can't be resolved (argument types: " (Compiler'getTypeStringForArgs args) ")."))
                            )
                            m
                        )
                    )
                )]
            (merge (StaticMethodExpr.)
                (hash-map
                    #_"int" :line line
                    #_"Symbol" :tag tag
                    #_"Class" :c c
                    #_"String" :methodName methodName
                    #_"IPersistentVector" :args args
                    #_"boolean" :tailPosition tailPosition

                    #_"java.lang.reflect.Method" :method method
                )
            )
        )
    )

    #_method
    (defn #_"boolean" StaticMethodExpr''canEmitIntrinsicPredicate [#_"StaticMethodExpr" this]
        (and (some? (:method this)) (some? (get Intrinsics'preds (.toString (:method this)))))
    )

    #_method
    (defn #_"void" StaticMethodExpr''emitIntrinsicPredicate [#_"StaticMethodExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Label" falseLabel]
        (.visitLineNumber gen, (:line this), (.mark gen))
        (when (some? (:method this)) => (throw! "unboxed emit of unknown member")
            (MethodExpr'emitTypedArgs objx, gen, (.getParameterTypes (:method this)), (:args this))
            (when (= context :Context'RETURN)
                (IopMethod''emitClearLocals *method*, gen)
            )
            (let [#_"[int]" preds (get Intrinsics'preds (.toString (:method this)))]
                (doseq [#_"int" pred (pop preds)]
                    (.visitInsn gen, pred)
                )
                (.visitJumpInsn gen, (peek preds), falseLabel)
            )
        )
        nil
    )

    (extend-type StaticMethodExpr Expr
        (#_"Object" Expr'''eval [#_"StaticMethodExpr" this]
            (let [#_"Object[]" args (make-array Object (count (:args this)))]
                (dotimes [#_"int" i (count (:args this))]
                    (aset args i (Expr'''eval (nth (:args this) i)))
                )
                (if (some? (:method this))
                    (Reflector'invokeMatchingMethod (:methodName this), [(:method this)], nil, args)
                    (Reflector'invokeStaticMethod (:c this), (:methodName this), args)
                )
            )
        )

        (#_"void" Expr'''emit [#_"StaticMethodExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (if (some? (:method this))
                (do
                    (MethodExpr'emitTypedArgs objx, gen, (.getParameterTypes (:method this)), (:args this))
                    (.visitLineNumber gen, (:line this), (.mark gen))
                    (when (:tailPosition this)
                        (IopMethod''emitClearThis *method*, gen)
                    )
                    (let [#_"Type" type (Type/getType (:c this))
                        #_"Method" m (Method. (:methodName this), (Type/getReturnType (:method this)), (Type/getArgumentTypes (:method this)))]
                        (.invokeStatic gen, type, m)
                        (when (= context :Context'STATEMENT) => (Interop'emitBoxReturn objx, gen, (.getReturnType (:method this)))
                            (let [#_"Class" rc (.getReturnType (:method this))]
                                (cond
                                    (any = rc Long/TYPE Double/TYPE) (.pop2 gen)
                                    (not (= rc Void/TYPE))           (.pop gen)
                                )
                            )
                        )
                    )
                )
                (do
                    (.visitLineNumber gen, (:line this), (.mark gen))
                    (.push gen, (.getName (:c this)))
                    (.invokeStatic gen, (Type/getType RT), (Method/getMethod "Class classForName(String)"))
                    (.push gen, (:methodName this))
                    (MethodExpr'emitArgsAsArray (:args this), objx, gen)
                    (.visitLineNumber gen, (:line this), (.mark gen))
                    (when (= context :Context'RETURN)
                        (IopMethod''emitClearLocals *method*, gen)
                    )
                    (.invokeStatic gen, (Type/getType Reflector), (Method/getMethod "Object invokeStaticMethod(Class, String, Object[])"))
                    (when (= context :Context'STATEMENT)
                        (.pop gen)
                    )
                )
            )
            nil
        )

        #_memoize!
        (#_"Class" Expr'''getClass [#_"StaticMethodExpr" this]
            (Compiler'retType (when (some? (:tag this)) (Interop'tagToClass (:tag this))), (when (some? (:method this)) (.getReturnType (:method this))))
        )
    )

    (extend-type StaticMethodExpr MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"StaticMethodExpr" this]
            (and (some? (:method this)) (Reflector'isPrimitive (.getReturnType (:method this))))
        )

        (#_"void" MaybePrimitive'''emitUnboxed [#_"StaticMethodExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (when (some? (:method this)) => (throw! "unboxed emit of unknown member")
                (MethodExpr'emitTypedArgs objx, gen, (.getParameterTypes (:method this)), (:args this))
                (.visitLineNumber gen, (:line this), (.mark gen))
                (when (= context :Context'RETURN)
                    (IopMethod''emitClearLocals *method*, gen)
                )
                (let [#_"int|[int]" ops (get Intrinsics'ops (.toString (:method this)))]
                    (if (some? ops)
                        (if (vector? ops)
                            (doseq [#_"int" op ops]
                                (.visitInsn gen, op)
                            )
                            (.visitInsn gen, ops)
                        )
                        (let [#_"Method" m (Method. (:methodName this), (Type/getReturnType (:method this)), (Type/getArgumentTypes (:method this)))]
                            (.invokeStatic gen, (Type/getType (:c this)), m)
                        )
                    )
                )
            )
            nil
        )
    )
)

(class-ns HostParser
    (defn #_"IParser" HostParser'new []
        (reify IParser
            ;; (. x fieldname-sym) or
            ;; (. x 0-ary-method)
            ;; (. x methodname-sym args+)
            ;; (. x (methodname-sym args?))
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (when-not (< (count form) 3) => (throw! "malformed member expression, expecting (. target member ...)")
                    ;; determine static or instance
                    ;; static target must be symbol, either fully.qualified.Classname or Classname that has been imported
                    (let [#_"int" line *line* #_"Class" c (Interop'maybeClass (second form), false)
                          ;; at this point c will be non-null if static
                          #_"Expr" instance (when (nil? c) (Compiler'analyze (if (= context :Context'EVAL) context :Context'EXPRESSION), (second form)))
                          #_"boolean" maybeField (and (= (count form) 3) (symbol? (third form)))
                          maybeField
                            (when (and maybeField (not= (.charAt (ßname (third form)), 0) \-)) => maybeField
                                (let [#_"String" name (ßname (third form))]
                                    (cond
                                        (some? c)
                                            (zero? (count (Reflector'getMethods c, 0, (Compiler'munge name), true)))
                                        (and (some? instance) (some? (Expr'''getClass instance)))
                                            (zero? (count (Reflector'getMethods (Expr'''getClass instance), 0, (Compiler'munge name), false)))
                                        :else
                                            maybeField
                                    )
                                )
                            )]
                        (if maybeField
                            (let [? (= (.charAt (ßname (third form)), 0) \-)
                                  #_"Symbol" sym (if ? (symbol (.substring (ßname (third form)), 1)) (third form))
                                  #_"Symbol" tag (Compiler'tagOf form)]
                                (if (some? c)
                                    (StaticFieldExpr'new line, c, (Compiler'munge (ßname sym)), tag)
                                    (InstanceFieldExpr'new line, instance, (Compiler'munge (ßname sym)), tag, ?)
                                )
                            )
                            (let [#_"ISeq" call (if (instance? ISeq (third form)) (third form) (next (next form)))]
                                (when (symbol? (first call)) => (throw! "malformed member expression")
                                    (let [#_"Symbol" sym (first call)
                                          #_"Symbol" tag (Compiler'tagOf form)
                                          #_"boolean" tailPosition (Compiler'inTailCall context)
                                          #_"PersistentVector" args
                                            (loop-when-recur [args [] #_"ISeq" s (next call)]
                                                             (some? s)
                                                             [(conj args (Compiler'analyze (if (= context :Context'EVAL) context :Context'EXPRESSION), (first s))) (next s)]
                                                          => args
                                            )]
                                        (if (some? c)
                                            (StaticMethodExpr'new line, tag, c, (Compiler'munge (ßname sym)), args, tailPosition)
                                            (InstanceMethodExpr'new line, tag, instance, (Compiler'munge (ßname sym)), args, tailPosition)
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns UnresolvedVarExpr
    (defn #_"UnresolvedVarExpr" UnresolvedVarExpr'new [#_"Symbol" symbol]
        (merge (UnresolvedVarExpr.)
            (hash-map
                #_"Symbol" :symbol symbol
            )
        )
    )

    (extend-type UnresolvedVarExpr Expr
        (#_"Object" Expr'''eval [#_"UnresolvedVarExpr" this]
            (throw! "can't eval")
        )

        (#_"void" Expr'''emit [#_"UnresolvedVarExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            nil
        )

        (#_"Class" Expr'''getClass [#_"UnresolvedVarExpr" this]
            nil
        )
    )
)

(class-ns VarExpr
    (defn #_"VarExpr" VarExpr'new [#_"Var" var, #_"Symbol" tag]
        (merge (VarExpr.)
            (hash-map
                #_"Var" :var var
                #_"Object" :tag (or tag (get (meta var) :tag))
            )
        )
    )

    (declare IopObject''emitVarValue)

    (extend-type VarExpr Expr
        (#_"Object" Expr'''eval [#_"VarExpr" this]
            (deref (:var this))
        )

        (#_"void" Expr'''emit [#_"VarExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (IopObject''emitVarValue objx, gen, (:var this))
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        #_memoize!
        (#_"Class" Expr'''getClass [#_"VarExpr" this]
            (when (some? (:tag this)) (Interop'tagToClass (:tag this)))
        )
    )

    (declare IopObject''emitVar)

    (extend-type VarExpr Assignable
        (#_"Object" Assignable'''evalAssign [#_"VarExpr" this, #_"Expr" val]
            (var-set (:var this) (Expr'''eval val))
        )

        (#_"void" Assignable'''emitAssign [#_"VarExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Expr" val]
            (IopObject''emitVar objx, gen, (:var this))
            (Expr'''emit val, :Context'EXPRESSION, objx, gen)
            (.invokeVirtual gen, (Type/getType Var), (Method/getMethod "Object set(Object)"))
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )
    )
)

(class-ns TheVarExpr
    (defn #_"TheVarExpr" TheVarExpr'new [#_"Var" var]
        (merge (TheVarExpr.)
            (hash-map
                #_"Var" :var var
            )
        )
    )

    (extend-type TheVarExpr Expr
        (#_"Object" Expr'''eval [#_"TheVarExpr" this]
            (:var this)
        )

        (#_"void" Expr'''emit [#_"TheVarExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (IopObject''emitVar objx, gen, (:var this))
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"TheVarExpr" this]
            Var
        )
    )
)

(class-ns TheVarParser
    (defn #_"IParser" TheVarParser'new []
        (reify IParser
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (let [#_"Symbol" sym (second form) #_"Var" v (Compiler'lookupVar sym, false)]
                    (when (some? v) => (throw! (str "unable to resolve var: " sym " in this context"))
                        (TheVarExpr'new v)
                    )
                )
            )
        )
    )
)

(class-ns BodyExpr
    (defn #_"BodyExpr" BodyExpr'new [#_"PersistentVector" exprs]
        (merge (BodyExpr.)
            (hash-map
                #_"PersistentVector" :exprs exprs
            )
        )
    )

    #_method
    (defn- #_"Expr" BodyExpr''lastExpr [#_"BodyExpr" this]
        (nth (:exprs this) (dec (count (:exprs this))))
    )

    (extend-type BodyExpr Expr
        (#_"Object" Expr'''eval [#_"BodyExpr" this]
            (loop-when-recur [#_"Object" ret nil #_"ISeq" s (seq (:exprs this))] (some? s) [(Expr'''eval (first s)) (next s)] => ret)
        )

        (#_"void" Expr'''emit [#_"BodyExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (dotimes [#_"int" i (dec (count (:exprs this)))]
                (Expr'''emit (nth (:exprs this) i), :Context'STATEMENT, objx, gen)
            )
            (Expr'''emit (BodyExpr''lastExpr this), context, objx, gen)
            nil
        )

        (#_"Class" Expr'''getClass [#_"BodyExpr" this]
            (Expr'''getClass (BodyExpr''lastExpr this))
        )
    )

    (extend-type BodyExpr MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"BodyExpr" this]
            (let [#_"Expr" e (BodyExpr''lastExpr this)]
                (and (satisfies? MaybePrimitive e) (MaybePrimitive'''canEmitPrimitive e))
            )
        )

        (#_"void" MaybePrimitive'''emitUnboxed [#_"BodyExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (dotimes [#_"int" i (dec (count (:exprs this)))]
                (Expr'''emit (nth (:exprs this) i), :Context'STATEMENT, objx, gen)
            )
            (MaybePrimitive'''emitUnboxed (BodyExpr''lastExpr this), context, objx, gen)
            nil
        )
    )
)

(class-ns BodyParser
    (defn #_"IParser" BodyParser'new []
        (reify IParser
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (let [#_"ISeq" s form s (if (= (first s) 'do) (next s) s)
                      #_"PersistentVector" v
                        (loop-when [v [] s s] (some? s) => v
                            (let [#_"Context" c (if (and (not= context :Context'EVAL) (or (= context :Context'STATEMENT) (some? (next s)))) :Context'STATEMENT context)]
                                (recur (conj v (Compiler'analyze c, (first s))) (next s))
                            )
                        )]
                    (BodyExpr'new (if (pos? (count v)) v (conj v Compiler'NIL_EXPR)))
                )
            )
        )
    )
)

(class-ns CatchClause
    (defn #_"CatchClause" CatchClause'new [#_"Class" c, #_"LocalBinding" lb, #_"Expr" handler]
        (merge (CatchClause.)
            (hash-map
                #_"Class" :c c
                #_"LocalBinding" :lb lb
                #_"Expr" :handler handler
            )
        )
    )
)

(class-ns TryExpr
    (defn #_"TryExpr" TryExpr'new [#_"Expr" tryExpr, #_"PersistentVector" catchExprs, #_"Expr" finallyExpr]
        (merge (TryExpr.)
            (hash-map
                #_"Expr" :tryExpr tryExpr
                #_"PersistentVector" :catchExprs catchExprs
                #_"Expr" :finallyExpr finallyExpr

                #_"int" :retLocal (Compiler'nextLocalNum)
                #_"int" :finallyLocal (Compiler'nextLocalNum)
            )
        )
    )

    (extend-type TryExpr Expr
        (#_"Object" Expr'''eval [#_"TryExpr" this]
            (throw! "can't eval try")
        )

        (#_"void" Expr'''emit [#_"TryExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (let [#_"Label" startTry (.newLabel gen) #_"Label" endTry (.newLabel gen) #_"Label" end (.newLabel gen) #_"Label" ret (.newLabel gen) #_"Label" finallyLabel (.newLabel gen)
                #_"int" n (count (:catchExprs this)) #_"Label[]" labels (make-array Label n) #_"Label[]" endLabels (make-array Label n)]
                (dotimes [#_"int" i n]
                    (aset labels i (.newLabel gen))
                    (aset endLabels i (.newLabel gen))
                )

                (.mark gen, startTry)
                (Expr'''emit (:tryExpr this), context, objx, gen)
                (when-not (= context :Context'STATEMENT)
                    (.visitVarInsn gen, (.getOpcode (Type/getType Object), Opcodes/ISTORE), (:retLocal this))
                )
                (.mark gen, endTry)
                (when (some? (:finallyExpr this))
                    (Expr'''emit (:finallyExpr this), :Context'STATEMENT, objx, gen)
                )
                (.goTo gen, ret)

                (dotimes [#_"int" i n]
                    (let [#_"CatchClause" clause (nth (:catchExprs this) i)]
                        (.mark gen, (aget labels i))
                        ;; exception should be on stack
                        ;; put in clause local
                        (.visitVarInsn gen, (.getOpcode (Type/getType Object), Opcodes/ISTORE), (:idx (:lb clause)))
                        (Expr'''emit (:handler clause), context, objx, gen)
                        (when-not (= context :Context'STATEMENT)
                            (.visitVarInsn gen, (.getOpcode (Type/getType Object), Opcodes/ISTORE), (:retLocal this))
                        )
                        (.mark gen, (aget endLabels i))

                        (when (some? (:finallyExpr this))
                            (Expr'''emit (:finallyExpr this), :Context'STATEMENT, objx, gen)
                        )
                        (.goTo gen, ret)
                    )
                )
                (when (some? (:finallyExpr this))
                    (.mark gen, finallyLabel)
                    ;; exception should be on stack
                    (.visitVarInsn gen, (.getOpcode (Type/getType Object), Opcodes/ISTORE), (:finallyLocal this))
                    (Expr'''emit (:finallyExpr this), :Context'STATEMENT, objx, gen)
                    (.visitVarInsn gen, (.getOpcode (Type/getType Object), Opcodes/ILOAD), (:finallyLocal this))
                    (.throwException gen)
                )
                (.mark gen, ret)
                (when-not (= context :Context'STATEMENT)
                    (.visitVarInsn gen, (.getOpcode (Type/getType Object), Opcodes/ILOAD), (:retLocal this))
                )
                (.mark gen, end)
                (dotimes [#_"int" i n]
                    (let [#_"CatchClause" clause (nth (:catchExprs this) i)]
                        (.visitTryCatchBlock gen, startTry, endTry, (aget labels i), (.replace (.getName (:c clause)), \., \/))
                    )
                )
                (when (some? (:finallyExpr this))
                    (.visitTryCatchBlock gen, startTry, endTry, finallyLabel, nil)
                    (dotimes [#_"int" i n]
                        (let [#_"CatchClause" _clause (nth (:catchExprs this) i)]
                            (.visitTryCatchBlock gen, (aget labels i), (aget endLabels i), finallyLabel, nil)
                        )
                    )
                )
                (dotimes [#_"int" i n]
                    (let [#_"CatchClause" clause (nth (:catchExprs this) i)]
                        (.visitLocalVariable gen, (:name (:lb clause)), "Ljava/lang/Object;", nil, (aget labels i), (aget endLabels i), (:idx (:lb clause)))
                    )
                )
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"TryExpr" this]
            (Expr'''getClass (:tryExpr this))
        )
    )
)

(class-ns TryParser
    (defn #_"IParser" TryParser'new []
        (reify IParser
            ;; (try try-expr* catch-expr* finally-expr?)
            ;; catch-expr: (catch class sym expr*)
            ;; finally-expr: (finally expr*)
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (when (= context :Context'RETURN) => (Compiler'analyze context, (list (list Compiler'FNONCE [] form)))
                    (let [[#_"Expr" bodyExpr #_"PersistentVector" catches #_"Expr" finallyExpr #_"PersistentVector" body]
                            (loop-when [bodyExpr nil catches [] finallyExpr nil body [] #_"boolean" caught? false #_"ISeq" fs (next form)] (some? fs) => [bodyExpr catches finallyExpr body]
                                (let [#_"Object" f (first fs) #_"Object" op (when (instance? ISeq f) (first f))]
                                    (if (any = op 'catch 'finally)
                                        (let [bodyExpr
                                                (when (nil? bodyExpr) => bodyExpr
                                                    (binding [*no-recur* true, *in-return-context* false]
                                                        (IParser'''parse (BodyParser'new), context, (seq body))
                                                    )
                                                )]
                                            (if (= op 'catch)
                                                (let-when [#_"Class" c (Interop'maybeClass (second f), false)] (some? c) => (throw! (str "unable to resolve classname: " (second f)))
                                                    (let-when [#_"Symbol" sym (third f)] (symbol? sym) => (throw! (str "bad binding form, expected symbol, got: " sym))
                                                        (when (nil? (namespace sym)) => (throw! (str "can't bind qualified name: " sym))
                                                            (let [catches
                                                                    (binding [*local-env* *local-env*, *last-local-num* *last-local-num*, *in-catch-finally* true]
                                                                        (let [#_"LocalBinding" lb (Compiler'registerLocal sym, (when (symbol? (second f)) (second f)), nil, false)
                                                                              #_"Expr" handler (IParser'''parse (BodyParser'new), :Context'EXPRESSION, (next (next (next f))))]
                                                                            (conj catches (CatchClause'new c, lb, handler))
                                                                        )
                                                                    )]
                                                                (recur bodyExpr catches finallyExpr body true (next fs))
                                                            )
                                                        )
                                                    )
                                                )
                                                (when (nil? (next fs)) => (throw! "finally clause must be last in try expression")
                                                    (let [finallyExpr
                                                            (binding [*in-catch-finally* true]
                                                                (IParser'''parse (BodyParser'new), :Context'STATEMENT, (next f))
                                                            )]
                                                        (recur bodyExpr catches finallyExpr body caught? (next fs))
                                                    )
                                                )
                                            )
                                        )
                                        (when-not caught? => (throw! "only catch or finally clause can follow catch in try expression")
                                            (recur bodyExpr catches finallyExpr (conj body f) caught? (next fs))
                                        )
                                    )
                                )
                            )]
                        (when (nil? bodyExpr) => (TryExpr'new bodyExpr, catches, finallyExpr)
                            ;; when there is neither catch nor finally, e.g. (try (expr)) return a body expr directly
                            (binding [*no-recur* true]
                                (IParser'''parse (BodyParser'new), context, (seq body))
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns ThrowExpr
    (defn #_"ThrowExpr" ThrowExpr'new [#_"Expr" excExpr]
        (merge (ThrowExpr.)
            (hash-map
                #_"Expr" :excExpr excExpr
            )
        )
    )

    (extend-type ThrowExpr Expr
        (#_"Object" Expr'''eval [#_"ThrowExpr" this]
            (throw! "can't eval throw")
        )

        (#_"void" Expr'''emit [#_"ThrowExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (Expr'''emit (:excExpr this), :Context'EXPRESSION, objx, gen)
            (.checkCast gen, (Type/getType Throwable))
            (.throwException gen)
            nil
        )

        (#_"Class" Expr'''getClass [#_"ThrowExpr" this]
            nil
        )
    )
)

(class-ns ThrowParser
    (defn #_"IParser" ThrowParser'new []
        (reify IParser
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (cond
                    (= context :Context'EVAL) (Compiler'analyze context, (list (list Compiler'FNONCE [] form)))
                    (= (count form) 1)        (throw! "too few arguments to throw: single Throwable expected")
                    (< 2 (count form))        (throw! "too many arguments to throw: single Throwable expected")
                    :else                     (ThrowExpr'new (Compiler'analyze :Context'EXPRESSION, (second form)))
                )
            )
        )
    )
)

(class-ns NewExpr
    (defn #_"NewExpr" NewExpr'new [#_"Class" c, #_"IPersistentVector" args, #_"int" line]
        (let [#_"Constructor" ctor
                (let [#_"Constructor[]" allctors (.getConstructors c)
                      [#_"PersistentVector" ctors #_"PersistentVector" pars #_"PersistentVector" rets]
                        (loop-when [ctors [] pars [] rets [] #_"int" i 0] (< i (alength allctors)) => [ctors pars rets]
                            (let [#_"Constructor" ctor (aget allctors i) #_"Class[]" types (.getParameterTypes ctor)
                                  [ctors pars rets]
                                    (when (= (alength types) (count args)) => [ctors pars rets]
                                        [(conj ctors ctor) (conj pars types) (conj rets c)]
                                    )]
                                (recur ctors pars rets (inc i))
                            )
                        )]
                    (let-when [#_"int" n (count ctors)] (< 0 n) => (throw! (str "no matching ctor found for " c))
                        (let [#_"int" i (if (< 1 n) (Compiler'getMatchingParams (.getName c), pars, args, rets) 0)
                              #_"Constructor" ctor (when (<= 0 i) (nth ctors i))]
                            (when (and (nil? ctor) *warn-on-reflection*)
                                (.println *err*, (str "Reflection warning, line " line " - call to " (.getName c) " ctor can't be resolved."))
                            )
                            ctor
                        )
                    )
                )]
            (merge (NewExpr.)
                (hash-map
                    #_"IPersistentVector" :args args
                    #_"Constructor" :ctor ctor
                    #_"Class" :c c
                )
            )
        )
    )

    (extend-type NewExpr Expr
        (#_"Object" Expr'''eval [#_"NewExpr" this]
            (let [#_"Object[]" args (make-array Object (count (:args this)))]
                (dotimes [#_"int" i (count (:args this))]
                    (aset args i (Expr'''eval (nth (:args this) i)))
                )
                (when (some? (:ctor this)) => (Reflector'invokeConstructor (:c this), args)
                    (.newInstance (:ctor this), (Reflector'boxArgs (.getParameterTypes (:ctor this)), args))
                )
            )
        )

        (#_"void" Expr'''emit [#_"NewExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (if (some? (:ctor this))
                (let [#_"Type" type (Compiler'getType (:c this))]
                    (.newInstance gen, type)
                    (.dup gen)
                    (MethodExpr'emitTypedArgs objx, gen, (.getParameterTypes (:ctor this)), (:args this))
                    (.invokeConstructor gen, type, (Method. "<init>", (Type/getConstructorDescriptor (:ctor this))))
                )
                (do
                    (.push gen, (Compiler'destubClassName (.getName (:c this))))
                    (.invokeStatic gen, (Type/getType RT), (Method/getMethod "Class classForName(String)"))
                    (MethodExpr'emitArgsAsArray (:args this), objx, gen)
                    (.invokeStatic gen, (Type/getType Reflector), (Method/getMethod "Object invokeConstructor(Class, Object[])"))
                )
            )
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"NewExpr" this]
            (:c this)
        )
    )
)

(class-ns NewParser
    (defn #_"IParser" NewParser'new []
        (reify IParser
            ;; (new Classname args...)
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (let [#_"int" line *line*]
                    (when (< 1 (count form)) => (throw! "wrong number of arguments, expecting: (new Classname args...)")
                        (let [#_"Class" c (Interop'maybeClass (second form), false)]
                            (when (some? c) => (throw! (str "unable to resolve classname: " (second form)))
                                (let [#_"PersistentVector" args
                                        (loop-when-recur [args [] #_"ISeq" s (next (next form))]
                                                         (some? s)
                                                         [(conj args (Compiler'analyze (if (= context :Context'EVAL) context :Context'EXPRESSION), (first s))) (next s)]
                                                      => args
                                        )]
                                    (NewExpr'new c, args, line)
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns MetaExpr
    (defn #_"MetaExpr" MetaExpr'new [#_"Expr" expr, #_"Expr" meta]
        (merge (MetaExpr.)
            (hash-map
                #_"Expr" :expr expr
                #_"Expr" :meta meta
            )
        )
    )

    (extend-type MetaExpr Expr
        (#_"Object" Expr'''eval [#_"MetaExpr" this]
            (with-meta (Expr'''eval (:expr this)) (Expr'''eval (:meta this)))
        )

        (#_"void" Expr'''emit [#_"MetaExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (Expr'''emit (:expr this), :Context'EXPRESSION, objx, gen)
            (.checkCast gen, (Type/getType IObj))
            (Expr'''emit (:meta this), :Context'EXPRESSION, objx, gen)
            (.checkCast gen, (Type/getType IPersistentMap))
            (.invokeInterface gen, (Type/getType IObj), (Method/getMethod "clojure.lang.IObj withMeta(clojure.lang.IPersistentMap)"))
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"MetaExpr" this]
            (Expr'''getClass (:expr this))
        )
    )
)

(class-ns IfExpr
    (defn #_"IfExpr" IfExpr'new [#_"int" line, #_"Expr" testExpr, #_"Expr" thenExpr, #_"Expr" elseExpr]
        (merge (IfExpr.)
            (hash-map
                #_"int" :line line
                #_"Expr" :testExpr testExpr
                #_"Expr" :thenExpr thenExpr
                #_"Expr" :elseExpr elseExpr
            )
        )
    )

    #_method
    (defn- #_"void" IfExpr''doEmit [#_"IfExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen, #_"boolean" emitUnboxed]
        (let [#_"Label" nullLabel (.newLabel gen) #_"Label" falseLabel (.newLabel gen) #_"Label" endLabel (.newLabel gen)]
            (.visitLineNumber gen, (:line this), (.mark gen))

            (cond (and (instance? StaticMethodExpr (:testExpr this)) (StaticMethodExpr''canEmitIntrinsicPredicate (:testExpr this)))
                (do
                    (StaticMethodExpr''emitIntrinsicPredicate (:testExpr this), :Context'EXPRESSION, objx, gen, falseLabel)
                )
                (= (Compiler'maybePrimitiveType (:testExpr this)) Boolean/TYPE)
                (do
                    (MaybePrimitive'''emitUnboxed (:testExpr this), :Context'EXPRESSION, objx, gen)
                    (.ifZCmp gen, GeneratorAdapter/EQ, falseLabel)
                )
                :else
                (do
                    (Expr'''emit (:testExpr this), :Context'EXPRESSION, objx, gen)
                    (.dup gen)
                    (.ifNull gen, nullLabel)
                    (.getStatic gen, (Type/getType Boolean), "FALSE", (Type/getType Boolean))
                    (.visitJumpInsn gen, Opcodes/IF_ACMPEQ, falseLabel)
                )
            )
            (if emitUnboxed
                (MaybePrimitive'''emitUnboxed (:thenExpr this), context, objx, gen)
                (Expr'''emit (:thenExpr this), context, objx, gen)
            )
            (.goTo gen, endLabel)
            (.mark gen, nullLabel)
            (.pop gen)
            (.mark gen, falseLabel)
            (if emitUnboxed
                (MaybePrimitive'''emitUnboxed (:elseExpr this), context, objx, gen)
                (Expr'''emit (:elseExpr this), context, objx, gen)
            )
            (.mark gen, endLabel)
        )
        nil
    )

    (extend-type IfExpr Expr
        (#_"Object" Expr'''eval [#_"IfExpr" this]
            (Expr'''eval (if (any = (Expr'''eval (:testExpr this)) nil false) (:elseExpr this) (:thenExpr this)))
        )

        (#_"void" Expr'''emit [#_"IfExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (IfExpr''doEmit this, context, objx, gen, false)
            nil
        )

        (#_"Class" Expr'''getClass [#_"IfExpr" this]
            (let [#_"Expr" then (:thenExpr this) #_"Class" t (Expr'''getClass then)
                  #_"Expr" else (:elseExpr this) #_"Class" e (Expr'''getClass else)]
                (when (and (or (some? t) (instance? NilExpr then))
                           (or (some? e) (instance? NilExpr else))
                           (or (= t e)
                               (any = Recur t e)
                               (and (nil? t) (not (.isPrimitive e)))
                               (and (nil? e) (not (.isPrimitive t)))))
                    (if (any = t nil Recur) e t)
                )
            )
        )
    )

    (extend-type IfExpr MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"IfExpr" this]
            (try
                (let [#_"Expr" then (:thenExpr this) #_"Expr" else (:elseExpr this)]
                    (and (satisfies? MaybePrimitive then)
                         (satisfies? MaybePrimitive else)
                         (let [#_"Class" t (Expr'''getClass then) #_"Class" e (Expr'''getClass else)]
                            (or (= t e)
                                (any = Recur t e)))
                         (MaybePrimitive'''canEmitPrimitive then)
                         (MaybePrimitive'''canEmitPrimitive else))
                )
                (catch Exception _
                    false
                )
            )
        )

        (#_"void" MaybePrimitive'''emitUnboxed [#_"IfExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (IfExpr''doEmit this, context, objx, gen, true)
            nil
        )
    )
)

(class-ns IfParser
    (defn #_"IParser" IfParser'new []
        (reify IParser
            ;; (if test then) or (if test then else)
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (cond
                    (< 4 (count form)) (throw! "too many arguments to if")
                    (< (count form) 3) (throw! "too few arguments to if")
                )
                (let [#_"Expr" test (Compiler'analyze (if (= context :Context'EVAL) context :Context'EXPRESSION), (second form))
                      #_"Expr" then (Compiler'analyze context, (third form))
                      #_"Expr" else (Compiler'analyze context, (fourth form))]
                    (IfExpr'new *line*, test, then, else)
                )
            )
        )
    )
)

(class-ns ListExpr
    (defn #_"ListExpr" ListExpr'new [#_"IPersistentVector" args]
        (merge (ListExpr.)
            (hash-map
                #_"IPersistentVector" :args args
            )
        )
    )

    (extend-type ListExpr Expr
        (#_"Object" Expr'''eval [#_"ListExpr" this]
            (loop-when-recur [#_"IPersistentVector" v [] #_"int" i 0]
                             (< i (count (:args this)))
                             [(conj v (Expr'''eval (nth (:args this) i))) (inc i)]
                          => (seq v)
            )
        )

        (#_"void" Expr'''emit [#_"ListExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (MethodExpr'emitArgsAsArray (:args this), objx, gen)
            (.invokeStatic gen, (Type/getType RT), (Method/getMethod "clojure.lang.ISeq arrayToSeq(Object[])"))
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"ListExpr" this]
            IPersistentList
        )
    )
)

(class-ns MapExpr
    (defn #_"MapExpr" MapExpr'new [#_"IPersistentVector" keyvals]
        (merge (MapExpr.)
            (hash-map
                #_"IPersistentVector" :keyvals keyvals
            )
        )
    )

    (extend-type MapExpr Expr
        (#_"Object" Expr'''eval [#_"MapExpr" this]
            (let [#_"Object[]" a (make-array Object (count (:keyvals this)))]
                (dotimes [#_"int" i (count (:keyvals this))]
                    (aset a i (Expr'''eval (nth (:keyvals this) i)))
                )
                (RT/map a)
            )
        )

        (#_"void" Expr'''emit [#_"MapExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (let [[#_"boolean" allKeysConstant #_"boolean" allConstantKeysUnique]
                    (loop-when [constant? true unique? true #_"IPersistentSet" keys #{} #_"int" i 0] (< i (count (:keyvals this))) => [constant? unique?]
                        (let [#_"Expr" k (nth (:keyvals this) i)
                            [constant? unique? keys]
                                (when (satisfies? Literal k) => [false unique? keys]
                                    (let-when-not [#_"Object" v (Expr'''eval k)] (contains? keys v) => [constant? false keys]
                                        [constant? unique? (conj keys v)]
                                    )
                                )]
                            (recur constant? unique? keys (+ i 2))
                        )
                    )]
                (MethodExpr'emitArgsAsArray (:keyvals this), objx, gen)
                (if (or (and allKeysConstant allConstantKeysUnique) (<= (count (:keyvals this)) 2))
                    (.invokeStatic gen, (Type/getType RT), (Method/getMethod "clojure.lang.IPersistentMap mapUniqueKeys(Object[])"))
                    (.invokeStatic gen, (Type/getType RT), (Method/getMethod "clojure.lang.IPersistentMap map(Object[])"))
                )
                (when (= context :Context'STATEMENT)
                    (.pop gen)
                )
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"MapExpr" this]
            IPersistentMap
        )
    )

    (defn #_"Expr" MapExpr'parse [#_"Context" context, #_"IPersistentMap" form]
        (let [#_"Context" c (if (= context :Context'EVAL) context :Context'EXPRESSION)
              [#_"IPersistentVector" keyvals #_"boolean" keysConstant #_"boolean" allConstantKeysUnique #_"boolean" valsConstant]
                (loop-when [keyvals [], keysConstant true, allConstantKeysUnique true, #_"IPersistentSet" constantKeys #{}, valsConstant true, #_"ISeq" s (seq form)] (some? s) => [keyvals keysConstant allConstantKeysUnique valsConstant]
                    (let [#_"IMapEntry" e (first s) #_"Expr" k (Compiler'analyze c, (key e)) #_"Expr" v (Compiler'analyze c, (val e))
                          [keysConstant allConstantKeysUnique constantKeys]
                            (when (satisfies? Literal k) => [false allConstantKeysUnique constantKeys]
                                (let [#_"Object" kval (Expr'''eval k)]
                                    (if (contains? constantKeys kval)
                                        [keysConstant false constantKeys]
                                        [keysConstant allConstantKeysUnique (conj constantKeys kval)]
                                    )
                                )
                            )]
                        (recur (conj keyvals k v) keysConstant allConstantKeysUnique constantKeys (and valsConstant (satisfies? Literal v)) (next s))
                    )
                )
              #_"Expr" e (MapExpr'new keyvals)]
            (cond
                (and (instance? IObj form) (some? (meta form)))
                    (MetaExpr'new e, (MapExpr'parse c, (meta form)))
                keysConstant
                    (when allConstantKeysUnique => (throw! "duplicate constant keys in map")
                        (when valsConstant => e
                            (loop-when-recur [#_"IPersistentMap" m {} #_"int" i 0]
                                             (< i (count keyvals))
                                             [(assoc m (Literal'''literal (nth keyvals i)) (Literal'''literal (nth keyvals (inc i)))) (+ i 2)]
                                          => (ConstantExpr'new m)
                            )
                        )
                    )
                :else
                    e
            )
        )
    )
)

(class-ns SetExpr
    (defn #_"SetExpr" SetExpr'new [#_"IPersistentVector" keys]
        (merge (SetExpr.)
            (hash-map
                #_"IPersistentVector" :keys keys
            )
        )
    )

    (extend-type SetExpr Expr
        (#_"Object" Expr'''eval [#_"SetExpr" this]
            (let [#_"Object[]" a (make-array Object (count (:keys this)))]
                (dotimes [#_"int" i (count (:keys this))]
                    (aset a i (Expr'''eval (nth (:keys this) i)))
                )
                (RT/set a)
            )
        )

        (#_"void" Expr'''emit [#_"SetExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (MethodExpr'emitArgsAsArray (:keys this), objx, gen)
            (.invokeStatic gen, (Type/getType RT), (Method/getMethod "clojure.lang.IPersistentSet set(Object[])"))
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"SetExpr" this]
            IPersistentSet
        )
    )

    (defn #_"Expr" SetExpr'parse [#_"Context" context, #_"IPersistentSet" form]
        (let [[#_"IPersistentVector" keys #_"boolean" constant?]
                (loop-when [keys [] constant? true #_"ISeq" s (seq form)] (some? s) => [keys constant?]
                    (let [#_"Expr" e (Compiler'analyze (if (= context :Context'EVAL) context :Context'EXPRESSION), (first s))]
                        (recur (conj keys e) (and constant? (satisfies? Literal e)) (next s))
                    )
                )]
            (cond
                (and (instance? IObj form) (some? (meta form)))
                    (MetaExpr'new (SetExpr'new keys), (MapExpr'parse (if (= context :Context'EVAL) context :Context'EXPRESSION), (meta form)))
                constant?
                    (loop-when-recur [#_"IPersistentSet" s #{} #_"int" i 0]
                                     (< i (count keys))
                                     [(conj s (Literal'''literal (nth keys i))) (inc i)]
                                  => (ConstantExpr'new s)
                    )
                :else
                    (SetExpr'new keys)
            )
        )
    )
)

(class-ns VectorExpr
    (defn #_"VectorExpr" VectorExpr'new [#_"IPersistentVector" args]
        (merge (VectorExpr.)
            (hash-map
                #_"IPersistentVector" :args args
            )
        )
    )

    (declare Tuple'MAX_SIZE)

    (extend-type VectorExpr Expr
        (#_"Object" Expr'''eval [#_"VectorExpr" this]
            (loop-when-recur [#_"IPersistentVector" v [] #_"int" i 0]
                             (< i (count (:args this)))
                             [(conj v (Expr'''eval (nth (:args this) i))) (inc i)]
                          => v
            )
        )

        (#_"void" Expr'''emit [#_"VectorExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (if (<= (count (:args this)) Tuple'MAX_SIZE)
                (do
                    (dotimes [#_"int" i (count (:args this))]
                        (Expr'''emit (nth (:args this) i), :Context'EXPRESSION, objx, gen)
                    )
                    (.invokeStatic gen, (Type/getType Tuple), (nth Compiler'createTupleMethods (count (:args this))))
                )
                (do
                    (MethodExpr'emitArgsAsArray (:args this), objx, gen)
                    (.invokeStatic gen, (Type/getType RT), (Method/getMethod "clojure.lang.IPersistentVector vector(Object[])"))
                )
            )

            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"VectorExpr" this]
            IPersistentVector
        )
    )

    (defn #_"Expr" VectorExpr'parse [#_"Context" context, #_"IPersistentVector" form]
        (let [[#_"IPersistentVector" args #_"boolean" constant?]
                (loop-when [args [] constant? true #_"int" i 0] (< i (count form)) => [args constant?]
                    (let [#_"Expr" e (Compiler'analyze (if (= context :Context'EVAL) context :Context'EXPRESSION), (nth form i))]
                        (recur (conj args e) (and constant? (satisfies? Literal e)) (inc i))
                    )
                )]
            (cond
                (and (instance? IObj form) (some? (meta form)))
                    (MetaExpr'new (VectorExpr'new args), (MapExpr'parse (if (= context :Context'EVAL) context :Context'EXPRESSION), (meta form)))
                constant?
                    (loop-when-recur [#_"IPersistentVector" v [] #_"int" i 0]
                                     (< i (count args))
                                     [(conj v (Literal'''literal (nth args i))) (inc i)]
                                  => (ConstantExpr'new v)
                    )
                :else
                    (VectorExpr'new args)
            )
        )
    )
)

(class-ns KeywordInvokeExpr
    (defn #_"KeywordInvokeExpr" KeywordInvokeExpr'new [#_"int" line, #_"Symbol" tag, #_"KeywordExpr" kw, #_"Expr" target]
        (merge (KeywordInvokeExpr.)
            (hash-map
                #_"int" :line line
                #_"Object" :tag tag
                #_"KeywordExpr" :kw kw
                #_"Expr" :target target

                #_"int" :siteIndex (Compiler'registerKeywordCallsite (:k kw))
            )
        )
    )

    (extend-type KeywordInvokeExpr Expr
        (#_"Object" Expr'''eval [#_"KeywordInvokeExpr" this]
            (.invoke (:k (:kw this)), (Expr'''eval (:target this)))
        )

        (#_"void" Expr'''emit [#_"KeywordInvokeExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (let [#_"Label" endLabel (.newLabel gen) #_"Label" faultLabel (.newLabel gen)]
                (.visitLineNumber gen, (:line this), (.mark gen))
                (.getStatic gen, (:objType objx), (Compiler'thunkNameStatic (:siteIndex this)), (Type/getType ILookupThunk))
                (.dup gen) ;; thunk, thunk
                (Expr'''emit (:target this), :Context'EXPRESSION, objx, gen) ;; thunk, thunk, target
                (.visitLineNumber gen, (:line this), (.mark gen))
                (.dupX2 gen) ;; target, thunk, thunk, target
                (.invokeInterface gen, (Type/getType ILookupThunk), (Method/getMethod "Object get(Object)")) ;; target, thunk, result
                (.dupX2 gen) ;; result, target, thunk, result
                (.visitJumpInsn gen, Opcodes/IF_ACMPEQ, faultLabel) ;; result, target
                (.pop gen) ;; result
                (.goTo gen, endLabel)

                (.mark gen, faultLabel) ;; result, target
                (.swap gen) ;; target, result
                (.pop gen) ;; target
                (.dup gen) ;; target, target
                (.getStatic gen, (:objType objx), (Compiler'siteNameStatic (:siteIndex this)), (Type/getType KeywordLookupSite)) ;; target, target, site
                (.swap gen) ;; target, site, target
                (.invokeInterface gen, (Type/getType ILookupSite), (Method/getMethod "clojure.lang.ILookupThunk fault(Object)")) ;; target, new-thunk
                (.dup gen) ;; target, new-thunk, new-thunk
                (.putStatic gen, (:objType objx), (Compiler'thunkNameStatic (:siteIndex this)), (Type/getType ILookupThunk)) ;; target, new-thunk
                (.swap gen) ;; new-thunk, target
                (.invokeInterface gen, (Type/getType ILookupThunk), (Method/getMethod "Object get(Object)")) ;; result

                (.mark gen, endLabel)
                (when (= context :Context'STATEMENT)
                    (.pop gen)
                )
            )
            nil
        )

        #_memoize!
        (#_"Class" Expr'''getClass [#_"KeywordInvokeExpr" this]
            (when (some? (:tag this)) (Interop'tagToClass (:tag this)))
        )
    )
)

(class-ns InstanceOfExpr
    (defn #_"InstanceOfExpr" InstanceOfExpr'new [#_"Class" c, #_"Expr" expr]
        (merge (InstanceOfExpr.)
            (hash-map
                #_"Class" :c c
                #_"Expr" :expr expr
            )
        )
    )

    (extend-type InstanceOfExpr Expr
        (#_"Object" Expr'''eval [#_"InstanceOfExpr" this]
            (if (.isInstance (:c this), (Expr'''eval (:expr this))) true false)
        )

        (#_"void" Expr'''emit [#_"InstanceOfExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (MaybePrimitive'''emitUnboxed this, context, objx, gen)
            (Interop'emitBoxReturn objx, gen, Boolean/TYPE)
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"InstanceOfExpr" this]
            Boolean/TYPE
        )
    )

    (extend-type InstanceOfExpr MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"InstanceOfExpr" this]
            true
        )

        (#_"void" MaybePrimitive'''emitUnboxed [#_"InstanceOfExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (Expr'''emit (:expr this), :Context'EXPRESSION, objx, gen)
            (.instanceOf gen, (Compiler'getType (:c this)))
            nil
        )
    )
)

(class-ns InvokeExpr
    (defn #_"InvokeExpr" InvokeExpr'new [#_"int" line, #_"Symbol" tag, #_"Expr" fexpr, #_"IPersistentVector" args, #_"boolean" tailPosition]
        (let [this
                (merge (InvokeExpr.)
                    (hash-map
                        #_"Expr" :fexpr fexpr
                        #_"Object" :tag (or tag (when (instance? VarExpr fexpr) (:tag fexpr)))
                        #_"IPersistentVector" :args args
                        #_"int" :line line
                        #_"boolean" :tailPosition tailPosition

                        #_"boolean" :isProtocol false
                        #_"int" :siteIndex -1
                        #_"Class" :protocolOn nil
                        #_"java.lang.reflect.Method" :onMethod nil
                    )
                )]
            (when (instance? VarExpr fexpr) => this
                (let [#_"Var" fvar (:var fexpr) #_"Var" pvar (get (meta fvar) :protocol)]
                    (when (and (some? pvar) (bound? #'*protocol-callsites*)) => this
                        (let [this (assoc this :isProtocol true)
                              this (assoc this :siteIndex (Compiler'registerProtocolCallsite (:var fexpr)))
                              this (assoc this :protocolOn (Interop'maybeClass (get (var-get pvar) :on), false))]
                            (when (some? (:protocolOn this)) => this
                                (let [#_"IPersistentMap" mmap (get (var-get pvar) :method-map)
                                      #_"Keyword" mmapVal (get mmap (keyword (ßsym fvar)))]
                                    (when (some? mmapVal) => (throw! (str "no method of interface: " (.getName (:protocolOn this)) " found for function: " (ßsym fvar) " of protocol: " (ßsym pvar)))
                                        (let [#_"String" mname (Compiler'munge (.toString (ßsym mmapVal)))
                                              #_"PersistentVector" methods (Reflector'getMethods (:protocolOn this), (dec (count args)), mname, false)]
                                            (when (= (count methods) 1) => (throw! (str "no single method: " mname " of interface: " (.getName (:protocolOn this)) " found for function: " (ßsym fvar) " of protocol: " (ßsym pvar)))
                                                (assoc this :onMethod (nth methods 0))
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )

    #_method
    (defn #_"void" InvokeExpr''emitArgsAndCall [#_"InvokeExpr" this, #_"int" firstArgToEmit, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
        (loop-when-recur [#_"int" i firstArgToEmit] (< i (Math/min Compiler'MAX_POSITIONAL_ARITY, (count (:args this)))) [(inc i)]
            (Expr'''emit (nth (:args this) i), :Context'EXPRESSION, objx, gen)
        )
        (when (< Compiler'MAX_POSITIONAL_ARITY (count (:args this)))
            (let [#_"PersistentVector" restArgs
                    (loop-when-recur [restArgs [] #_"int" i Compiler'MAX_POSITIONAL_ARITY]
                                     (< i (count (:args this)))
                                     [(conj restArgs (nth (:args this) i)) (inc i)]
                                  => restArgs
                    )]
                (MethodExpr'emitArgsAsArray restArgs, objx, gen)
            )
        )
        (.visitLineNumber gen, (:line this), (.mark gen))

        (when (:tailPosition this)
            (IopMethod''emitClearThis *method*, gen)
        )

        (.invokeInterface gen, (Type/getType IFn), (Method. "invoke", (Type/getType Object), (aget Compiler'ARG_TYPES (Math/min (inc Compiler'MAX_POSITIONAL_ARITY), (count (:args this))))))
        nil
    )

    #_method
    (defn #_"void" InvokeExpr''emitProto [#_"InvokeExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
        (let [#_"Label" onLabel (.newLabel gen) #_"Label" callLabel (.newLabel gen) #_"Label" endLabel (.newLabel gen)]
            (Expr'''emit (nth (:args this) 0), :Context'EXPRESSION, objx, gen)
            (.dup gen) ;; target, target
            (.invokeStatic gen, (Type/getType #_"Reflector" Util), (Method/getMethod "Class classOf(Object)")) ;; target, class
            (.getStatic gen, (:objType objx), (Compiler'cachedClassName (:siteIndex this)), (Type/getType Class)) ;; target, class, cached-class
            (.visitJumpInsn gen, Opcodes/IF_ACMPEQ, callLabel) ;; target
            (when (some? (:protocolOn this))
                (.dup gen) ;; target, target
                (.instanceOf gen, (Type/getType (:protocolOn this)))
                (.ifZCmp gen, GeneratorAdapter/NE, onLabel)
            )
            (.dup gen) ;; target, target
            (.invokeStatic gen, (Type/getType #_"Reflector" Util), (Method/getMethod "Class classOf(Object)")) ;; target, class
            (.putStatic gen, (:objType objx), (Compiler'cachedClassName (:siteIndex this)), (Type/getType Class)) ;; target
            (.mark gen, callLabel) ;; target
            (IopObject''emitVar objx, gen, (:var (:fexpr this)))
            (.invokeVirtual gen, (Type/getType Var), (Method/getMethod "Object getRawRoot()")) ;; target, proto-fn
            (.swap gen)
            (InvokeExpr''emitArgsAndCall this, 1, context, objx, gen)
            (.goTo gen, endLabel)
            (.mark gen, onLabel) ;; target
            (when (some? (:protocolOn this))
                (.checkCast gen, (Type/getType (:protocolOn this)))
                (MethodExpr'emitTypedArgs objx, gen, (.getParameterTypes (:onMethod this)), (subvec (:args this) 1 (count (:args this))))
                (when (= context :Context'RETURN)
                    (IopMethod''emitClearLocals *method*, gen)
                )
                (let [#_"Method" m (Method. (.getName (:onMethod this)), (Type/getReturnType (:onMethod this)), (Type/getArgumentTypes (:onMethod this)))]
                    (.invokeInterface gen, (Type/getType (:protocolOn this)), m)
                    (Interop'emitBoxReturn objx, gen, (.getReturnType (:onMethod this)))
                )
            )
            (.mark gen, endLabel)
        )
        nil
    )

    (extend-type InvokeExpr Expr
        (#_"Object" Expr'''eval [#_"InvokeExpr" this]
            (let [#_"IFn" fn (Expr'''eval (:fexpr this))
                #_"PersistentVector" v (loop-when-recur [v [] #_"int" i 0] (< i (count (:args this))) [(conj v (Expr'''eval (nth (:args this) i))) (inc i)] => v)]
                (.applyTo fn, (seq v))
            )
        )

        (#_"void" Expr'''emit [#_"InvokeExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (if (:isProtocol this)
                (do
                    (.visitLineNumber gen, (:line this), (.mark gen))
                    (InvokeExpr''emitProto this, context, objx, gen)
                )
                (do
                    (Expr'''emit (:fexpr this), :Context'EXPRESSION, objx, gen)
                    (.visitLineNumber gen, (:line this), (.mark gen))
                    (.checkCast gen, (Type/getType IFn))
                    (InvokeExpr''emitArgsAndCall this, 0, context, objx, gen)
                )
            )
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        #_memoize!
        (#_"Class" Expr'''getClass [#_"InvokeExpr" this]
            (when (some? (:tag this)) (Interop'tagToClass (:tag this)))
        )
    )

    (defn #_"Expr" InvokeExpr'parse [#_"Context" context, #_"ISeq" form]
        (let [#_"boolean" tailPosition (Compiler'inTailCall context) context (if (= context :Context'EVAL) context :Context'EXPRESSION)
              #_"Expr" fexpr (Compiler'analyze context, (first form))]
            (or
                (when (and (instance? VarExpr fexpr) (= (:var fexpr) #'instance?) (= (count form) 3))
                    (let-when [#_"Expr" sexpr (Compiler'analyze :Context'EXPRESSION, (second form))] (instance? ConstantExpr sexpr)
                        (let-when [#_"Object" val (Literal'''literal sexpr)] (class? val)
                            (InstanceOfExpr'new val, (Compiler'analyze context, (third form)))
                        )
                    )
                )

                (when (and (instance? KeywordExpr fexpr) (= (count form) 2) (bound? #'*keyword-callsites*))
                    (let [#_"Expr" target (Compiler'analyze context, (second form))]
                        (KeywordInvokeExpr'new *line*, (Compiler'tagOf form), fexpr, target)
                    )
                )

                (let [#_"PersistentVector" args
                        (loop-when-recur [args [] #_"ISeq" s (seq (next form))]
                                         (some? s)
                                         [(conj args (Compiler'analyze context, (first s))) (next s)]
                                      => args
                        )]
                    (InvokeExpr'new *line*, (Compiler'tagOf form), fexpr, args, tailPosition)
                )
            )
        )
    )
)

(class-ns LocalBinding
    (defn #_"LocalBinding" LocalBinding'new [#_"int" idx, #_"Symbol" sym, #_"Symbol" tag, #_"Expr" init, #_"boolean" isArg]
        (when (and (some? (Compiler'maybePrimitiveType init)) (some? tag))
            (throw! "can't type hint a local with a primitive initializer")
        )
        (merge (LocalBinding.)
            (hash-map
                #_"int" :uid (Compiler'nextUniqueId)
                #_"int" :idx idx
                #_"Symbol" :sym sym
                #_"Symbol" :tag tag
                #_"Expr" :init init
                #_"boolean" :isArg isArg

                #_"String" :name (Compiler'munge (ßname sym))
                #_"boolean" :recurMistmatch false
            )
        )
    )

    #_memoize!
    (defn #_"Class" LocalBinding''getClass [#_"LocalBinding" this]
        (let [#_"Expr" e (:init this)]
            (if (some? (:tag this))
                (when-not (and (some? e) (Reflector'isPrimitive (Expr'''getClass e)) (not (satisfies? MaybePrimitive e)))
                    (Interop'tagToClass (:tag this))
                )
                (when (and (some? e) (not (and (Reflector'isPrimitive (Expr'''getClass e)) (not (satisfies? MaybePrimitive e)))))
                    (Expr'''getClass e)
                )
            )
        )
    )

    #_method
    (defn #_"Class" LocalBinding''getPrimitiveType [#_"LocalBinding" this]
        (Compiler'maybePrimitiveType (:init this))
    )
)

(class-ns LocalBindingExpr
    (defn #_"LocalBindingExpr" LocalBindingExpr'new [#_"LocalBinding" lb, #_"Symbol" tag]
        (when (or (nil? (LocalBinding''getPrimitiveType lb)) (nil? tag)) => (throw! "can't type hint a primitive local")
            (merge (LocalBindingExpr.)
                (hash-map
                    #_"LocalBinding" :lb lb
                    #_"Symbol" :tag tag
                )
            )
        )
    )

    (declare IopObject''emitLocal)

    (extend-type LocalBindingExpr Expr
        (#_"Object" Expr'''eval [#_"LocalBindingExpr" this]
            (throw! "can't eval locals")
        )

        (#_"void" Expr'''emit [#_"LocalBindingExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (when-not (= context :Context'STATEMENT)
                (IopObject''emitLocal objx, gen, (:lb this))
            )
            nil
        )

        #_memoize!
        (#_"Class" Expr'''getClass [#_"LocalBindingExpr" this]
            (if (some? (:tag this)) (Interop'tagToClass (:tag this)) (LocalBinding''getClass (:lb this)))
        )
    )

    (declare IopObject''emitUnboxedLocal)

    (extend-type LocalBindingExpr MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"LocalBindingExpr" this]
            (some? (LocalBinding''getPrimitiveType (:lb this)))
        )

        (#_"void" MaybePrimitive'''emitUnboxed [#_"LocalBindingExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (IopObject''emitUnboxedLocal objx, gen, (:lb this))
            nil
        )
    )

    (declare IopObject''emitAssignLocal)

    (extend-type LocalBindingExpr Assignable
        (#_"Object" Assignable'''evalAssign [#_"LocalBindingExpr" this, #_"Expr" val]
            (throw! "can't eval locals")
        )

        (#_"void" Assignable'''emitAssign [#_"LocalBindingExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Expr" val]
            (IopObject''emitAssignLocal objx, gen, (:lb this), val)
            (when-not (= context :Context'STATEMENT)
                (IopObject''emitLocal objx, gen, (:lb this))
            )
            nil
        )
    )
)

(class-ns MethodParamExpr
    (defn #_"MethodParamExpr" MethodParamExpr'new [#_"Class" c]
        (merge (MethodParamExpr.)
            (hash-map
                #_"Class" :c c
            )
        )
    )

    (extend-type MethodParamExpr Expr
        (#_"Object" Expr'''eval [#_"MethodParamExpr" this]
            (throw! "can't eval")
        )

        (#_"void" Expr'''emit [#_"MethodParamExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (throw! "can't emit")
        )

        (#_"Class" Expr'''getClass [#_"MethodParamExpr" this]
            (:c this)
        )
    )

    (extend-type MethodParamExpr MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"MethodParamExpr" this]
            (Reflector'isPrimitive (:c this))
        )

        (#_"void" MaybePrimitive'''emitUnboxed [#_"MethodParamExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (throw! "can't emit")
        )
    )
)

(class-ns FnMethod
    (defn #_"FnMethod" FnMethod'new [#_"IopObject" objx, #_"IopMethod" parent]
        (merge (FnMethod.) (IopMethod'init objx, parent)
            (hash-map
                ;; localbinding->localbinding
                #_"PersistentVector" :reqParms nil
                #_"LocalBinding" :restParm nil
                #_"Type[]" :argTypes nil
                #_"Class[]" :argClasses nil
                #_"Class" :retClass nil
            )
        )
    )

    #_method
    (defn #_"boolean" FnMethod''isVariadic [#_"FnMethod" this]
        (some? (:restParm this))
    )

    (extend-type FnMethod IopMethod
        (#_"int" IopMethod'''numParams [#_"FnMethod" this]
            (+ (count (:reqParms this)) (if (FnMethod''isVariadic this) 1 0))
        )

        (#_"String" IopMethod'''getMethodName [#_"FnMethod" this]
            (if (FnMethod''isVariadic this) "doInvoke" "invoke")
        )

        (#_"Type" IopMethod'''getReturnType [#_"FnMethod" this]
            (Type/getType Object)
        )

        (#_"Type[]" IopMethod'''getArgTypes [#_"FnMethod" this]
            (if (and (FnMethod''isVariadic this) (= (count (:reqParms this)) Compiler'MAX_POSITIONAL_ARITY))
                (let [#_"int" n (inc Compiler'MAX_POSITIONAL_ARITY) #_"Type[]" a (make-array Type n)]
                    (dotimes [#_"int" i n]
                        (aset a i (Type/getType Object))
                    )
                    a
                )
                (aget Compiler'ARG_TYPES (IopMethod'''numParams this))
            )
        )

        (#_"void" IopMethod'''emit [#_"FnMethod" this, #_"IopObject" fn, #_"ClassVisitor" cv]
            (let [#_"Method" m (Method. (IopMethod'''getMethodName this), (IopMethod'''getReturnType this), (IopMethod'''getArgTypes this))
                #_"GeneratorAdapter" gen (GeneratorAdapter. Opcodes/ACC_PUBLIC, m, nil, Compiler'EXCEPTION_TYPES, cv)]
                (.visitCode gen)
                (let [#_"Label" loopLabel (.mark gen)]
                    (.visitLineNumber gen, (:line this), loopLabel)
                    (binding [*loop-label* loopLabel, *method* this]
                        (Expr'''emit (:body this), :Context'RETURN, fn, gen)
                        (let [#_"Label" end (.mark gen)]
                            (.visitLocalVariable gen, "this", "Ljava/lang/Object;", nil, loopLabel, end, 0)
                            (loop-when-recur [#_"ISeq" lbs (seq (:argLocals this))] (some? lbs) [(next lbs)]
                                (let [#_"LocalBinding" lb (first lbs)]
                                    (.visitLocalVariable gen, (:name lb), "Ljava/lang/Object;", nil, loopLabel, end, (:idx lb))
                                )
                            )
                        )
                    )
                    (.returnValue gen)
                    (.endMethod gen)
                )
            )
            nil
        )
    )

    (defn #_"FnMethod" FnMethod'parse [#_"IopObject" objx, #_"ISeq" form, #_"Object" retTag]
        ;; ([args] body...)
        (let [#_"IPersistentVector" parms (first form) #_"ISeq" body (next form)
              #_"FnMethod" fm
                (-> (FnMethod'new objx, *method*)
                    (assoc :line *line*)
                )]
            ;; register as the current method and set up a new env frame
            (binding [*method*            fm
                      *local-env*         *local-env*
                      *last-local-num*    -1
                      *loop-locals*       nil
                      *in-return-context* true]
                (let [retTag (if (string? retTag) (symbol retTag) retTag)
                      retTag (when (and (symbol? retTag) (any = (.getName retTag) "long" "double")) retTag)
                      #_"Class" retClass
                        (let-when [retClass (Interop'tagClass (or (Compiler'tagOf parms) retTag))] (.isPrimitive retClass) => Object
                            (when-not (any = retClass Double/TYPE Long/TYPE) => retClass
                                (throw! "only long and double primitives are supported")
                            )
                        )
                      fm (assoc fm :retClass retClass)]
                    ;; register 'this' as local 0
                    (if (some? (:thisName objx))
                        (Compiler'registerLocal (symbol (:thisName objx)), nil, nil, false)
                        (Compiler'nextLocalNum)
                    )
                    (let [fm (assoc fm #_"PersistentVector" :argTypes [] #_"PersistentVector" :argClasses [] :reqParms [] :restParm nil :argLocals [])
                          fm (loop-when [fm fm #_"boolean" rest? false #_"int" i 0] (< i (count parms)) => fm
                                (when (symbol? (nth parms i)) => (throw! "fn params must be Symbols")
                                    (let [#_"Symbol" p (nth parms i)]
                                        (cond
                                            (some? (namespace p))
                                                (throw! (str "can't use qualified name as parameter: " p))
                                            (= p '&)
                                                (when-not rest? => (throw! "invalid parameter list")
                                                    (recur fm true (inc i))
                                                )
                                            :else
                                                (let [#_"Class" c (Compiler'primClass (Interop'tagClass (Compiler'tagOf p)))]
                                                    (when (and (.isPrimitive c) (not (any = c Double/TYPE Long/TYPE)))
                                                        (throw! (str "only long and double primitives are supported: " p))
                                                    )
                                                    (when (and rest? (some? (Compiler'tagOf p)))
                                                        (throw! "& arg cannot have type hint")
                                                    )
                                                    (let [c (if rest? ISeq c)
                                                          fm (-> fm (update :argTypes conj (Type/getType c)) (update :argClasses conj c))
                                                          #_"LocalBinding" lb
                                                            (if (.isPrimitive c)
                                                                (Compiler'registerLocal p, nil, (MethodParamExpr'new c), true)
                                                                (Compiler'registerLocal p, (if rest? 'clojure.lang.ISeq (Compiler'tagOf p)), nil, true)
                                                            )
                                                          fm (update fm :argLocals conj lb)]
                                                        (if-not rest?
                                                            (update fm :reqParms conj lb)
                                                            (assoc fm :restParm lb)
                                                        )
                                                    )
                                                )
                                        )
                                    )
                                )
                            )]
                        (when (< Compiler'MAX_POSITIONAL_ARITY (count (:reqParms fm)))
                            (throw! (str "can't specify more than " Compiler'MAX_POSITIONAL_ARITY " params"))
                        )
                        (set! *loop-locals* (:argLocals fm))
                        (-> fm
                            (update #_"Type[]" :argTypes #(.toArray %, (make-array Type (count %))))
                            (update #_"Class[]" :argClasses #(.toArray %, (make-array Class (count %))))
                            (assoc :body (IParser'''parse (BodyParser'new), :Context'RETURN, body))
                        )
                    )
                )
            )
        )
    )
)

(class-ns IopObject
    (defn #_"IopObject" IopObject'init [#_"Object" tag]
        (hash-map
            #_"int" :uid (Compiler'nextUniqueId)
            #_"Object" :tag tag
            #_"String" :name nil
            #_"String" :internalName nil
            #_"String" :thisName nil
            #_"Type" :objType nil
            #_"IPersistentVector" :closesExprs []
            #_"IPersistentMap" :fields nil
            #_"IPersistentVector" :hintedFields []
            #_"IPersistentMap" :keywords {}
            #_"IPersistentMap" :vars {}
            #_"int" :line 0
            #_"PersistentVector" :constants nil
            #_"int" :altCtorDrops 0
            #_"IPersistentVector" :keywordCallsites nil
            #_"IPersistentVector" :protocolCallsites nil
            #_"boolean" :onceOnly false
            #_"IPersistentMap" :opts {}

            #_"Class" :compiledClass nil
        )
    )

    #_method
    (defn #_"boolean" IopObject''isVolatile [#_"IopObject" this, #_"LocalBinding" lb]
        (and (contains? (:fields this) (:sym lb)) (get (meta (:sym lb)) :volatile-mutable))
    )

    #_method
    (defn #_"boolean" IopObject''isMutable [#_"IopObject" this, #_"LocalBinding" lb]
        (or (IopObject''isVolatile this, lb) (and (contains? (:fields this) (:sym lb)) (get (meta (:sym lb)) :unsynchronized-mutable)))
    )

    #_method
    (defn #_"boolean" IopObject''isDeftype [#_"IopObject" this]
        (some? (:fields this))
    )

    #_method
    (defn #_"Type" IopObject''constantType [#_"IopObject" this, #_"int" id]
        (let [#_"Object" o (nth (:constants this) id) #_"Class" c (Reflector'classOf o)]
            (or
                (when (and (some? c) (Modifier/isPublic (.getModifiers c)))
                    ;; can't emit derived fn types due to visibility
                    (cond
                        (.isAssignableFrom LazySeq, c) (Type/getType ISeq)
                        (= c Keyword)                  (Type/getType Keyword)
                        (.isAssignableFrom RestFn, c)  (Type/getType RestFn)
                        (.isAssignableFrom AFn, c)     (Type/getType AFn)
                        (= c Var)                      (Type/getType Var)
                        (= c String)                   (Type/getType String)
                    )
                )
                (Type/getType Object)
            )
        )
    )

    #_method
    (defn #_"Type[]" IopObject''ctorTypes [#_"IopObject" this]
        (let [#_"IPersistentVector" v (if (IopObject'''supportsMeta this) [(Type/getType IPersistentMap)] [])
              v (loop-when [v v #_"ISeq" s (vals (get *closes* (:uid this)))] (some? s) => v
                    (let [#_"Class" c (LocalBinding''getPrimitiveType (first s))]
                        (recur (conj v (if (some? c) (Type/getType c) (Type/getType Object))) (next s))
                    )
                )]
            (let [#_"Type[]" a (make-array Type (count v))]
                (dotimes [#_"int" i (count v)]
                    (aset a i (nth v i))
                )
                a
            )
        )
    )

    #_method
    (defn #_"Object" IopObject''doEval [#_"IopObject" this]
        (when-not (IopObject''isDeftype this)
            (.newInstance (:compiledClass this))
        )
    )

    (declare IopObject''emitValue)

    #_method
    (defn- #_"void" IopObject''emitKeywordCallsites [#_"IopObject" this, #_"GeneratorAdapter" clinitgen]
        (dotimes [#_"int" i (count (:keywordCallsites this))]
            (let [#_"Keyword" k (nth (:keywordCallsites this) i)]
                (.newInstance clinitgen, (Type/getType KeywordLookupSite))
                (.dup clinitgen)
                (IopObject''emitValue this, k, clinitgen)
                (.invokeConstructor clinitgen, (Type/getType KeywordLookupSite), (Method/getMethod "void <init>(clojure.lang.Keyword)"))
                (.dup clinitgen)
                (.putStatic clinitgen, (:objType this), (Compiler'siteNameStatic i), (Type/getType KeywordLookupSite))
                (.putStatic clinitgen, (:objType this), (Compiler'thunkNameStatic i), (Type/getType ILookupThunk))
            )
        )
        nil
    )

    #_method
    (defn #_"void" IopObject''emitObjectArray [#_"IopObject" this, #_"Object[]" a, #_"GeneratorAdapter" gen]
        (.push gen, (alength a))
        (.newArray gen, (Type/getType Object))
        (dotimes [#_"int" i (alength a)]
            (.dup gen)
            (.push gen, i)
            (IopObject''emitValue this, (aget a i), gen)
            (.arrayStore gen, (Type/getType Object))
        )
        nil
    )

    #_method
    (defn #_"void" IopObject''emitConstants [#_"IopObject" this, #_"GeneratorAdapter" clinitgen]
        (dotimes [#_"int" i (count (:constants this))]
            (when (contains? *used-constants* i)
                (IopObject''emitValue this, (nth (:constants this) i), clinitgen)
                (.checkCast clinitgen, (IopObject''constantType this, i))
                (.putStatic clinitgen, (:objType this), (Compiler'constantName i), (IopObject''constantType this, i))
            )
        )
        nil
    )

    #_method
    (defn #_"void" IopObject''emitClearCloses [#_"IopObject" this, #_"GeneratorAdapter" gen]
        nil
    )

    #_method
    (defn #_"void" IopObject''emitLetFnInits [#_"IopObject" this, #_"GeneratorAdapter" gen, #_"IopObject" objx, #_"IPersistentSet" letFnLocals]
        ;; objx arg is enclosing objx, not this
        (.checkCast gen, (:objType this))

        (loop-when-recur [#_"ISeq" s (vals (get *closes* (:uid this)))] (some? s) [(next s)]
            (let [#_"LocalBinding" lb (first s)]
                (when (contains? letFnLocals lb)
                    (let [#_"Class" primc (LocalBinding''getPrimitiveType lb)]
                        (.dup gen)
                        (if (some? primc)
                            (do
                                (IopObject''emitUnboxedLocal objx, gen, lb)
                                (.putField gen, (:objType this), (:name lb), (Type/getType primc))
                            )
                            (do
                                (IopObject''emitLocal objx, gen, lb)
                                (.putField gen, (:objType this), (:name lb), (Type/getType Object))
                            )
                        )
                    )
                )
            )
        )
        (.pop gen)
        nil
    )

    #_method
    (defn #_"void" IopObject''doEmit [#_"IopObject" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
        ;; emitting a Fn means constructing an instance, feeding closed-overs from enclosing scope, if any
        ;; objx arg is enclosing objx, not this
        (when-not (IopObject''isDeftype this) => (.visitInsn gen, Opcodes/ACONST_NULL)
            (.newInstance gen, (:objType this))
            (.dup gen)
            (when (IopObject'''supportsMeta this)
                (.visitInsn gen, Opcodes/ACONST_NULL)
            )
            (loop-when-recur [#_"ISeq" s (seq (:closesExprs this))] (some? s) [(next s)]
                (let [#_"LocalBindingExpr" lbe (first s) #_"LocalBinding" lb (:lb lbe)]
                    (if (some? (LocalBinding''getPrimitiveType lb))
                        (IopObject''emitUnboxedLocal objx, gen, lb)
                        (IopObject''emitLocal objx, gen, lb)
                    )
                )
            )
            (.invokeConstructor gen, (:objType this), (Method. "<init>", Type/VOID_TYPE, (IopObject''ctorTypes this)))
        )
        (when (= context :Context'STATEMENT)
            (.pop gen)
        )
        nil
    )

    #_method
    (defn #_"void" IopObject''emitAssignLocal [#_"IopObject" this, #_"GeneratorAdapter" gen, #_"LocalBinding" lb, #_"Expr" val]
        (when (IopObject''isMutable this, lb) => (throw! (str "cannot assign to non-mutable: " (:name lb)))
            (let [#_"Class" primc (LocalBinding''getPrimitiveType lb)]
                (.loadThis gen)
                (if (some? primc)
                    (do
                        (when-not (and (satisfies? MaybePrimitive val) (MaybePrimitive'''canEmitPrimitive val))
                            (throw! (str "must assign primitive to primitive mutable: " (:name lb)))
                        )
                        (MaybePrimitive'''emitUnboxed val, :Context'EXPRESSION, this, gen)
                        (.putField gen, (:objType this), (:name lb), (Type/getType primc))
                    )
                    (do
                        (Expr'''emit val, :Context'EXPRESSION, this, gen)
                        (.putField gen, (:objType this), (:name lb), (Type/getType Object))
                    )
                )
            )
        )
        nil
    )

    #_method
    (defn- #_"void" IopObject''emitLocal [#_"IopObject" this, #_"GeneratorAdapter" gen, #_"LocalBinding" lb]
        (let [#_"Class" primc (LocalBinding''getPrimitiveType lb)]
            (if (contains? (get *closes* (:uid this)) (:uid lb))
                (do
                    (.loadThis gen)
                    (.getField gen, (:objType this), (:name lb), (Type/getType (or primc Object)))
                )
                (if (:isArg lb)
                    (.loadArg gen, (dec (:idx lb)))
                    (.visitVarInsn gen, (.getOpcode (Type/getType (or primc Object)), Opcodes/ILOAD), (:idx lb))
                )
            )
            (when (some? primc)
                (Interop'emitBoxReturn this, gen, primc)
            )
        )
        nil
    )

    #_method
    (defn- #_"void" IopObject''emitUnboxedLocal [#_"IopObject" this, #_"GeneratorAdapter" gen, #_"LocalBinding" lb]
        (let [#_"Class" primc (LocalBinding''getPrimitiveType lb)]
            (if (contains? (get *closes* (:uid this)) (:uid lb))
                (do
                    (.loadThis gen)
                    (.getField gen, (:objType this), (:name lb), (Type/getType primc))
                )
                (if (:isArg lb)
                    (.loadArg gen, (dec (:idx lb)))
                    (.visitVarInsn gen, (.getOpcode (Type/getType primc), Opcodes/ILOAD), (:idx lb))
                )
            )
        )
        nil
    )

    #_method
    (defn #_"void" IopObject''emitVar [#_"IopObject" this, #_"GeneratorAdapter" gen, #_"Var" var]
        (IopObject''emitConstant this, gen, (get (:vars this) var))
        nil
    )

    #_method
    (defn #_"void" IopObject''emitVarValue [#_"IopObject" this, #_"GeneratorAdapter" gen, #_"Var" v]
        (IopObject''emitConstant this, gen, (get (:vars this) v))
        (.invokeVirtual gen, (Type/getType Var), (if (.isDynamic v) (Method/getMethod "Object get()") (Method/getMethod "Object getRawRoot()")))
        nil
    )

    #_method
    (defn #_"void" IopObject''emitKeyword [#_"IopObject" this, #_"GeneratorAdapter" gen, #_"Keyword" k]
        (IopObject''emitConstant this, gen, (get (:keywords this) k))
        nil
    )

    #_method
    (defn #_"void" IopObject''emitConstant [#_"IopObject" this, #_"GeneratorAdapter" gen, #_"int" id]
        (update! *used-constants* conj id)
        (.getStatic gen, (:objType this), (Compiler'constantName id), (IopObject''constantType this, id))
        nil
    )

    #_method
    (defn #_"void" IopObject''emitValue [#_"IopObject" this, #_"Object" value, #_"GeneratorAdapter" gen]
        (let [#_"boolean" partial?
                (cond (nil? value)
                    (do
                        (.visitInsn gen, Opcodes/ACONST_NULL)
                        true
                    )
                    (string? value)
                    (do
                        (.push gen, value)
                        true
                    )
                    (instance? Boolean value)
                    (do
                        (.getStatic gen, (Type/getType Boolean), (if (.booleanValue value) "TRUE" "FALSE"), (Type/getType Boolean))
                        true
                    )
                    (instance? Integer value)
                    (do
                        (.push gen, (.intValue value))
                        (.invokeStatic gen, (Type/getType Integer), (Method/getMethod "Integer valueOf(int)"))
                        true
                    )
                    (instance? Long value)
                    (do
                        (.push gen, (.longValue value))
                        (.invokeStatic gen, (Type/getType Long), (Method/getMethod "Long valueOf(long)"))
                        true
                    )
                    (instance? Double value)
                    (do
                        (.push gen, (.doubleValue value))
                        (.invokeStatic gen, (Type/getType Double), (Method/getMethod "Double valueOf(double)"))
                        true
                    )
                    (char? value)
                    (do
                        (.push gen, (.charValue value))
                        (.invokeStatic gen, (Type/getType Character), (Method/getMethod "Character valueOf(char)"))
                        true
                    )
                    (class? value)
                    (do
                        (if (.isPrimitive value)
                            (let [#_"Type" t
                                    (condp = value
                                        Boolean/TYPE   (Type/getType Boolean)
                                        Byte/TYPE      (Type/getType Byte)
                                        Character/TYPE (Type/getType Character)
                                        Double/TYPE    (Type/getType Double)
                                        Float/TYPE     (Type/getType Float)
                                        Integer/TYPE   (Type/getType Integer)
                                        Long/TYPE      (Type/getType Long)
                                        Short/TYPE     (Type/getType Short)
                                        (throw! (str "can't embed unknown primitive in code: " value))
                                    )]
                                (.getStatic gen, t, "TYPE", (Type/getType Class))
                            )
                            (do
                                (.push gen, (Compiler'destubClassName (.getName value)))
                                (.invokeStatic gen, (Type/getType RT), (Method/getMethod "Class classForName(String)"))
                            )
                        )
                        true
                    )
                    (symbol? value)
                    (do
                        (.push gen, (ßns value))
                        (.push gen, (ßname value))
                        (.invokeStatic gen, (Type/getType Symbol), (Method/getMethod "clojure.lang.Symbol intern(String, String)"))
                        true
                    )
                    (keyword? value)
                    (do
                        (.push gen, (ßns (ßsym value)))
                        (.push gen, (ßname (ßsym value)))
                        (.invokeStatic gen, (Type/getType RT), (Method/getMethod "clojure.lang.Keyword keyword(String, String)"))
                        true
                    )
                    (var? value)
                    (do
                        (.push gen, (.toString (ßname (ßns value))))
                        (.push gen, (.toString (ßsym value)))
                        (.invokeStatic gen, (Type/getType RT), (Method/getMethod "clojure.lang.Var var(String, String)"))
                        true
                    )
                    (instance? IType value)
                    (let [#_"Method" ctor (Method. "<init>", (Type/getConstructorDescriptor (aget (.getConstructors (class value)) 0)))]
                        (.newInstance gen, (Type/getType (class value)))
                        (.dup gen)
                        (let [#_"IPersistentVector" fields (Reflector'invokeStaticMethod (class value), "getBasis", (object-array 0))]
                            (loop-when-recur [#_"ISeq" s (seq fields)] (some? s) [(next s)]
                                (let [#_"Symbol" field (first s)]
                                    (IopObject''emitValue this, (Reflector'getInstanceField value, (Compiler'munge (ßname field))), gen)
                                    (let-when [#_"Class" k (Interop'tagClass (Compiler'tagOf field))] (.isPrimitive k)
                                        (let [#_"Type" b (Type/getType (Compiler'boxClass k))]
                                            (.invokeVirtual gen, b, (Method. (str (.getName k) "Value"), (str "()" (.getDescriptor (Type/getType k)))))
                                        )
                                    )
                                )
                            )
                            (.invokeConstructor gen, (Type/getType (class value)), ctor)
                        )
                        true
                    )
                    (instance? IPersistentMap value)
                    (let [#_"PersistentVector" v
                            (loop-when [v [] #_"ISeq" s (seq value)] (some? s) => v
                                (let [#_"Map$Entry" e (first s)]
                                    (recur (conj v (key e) (val e)) (next s))
                                )
                            )]
                        (IopObject''emitObjectArray this, (.toArray v), gen)
                        (.invokeStatic gen, (Type/getType RT), (Method/getMethod "clojure.lang.IPersistentMap map(Object[])"))
                        true
                    )
                    (instance? IPersistentVector value)
                    (let [#_"IPersistentVector" args value]
                        (if (<= (count args) Tuple'MAX_SIZE)
                            (do
                                (dotimes [#_"int" i (count args)]
                                    (IopObject''emitValue this, (nth args i), gen)
                                )
                                (.invokeStatic gen, (Type/getType Tuple), (nth Compiler'createTupleMethods (count args)))
                            )
                            (do
                                (IopObject''emitObjectArray this, (.toArray args), gen)
                                (.invokeStatic gen, (Type/getType RT), (Method/getMethod "clojure.lang.IPersistentVector vector(Object[])"))
                            )
                        )
                        true
                    )
                    (instance? PersistentHashSet value)
                    (let [#_"ISeq" vs (seq value)]
                        (if (nil? vs)
                            (do
                                (.getStatic gen, (Type/getType PersistentHashSet), "EMPTY", (Type/getType PersistentHashSet))
                            )
                            (do
                                (IopObject''emitObjectArray this, (RT/seqToArray vs), gen)
                                (.invokeStatic gen, (Type/getType PersistentHashSet), (Method/getMethod "clojure.lang.PersistentHashSet create(Object[])"))
                            )
                        )
                        true
                    )
                    (or (instance? ISeq value) (instance? IPersistentList value))
                    (let [#_"ISeq" vs (seq value)]
                        (IopObject''emitObjectArray this, (RT/seqToArray vs), gen)
                        (.invokeStatic gen, (Type/getType PersistentList), (Method/getMethod "clojure.lang.IPersistentList create(Object[])"))
                        true
                    )
                    (instance? Pattern value)
                    (do
                        (IopObject''emitValue this, (.toString value), gen)
                        (.invokeStatic gen, (Type/getType Pattern), (Method/getMethod "java.util.regex.Pattern compile(String)"))
                        true
                    )
                    :else
                    (let [#_"String" cs
                            (try
                                (RT/printString value)
                                (catch Exception _
                                    (throw! (str "can't embed object in code: " value))
                                )
                            )]
                        (when (zero? (.length cs))
                            (throw! (str "can't embed unreadable object in code: " value))
                        )
                        (when (.startsWith cs, "#<")
                            (throw! (str "can't embed unreadable object in code: " cs))
                        )
                        (.push gen, cs)
                        (.invokeStatic gen, (Type/getType RT), (Method/getMethod "Object readString(String)"))
                        false
                    )
                )]
            (when partial?
                (when (and (instance? IObj value) (pos? (count (meta value))))
                    (.checkCast gen, (Type/getType IObj))
                    (IopObject''emitValue this, (meta value), gen)
                    (.checkCast gen, (Type/getType IPersistentMap))
                    (.invokeInterface gen, (Type/getType IObj), (Method/getMethod "clojure.lang.IObj withMeta(clojure.lang.IPersistentMap)"))
                )
            )
        )
        nil
    )

    #_method
    (defn #_"IopObject" IopObject''compile [#_"IopObject" this, #_"String" superName, #_"String[]" interfaceNames, #_"boolean" oneTimeUse]
        (binding [*used-constants* #{}]
            ;; create bytecode for a class
            ;; with name current_ns.defname[$letname]+
            ;; anonymous fns get names fn__id
            ;; derived from AFn'RestFn
            (let [#_"ClassWriter" cw (ClassWriter. ClassWriter/COMPUTE_MAXS) #_"ClassVisitor" cv cw]
                (.visit cv, Opcodes/V1_5, (| Opcodes/ACC_PUBLIC Opcodes/ACC_SUPER Opcodes/ACC_FINAL), (:internalName this), nil, superName, interfaceNames)
                (when (IopObject'''supportsMeta this)
                    (.visitField cv, Opcodes/ACC_FINAL, "__meta", (.getDescriptor (Type/getType IPersistentMap)), nil, nil)
                )
                ;; instance fields for closed-overs
                (loop-when-recur [#_"ISeq" s (vals (get *closes* (:uid this)))] (some? s) [(next s)]
                    (let [#_"LocalBinding" lb (first s)
                          #_"String" fd
                            (if (some? (LocalBinding''getPrimitiveType lb))
                                (.getDescriptor (Type/getType (LocalBinding''getPrimitiveType lb)))
                                ;; todo - when closed-overs are fields, use more specific types here and in ctor and emitLocal?
                                (.getDescriptor (Type/getType Object))
                            )]
                        (if (IopObject''isDeftype this)
                            (let [#_"int" access
                                    (cond
                                        (IopObject''isVolatile this, lb) Opcodes/ACC_VOLATILE
                                        (IopObject''isMutable this, lb) 0
                                        :else (| Opcodes/ACC_PUBLIC Opcodes/ACC_FINAL)
                                    )]
                                (.visitField cv, access, (:name lb), fd, nil, nil)
                            )
                            ;; todo - only enable this non-private+writability for letfns where we need it
                            (let [#_"int" access
                                    (if (some? (LocalBinding''getPrimitiveType lb))
                                        (if (IopObject''isVolatile this, lb) Opcodes/ACC_VOLATILE 0)
                                        0
                                    )]
                                (.visitField cv, access, (:name lb), fd, nil, nil)
                            )
                        )
                    )
                )

                ;; static fields for callsites and thunks
                (dotimes [#_"int" i (count (:protocolCallsites this))]
                    (.visitField cv, (| Opcodes/ACC_PRIVATE Opcodes/ACC_STATIC), (Compiler'cachedClassName i), (.getDescriptor (Type/getType Class)), nil, nil)
                )

                ;; ctor that takes closed-overs and inits base + fields
                (let [#_"Method" m (Method. "<init>", Type/VOID_TYPE, (IopObject''ctorTypes this))
                      #_"GeneratorAdapter" ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, m, nil, nil, cv)
                      #_"Label" start (.newLabel ctorgen) #_"Label" end (.newLabel ctorgen)]
                    (.visitCode ctorgen)
                    (.visitLineNumber ctorgen, (:line this), (.mark ctorgen))
                    (.visitLabel ctorgen, start)
                    (.loadThis ctorgen)
                    (.invokeConstructor ctorgen, (Type/getObjectType superName), (Method/getMethod "void <init>()"))

                    (when (IopObject'''supportsMeta this)
                        (.loadThis ctorgen)
                        (.visitVarInsn ctorgen, (.getOpcode (Type/getType IPersistentMap), Opcodes/ILOAD), 1)
                        (.putField ctorgen, (:objType this), "__meta", (Type/getType IPersistentMap))
                    )

                    (let [[this #_"int" a]
                            (loop-when [this this a (if (IopObject'''supportsMeta this) 2 1) #_"ISeq" s (vals (get *closes* (:uid this)))] (some? s) => [this a]
                                (let [#_"LocalBinding" lb (first s)]
                                    (.loadThis ctorgen)
                                    (let [#_"Class" primc (LocalBinding''getPrimitiveType lb)
                                          a (if (some? primc)
                                                (do
                                                    (.visitVarInsn ctorgen, (.getOpcode (Type/getType primc), Opcodes/ILOAD), a)
                                                    (.putField ctorgen, (:objType this), (:name lb), (Type/getType primc))
                                                    (if (any = primc Long/TYPE Double/TYPE) (inc a) a)
                                                )
                                                (do
                                                    (.visitVarInsn ctorgen, (.getOpcode (Type/getType Object), Opcodes/ILOAD), a)
                                                    (.putField ctorgen, (:objType this), (:name lb), (Type/getType Object))
                                                    a
                                                )
                                            )]
                                        (recur (update this :closesExprs conj (LocalBindingExpr'new lb, nil)) (inc a) (next s))
                                    )
                                )
                            )]

                        (.visitLabel ctorgen, end)
                        (.returnValue ctorgen)
                        (.endMethod ctorgen)

                        (when (pos? (:altCtorDrops this))
                            (let [#_"Type[]" ctorTypes (IopObject''ctorTypes this)]

                                ;; ctor that takes closed-overs and inits base + fields
                                (let [#_"Type[]" altCtorTypes (make-array Type (- (alength ctorTypes) (:altCtorDrops this)))
                                      _ (dotimes [#_"int" i (alength altCtorTypes)]
                                            (aset altCtorTypes i (aget ctorTypes i))
                                        )
                                      #_"Method" alt (Method. "<init>", Type/VOID_TYPE, altCtorTypes)
                                      #_"GeneratorAdapter" ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, alt, nil, nil, cv)]
                                    (.visitCode ctorgen)
                                    (.loadThis ctorgen)
                                    (.loadArgs ctorgen)

                                    (.visitInsn ctorgen, Opcodes/ACONST_NULL) ;; __meta
                                    (.visitInsn ctorgen, Opcodes/ACONST_NULL) ;; __extmap
                                    (.visitInsn ctorgen, Opcodes/ICONST_0) ;; __hash
                                    (.visitInsn ctorgen, Opcodes/ICONST_0) ;; __hasheq

                                    (.invokeConstructor ctorgen, (:objType this), (Method. "<init>", Type/VOID_TYPE, ctorTypes))

                                    (.returnValue ctorgen)
                                    (.endMethod ctorgen)
                                )

                                ;; alt ctor no __hash, __hasheq
                                (let [#_"Type[]" altCtorTypes (make-array Type (- (alength ctorTypes) 2))
                                      _ (dotimes [#_"int" i (alength altCtorTypes)]
                                            (aset altCtorTypes i (aget ctorTypes i))
                                        )
                                      #_"Method" alt (Method. "<init>", Type/VOID_TYPE, altCtorTypes)
                                      #_"GeneratorAdapter" ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, alt, nil, nil, cv)]
                                    (.visitCode ctorgen)
                                    (.loadThis ctorgen)
                                    (.loadArgs ctorgen)

                                    (.visitInsn ctorgen, Opcodes/ICONST_0) ;; __hash
                                    (.visitInsn ctorgen, Opcodes/ICONST_0) ;; __hasheq

                                    (.invokeConstructor ctorgen, (:objType this), (Method. "<init>", Type/VOID_TYPE, ctorTypes))

                                    (.returnValue ctorgen)
                                    (.endMethod ctorgen)
                                )
                            )
                        )

                        (when (IopObject'''supportsMeta this)
                            (let [#_"Type[]" ctorTypes (IopObject''ctorTypes this)]

                                ;; ctor that takes closed-overs but not meta
                                (let [#_"Type[]" noMetaCtorTypes (make-array Type (dec (alength ctorTypes)))
                                      _ (loop-when-recur [#_"int" i 1] (< i (alength ctorTypes)) [(inc i)]
                                            (aset noMetaCtorTypes (dec i) (aget ctorTypes i))
                                        )
                                      #_"Method" alt (Method. "<init>", Type/VOID_TYPE, noMetaCtorTypes)
                                      #_"GeneratorAdapter" ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, alt, nil, nil, cv)]
                                    (.visitCode ctorgen)
                                    (.loadThis ctorgen)
                                    (.visitInsn ctorgen, Opcodes/ACONST_NULL) ;; nil meta
                                    (.loadArgs ctorgen)
                                    (.invokeConstructor ctorgen, (:objType this), (Method. "<init>", Type/VOID_TYPE, ctorTypes))
                                    (.returnValue ctorgen)
                                    (.endMethod ctorgen)
                                )

                                ;; meta()
                                (let [#_"Method" meth (Method/getMethod "clojure.lang.IPersistentMap meta()")
                                      #_"GeneratorAdapter" gen (GeneratorAdapter. Opcodes/ACC_PUBLIC, meth, nil, nil, cv)]
                                    (.visitCode gen)
                                    (.loadThis gen)
                                    (.getField gen, (:objType this), "__meta", (Type/getType IPersistentMap))
                                    (.returnValue gen)
                                    (.endMethod gen)
                                )

                                ;; withMeta()
                                (let [#_"Method" meth (Method/getMethod "clojure.lang.IObj withMeta(clojure.lang.IPersistentMap)")
                                      #_"GeneratorAdapter" gen (GeneratorAdapter. Opcodes/ACC_PUBLIC, meth, nil, nil, cv)]
                                    (.visitCode gen)
                                    (.newInstance gen, (:objType this))
                                    (.dup gen)
                                    (.loadArg gen, 0)
                                    (loop-when-recur [a a #_"ISeq" s (vals (get *closes* (:uid this)))] (some? s) [(inc a) (next s)]
                                        (let [#_"LocalBinding" lb (first s)]
                                            (.loadThis gen)
                                            (let [#_"Class" primc (LocalBinding''getPrimitiveType lb)]
                                                (.getField gen, (:objType this), (:name lb), (if (some? primc) (Type/getType primc) (Type/getType Object)))
                                            )
                                        )
                                    )
                                    (.invokeConstructor gen, (:objType this), (Method. "<init>", Type/VOID_TYPE, ctorTypes))
                                    (.returnValue gen)
                                    (.endMethod gen)
                                )
                            )
                        )

                        (IopObject'''emitStatics this, cv)
                        (IopObject'''emitMethods this, cv)

                        ;; static fields for constants
                        (dotimes [#_"int" i (count (:constants this))]
                            (when (contains? *used-constants* i)
                                (.visitField cv, (| Opcodes/ACC_PUBLIC Opcodes/ACC_FINAL Opcodes/ACC_STATIC), (Compiler'constantName i), (.getDescriptor (IopObject''constantType this, i)), nil, nil)
                            )
                        )

                        ;; static fields for lookup sites
                        (dotimes [#_"int" i (count (:keywordCallsites this))]
                            (.visitField cv, (| Opcodes/ACC_FINAL Opcodes/ACC_STATIC), (Compiler'siteNameStatic i), (.getDescriptor (Type/getType KeywordLookupSite)), nil, nil)
                            (.visitField cv, Opcodes/ACC_STATIC, (Compiler'thunkNameStatic i), (.getDescriptor (Type/getType ILookupThunk)), nil, nil)
                        )

                        ;; static init for constants, keywords and vars
                        (let [#_"GeneratorAdapter" clinitgen (GeneratorAdapter. (| Opcodes/ACC_PUBLIC Opcodes/ACC_STATIC), (Method/getMethod "void <clinit> ()"), nil, nil, cv)]
                            (.visitCode clinitgen)
                            (.visitLineNumber clinitgen, (:line this), (.mark clinitgen))

                            (when (pos? (count (:constants this)))
                                (IopObject''emitConstants this, clinitgen)
                            )

                            (when (pos? (count (:keywordCallsites this)))
                                (IopObject''emitKeywordCallsites this, clinitgen)
                            )

                            (.returnValue clinitgen)
                            (.endMethod clinitgen)
                            ;; end of class
                            (.visitEnd cv)

                            (assoc this :compiledClass (.defineClass *class-loader*, (:name this), (.toByteArray cw), (§ obsolete nil)))
                        )
                    )
                )
            )
        )
    )

    (defn #_"String" IopObject'trimGenID [#_"String" name]
        (let [#_"int" i (.lastIndexOf name, "__")]
            (if (= i -1) name (.substring name, 0, i))
        )
    )
)

(class-ns FnExpr
    (defn #_"FnExpr" FnExpr'new [#_"Object" tag]
        (merge (FnExpr.) (IopObject'init tag)
            (hash-map
                ;; if there is a variadic overload (there can only be one) it is stored here
                #_"FnMethod" :variadicMethod nil
                #_"IPersistentCollection" :methods nil
                #_"boolean" :hasMeta false
                #_"boolean" :hasEnclosingMethod false
            )
        )
    )

    #_method
    (defn #_"boolean" FnExpr''isVariadic [#_"FnExpr" this]
        (some? (:variadicMethod this))
    )

    (extend-type FnExpr Expr
        (#_"Object" Expr'''eval [#_"FnExpr" this]
            (IopObject''doEval this)
        )

        (#_"void" Expr'''emit [#_"FnExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (IopObject''doEmit this, context, objx, gen)
            nil
        )

        #_memoize!
        (#_"Class" Expr'''getClass [#_"FnExpr" this]
            (if (some? (:tag this)) (Interop'tagToClass (:tag this)) AFunction)
        )
    )

    (extend-type FnExpr IopObject
        (#_"boolean" IopObject'''supportsMeta [#_"FnExpr" this]
            (:hasMeta this)
        )

        (#_"void" IopObject'''emitStatics [#_"FnExpr" this, #_"ClassVisitor" gen]
            nil
        )

        (#_"void" IopObject'''emitMethods [#_"FnExpr" this, #_"ClassVisitor" cv]
            ;; override of invoke/doInvoke for each method
            (loop-when-recur [#_"ISeq" s (seq (:methods this))] (some? s) [(next s)]
                (IopMethod'''emit (first s), this, cv)
            )

            (when (FnExpr''isVariadic this)
                (let [#_"GeneratorAdapter" gen (GeneratorAdapter. Opcodes/ACC_PUBLIC, (Method/getMethod "int getRequiredArity()"), nil, nil, cv)]
                    (.visitCode gen)
                    (.push gen, (count (:reqParms (:variadicMethod this))))
                    (.returnValue gen)
                    (.endMethod gen)
                )
            )
            nil
        )
    )

    (defn #_"Expr" FnExpr'parse [#_"Context" context, #_"ISeq" form, #_"String" name]
        (let [#_"IPersistentMap" fmeta (meta form)
              #_"IopMethod" owner *method*
              #_"FnExpr" fn
                (-> (FnExpr'new (Compiler'tagOf form))
                    (assoc :hasEnclosingMethod (some? owner) :line *line*)
                )
              fn (when (some? (meta (first form))) => fn
                    (assoc fn :onceOnly (boolean (get (meta (first form)) :once)))
                )
              #_"String" basename (if (some? owner) (:name (:objx owner)) (Compiler'munge (ßname (ßname *ns*))))
              [#_"Symbol" nm name]
                (if (symbol? (second form))
                    (let [nm (second form)]
                        [nm (str (ßname nm) "__" (RT/nextID))]
                    )
                    (cond
                        (nil? name)   [nil (str "fn__" (RT/nextID))]
                        (some? owner) [nil (str name "__"(RT/nextID))]
                        :else         [nil name]
                    )
                )
              fn (assoc fn :name (str basename "$" (.replace (Compiler'munge name), ".", "_DOT_")))
              fn (assoc fn :internalName (.replace (:name fn), \., \/))
              fn (assoc fn :objType (Type/getObjectType (:internalName fn)))
              #_"Object" rettag (get fmeta :rettag)
              fn
                (binding [*constants*          []
                          *constant-ids*       (IdentityHashMap.)
                          *keywords*           {}
                          *vars*               {}
                          *keyword-callsites*  []
                          *protocol-callsites* []
                          *no-recur*           false]
                    ;; arglist might be preceded by symbol naming this fn
                    (let [[fn form]
                            (when (some? nm) => [fn form]
                                [(assoc fn :thisName (ßname nm)) (cons 'fn* (next (next form)))]
                            )
                          ;; now (fn [args] body...) or (fn ([args] body...) ([args2] body2...) ...)
                          ;; turn former into latter
                          form
                            (when (instance? IPersistentVector (second form)) => form
                                (list 'fn* (next form))
                            )
                          #_"FnMethod[]" a (make-array #_"FnMethod" Object (inc Compiler'MAX_POSITIONAL_ARITY))
                          #_"FnMethod" variadic
                            (loop-when [variadic nil #_"ISeq" s (next form)] (some? s) => variadic
                                (let [#_"FnMethod" f (FnMethod'parse fn, (first s), rettag)
                                      variadic
                                        (if (FnMethod''isVariadic f)
                                            (when (nil? variadic) => (throw! "can't have more than 1 variadic overload")
                                                f
                                            )
                                            (let [#_"int" n (count (:reqParms f))]
                                                (when (nil? (aget a n)) => (throw! "can't have 2 overloads with same arity")
                                                    (aset a n f)
                                                    variadic
                                                )
                                            )
                                        )]
                                    (recur variadic (next s))
                                )
                            )]
                        (when (some? variadic)
                            (loop-when-recur [#_"int" i (inc (count (:reqParms variadic)))] (<= i Compiler'MAX_POSITIONAL_ARITY) [(inc i)]
                                (when (some? (aget a i))
                                    (throw! "can't have fixed arity function with more params than variadic function")
                                )
                            )
                        )
                        (let [#_"IPersistentCollection" methods
                                (loop-when-recur [methods nil #_"int" i 0]
                                                 (< i (alength a))
                                                 [(if (some? (aget a i)) (conj methods (aget a i)) methods) (inc i)]
                                              => (if (some? variadic) (conj methods variadic) methods)
                                )]
                            (assoc fn
                                :methods methods
                                :variadicMethod variadic
                                :keywords *keywords*
                                :vars *vars*
                                :constants *constants*
                                :keywordCallsites *keyword-callsites*
                                :protocolCallsites *protocol-callsites*
                            )
                        )
                    )
                )
              fmeta
                (when (some? fmeta)
                    (dissoc fmeta :line :column :rettag)
                )
              fn (assoc fn :hasMeta (pos? (count fmeta)))
              fn (IopObject''compile fn, (if (FnExpr''isVariadic fn) "clojure/lang/RestFn" "clojure/lang/AFunction"), nil, (:onceOnly fn))]
            (when (IopObject'''supportsMeta fn) => fn
                (MetaExpr'new fn, (MapExpr'parse (if (= context :Context'EVAL) context :Context'EXPRESSION), fmeta))
            )
        )
    )

    #_method
    (defn #_"void" FnExpr''emitForDefn [#_"FnExpr" this, #_"IopObject" objx, #_"GeneratorAdapter" gen]
        (Expr'''emit this, :Context'EXPRESSION, objx, gen)
        nil
    )
)

(class-ns DefExpr
    (defn #_"DefExpr" DefExpr'new [#_"int" line, #_"Var" var, #_"Expr" init, #_"Expr" meta, #_"boolean" initProvided, #_"boolean" isDynamic, #_"boolean" shadowsCoreMapping]
        (merge (DefExpr.)
            (hash-map
                #_"int" :line line
                #_"Var" :var var
                #_"Expr" :init init
                #_"Expr" :meta meta
                #_"boolean" :initProvided initProvided
                #_"boolean" :isDynamic isDynamic
                #_"boolean" :shadowsCoreMapping shadowsCoreMapping
            )
        )
    )

    #_method
    (defn- #_"boolean" DefExpr''includesExplicitMetadata [#_"DefExpr" this, #_"MapExpr" expr]
        (loop-when [#_"int" i 0] (< i (count (:keyvals expr))) => false
            (recur-if (any = (:k (nth (:keyvals expr) i)) :declared :line :column) [(+ i 2)] => true)
        )
    )

    (extend-type DefExpr Expr
        (#_"Object" Expr'''eval [#_"DefExpr" this]
            (when (:initProvided this)
                (.bindRoot (:var this), (Expr'''eval (:init this)))
            )
            (when (some? (:meta this))
                (let [#_"IPersistentMap" metaMap (Expr'''eval (:meta this))]
                    (when (or (:initProvided this) true)
                        (.setMeta (:var this), metaMap)
                    )
                )
            )
            (.setDynamic (:var this), (:isDynamic this))
        )

        (#_"void" Expr'''emit [#_"DefExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (IopObject''emitVar objx, gen, (:var this))
            (when (:shadowsCoreMapping this)
                (.dup gen)
                (.getField gen, (Type/getType Var), "ns", (Type/getType Namespace))
                (.swap gen)
                (.dup gen)
                (.getField gen, (Type/getType Var), "sym", (Type/getType Symbol))
                (.swap gen)
                (.invokeVirtual gen, (Type/getType Namespace), (Method/getMethod "clojure.lang.Var refer(clojure.lang.Symbol, clojure.lang.Var)"))
            )
            (when (:isDynamic this)
                (.push gen, (:isDynamic this))
                (.invokeVirtual gen, (Type/getType Var), (Method/getMethod "clojure.lang.Var setDynamic(boolean)"))
            )
            (when (some? (:meta this))
                (.dup gen)
                (Expr'''emit (:meta this), :Context'EXPRESSION, objx, gen)
                (.checkCast gen, (Type/getType IPersistentMap))
                (.invokeVirtual gen, (Type/getType Var), (Method/getMethod "void setMeta(clojure.lang.IPersistentMap)"))
            )
            (when (:initProvided this)
                (.dup gen)
                (if (instance? FnExpr (:init this))
                    (FnExpr''emitForDefn (:init this), objx, gen)
                    (Expr'''emit (:init this), :Context'EXPRESSION, objx, gen)
                )
                (.invokeVirtual gen, (Type/getType Var), (Method/getMethod "void bindRoot(Object)"))
            )
            (when (= context :Context'STATEMENT)
                (.pop gen)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"DefExpr" this]
            Var
        )
    )
)

(class-ns DefParser
    (defn #_"IParser" DefParser'new []
        (reify IParser
            ;; (def x) or (def x initexpr)
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (cond
                    (< 3 (count form))            (throw! "too many arguments to def")
                    (< (count form) 2)            (throw! "too few arguments to def")
                    (not (symbol? (second form))) (throw! "first argument to def must be a Symbol")
                )
                (let [#_"Symbol" sym (second form) #_"Var" v (Compiler'lookupVar sym, true)]
                    (when (some? v) => (throw! "can't refer to qualified var that doesn't exist")
                        (let [[v #_"boolean" shadowsCoreMapping]
                                (when-not (= (ßns v) *ns*) => [v false]
                                    (when (nil? (ßns sym)) => (throw! "can't create defs outside of current ns")
                                        (let [v (.intern *ns*, sym)]
                                            (Compiler'registerVar v)
                                            [v true]
                                        )
                                    )
                                )
                              #_"IPersistentMap" m (meta sym) #_"boolean" dynamic? (boolean (get m :dynamic))]
                            (when dynamic?
                                (.setDynamic v)
                            )
                            (when (and (not dynamic?) (.startsWith (ßname sym), "*") (.endsWith (ßname sym), "*") (< 2 (.length (ßname sym))))
                                (.println *err*, (str "Warning: " sym " not declared dynamic and thus is not dynamically rebindable, but its name suggests otherwise. Please either indicate ^:dynamic or change the name."))
                            )
                            (let [#_"Context" c (if (= context :Context'EVAL) context :Context'EXPRESSION)
                                  m (assoc m :line *line*)]
                                (DefExpr'new *line*, v, (Compiler'analyze c, (third form), (ßname (ßsym v))), (Compiler'analyze c, m), (= (count form) 3), dynamic?, shadowsCoreMapping)
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns BindingInit
    (defn #_"BindingInit" BindingInit'new [#_"LocalBinding" binding, #_"Expr" init]
        (merge (BindingInit.)
            (hash-map
                #_"LocalBinding" :binding binding
                #_"Expr" :init init
            )
        )
    )
)

(class-ns LetFnExpr
    (defn #_"LetFnExpr" LetFnExpr'new [#_"PersistentVector" bindingInits, #_"Expr" body]
        (merge (LetFnExpr.)
            (hash-map
                #_"PersistentVector" :bindingInits bindingInits
                #_"Expr" :body body
            )
        )
    )

    (extend-type LetFnExpr Expr
        (#_"Object" Expr'''eval [#_"LetFnExpr" this]
            (throw! "can't eval letfns")
        )

        (#_"void" Expr'''emit [#_"LetFnExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (dotimes [#_"int" i (count (:bindingInits this))]
                (let [#_"BindingInit" bi (nth (:bindingInits this) i)]
                    (.visitInsn gen, Opcodes/ACONST_NULL)
                    (.visitVarInsn gen, (.getOpcode (Type/getType Object), Opcodes/ISTORE), (:idx (:binding bi)))
                )
            )
            (let [#_"IPersistentSet" lbset
                    (loop-when [lbset #{} #_"int" i 0] (< i (count (:bindingInits this))) => lbset
                        (let [#_"BindingInit" bi (nth (:bindingInits this) i)]
                            (Expr'''emit (:init bi), :Context'EXPRESSION, objx, gen)
                            (.visitVarInsn gen, (.getOpcode (Type/getType Object), Opcodes/ISTORE), (:idx (:binding bi)))
                            (recur (conj lbset (:binding bi)) (inc i))
                        )
                    )]
                (dotimes [#_"int" i (count (:bindingInits this))]
                    (let [#_"BindingInit" bi (nth (:bindingInits this) i)]
                        (.visitVarInsn gen, (.getOpcode (Type/getType Object), Opcodes/ILOAD), (:idx (:binding bi)))
                        (IopObject''emitLetFnInits (:init bi), gen, objx, lbset)
                    )
                )
                (let [#_"Label" loopLabel (.mark gen)]
                    (Expr'''emit (:body this), context, objx, gen)
                    (let [#_"Label" end (.mark gen)]
                        (loop-when-recur [#_"ISeq" bis (seq (:bindingInits this))] (some? bis) [(next bis)]
                            (let [#_"BindingInit" bi (first bis)
                                #_"String" lname (:name (:binding bi)) lname (if (.endsWith lname, "__auto__") (str lname (RT/nextID)) lname)
                                #_"Class" primc (Compiler'maybePrimitiveType (:init bi))]
                                (.visitLocalVariable gen, lname, (if (some? primc) (Type/getDescriptor primc) "Ljava/lang/Object;"), nil, loopLabel, end, (:idx (:binding bi)))
                            )
                        )
                    )
                )
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"LetFnExpr" this]
            (Expr'''getClass (:body this))
        )
    )
)

(class-ns LetFnParser
    (defn #_"IParser" LetFnParser'new []
        (reify IParser
            ;; (letfns* [var (fn [args] body) ...] body...)
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (when (instance? IPersistentVector (second form)) => (throw! "bad binding form, expected vector")
                    (let [#_"IPersistentVector" bindings (second form)]
                        (when (zero? (% (count bindings) 2)) => (throw! "bad binding form, expected matched symbol expression pairs")
                            (if (= context :Context'EVAL)
                                (Compiler'analyze context, (list (list Compiler'FNONCE [] form)))
                                (binding [*local-env* *local-env*, *last-local-num* *last-local-num*]
                                    ;; pre-seed env (like Lisp labels)
                                    (let [#_"PersistentVector" lbs
                                            (loop-when [lbs [] #_"int" i 0] (< i (count bindings)) => lbs
                                                (let-when [#_"Object" sym (nth bindings i)] (symbol? sym) => (throw! (str "bad binding form, expected symbol, got: " sym))
                                                    (when (nil? (namespace sym)) => (throw! (str "can't let qualified name: " sym))
                                                        (recur (conj lbs (Compiler'registerLocal sym, (Compiler'tagOf sym), nil, false)) (+ i 2))
                                                    )
                                                )
                                            )
                                          #_"PersistentVector" bis
                                            (loop-when [bis [] #_"int" i 0] (< i (count bindings)) => bis
                                                (let [#_"Expr" init (Compiler'analyze :Context'EXPRESSION, (nth bindings (inc i)), (:name (nth bindings i)))
                                                      #_"LocalBinding" lb (Compiler'complementLocalInit (nth lbs (/ i 2)), init)]
                                                    (recur (conj bis (BindingInit'new lb, init)) (+ i 2))
                                                )
                                            )]
                                        (LetFnExpr'new bis, (IParser'''parse (BodyParser'new), context, (next (next form))))
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns LetExpr
    (defn #_"LetExpr" LetExpr'new [#_"PersistentVector" bindingInits, #_"Expr" body, #_"boolean" isLoop]
        (merge (LetExpr.)
            (hash-map
                #_"PersistentVector" :bindingInits bindingInits
                #_"Expr" :body body
                #_"boolean" :isLoop isLoop
            )
        )
    )

    #_method
    (defn- #_"void" LetExpr''doEmit [#_"LetExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen, #_"boolean" emitUnboxed]
        (let [#_"HashMap<BindingInit, Label>" bindingLabels (HashMap.)]
            (dotimes [#_"int" i (count (:bindingInits this))]
                (let [#_"BindingInit" bi (nth (:bindingInits this) i)
                      #_"Class" primc (Compiler'maybePrimitiveType (:init bi))]
                    (if (some? primc)
                        (do
                            (MaybePrimitive'''emitUnboxed (:init bi), :Context'EXPRESSION, objx, gen)
                            (.visitVarInsn gen, (.getOpcode (Type/getType primc), Opcodes/ISTORE), (:idx (:binding bi)))
                        )
                        (do
                            (Expr'''emit (:init bi), :Context'EXPRESSION, objx, gen)
                            (.visitVarInsn gen, (.getOpcode (Type/getType Object), Opcodes/ISTORE), (:idx (:binding bi)))
                        )
                    )
                    (.put bindingLabels, bi, (.mark gen))
                )
            )
            (let [#_"Label" loopLabel (.mark gen)]
                (if (:isLoop this)
                    (binding [*loop-label* loopLabel]
                        (if emitUnboxed
                            (MaybePrimitive'''emitUnboxed (:body this), context, objx, gen)
                            (Expr'''emit (:body this), context, objx, gen)
                        )
                    )
                    (if emitUnboxed
                        (MaybePrimitive'''emitUnboxed (:body this), context, objx, gen)
                        (Expr'''emit (:body this), context, objx, gen)
                    )
                )
                (let [#_"Label" end (.mark gen)]
                    (loop-when-recur [#_"ISeq" bis (seq (:bindingInits this))] (some? bis) [(next bis)]
                        (let [#_"BindingInit" bi (first bis)
                              #_"String" lname (:name (:binding bi)) lname (if (.endsWith lname, "__auto__") (str lname (RT/nextID)) lname)
                              #_"Class" primc (Compiler'maybePrimitiveType (:init bi))]
                            (.visitLocalVariable gen, lname, (if (some? primc) (Type/getDescriptor primc) "Ljava/lang/Object;"), nil, (get bindingLabels bi), end, (:idx (:binding bi)))
                        )
                    )
                )
            )
        )
        nil
    )

    (extend-type LetExpr Expr
        (#_"Object" Expr'''eval [#_"LetExpr" this]
            (throw! "can't eval let/loop")
        )

        (#_"void" Expr'''emit [#_"LetExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (LetExpr''doEmit this, context, objx, gen, false)
            nil
        )

        (#_"Class" Expr'''getClass [#_"LetExpr" this]
            (Expr'''getClass (:body this))
        )
    )

    (extend-type LetExpr MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"LetExpr" this]
            (and (satisfies? MaybePrimitive (:body this)) (MaybePrimitive'''canEmitPrimitive (:body this)))
        )

        (#_"void" MaybePrimitive'''emitUnboxed [#_"LetExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (LetExpr''doEmit this, context, objx, gen, true)
            nil
        )
    )
)

(class-ns LetParser
    (defn #_"IParser" LetParser'new []
        (reify IParser
            ;; (let [var val var2 val2 ...] body...)
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (let [#_"boolean" isLoop (= (first form) 'loop*)]
                    (when (instance? IPersistentVector (second form)) => (throw! "bad binding form, expected vector")
                        (let [#_"IPersistentVector" bindings (second form)]
                            (when (zero? (% (count bindings) 2)) => (throw! "bad binding form, expected matched symbol expression pairs")
                                (if (or (= context :Context'EVAL) (and (= context :Context'EXPRESSION) isLoop))
                                    (Compiler'analyze context, (list (list Compiler'FNONCE [] form)))
                                    (let [#_"ISeq" body (next (next form))
                                          #_"IPersistentMap" locals' (:locals *method*)]
                                        ;; may repeat once for each binding with a mismatch, return breaks
                                        (loop [#_"IPersistentVector" rms (vec (repeat (/ (count bindings) 2) false))]
                                            (let [#_"IPersistentMap" dynamicBindings
                                                    (hash-map
                                                        #'*local-env*      *local-env*
                                                        #'*last-local-num* *last-local-num*
                                                    )
                                                  dynamicBindings
                                                    (when isLoop => dynamicBindings
                                                        (assoc dynamicBindings #'*loop-locals* nil)
                                                    )
                                                  _ (update! *method* assoc :locals locals')
                                                  [rms #_"LetExpr" letExpr]
                                                    (try
                                                        (push-thread-bindings dynamicBindings)
                                                        (let [[#_"PersistentVector" bindingInits #_"PersistentVector" loopLocals]
                                                                (loop-when [bindingInits [] loopLocals [] #_"int" i 0] (< i (count bindings)) => [bindingInits loopLocals]
                                                                    (let-when [#_"Object" sym (nth bindings i)] (symbol? sym) => (throw! (str "bad binding form, expected symbol, got: " sym))
                                                                        (when (nil? (namespace sym)) => (throw! (str "can't let qualified name: " sym))
                                                                            (let [#_"Expr" init (Compiler'analyze :Context'EXPRESSION, (nth bindings (inc i)), (ßname sym))
                                                                                  init
                                                                                    (when isLoop => init
                                                                                        (if (and (some? rms) (nth rms (/ i 2)))
                                                                                            (do
                                                                                                (when *warn-on-reflection*
                                                                                                    (.println *err*, (str "Auto-boxing loop arg: " sym))
                                                                                                )
                                                                                                (StaticMethodExpr'new 0, nil, RT, "box", [init], false)
                                                                                            )
                                                                                            (condp = (Compiler'maybePrimitiveType init)
                                                                                                Integer/TYPE (StaticMethodExpr'new 0, nil, RT, "longCast", [init], false)
                                                                                                Float/TYPE   (StaticMethodExpr'new 0, nil, RT, "doubleCast", [init], false)
                                                                                                             init
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                  ;; sequential enhancement of env (like Lisp let*)
                                                                                  [bindingInits loopLocals]
                                                                                    (try
                                                                                        (when isLoop
                                                                                            (push-thread-bindings (hash-map #'*no-recur* false))
                                                                                        )
                                                                                        (let [#_"LocalBinding" lb (Compiler'registerLocal sym, (Compiler'tagOf sym), init, false)]
                                                                                            [(conj bindingInits (BindingInit'new lb, init)) (if isLoop (conj loopLocals lb) loopLocals)]
                                                                                        )
                                                                                        (finally
                                                                                            (when isLoop
                                                                                                (pop-thread-bindings)
                                                                                            )
                                                                                        )
                                                                                    )]
                                                                                (recur bindingInits loopLocals (+ i 2))
                                                                            )
                                                                        )
                                                                    )
                                                                )]
                                                            (when isLoop
                                                                (set! *loop-locals* loopLocals)
                                                            )
                                                            (let [#_"Expr" bodyExpr
                                                                    (try
                                                                        (when isLoop
                                                                            (push-thread-bindings
                                                                                (hash-map
                                                                                    #'*no-recur*          false
                                                                                    #'*in-return-context* (and (= context :Context'RETURN) *in-return-context*)
                                                                                )
                                                                            )
                                                                        )
                                                                        (IParser'''parse (BodyParser'new), (if isLoop :Context'RETURN context), body)
                                                                        (finally
                                                                            (when isLoop
                                                                                (pop-thread-bindings)
                                                                            )
                                                                        )
                                                                    )
                                                                  [rms #_"boolean" more?]
                                                                    (when isLoop => [rms false]
                                                                        (loop-when [rms rms more? false #_"int" i 0] (< i (count *loop-locals*)) => [rms more?]
                                                                            (let [[rms more?]
                                                                                    (when (:recurMistmatch (nth *loop-locals* i)) => [rms more?]
                                                                                        [(assoc rms i true) true]
                                                                                    )]
                                                                                (recur rms more? (inc i))
                                                                            )
                                                                        )
                                                                    )]
                                                                [rms (when-not more? (LetExpr'new bindingInits, bodyExpr, isLoop))]
                                                            )
                                                        )
                                                        (finally
                                                            (pop-thread-bindings)
                                                        )
                                                    )]
                                                (recur-if (nil? letExpr) [rms] => letExpr)
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns RecurExpr
    (defn #_"RecurExpr" RecurExpr'new [#_"IPersistentVector" loopLocals, #_"IPersistentVector" args, #_"int" line]
        (merge (RecurExpr.)
            (hash-map
                #_"IPersistentVector" :loopLocals loopLocals
                #_"IPersistentVector" :args args
                #_"int" :line line
            )
        )
    )

    (extend-type RecurExpr Expr
        (#_"Object" Expr'''eval [#_"RecurExpr" this]
            (throw! "can't eval recur")
        )

        (#_"void" Expr'''emit [#_"RecurExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (let-when [#_"Label" loopLabel *loop-label*] (some? loopLabel) => (throw! "recur misses loop label")
                (dotimes [#_"int" i (count (:loopLocals this))]
                    (let [#_"LocalBinding" lb (nth (:loopLocals this) i) #_"Expr" arg (nth (:args this) i)]
                        (when (some? (LocalBinding''getPrimitiveType lb)) => (Expr'''emit arg, :Context'EXPRESSION, objx, gen)
                            (let [#_"Class" primc (LocalBinding''getPrimitiveType lb) #_"Class" pc (Compiler'maybePrimitiveType arg)]
                                (cond (= primc pc)
                                    (do
                                        (MaybePrimitive'''emitUnboxed arg, :Context'EXPRESSION, objx, gen)
                                    )
                                    (and (= primc Long/TYPE) (= pc Integer/TYPE))
                                    (do
                                        (MaybePrimitive'''emitUnboxed arg, :Context'EXPRESSION, objx, gen)
                                        (.visitInsn gen, Opcodes/I2L)
                                    )
                                    (and (= primc Double/TYPE) (= pc Float/TYPE))
                                    (do
                                        (MaybePrimitive'''emitUnboxed arg, :Context'EXPRESSION, objx, gen)
                                        (.visitInsn gen, Opcodes/F2D)
                                    )
                                    (and (= primc Integer/TYPE) (= pc Long/TYPE))
                                    (do
                                        (MaybePrimitive'''emitUnboxed arg, :Context'EXPRESSION, objx, gen)
                                        (.invokeStatic gen, (Type/getType RT), (Method/getMethod "int intCast(long)"))
                                    )
                                    (and (= primc Float/TYPE) (= pc Double/TYPE))
                                    (do
                                        (MaybePrimitive'''emitUnboxed arg, :Context'EXPRESSION, objx, gen)
                                        (.visitInsn gen, Opcodes/D2F)
                                    )
                                    :else
                                    (do
                                        (throw! (str "recur arg for primitive local: " (:name lb) " is not matching primitive, had: " (.getName (or (Expr'''getClass arg) Object)) ", needed: " (.getName primc)))
                                    )
                                )
                            )
                        )
                    )
                )
                (loop-when-recur [#_"int" i (dec (count (:loopLocals this)))] (<= 0 i) [(dec i)]
                    (let [#_"LocalBinding" lb (nth (:loopLocals this) i) #_"Class" primc (LocalBinding''getPrimitiveType lb)]
                        (if (:isArg lb)
                            (.storeArg gen, (dec (:idx lb)))
                            (.visitVarInsn gen, (.getOpcode (if (some? primc) (Type/getType primc) (Type/getType Object)), Opcodes/ISTORE), (:idx lb))
                        )
                    )
                )
                (.goTo gen, loopLabel)
            )
            nil
        )

        (#_"Class" Expr'''getClass [#_"RecurExpr" this]
            Recur
        )
    )

    (extend-type RecurExpr MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"RecurExpr" this]
            true
        )

        (#_"void" MaybePrimitive'''emitUnboxed [#_"RecurExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (Expr'''emit this, context, objx, gen)
            nil
        )
    )
)

(class-ns RecurParser
    (defn #_"IParser" RecurParser'new []
        (reify IParser
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (when-not (and (= context :Context'RETURN) (some? *loop-locals*))
                    (throw! "can only recur from tail position")
                )
                (when *no-recur*
                    (throw! "cannot recur across try")
                )
                (let [#_"int" line *line*
                      #_"PersistentVector" args
                        (loop-when-recur [args [] #_"ISeq" s (seq (next form))]
                                         (some? s)
                                         [(conj args (Compiler'analyze :Context'EXPRESSION, (first s))) (next s)]
                                      => args
                        )]
                    (when-not (= (count args) (count *loop-locals*))
                        (throw! (str "mismatched argument count to recur, expected: " (count *loop-locals*) " args, got: " (count args)))
                    )
                    (dotimes [#_"int" i (count *loop-locals*)]
                        (let [#_"LocalBinding" lb (nth *loop-locals* i)]
                            (when-let [#_"Class" primc (LocalBinding''getPrimitiveType lb)]
                                (let [#_"Class" pc (Compiler'maybePrimitiveType (nth args i))
                                      #_"boolean" mismatch?
                                        (condp = primc
                                            Long/TYPE   (not (any = pc Long/TYPE Integer/TYPE Short/TYPE Character/TYPE Byte/TYPE))
                                            Double/TYPE (not (any = pc Double/TYPE Float/TYPE))
                                                        false
                                        )]
                                    (when mismatch?
                                        (update! *loop-locals* update i assoc :recurMistmatch true)
                                        (when *warn-on-reflection*
                                            (.println *err*, (str "line " line ": recur arg for primitive local: " (:name lb) " is not matching primitive, had: " (if (some? pc) (.getName pc) "Object") ", needed: " (.getName primc)))
                                        )
                                    )
                                )
                            )
                        )
                    )
                    (RecurExpr'new *loop-locals*, args, line)
                )
            )
        )
    )
)

(class-ns NewInstanceMethod
    (defn #_"NewInstanceMethod" NewInstanceMethod'new [#_"IopObject" objx, #_"IopMethod" parent]
        (merge (NewInstanceMethod.) (IopMethod'init objx, parent)
            (hash-map
                #_"String" :name nil
                #_"Type[]" :argTypes nil
                #_"Type" :retType nil
                #_"Class" :retClass nil
                #_"Class[]" :exClasses nil

                #_"IPersistentVector" :parms nil
            )
        )
    )

    (extend-type NewInstanceMethod IopMethod
        (#_"int" IopMethod'''numParams [#_"NewInstanceMethod" this]
            (count (:argLocals this))
        )

        (#_"String" IopMethod'''getMethodName [#_"NewInstanceMethod" this]
            (:name this)
        )

        (#_"Type" IopMethod'''getReturnType [#_"NewInstanceMethod" this]
            (:retType this)
        )

        (#_"Type[]" IopMethod'''getArgTypes [#_"NewInstanceMethod" this]
            (:argTypes this)
        )

        (#_"void" IopMethod'''emit [#_"NewInstanceMethod" this, #_"IopObject" obj, #_"ClassVisitor" cv]
            (let [#_"Method" m (Method. (IopMethod'''getMethodName this), (IopMethod'''getReturnType this), (IopMethod'''getArgTypes this))
                #_"Type[]" exTypes
                    (let-when [#_"int" n (alength (:exClasses this))] (pos? n)
                        (let [exTypes (make-array Type n)]
                            (dotimes [#_"int" i n]
                                (aset exTypes i (Type/getType (aget (:exClasses this) i)))
                            )
                            exTypes
                        )
                    )
                #_"GeneratorAdapter" gen (GeneratorAdapter. Opcodes/ACC_PUBLIC, m, nil, exTypes, cv)]
                (.visitCode gen)
                (let [#_"Label" loopLabel (.mark gen)]
                    (.visitLineNumber gen, (:line this), loopLabel)
                    (binding [*loop-label* loopLabel, *method* this]
                        (IopMethod'emitBody (:objx this), gen, (:retClass this), (:body this))
                        (let [#_"Label" end (.mark gen)]
                            (.visitLocalVariable gen, "this", (.getDescriptor (:objType obj)), nil, loopLabel, end, 0)
                            (loop-when-recur [#_"ISeq" lbs (seq (:argLocals this))] (some? lbs) [(next lbs)]
                                (let [#_"LocalBinding" lb (first lbs)]
                                    (.visitLocalVariable gen, (:name lb), (.getDescriptor (aget (:argTypes this) (dec (:idx lb)))), nil, loopLabel, end, (:idx lb))
                                )
                            )
                        )
                    )
                    (.returnValue gen)
                    (.endMethod gen)
                )
            )
            nil
        )
    )

    (defn #_"IPersistentVector" NewInstanceMethod'msig [#_"String" name, #_"Class[]" paramTypes]
        [name (seq paramTypes)]
    )

    (defn- #_"Map" NewInstanceMethod'findMethodsWithNameAndArity [#_"String" name, #_"int" arity, #_"Map" mm]
        (let [#_"Map" found (HashMap.)]
            (doseq [#_"Map$Entry" e mm]
                (let [#_"java.lang.reflect.Method" m (val e)]
                    (when (and (= name (.getName m)) (= (alength (.getParameterTypes m)) arity))
                        (.put found, (key e), (val e))
                    )
                )
            )
            found
        )
    )

    (defn- #_"Map" NewInstanceMethod'findMethodsWithName [#_"String" name, #_"Map" mm]
        (let [#_"Map" found (HashMap.)]
            (doseq [#_"Map$Entry" e mm]
                (let [#_"java.lang.reflect.Method" m (val e)]
                    (when (= name (.getName m))
                        (.put found, (key e), (val e))
                    )
                )
            )
            found
        )
    )

    (defn #_"NewInstanceMethod" NewInstanceMethod'parse [#_"IopObject" objx, #_"ISeq" form, #_"Symbol" thistag, #_"Map" overrideables]
        ;; (methodname [this-name args*] body...)
        ;; this-name might be nil
        (let [#_"NewInstanceMethod" nim
                (-> (NewInstanceMethod'new objx, *method*)
                    (assoc :line *line*)
                )
              #_"Symbol" dotname (first form) #_"Symbol" name (with-meta (symbol (Compiler'munge (ßname dotname))) (meta dotname))
              #_"IPersistentVector" parms (second form)]
            (when (pos? (count parms)) => (throw! (str "must supply at least one argument for 'this' in: " dotname))
                (let [#_"Symbol" thisName (nth parms 0) parms (subvec parms 1 (count parms))
                      #_"ISeq" body (next (next form))]
                    ;; register as the current method and set up a new env frame
                    (binding [*method*            nim
                              *local-env*         *local-env*
                              *last-local-num*    -1
                              *loop-locals*       nil
                              *in-return-context* true]
                        ;; register 'this' as local 0
                        (if (some? thisName)
                            (Compiler'registerLocal thisName, thistag, nil, false)
                            (Compiler'nextLocalNum)
                        )
                        (let [nim (assoc nim :retClass (Interop'tagClass (Compiler'tagOf name)))
                              nim (assoc nim :argTypes (make-array Type (count parms)))
                              #_"Class[]" pclasses (make-array Class (count parms))
                              #_"Symbol[]" psyms (make-array #_"Symbol" Object (count parms))
                              #_"boolean" hinted?
                                (loop-when [hinted? (some? (Compiler'tagOf name)) #_"int" i 0] (< i (count parms)) => hinted?
                                    (let-when [#_"Object" sym (nth parms i)] (symbol? sym) => (throw! "params must be Symbols")
                                        (let [#_"Object" tag (Compiler'tagOf sym) hinted? (or hinted? (some? tag))]
                                            (aset pclasses i (Interop'tagClass tag))
                                            (aset psyms i (if (some? (namespace sym)) (symbol (ßname sym)) sym))
                                            (recur hinted? (inc i))
                                        )
                                    )
                                )
                              #_"Map" matches (NewInstanceMethod'findMethodsWithNameAndArity (ßname name), (count parms), overrideables)
                              #_"Object" mk (NewInstanceMethod'msig (ßname name), pclasses)
                              [nim pclasses #_"java.lang.reflect.Method" m]
                                (case (count matches)
                                    0   (throw! (str "can't define method not in interfaces: " (ßname name)))
                                    1   (if hinted? ;; validate match
                                            (let [m (get matches mk)]
                                                (when (nil? m)
                                                    (throw! (str "can't find matching method: " (ßname name) ", leave off hints for auto match."))
                                                )
                                                (when-not (= (.getReturnType m) (:retClass nim))
                                                    (throw! (str "mismatched return type: " (ßname name) ", expected: " (.getName (.getReturnType m)) ", had: " (.getName (:retClass nim))))
                                                )
                                                [nim pclasses m]
                                            )
                                            ;; adopt found method sig
                                            (let [m (.next (.iterator (.values matches)))]
                                                [(assoc nim :retClass (.getReturnType m)) (.getParameterTypes m) m]
                                            )
                                        )
                                        ;; must be hinted and match one method
                                        (when hinted? => (throw! (str "must hint overloaded method: " (ßname name)))
                                            (let [m (get matches mk)]
                                                (when (nil? m)
                                                    (throw! (str "can't find matching overloaded method: " (ßname name)))
                                                )
                                                (when-not (= (.getReturnType m) (:retClass nim))
                                                    (throw! (str "mismatched return type: " (ßname name) ", expected: " (.getName (.getReturnType m)) ", had: " (.getName (:retClass nim))))
                                                )
                                                [nim pclasses m]
                                            )
                                        )
                                )
                              ;; validate unique name+arity among additional methods
                              nim (assoc nim :retType (Type/getType (:retClass nim)))
                              nim (assoc nim :exClasses (.getExceptionTypes m))
                              #_"PersistentVector" argLocals
                                (loop-when [argLocals [] #_"int" i 0] (< i (count parms)) => argLocals
                                    (let [#_"LocalBinding" lb (Compiler'registerLocal (aget psyms i), nil, (MethodParamExpr'new (aget pclasses i)), true)]
                                        (aset (:argTypes nim) i (Type/getType (aget pclasses i)))
                                        (recur (conj argLocals lb) (inc i))
                                    )
                                )]
                            (dotimes [#_"int" i (count parms)]
                                (when (any = (aget pclasses i) Long/TYPE Double/TYPE)
                                    (Compiler'nextLocalNum)
                                )
                            )
                            (set! *loop-locals* argLocals)
                            (assoc nim
                                :name (ßname name)
                                :methodMeta (meta name)
                                :parms parms
                                :argLocals argLocals
                                :body (IParser'''parse (BodyParser'new), :Context'RETURN, body)
                            )
                        )
                    )
                )
            )
        )
    )
)

(class-ns NewInstanceExpr
    (defn- #_"NewInstanceExpr" NewInstanceExpr'new [#_"Object" tag]
        (merge (NewInstanceExpr.) (IopObject'init tag)
            (hash-map
                #_"IPersistentCollection" :methods nil

                #_"Map<IPersistentVector, java.lang.reflect.Method>" :overrideables nil
                #_"Map<IPersistentVector, Set<Class>>" :covariants nil
            )
        )
    )

    ;;;
     ; Current host interop uses reflection, which requires pre-existing classes.
     ; Work around this by:
     ; Generate a stub class that has the same interfaces and fields as the class we are generating.
     ; Use it as a type hint for this, and bind the simple name of the class to this stub (in resolve etc.)
     ; Unmunge the name (using a magic prefix) on any code gen for classes.
     ;;
    (defn #_"Class" NewInstanceExpr'compileStub [#_"String" superName, #_"NewInstanceExpr" ret, #_"String[]" interfaceNames, #_"ISeq" form]
        (let [#_"ClassWriter" cw (ClassWriter. ClassWriter/COMPUTE_MAXS) #_"ClassVisitor" cv cw]
            (.visit cv, Opcodes/V1_5, (| Opcodes/ACC_PUBLIC Opcodes/ACC_SUPER), (str Compiler'COMPILE_STUB_PREFIX "/" (:internalName ret)), nil, superName, interfaceNames)

            ;; instance fields for closed-overs
            (loop-when-recur [#_"ISeq" s (vals (get *closes* (:uid ret)))] (some? s) [(next s)]
                (let [#_"LocalBinding" lb (first s)
                      #_"int" access (| Opcodes/ACC_PUBLIC (if (IopObject''isVolatile ret, lb) Opcodes/ACC_VOLATILE (if (IopObject''isMutable ret, lb) 0 Opcodes/ACC_FINAL)))]
                    (if (some? (LocalBinding''getPrimitiveType lb))
                        (.visitField cv, access, (:name lb), (.getDescriptor (Type/getType (LocalBinding''getPrimitiveType lb))), nil, nil)
                        ;; todo - when closed-overs are fields, use more specific types here and in ctor and emitLocal?
                        (.visitField cv, access, (:name lb), (.getDescriptor (Type/getType Object)), nil, nil)
                    )
                )
            )

            ;; ctor that takes closed-overs and does nothing
            (let [#_"Method" m (Method. "<init>", Type/VOID_TYPE, (IopObject''ctorTypes ret))
                  #_"GeneratorAdapter" ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, m, nil, nil, cv)]
                (.visitCode ctorgen)
                (.loadThis ctorgen)
                (.invokeConstructor ctorgen, (Type/getObjectType superName), (Method/getMethod "void <init>()"))
                (.returnValue ctorgen)
                (.endMethod ctorgen)
            )

            (when (pos? (:altCtorDrops ret))
                (let [#_"Type[]" ctorTypes (IopObject''ctorTypes ret)]

                    (let [#_"Type[]" altCtorTypes (make-array Type (- (alength ctorTypes) (:altCtorDrops ret)))
                          _ (dotimes [#_"int" i (alength altCtorTypes)]
                                (aset altCtorTypes i (aget ctorTypes i))
                            )
                          #_"Method" alt (Method. "<init>", Type/VOID_TYPE, altCtorTypes)
                          #_"GeneratorAdapter" ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, alt, nil, nil, cv)]
                        (.visitCode ctorgen)
                        (.loadThis ctorgen)
                        (.loadArgs ctorgen)

                        (.visitInsn ctorgen, Opcodes/ACONST_NULL) ;; __meta
                        (.visitInsn ctorgen, Opcodes/ACONST_NULL) ;; __extmap
                        (.visitInsn ctorgen, Opcodes/ICONST_0) ;; __hash
                        (.visitInsn ctorgen, Opcodes/ICONST_0) ;; __hasheq

                        (.invokeConstructor ctorgen, (Type/getObjectType (str Compiler'COMPILE_STUB_PREFIX "/" (:internalName ret))), (Method. "<init>", Type/VOID_TYPE, ctorTypes))

                        (.returnValue ctorgen)
                        (.endMethod ctorgen)
                    )

                    ;; alt ctor no __hash, __hasheq
                    (let [#_"Type[]" altCtorTypes (make-array Type (- (alength ctorTypes) 2))
                          _ (dotimes [#_"int" i (alength altCtorTypes)]
                                (aset altCtorTypes i (aget ctorTypes i))
                            )
                          #_"Method" alt (Method. "<init>", Type/VOID_TYPE, altCtorTypes)
                          #_"GeneratorAdapter" ctorgen (GeneratorAdapter. Opcodes/ACC_PUBLIC, alt, nil, nil, cv)]
                        (.visitCode ctorgen)
                        (.loadThis ctorgen)
                        (.loadArgs ctorgen)

                        (.visitInsn ctorgen, Opcodes/ICONST_0) ;; __hash
                        (.visitInsn ctorgen, Opcodes/ICONST_0) ;; __hasheq

                        (.invokeConstructor ctorgen, (Type/getObjectType (str Compiler'COMPILE_STUB_PREFIX "/" (:internalName ret))), (Method. "<init>", Type/VOID_TYPE, ctorTypes))

                        (.returnValue ctorgen)
                        (.endMethod ctorgen)
                    )
                )
            )

            ;; end of class
            (.visitEnd cv)

            (.defineClass *class-loader*, (str Compiler'COMPILE_STUB_PREFIX "." (:name ret)), (.toByteArray cw), (§ obsolete nil))
        )
    )

    (defn #_"String" NewInstanceExpr'slashname [#_"Class" c]
        (.replace (.getName c), \., \/)
    )

    (defn #_"String[]" NewInstanceExpr'interfaceNames [#_"IPersistentVector" interfaces]
        (let [#_"int" n (count interfaces)
              #_"String[]" inames (when (pos? n) (make-array String n))]
            (dotimes [#_"int" i n]
                (aset inames i (NewInstanceExpr'slashname (nth interfaces i)))
            )
            inames
        )
    )

    (extend-type NewInstanceExpr Expr
        (#_"Object" Expr'''eval [#_"NewInstanceExpr" this]
            (IopObject''doEval this)
        )

        (#_"void" Expr'''emit [#_"NewInstanceExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (IopObject''doEmit this, context, objx, gen)
            nil
        )

        #_memoize!
        (#_"Class" Expr'''getClass [#_"NewInstanceExpr" this]
            (or (:compiledClass this)
                (if (some? (:tag this)) (Interop'tagToClass (:tag this)) IFn)
            )
        )
    )

    (extend-type NewInstanceExpr IopObject
        (#_"boolean" IopObject'''supportsMeta [#_"NewInstanceExpr" this]
            (not (IopObject''isDeftype this))
        )

        (#_"void" IopObject'''emitStatics [#_"NewInstanceExpr" this, #_"ClassVisitor" cv]
            (when (IopObject''isDeftype this)
                ;; getBasis()
                (let [#_"Method" meth (Method/getMethod "clojure.lang.IPersistentVector getBasis()")
                    #_"GeneratorAdapter" gen (GeneratorAdapter. (| Opcodes/ACC_PUBLIC Opcodes/ACC_STATIC), meth, nil, nil, cv)]
                    (IopObject''emitValue this, (:hintedFields this), gen)
                    (.returnValue gen)
                    (.endMethod gen)

                    (let-when [#_"int" n (count (:hintedFields this))] (< n (count (:fields this)))
                        ;; create(IPersistentMap)
                        (let [#_"String" className (.replace (:name this), \., \/)
                            #_"MethodVisitor" mv (.visitMethod cv, (| Opcodes/ACC_PUBLIC Opcodes/ACC_STATIC), "create", (str "(Lclojure/lang/IPersistentMap;)L" className ";"), nil, nil)]
                            (.visitCode mv)

                            (loop-when-recur [#_"ISeq" s (seq (:hintedFields this)) #_"int" i 1] (some? s) [(next s) (inc i)]
                                (let [#_"String" bName (ßname (first s))
                                    #_"Class" k (Interop'tagClass (Compiler'tagOf (first s)))]
                                    (.visitVarInsn mv, Opcodes/ALOAD, 0)
                                    (.visitLdcInsn mv, bName)
                                    (.visitMethodInsn mv, Opcodes/INVOKESTATIC, "clojure/lang/Keyword", "intern", "(Ljava/lang/String;)Lclojure/lang/Keyword;")
                                    (.visitInsn mv, Opcodes/ACONST_NULL)
                                    (.visitMethodInsn mv, Opcodes/INVOKEINTERFACE, "clojure/lang/IPersistentMap", "valAt", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
                                    (when (.isPrimitive k)
                                        (.visitTypeInsn mv, Opcodes/CHECKCAST, (.getInternalName (Type/getType (Compiler'boxClass k))))
                                    )
                                    (.visitVarInsn mv, Opcodes/ASTORE, i)
                                    (.visitVarInsn mv, Opcodes/ALOAD, 0)
                                    (.visitLdcInsn mv, bName)
                                    (.visitMethodInsn mv, Opcodes/INVOKESTATIC, "clojure/lang/Keyword", "intern", "(Ljava/lang/String;)Lclojure/lang/Keyword;")
                                    (.visitMethodInsn mv, Opcodes/INVOKEINTERFACE, "clojure/lang/IPersistentMap", "dissoc", "(Ljava/lang/Object;)Lclojure/lang/IPersistentMap;")
                                    (.visitVarInsn mv, Opcodes/ASTORE, 0)
                                )
                            )

                            (.visitTypeInsn mv, Opcodes/NEW, className)
                            (.visitInsn mv, Opcodes/DUP)

                            (let [#_"Method" ctor (Method. "<init>", Type/VOID_TYPE, (IopObject''ctorTypes this))]
                                (dotimes [#_"int" i n]
                                    (.visitVarInsn mv, Opcodes/ALOAD, (inc i))
                                    (let-when [#_"Class" k (Interop'tagClass (Compiler'tagOf (nth (:hintedFields this) i)))] (.isPrimitive k)
                                        (.visitMethodInsn mv, Opcodes/INVOKEVIRTUAL, (.getInternalName (Type/getType (Compiler'boxClass k))), (str (.getName k) "Value"), (str "()" (.getDescriptor (Type/getType k))))
                                    )
                                )

                                (.visitInsn mv, Opcodes/ACONST_NULL) ;; __meta
                                (.visitVarInsn mv, Opcodes/ALOAD, 0) ;; __extmap
                                (.visitMethodInsn mv, Opcodes/INVOKESTATIC, "clojure/lang/RT", "seqOrElse", "(Ljava/lang/Object;)Ljava/lang/Object;")
                                (.visitInsn mv, Opcodes/ICONST_0) ;; __hash
                                (.visitInsn mv, Opcodes/ICONST_0) ;; __hasheq
                                (.visitMethodInsn mv, Opcodes/INVOKESPECIAL, className, "<init>", (.getDescriptor ctor))
                                (.visitInsn mv, Opcodes/ARETURN)
                                (.visitMaxs mv, (+ 4 n), (+ 1 n))
                                (.visitEnd mv)
                            )
                        )
                    )
                )
            )
            nil
        )

        (#_"void" IopObject'''emitMethods [#_"NewInstanceExpr" this, #_"ClassVisitor" cv]
            (loop-when-recur [#_"ISeq" s (seq (:methods this))] (some? s) [(next s)]
                (IopMethod'''emit (first s), this, cv)
            )
            ;; emit bridge methods
            (doseq [#_"Map$Entry<IPersistentVector, Set<Class>>" e (:covariants this)]
                (let [#_"java.lang.reflect.Method" m (get (:overrideables this) (key e))
                    #_"Class[]" params (.getParameterTypes m)
                    #_"Type[]" argTypes (make-array Type (alength params))
                    _ (dotimes [#_"int" i (alength params)]
                            (aset argTypes i (Type/getType (aget params i)))
                        )
                    #_"Method" target (Method. (.getName m), (Type/getType (.getReturnType m)), argTypes)]
                    (doseq [#_"Class" retType (val e)]
                        (let [#_"Method" meth (Method. (.getName m), (Type/getType retType), argTypes)
                            #_"GeneratorAdapter" gen (GeneratorAdapter. (| Opcodes/ACC_PUBLIC Opcodes/ACC_BRIDGE), meth, nil, Compiler'EXCEPTION_TYPES, cv)]
                            (.visitCode gen)
                            (.loadThis gen)
                            (.loadArgs gen)
                            (.invokeInterface gen, (Type/getType (.getDeclaringClass m)), target)
                            (.returnValue gen)
                            (.endMethod gen)
                        )
                    )
                )
            )
            nil
        )
    )

    (defn #_"IPersistentVector" NewInstanceExpr'msig [#_"java.lang.reflect.Method" m]
        [(.getName m) (seq (.getParameterTypes m)) (.getReturnType m)]
    )

    (defn #_"void" NewInstanceExpr'considerMethod [#_"java.lang.reflect.Method" m, #_"Map" mm]
        (let [#_"IPersistentVector" mk (NewInstanceExpr'msig m) #_"int" mods (.getModifiers m)]
            (when (not (or (contains? mm mk) (not (or (Modifier/isPublic mods) (Modifier/isProtected mods))) (Modifier/isStatic mods) (Modifier/isFinal mods)))
                (.put mm, mk, m)
            )
        )
        nil
    )

    (defn #_"[Map Map]" NewInstanceExpr'gatherMethods [#_"Class" sc, #_"ISeq" ifaces]
        (let [#_"Map" allm (HashMap.)
              game-
                (fn #_"void" [#_"Class" c, #_"Map" mm]
                    (loop-when-recur c (some? c) (.getSuperclass c)
                        (doseq [#_"java.lang.reflect.Method" m (.getDeclaredMethods c)]
                            (NewInstanceExpr'considerMethod m, mm)
                        )
                        (doseq [#_"java.lang.reflect.Method" m (.getMethods c)]
                            (NewInstanceExpr'considerMethod m, mm)
                        )
                    )
                    nil
                )
              _ (game- sc allm)
              _ (loop-when-recur ifaces (some? ifaces) (next ifaces)
                    (game- (first ifaces) allm)
                )
              #_"Map<IPersistentVector, java.lang.reflect.Method>" methods (HashMap.)
              #_"Map<IPersistentVector, Set<Class>>" covariants (HashMap.)]
            (loop-when-recur [#_"ISeq" s (seq allm)] (some? s) [(next s)]
                (let [#_"Map$Entry" e (first s) #_"IPersistentVector" mk (pop (key e)) #_"java.lang.reflect.Method" m (val e)]
                    (if (contains? methods mk) ;; covariant return
                        (let [#_"Set<Class>" cvs
                                (or (get covariants mk)
                                    (let [cvs (HashSet.)]
                                        (.put covariants, mk, cvs)
                                        cvs
                                    )
                                )
                              #_"Class" tk (.getReturnType (get methods mk)) #_"Class" t (.getReturnType m)]
                            (when (.isAssignableFrom tk, t) => (.add cvs, t)
                                (.add cvs, tk)
                                (.put methods, mk, m)
                            )
                        )
                        (.put methods, mk, m)
                    )
                )
            )
            [methods covariants]
        )
    )

    (defn #_"IopObject" NewInstanceExpr'build [#_"IPersistentVector" interfaceSyms, #_"IPersistentVector" fieldSyms, #_"Symbol" thisSym, #_"String" tagName, #_"Symbol" className, #_"Symbol" typeTag, #_"ISeq" methodForms, #_"ISeq" form, #_"IPersistentMap" opts]
        (let [#_"String" name (.toString className) #_"String" name' (.replace name, \., \/)
              #_"NewInstanceExpr" nie
                (-> (NewInstanceExpr'new nil)
                    (assoc :name name :internalName name' :objType (Type/getObjectType name') :opts opts)
                )
              nie (if (some? thisSym) (assoc nie :thisName (ßname thisSym)) nie)
              nie
                (when (some? fieldSyms) => nie
                    (let [#_"Object[]" a (make-array Object (* 2 (count fieldSyms)))
                          #_"IPersistentMap" fmap
                            (loop-when [fmap {} #_"int" i 0] (< i (count fieldSyms)) => fmap
                                (let [#_"Symbol" sym (nth fieldSyms i)
                                      #_"LocalBinding" lb (LocalBinding'new -1, sym, nil, (MethodParamExpr'new (Interop'tagClass (Compiler'tagOf sym))), false)]
                                    (aset a (* i 2) (:uid lb))
                                    (aset a (inc (* i 2)) lb)
                                    (recur (assoc fmap sym lb) (inc i))
                                )
                            )
                          ;; use array map to preserve ctor order
                          _ (update! *closes* assoc (:uid nie) (PersistentArrayMap. a))
                          nie (assoc nie :fields fmap)]
                        (loop-when-recur [nie nie #_"int" i (dec (count fieldSyms))]
                                         (and (<= 0 i) (any = (ßname (nth fieldSyms i)) "__meta" "__extmap" "__hash" "__hasheq"))
                                         [(update nie :altCtorDrops inc) (dec i)]
                                      => nie
                        )
                    )
                )
              #_"PersistentVector" ifaces
                (loop-when [ifaces [] #_"ISeq" s (seq interfaceSyms)] (some? s) => ifaces
                    (let [#_"Class" c (Compiler'resolve (first s))]
                        (when (.isInterface c) => (throw! (str "only interfaces are supported, had: " (.getName c)))
                            (recur (conj ifaces c) (next s))
                        )
                    )
                )
              #_"Class" super Object
              [#_"Map" overrideables #_"Map" covariants] (NewInstanceExpr'gatherMethods super, (seq ifaces))
              nie (assoc nie :overrideables overrideables :covariants covariants)
              #_"String[]" inames (NewInstanceExpr'interfaceNames ifaces)
              #_"Class" stub (NewInstanceExpr'compileStub (NewInstanceExpr'slashname super), nie, inames, form)
              #_"Symbol" thistag (symbol (.getName stub))
              nie
                (binding [*constants*          []
                          *constant-ids*       (IdentityHashMap.)
                          *keywords*           {}
                          *vars*               {}
                          *keyword-callsites*  []
                          *protocol-callsites* []
                          *no-recur*           false]
                    (try
                        (let [nie
                                (when (IopObject''isDeftype nie) => nie
                                    (push-thread-bindings
                                        (hash-map
                                            #'*method*             nil
                                            #'*local-env*          (:fields nie)
                                            #'*compile-stub-sym*   (symbol tagName)
                                            #'*compile-stub-class* stub
                                        )
                                    )
                                    (assoc nie :hintedFields (subvec fieldSyms 0 (- (count fieldSyms) (:altCtorDrops nie))))
                                )
                              ;; now (methodname [args] body)*
                              nie (assoc nie :line *line*)
                              #_"IPersistentCollection" methods
                                (loop-when [methods nil #_"ISeq" s methodForms] (some? s) => methods
                                    (let [#_"NewInstanceMethod" m (NewInstanceMethod'parse nie, (first s), thistag, overrideables)]
                                        (recur (conj methods m) (next s))
                                    )
                                )]
                            (assoc nie
                                :methods methods
                                :keywords *keywords*
                                :vars *vars*
                                :constants *constants*
                                :keywordCallsites *keyword-callsites*
                                :protocolCallsites *protocol-callsites*
                            )
                        )
                        (finally
                            (when (IopObject''isDeftype nie)
                                (pop-thread-bindings)
                            )
                        )
                    )
                )]
            (IopObject''compile nie, (NewInstanceExpr'slashname super), inames, false)
        )
    )
)

(class-ns ReifyParser
    (defn #_"IParser" ReifyParser'new []
        (reify IParser
            ;; (reify this-name? [interfaces] (method-name [args] body)*)
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (let [#_"ISeq" s form                                                  s (next s)
                      #_"IPersistentVector" ifaces (conj (first s) 'clojure.lang.IObj) s (next s)
                      #_"String" classname
                        (let [#_"IopMethod" owner *method*
                              #_"String" basename (if (some? owner) (IopObject'trimGenID (:name (:objx owner))) (Compiler'munge (ßname (ßname *ns*))))]
                            (str basename "$" "reify__" (RT/nextID))
                        )
                      #_"IopObject" nie (NewInstanceExpr'build ifaces, nil, nil, classname, (symbol classname), nil, s, form, nil)]
                    (when (and (instance? IObj form) (some? (meta form))) => nie
                        (MetaExpr'new nie, (MapExpr'parse (if (= context :Context'EVAL) context :Context'EXPRESSION), (meta form)))
                    )
                )
            )
        )
    )
)

(class-ns DeftypeParser
    (defn #_"IParser" DeftypeParser'new []
        (reify IParser
            ;; (deftype* tagname classname [fields] :implements [interfaces] :tag tagname methods*)
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (let [#_"ISeq" s form                         s (next s)
                      #_"String" tagname (.getName (first s)) s (next s)
                      #_"Symbol" classname (first s)          s (next s)
                      #_"IPersistentVector" fields (first s)  s (next s)
                      [#_"IPersistentMap" opts s]
                        (loop-when-recur [opts {} s s]
                                         (and (some? s) (keyword? (first s)))
                                         [(assoc opts (first s) (second s)) (next (next s))]
                                      => [opts s]
                        )]
                    (NewInstanceExpr'build (get opts :implements []), fields, nil, tagname, classname, (get opts :tag), s, form, opts)
                )
            )
        )
    )
)

(class-ns CaseExpr
    ;; (case* expr shift mask default map<minhash, [test then]> table-type test-type skip-check?)
    (defn #_"CaseExpr" CaseExpr'new [#_"int" line, #_"LocalBindingExpr" expr, #_"int" shift, #_"int" mask, #_"int" low, #_"int" high, #_"Expr" defaultExpr, #_"SortedMap<Integer, Expr>" tests, #_"HashMap<Integer, Expr>" thens, #_"Keyword" switchType, #_"Keyword" testType, #_"Set<Integer>" skipCheck]
        (when-not (any = switchType :compact :sparse)
            (throw! (str "unexpected switch type: " switchType))
        )
        (when-not (any = testType :int :hash-equiv :hash-identity)
            (throw! (str "unexpected test type: " testType))
        )
        (when (and (pos? (count skipCheck)) *warn-on-reflection*)
            (.println *err*, (str "Performance warning, line " line " - hash collision of some case test constants; if selected, those entries will be tested sequentially."))
        )
        (merge (CaseExpr.)
            (hash-map
                #_"LocalBindingExpr" :expr expr
                #_"int" :shift shift
                #_"int" :mask mask
                #_"int" :low low
                #_"int" :high high
                #_"Expr" :defaultExpr defaultExpr
                #_"SortedMap<Integer, Expr>" :tests tests
                #_"HashMap<Integer, Expr>" :thens thens
                #_"Keyword" :switchType switchType
                #_"Keyword" :testType testType
                #_"Set<Integer>" :skipCheck skipCheck
                #_"Class" :returnType (Compiler'maybeClass (conj (vec (.values thens)) defaultExpr))
                #_"int" :line line
            )
        )
    )

    #_method
    (defn- #_"boolean" CaseExpr''isShiftMasked [#_"CaseExpr" this]
        (not= (:mask this) 0)
    )

    #_method
    (defn- #_"void" CaseExpr''emitShiftMask [#_"CaseExpr" this, #_"GeneratorAdapter" gen]
        (when (CaseExpr''isShiftMasked this)
            (.push gen, (:shift this))
            (.visitInsn gen, Opcodes/ISHR)
            (.push gen, (:mask this))
            (.visitInsn gen, Opcodes/IAND)
        )
        nil
    )

    #_method
    (defn- #_"void" CaseExpr''emitExprForInts [#_"CaseExpr" this, #_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Type" exprType, #_"Label" defaultLabel]
        (cond (nil? exprType)
            (do
                (when *warn-on-reflection*
                    (.println *err*, (str "Performance warning, line " (:line this) " - case has int tests, but tested expression is not primitive."))
                )
                (Expr'''emit (:expr this), :Context'EXPRESSION, objx, gen)
                (.instanceOf gen, (Type/getType Number))
                (.ifZCmp gen, GeneratorAdapter/EQ, defaultLabel)
                (Expr'''emit (:expr this), :Context'EXPRESSION, objx, gen)
                (.checkCast gen, (Type/getType Number))
                (.invokeVirtual gen, (Type/getType Number), (Method/getMethod "int intValue()"))
                (CaseExpr''emitShiftMask this, gen)
            )
            (or (= exprType Type/LONG_TYPE) (= exprType Type/INT_TYPE) (= exprType Type/SHORT_TYPE) (= exprType Type/BYTE_TYPE))
            (do
                (MaybePrimitive'''emitUnboxed (:expr this), :Context'EXPRESSION, objx, gen)
                (.cast gen, exprType, Type/INT_TYPE)
                (CaseExpr''emitShiftMask this, gen)
            )
            :else
            (do
                (.goTo gen, defaultLabel)
            )
        )
        nil
    )

    (defn- #_"void" CaseExpr'emitExpr [#_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Expr" expr, #_"boolean" emitUnboxed]
        (if (and emitUnboxed (satisfies? MaybePrimitive expr))
            (MaybePrimitive'''emitUnboxed expr, :Context'EXPRESSION, objx, gen)
            (Expr'''emit expr, :Context'EXPRESSION, objx, gen)
        )
        nil
    )

    #_method
    (defn- #_"void" CaseExpr''emitThenForInts [#_"CaseExpr" this, #_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Type" exprType, #_"Expr" test, #_"Expr" then, #_"Label" defaultLabel, #_"boolean" emitUnboxed]
        (cond (nil? exprType)
            (do
                (Expr'''emit (:expr this), :Context'EXPRESSION, objx, gen)
                (Expr'''emit test, :Context'EXPRESSION, objx, gen)
                (.invokeStatic gen, (Type/getType Util), (Method/getMethod "boolean equiv(Object, Object)"))
                (.ifZCmp gen, GeneratorAdapter/EQ, defaultLabel)
                (CaseExpr'emitExpr objx, gen, then, emitUnboxed)
            )
            (= exprType Type/LONG_TYPE)
            (do
                (MaybePrimitive'''emitUnboxed test, :Context'EXPRESSION, objx, gen)
                (MaybePrimitive'''emitUnboxed (:expr this), :Context'EXPRESSION, objx, gen)
                (.ifCmp gen, Type/LONG_TYPE, GeneratorAdapter/NE, defaultLabel)
                (CaseExpr'emitExpr objx, gen, then, emitUnboxed)
            )
            (or (= exprType Type/INT_TYPE) (= exprType Type/SHORT_TYPE) (= exprType Type/BYTE_TYPE))
            (do
                (when (CaseExpr''isShiftMasked this)
                    (MaybePrimitive'''emitUnboxed test, :Context'EXPRESSION, objx, gen)
                    (MaybePrimitive'''emitUnboxed (:expr this), :Context'EXPRESSION, objx, gen)
                    (.cast gen, exprType, Type/LONG_TYPE)
                    (.ifCmp gen, Type/LONG_TYPE, GeneratorAdapter/NE, defaultLabel)
                )
                (CaseExpr'emitExpr objx, gen, then, emitUnboxed)
            )
            :else
            (do
                (.goTo gen, defaultLabel)
            )
        )
        nil
    )

    #_method
    (defn- #_"void" CaseExpr''emitExprForHashes [#_"CaseExpr" this, #_"IopObject" objx, #_"GeneratorAdapter" gen]
        (Expr'''emit (:expr this), :Context'EXPRESSION, objx, gen)
        (.invokeStatic gen, (Type/getType Util), (Method/getMethod "int hash(Object)"))
        (CaseExpr''emitShiftMask this, gen)
        nil
    )

    #_method
    (defn- #_"void" CaseExpr''emitThenForHashes [#_"CaseExpr" this, #_"IopObject" objx, #_"GeneratorAdapter" gen, #_"Expr" test, #_"Expr" then, #_"Label" defaultLabel, #_"boolean" emitUnboxed]
        (Expr'''emit (:expr this), :Context'EXPRESSION, objx, gen)
        (Expr'''emit test, :Context'EXPRESSION, objx, gen)
        (if (= (:testType this) :hash-identity)
            (do
                (.visitJumpInsn gen, Opcodes/IF_ACMPNE, defaultLabel)
            )
            (do
                (.invokeStatic gen, (Type/getType Util), (Method/getMethod "boolean equiv(Object, Object)"))
                (.ifZCmp gen, GeneratorAdapter/EQ, defaultLabel)
            )
        )
        (CaseExpr'emitExpr objx, gen, then, emitUnboxed)
        nil
    )

    #_method
    (defn- #_"void" CaseExpr''doEmit [#_"CaseExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen, #_"boolean" emitUnboxed]
        (let [#_"Label" defaultLabel (.newLabel gen) #_"Label" endLabel (.newLabel gen)
              #_"SortedMap<Integer, Label>" labels (TreeMap.) _ (doseq [#_"Integer" i (.keySet (:tests this))] (.put labels, i, (.newLabel gen)))]
            (.visitLineNumber gen, (:line this), (.mark gen))
            (let [#_"Class" primExprClass (Compiler'maybePrimitiveType (:expr this))
                  #_"Type" primExprType (when (some? primExprClass) (Type/getType primExprClass))]
                (if (= (:testType this) :int)
                    (CaseExpr''emitExprForInts this, objx, gen, primExprType, defaultLabel)
                    (CaseExpr''emitExprForHashes this, objx, gen)
                )
                (if (= (:switchType this) :sparse)
                    (let [#_"Label[]" la (make-array Label (count labels)) la (.toArray (.values labels), la)]
                        (.visitLookupSwitchInsn gen, defaultLabel, (Numbers/int_array (.keySet (:tests this))), la)
                    )
                    (let [#_"Label[]" la (make-array Label (inc (- (:high this) (:low this))))]
                        (loop-when-recur [#_"int" i (:low this)] (<= i (:high this)) [(inc i)]
                            (aset la (- i (:low this)) (if (contains? labels i) (get labels i) defaultLabel))
                        )
                        (.visitTableSwitchInsn gen, (:low this), (:high this), defaultLabel, la)
                    )
                )
                (doseq [#_"Integer" i (.keySet labels)]
                    (.mark gen, (get labels i))
                    (cond
                        (= (:testType this) :int)
                            (CaseExpr''emitThenForInts this, objx, gen, primExprType, (get (:tests this) i), (get (:thens this) i), defaultLabel, emitUnboxed)
                        (= (contains? (:skipCheck this) i) true)
                            (CaseExpr'emitExpr objx, gen, (get (:thens this) i), emitUnboxed)
                        :else
                            (CaseExpr''emitThenForHashes this, objx, gen, (get (:tests this) i), (get (:thens this) i), defaultLabel, emitUnboxed)
                    )
                    (.goTo gen, endLabel)
                )
                (.mark gen, defaultLabel)
                (CaseExpr'emitExpr objx, gen, (:defaultExpr this), emitUnboxed)
                (.mark gen, endLabel)
                (when (= context :Context'STATEMENT)
                    (.pop gen)
                )
            )
        )
        nil
    )

    (extend-type CaseExpr Expr
        (#_"Object" Expr'''eval [#_"CaseExpr" this]
            (throw! "can't eval case")
        )

        (#_"void" Expr'''emit [#_"CaseExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (CaseExpr''doEmit this, context, objx, gen, false)
            nil
        )

        (#_"Class" Expr'''getClass [#_"CaseExpr" this]
            (:returnType this)
        )
    )

    (extend-type CaseExpr MaybePrimitive
        (#_"boolean" MaybePrimitive'''canEmitPrimitive [#_"CaseExpr" this]
            (Reflector'isPrimitive (:returnType this))
        )

        (#_"void" MaybePrimitive'''emitUnboxed [#_"CaseExpr" this, #_"Context" context, #_"IopObject" objx, #_"GeneratorAdapter" gen]
            (CaseExpr''doEmit this, context, objx, gen, true)
            nil
        )
    )
)

(class-ns CaseParser
    (defn #_"IParser" CaseParser'new []
        (reify IParser
            ;; (case* expr shift mask default map<minhash, [test then]> table-type test-type skip-check?)
            ;; prepared by case macro and presumed correct
            ;; case macro binds actual expr in let so expr is always a local,
            ;; no need to worry about multiple evaluation
            #_override
            (#_"Expr" IParser'''parse [#_"IParser" _self, #_"Context" context, #_"ISeq" form]
                (if (= context :Context'EVAL)
                    (Compiler'analyze context, (list (list Compiler'FNONCE [] form)))
                    (let [#_"IPersistentVector" args (vec (next form))
                          #_"Object" exprForm (nth args 0)
                          #_"int" shift (.intValue (nth args 1))
                          #_"int" mask (.intValue (nth args 2))
                          #_"Object" defaultForm (nth args 3)
                          #_"Map" caseMap (nth args 4)
                          #_"Keyword" switchType (nth args 5)
                          #_"Keyword" testType (nth args 6)
                          #_"Set" skipCheck (when (< 7 (count args)) (nth args 7))
                          #_"ISeq" keys (keys caseMap)
                          #_"int" low (.intValue (first keys))
                          #_"int" high (.intValue (nth keys (dec (count keys))))
                          #_"LocalBindingExpr" testExpr (Compiler'analyze :Context'EXPRESSION, exprForm)
                          #_"SortedMap<Integer, Expr>" tests (TreeMap.)
                          #_"HashMap<Integer, Expr>" thens (HashMap.)
                          _ (doseq [#_"Map$Entry" e caseMap]
                                (let [#_"Integer" minhash (.intValue (key e)) #_"Object" pair (val e) ;; [test-val then-expr]
                                      #_"Expr" test
                                        (if (= testType :int)
                                            (NumberExpr'parse (.intValue (first pair)))
                                            (ConstantExpr'new (first pair))
                                        )
                                      #_"Expr" then (Compiler'analyze context, (second pair))]
                                    (.put tests, minhash, test)
                                    (.put thens, minhash, then)
                                )
                            )
                          #_"Expr" defaultExpr (Compiler'analyze context, (nth args 3))]
                        (CaseExpr'new *line*, testExpr, shift, mask, low, high, defaultExpr, tests, thens, switchType, testType, skipCheck)
                    )
                )
            )
        )
    )
)

(class-ns Compiler
    (def #_"IPersistentMap" Compiler'specials
        (hash-map
            'def                  (DefParser'new)
            'loop*                (LetParser'new)
            'recur                (RecurParser'new)
            'if                   (IfParser'new)
            'case*                (CaseParser'new)
            'let*                 (LetParser'new)
            'letfn*               (LetFnParser'new)
            'do                   (BodyParser'new)
            'fn*                  nil
            'quote                (ConstantParser'new)
            'var                  (TheVarParser'new)
            'clojure.core/import* (ImportParser'new)
            '.                    (HostParser'new)
            'set!                 (AssignParser'new)
            'deftype*             (DeftypeParser'new)
            'reify*               (ReifyParser'new)
            'try                  (TryParser'new)
            'throw                (ThrowParser'new)
            'monitor-enter        (MonitorEnterParser'new)
            'monitor-exit         (MonitorExitParser'new)
            'catch                nil
            'finally              nil
            'new                  (NewParser'new)
            '&                    nil
        )
    )

    (defn #_"Object" Compiler'macroexpand1 [#_"Object" form]
        (when (instance? ISeq form) => form
            (let-when [#_"Object" op (first form)] (not (Compiler'isSpecial op)) => form
                (let-when [#_"Var" v (Compiler'isMacro op)] (nil? v) => (apply v form *local-env* (next form)) ;; macro expansion
                    (when (symbol? op) => form
                        (let [#_"String" n (ßname op)]
                            ;; (.substring s 2 5) => (. s substring 2 5)
                            (cond
                                (= (.charAt n, 0) \.)
                                    (when (< 1 (count form)) => (throw! "malformed member expression, expecting (.member target ...)")
                                        (let [#_"Object" target (second form)
                                              target
                                                (when (some? (Interop'maybeClass target, false)) => target
                                                    (with-meta (list 'clojure.core/identity target) {:tag 'Class})
                                                )]
                                            (Compiler'preserveTag form, (list* '. target (symbol (.substring n, 1)) (next (next form))))
                                        )
                                    )
                                (Compiler'namesStaticMember op)
                                    (let-when [#_"Symbol" target (symbol (ßns op))] (some? (Interop'maybeClass target, false)) => form
                                        (Compiler'preserveTag form, (list* '. target (symbol n) (next form)))
                                    )
                                :else
                                    ;; (s.substring ...) => (. s substring ...)
                                    ;; (package.class.name ...) => (. package.class name ...)
                                    ;; (StringBuilder. ...) => (new StringBuilder ...)
                                    (let-when [#_"int" i (.lastIndexOf n, (int \.))] (= i (dec (.length n))) => form
                                        (list* 'new (symbol (.substring n, 0, i)) (next form))
                                    )
                            )
                        )
                    )
                )
            )
        )
    )

    (defn #_"Object" Compiler'macroexpand [#_"Object" form]
        (let [#_"Object" f (Compiler'macroexpand1 form)]
            (if (= f form) form (recur f))
        )
    )

    (defn- #_"Expr" Compiler'analyzeSymbol [#_"Symbol" sym]
        (let [#_"Symbol" tag (Compiler'tagOf sym)]
            (or
                (cond
                    (nil? (ßns sym)) ;; ns-qualified syms are always Vars
                        (when-let [#_"LocalBinding" b (Compiler'referenceLocal sym)]
                            (LocalBindingExpr'new b, tag)
                        )
                    (nil? (Compiler'namespaceFor sym))
                        (when-let [#_"Class" c (Interop'maybeClass (symbol (ßns sym)), false)]
                            (when (some? (Reflector'getField c, (ßname sym), true)) => (throw! (str "unable to find static field: " (ßname sym) " in " c))
                                (StaticFieldExpr'new *line*, c, (ßname sym), tag)
                            )
                        )
                )
                (let [#_"Object" o (Compiler'resolve sym)]
                    (cond
                        (var? o)
                            (when (nil? (Compiler'isMacro o)) => (throw! (str "can't take value of a macro: " o))
                                (Compiler'registerVar o)
                                (VarExpr'new o, tag)
                            )
                        (class? o)
                            (ConstantExpr'new o)
                        (symbol? o)
                            (UnresolvedVarExpr'new o)
                        :else
                            (throw! (str "unable to resolve symbol: " sym " in this context"))
                    )
                )
            )
        )
    )

    (defn- #_"KeywordExpr" Compiler'registerKeyword [#_"Keyword" k]
        (when (bound? #'*keywords*)
            (let-when [#_"IPersistentMap" m *keywords*] (nil? (get m k))
                (set! *keywords* (assoc m k (Compiler'registerConstant k)))
            )
        )
        (KeywordExpr'new k)
    )

    (defn- #_"Expr" Compiler'analyzeSeq [#_"Context" context, #_"ISeq" form, #_"String" name]
        (let [#_"IPersistentMap" meta (meta form)]
            (binding [*line* (if (contains? meta :line) (get meta :line) *line*)]
                (let-when [#_"Object" me (Compiler'macroexpand1 form)] (= me form) => (Compiler'analyze context, me, name)
                    (let-when [#_"Object" op (first form)] (some? op) => (throw! (str "can't call nil, form: " form))
                        (let [#_"IFn" inline (Compiler'isInline op, (count (next form)))]
                            (cond
                                (some? inline)
                                    (Compiler'analyze context, (Compiler'preserveTag form, (.applyTo inline, (next form))))
                                (= op 'fn*)
                                    (FnExpr'parse context, form, name)
                                :else
                                    (let [#_"IParser" p (get Compiler'specials op)]
                                        (if (some? p)
                                            (IParser'''parse p, context, form)
                                            (InvokeExpr'parse context, form)
                                        )
                                    )
                            )
                        )
                    )
                )
            )
        )
    )

    (defn #_"Expr" Compiler'analyze
        ([#_"Context" context, #_"Object" form] (Compiler'analyze context, form, nil))
        ([#_"Context" context, #_"Object" form, #_"String" name]
            (let [form
                    (when (instance? LazySeq form) => form
                        (with-meta (or (seq form) ()) (meta form))
                    )]
                (case form
                    nil                                    Compiler'NIL_EXPR
                    true                                   Compiler'TRUE_EXPR
                    false                                  Compiler'FALSE_EXPR
                    (cond
                        (symbol? form)                     (Compiler'analyzeSymbol form)
                        (keyword? form)                    (Compiler'registerKeyword form)
                        (number? form)                     (NumberExpr'parse form)
                        (string? form)                     (StringExpr'new (.intern form))
                        (and (instance? IPersistentCollection form) (not (instance? IType form)) (zero? (count form)))
                            (let-when [#_"Expr" e (EmptyExpr'new form)] (some? (meta form)) => e
                                (MetaExpr'new e, (MapExpr'parse (if (= context :Context'EVAL) context :Context'EXPRESSION), (meta form)))
                            )
                        (instance? ISeq form)              (Compiler'analyzeSeq context, form, name)
                        (instance? IPersistentVector form) (VectorExpr'parse context, form)
                        (instance? IPersistentMap form)    (MapExpr'parse context, form)
                        (instance? IPersistentSet form)    (SetExpr'parse context, form)
                        :else                              (ConstantExpr'new form)
                    )
                )
            )
        )
    )

    (defn #_"ClassLoader" Compiler'baseLoader []
        (if (bound? #'*class-loader*)
            *class-loader*
            (.getContextClassLoader (Thread/currentThread))
        )
    )

    (defn #_"ClassLoader" Compiler'makeClassLoader []
        (cast ClassLoader
            (AccessController/doPrivileged
                (reify PrivilegedAction
                    #_foreign
                    (#_"Object" run [#_"PrivilegedAction" _self]
                        (DynamicClassLoader. (Compiler'baseLoader))
                    )
                )
            )
        )
    )

    (defn #_"Object" Compiler'eval [#_"Object" form]
        (let [#_"IPersistentMap" meta (meta form)]
            (binding [*class-loader* (Compiler'makeClassLoader), *line* (if (contains? meta :line) (get meta :line) *line*)]
                (let [form (Compiler'macroexpand form)]
                    (cond
                        (and (instance? ISeq form) (= (first form) 'do))
                            (loop-when-recur [#_"ISeq" s (next form)] (some? (next s)) [(next s)] => (Compiler'eval (first s))
                                (Compiler'eval (first s))
                            )
                        (or (instance? IType form) (and (instance? IPersistentCollection form) (not (and (symbol? (first form)) (.startsWith (ßname (first form)), "def")))))
                            (let [#_"IopObject" fexpr (Compiler'analyze :Context'EXPRESSION, (list 'fn* [] form), (str "eval" (RT/nextID)))]
                                (.invoke (Expr'''eval fexpr))
                            )
                        :else
                            (let [#_"Expr" expr (Compiler'analyze :Context'EVAL, form)]
                                (Expr'''eval expr)
                            )
                    )
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.LispReader

(class-ns LispReader
    (def #_"Var" ^:dynamic *arg-env*   ) ;; sorted-map num->gensymbol
    (def #_"Var" ^:dynamic *gensym-env*) ;; symbol->gensymbol

    (defn #_"Symbol" LispReader'garg [#_"int" n]
        (symbol (str (if (= n -1) "rest" (str "p" n)) "__" (RT/nextID) "#"))
    )

    (defn #_"Symbol" LispReader'registerArg [#_"int" n]
        (when (bound? #'*arg-env*) => (throw! "arg literal not in #()")
            (or (get *arg-env* n)
                (let [#_"Symbol" sym (LispReader'garg n)]
                    (update! *arg-env* assoc n sym)
                    sym
                )
            )
        )
    )

    (defn #_"Symbol" LispReader'registerGensym [#_"Symbol" sym]
        (when (bound? #'*gensym-env*) => (throw! "gensym literal not in syntax-quote")
            (or (get *gensym-env* sym)
                (let [#_"Symbol" gsym (symbol (str (ßname sym) "__" (RT/nextID) "__auto__"))]
                    (update! *gensym-env* assoc sym gsym)
                    gsym
                )
            )
        )
    )

    (declare LispReader'macros)

    (defn- #_"boolean" LispReader'isMacro [#_"char" ch]
        (contains? LispReader'macros ch)
    )

    (defn- #_"boolean" LispReader'isTerminatingMacro [#_"char" ch]
        (and (LispReader'isMacro ch) (not (any = ch \# \' \%)))
    )

    (defn #_"boolean" LispReader'isDigit [#_"char" ch, #_"int" base]
        (not= (Character/digit ch, base) -1)
    )

    (defn #_"boolean" LispReader'isWhitespace [#_"char" ch]
        (or (Character/isWhitespace ch) (= ch \,))
    )

    (defn #_"Character" LispReader'read1 [#_"Reader" r]
        (let [#_"int" c (.read r)]
            (when-not (= c -1)
                (char c)
            )
        )
    )

    (defn #_"void" LispReader'unread [#_"PushbackReader" r, #_"Character" ch]
        (when (some? ch)
            (.unread r, (int ch))
        )
        nil
    )

    (defn- #_"void" LispReader'consumeWhitespaces [#_"PushbackReader" r]
        (loop-when-recur [#_"char" ch (LispReader'read1 r)] (LispReader'isWhitespace ch) [(LispReader'read1 r)] => (LispReader'unread r, ch))
        nil
    )

    (def- #_"Pattern" LispReader'rxInteger #"([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?")
    (def- #_"Pattern" LispReader'rxFloat   #"([-+]?[0-9]+(\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?")
    (def- #_"Pattern" LispReader'rxRatio   #"([-+]?[0-9]+)/([0-9]+)")

    (defn- #_"Object" LispReader'matchNumber [#_"String" s]
        (let [_ (or
                    (let-when [#_"Matcher" m (.matcher LispReader'rxInteger, s)] (.matches m)
                        (if (some? (.group m, 2))
                            (if (some? (.group m, 8))
                                BigInt/ZERO
                                (Numbers/num #_"-1l" 0)
                            )
                            (let [[#_"String" n #_"int" radix]
                                    (cond-let
                                        [n (.group m, 3)] [n 10]
                                        [n (.group m, 4)] [n 16]
                                        [n (.group m, 5)] [n 8]
                                        [n (.group m, 7)] [n (Integer/parseInt (.group m, 6))]
                                    )]
                                (when (some? n) => :nil
                                    (let [#_"BigInteger" bn (BigInteger. n, radix) bn (if (= (.group m, 1) "-") (.negate bn) bn)]
                                        (cond
                                            (some? (.group m, 8))  (BigInt/fromBigInteger bn)
                                            (< (.bitLength bn) 64) (Numbers/num #_"-1l" (.longValue bn))
                                            :else                  (BigInt/fromBigInteger bn)
                                        )
                                    )
                                )
                            )
                        )
                    )
                    (let-when [#_"Matcher" m (.matcher LispReader'rxFloat, s)] (.matches m)
                        (if (some? (.group m, 4))
                            (BigDecimal. (.group m, 1))
                            (Double/parseDouble s)
                        )
                    )
                    (let-when [#_"Matcher" m (.matcher LispReader'rxRatio, s)] (.matches m)
                        (let [#_"String" n (.group m, 1) n (if (.startsWith n, "+") (.substring n, 1) n)]
                            (Numbers/divide #_"-2oo"
                                (Numbers/reduceBigInt (BigInt/fromBigInteger (BigInteger. n))),
                                (Numbers/reduceBigInt (BigInt/fromBigInteger (BigInteger. (.group m, 2))))
                            )
                        )
                    )
                )]
            (when-not (= _ :nil) _)
        )
    )

    (defn- #_"Object" LispReader'readNumber [#_"PushbackReader" r, #_"char" ch]
        (let [#_"String" s
                (let [#_"StringBuilder" sb (StringBuilder.) _ (.append sb, ch)]
                    (loop []
                        (let [ch (LispReader'read1 r)]
                            (if (or (nil? ch) (LispReader'isWhitespace ch) (LispReader'isMacro ch))
                                (do
                                    (LispReader'unread r, ch)
                                    (.toString sb)
                                )
                                (do
                                    (.append sb, ch)
                                    (recur)
                                )
                            )
                        )
                    )
                )]
            (or (LispReader'matchNumber s) (throw! (str "invalid number: " s)))
        )
    )

    (defn- #_"String" LispReader'readToken [#_"PushbackReader" r, #_"char" ch]
        (let [#_"StringBuilder" sb (StringBuilder.) _ (.append sb, ch)]
            (loop []
                (let [ch (LispReader'read1 r)]
                    (if (or (nil? ch) (LispReader'isWhitespace ch) (LispReader'isTerminatingMacro ch))
                        (do
                            (LispReader'unread r, ch)
                            (.toString sb)
                        )
                        (do
                            (.append sb, ch)
                            (recur)
                        )
                    )
                )
            )
        )
    )

    (def- #_"Pattern" LispReader'rxSymbol #"[:]?([\D&&[^/]].*/)?(/|[\D&&[^/]][^/]*)")

    (defn- #_"Object" LispReader'matchSymbol [#_"String" s]
        (let-when [#_"Matcher" m (.matcher LispReader'rxSymbol, s)] (.matches m)
            (let [#_"String" ns (.group m, 1) #_"String" n (.group m, 2)]
                (cond
                    (or (and (some? ns) (.endsWith ns, ":/")) (.endsWith n, ":") (not= (.indexOf s, "::", 1) -1))
                        nil
                    (.startsWith s, "::")
                        (let [#_"Symbol" ks (symbol (.substring s, 2))
                              #_"Namespace" kns (if (some? (ßns ks)) (.lookupAlias *ns*, (symbol (ßns ks))) *ns*)]
                            ;; auto-resolving keyword
                            (when (some? kns)
                                (keyword (ßname (ßname kns)) (ßname ks))
                            )
                        )
                    :else
                        (let [#_"boolean" kw? (= (.charAt s, 0) \:) #_"Symbol" sym (symbol (.substring s, (if kw? 1 0)))]
                            (if kw? (keyword sym) sym)
                        )
                )
            )
        )
    )

    (defn- #_"Object" LispReader'interpretToken [#_"String" s]
        (case s "nil" nil "true" true "false" false
            (or (LispReader'matchSymbol s) (throw! (str "invalid token: " s)))
        )
    )

    (defn #_"Object" LispReader'read
        ([#_"PushbackReader" r] (LispReader'read r, true, nil))
        ([#_"PushbackReader" r, #_"boolean" eofIsError, #_"Object" eofValue] (LispReader'read r, eofIsError, eofValue, nil, nil))
        ([#_"PushbackReader" r, #_"boolean" eofIsError, #_"Object" eofValue, #_"Character" returnOn, #_"Object" returnOnValue]
            (loop []
                (let [#_"char" ch (loop-when-recur [ch (LispReader'read1 r)] (LispReader'isWhitespace ch) [(LispReader'read1 r)] => ch)]
                    (cond
                        (nil? ch)
                            (if eofIsError (throw! "EOF while reading") eofValue)
                        (and (some? returnOn) (= returnOn ch))
                            returnOnValue
                        (LispReader'isDigit ch, 10)
                            (LispReader'readNumber r, ch)
                        :else
                            (let [#_"IFn" fn (get LispReader'macros ch)]
                                (if (some? fn)
                                    (let [#_"Object" o (.invoke fn, r, ch)]
                                        ;; no op macros return the reader
                                        (recur-if (identical? o r) [] => o)
                                    )
                                    (do
                                        (when (any = ch \+ \-)
                                            (let [#_"char" ch2 (LispReader'read1 r)]
                                                (when (LispReader'isDigit ch2, 10)
                                                    (LispReader'unread r, ch2)
                                                    (ß return (LispReader'readNumber r, ch))
                                                )
                                                (LispReader'unread r, ch2)
                                            )
                                        )
                                        (LispReader'interpretToken (LispReader'readToken r, ch))
                                    )
                                )
                            )
                    )
                )
            )
        )
    )

    (defn- #_"int" LispReader'scanDigits [#_"String" token, #_"int" offset, #_"int" n, #_"int" base]
        (when (= (+ offset n) (.length token)) => (throw! (str "invalid unicode character: \\" token))
            (loop-when [#_"int" c 0 #_"int" i 0] (< i n) => c
                (let [#_"char" ch (.charAt token, (+ offset i)) #_"int" d (Character/digit ch, base)]
                    (when-not (= d -1) => (throw! (str "invalid digit: " ch))
                        (recur (+ (* c base) d) (inc i))
                    )
                )
            )
        )
    )

    (defn- #_"int" LispReader'readDigits [#_"PushbackReader" r, #_"char" ch, #_"int" base, #_"int" n, #_"boolean" exact?]
        (let-when-not [#_"int" c (Character/digit ch, base)] (= c -1) => (throw! (str "invalid digit: " ch))
            (let [[c #_"int" i]
                    (loop-when [c c i 1] (< i n) => [c i]
                        (let [ch (LispReader'read1 r)]
                            (if (or (nil? ch) (LispReader'isWhitespace ch) (LispReader'isMacro ch))
                                (do
                                    (LispReader'unread r, ch)
                                    [c i]
                                )
                                (let [#_"int" d (Character/digit ch, base)]
                                    (when-not (= d -1) => (throw! (str "invalid digit: " ch))
                                        (recur (+ (* c base) d) (inc i))
                                    )
                                )
                            )
                        )
                    )]
                (when (or (= i n) (not exact?)) => (throw! (str "invalid character length: " i ", should be: " n))
                    c
                )
            )
        )
    )

    (def- #_"Object" LispReader'READ_EOF (Object.))
    (def- #_"Object" LispReader'READ_FINISHED (Object.))

    (defn #_"PersistentVector" LispReader'readDelimitedForms [#_"PushbackReader" r, #_"char" delim]
        (loop [#_"PersistentVector" v []]
            (let [#_"Object" form (LispReader'read r, false, LispReader'READ_EOF, delim, LispReader'READ_FINISHED)]
                (condp identical? form
                    LispReader'READ_EOF
                        (throw! "EOF while reading")
                    LispReader'READ_FINISHED
                        v
                    (recur (conj v form))
                )
            )
        )
    )
)

(class-ns RegexReader
    (defn #_"Object" regex-reader [#_"PushbackReader" r, #_"char" _delim]
        (let [#_"StringBuilder" sb (StringBuilder.)]
            (loop []
                (let-when [#_"char" ch (LispReader'read1 r)] (some? ch) => (throw! "EOF while reading regex")
                    (when-not (= ch \") ;; oops! "
                        (.append sb, ch)
                        (when (= ch \\) ;; escape
                            (let-when [ch (LispReader'read1 r)] (some? ch) => (throw! "EOF while reading regex")
                                (.append sb, ch)
                            )
                        )
                        (recur)
                    )
                )
            )
            (Pattern/compile (.toString sb))
        )
    )
)

(class-ns StringReader
    (defn- #_"char" StringReader'escape [#_"PushbackReader" r]
        (let-when [#_"char" ch (LispReader'read1 r)] (some? ch) => (throw! "EOF while reading string")
            (case ch
                \t  \tab
                \r  \return
                \n  \newline
                \\  ch
                \"  ch ;; oops! "
                \b  \backspace
                \f  \formfeed
                \u  (let [ch (LispReader'read1 r)]
                        (when (LispReader'isDigit ch, 16) => (throw! (str "invalid unicode escape: \\u" ch))
                            (char (LispReader'readDigits r, ch, 16, 4, true))
                        )
                    )
                (when (LispReader'isDigit ch, #_8 4) => (throw! (str "unsupported escape character: \\" ch))
                    (let [#_"int" c (LispReader'readDigits r, ch, 8, 3, false)]
                      #_(when (< 0377 c)
                            (throw! "octal escape sequence must be in range [0, 377]")
                        )
                        (char c)
                    )
                )
            )
        )
    )

    (defn #_"Object" string-reader [#_"PushbackReader" r, #_"char" _delim]
        (let [#_"StringBuilder" sb (StringBuilder.)]
            (loop []
                (let-when [#_"char" ch (LispReader'read1 r)] (some? ch) => (throw! "EOF while reading string")
                    (when-not (= ch \") ;; oops! "
                        (.append sb, (if (= ch \\) (StringReader'escape r) ch))
                        (recur)
                    )
                )
            )
            (.toString sb)
        )
    )
)

(class-ns CommentReader
    (defn #_"Object" comment-reader [#_"PushbackReader" r, #_"char" _delim]
        (while (not (any = (LispReader'read1 r) nil \newline \return)))
        r
    )
)

(class-ns DiscardReader
    (defn #_"Object" discard-reader [#_"PushbackReader" r, #_"char" _delim]
        (LispReader'read r)
        r
    )
)

(class-ns SymbolicValueReader
    (def #_"IPersistentMap" SymbolicValueReader'specials
        (hash-map
            'Inf  Double/POSITIVE_INFINITY
            '-Inf Double/NEGATIVE_INFINITY
            'NaN  Double/NaN
        )
    )

    (defn #_"Object" symbolic-value-reader [#_"PushbackReader" r, #_"char" _delim]
        (let-when [#_"Object" o (LispReader'read r)] (symbol? o) => (throw! (str "invalid token: ##" o))
            (when (contains? SymbolicValueReader'specials o) => (throw! (str "unknown symbolic value: ##" o))
                (get SymbolicValueReader'specials o)
            )
        )
    )
)

(class-ns QuoteReader
    (defn #_"Object" quote-reader [#_"PushbackReader" r, #_"char" _delim]
        (list 'quote (LispReader'read r))
    )
)

(class-ns DerefReader
    (defn #_"Object" deref-reader [#_"PushbackReader" r, #_"char" _delim]
        (list 'clojure.core/deref (LispReader'read r))
    )
)

(class-ns VarReader
    (defn #_"Object" var-reader [#_"PushbackReader" r, #_"char" _delim]
        (list 'var (LispReader'read r))
    )
)

(class-ns DispatchReader
    (declare LispReader'dispatchMacros)

    (defn #_"Object" dispatch-reader [#_"PushbackReader" r, #_"char" _delim]
        (let-when [#_"char" ch (LispReader'read1 r)] (some? ch) => (throw! "EOF while reading character")
            (let-when [#_"IFn" fn (get LispReader'dispatchMacros ch)] (nil? fn) => (.invoke fn, r, ch)
                (LispReader'unread r, ch)
                (throw! (str "no dispatch macro for: " ch))
            )
        )
    )
)

(class-ns FnReader
    (defn #_"Object" fn-reader [#_"PushbackReader" r, #_"char" _delim]
        (when-not (bound? #'*arg-env*) => (throw! "nested #()s are not allowed")
            (binding [*arg-env* (sorted-map)]
                (LispReader'unread r, \()
                (let [#_"PersistentVector" args []
                      args
                        (let-when [#_"ISeq" rs (rseq *arg-env*)] (some? rs) => args
                            (let [args
                                    (let-when [#_"int" n (key (first rs))] (pos? n) => args
                                        (loop-when-recur [args args #_"int" i 1]
                                                         (<= i n)
                                                         [(conj args (or (get *arg-env* i) (LispReader'garg i))) (inc i)]
                                                      => args
                                        )
                                    )]
                                (let-when [#_"Object" rest (get *arg-env* -1)] (some? rest) => args
                                    (conj args '& rest)
                                )
                            )
                        )]
                    (list 'fn* args (LispReader'read r))
                )
            )
        )
    )
)

(class-ns ArgReader
    (defn #_"Object" arg-reader [#_"PushbackReader" r, #_"char" _delim]
        (when (bound? #'*arg-env*) => (LispReader'interpretToken (LispReader'readToken r, \%))
            (let [#_"char" ch (LispReader'read1 r) _ (LispReader'unread r, ch)]
                ;; % alone is first arg
                (if (or (nil? ch) (LispReader'isWhitespace ch) (LispReader'isTerminatingMacro ch))
                    (LispReader'registerArg 1)
                    (let [#_"Object" n (LispReader'read r)]
                        (cond
                            (= n '&)    (LispReader'registerArg -1)
                            (number? n) (LispReader'registerArg (.intValue n))
                            :else       (throw! "arg literal must be %, %& or %integer")
                        )
                    )
                )
            )
        )
    )
)

(class-ns MetaReader
    (defn #_"Object" meta-reader [#_"PushbackReader" r, #_"char" _delim]
        (let [#_"Object" meta (LispReader'read r)
              meta
                (cond
                    (or (symbol? meta) (string? meta)) {:tag meta}
                    (keyword? meta)                         {meta true}
                    (instance? IPersistentMap meta)          meta
                    :else (throw! "metadata must be Symbol, Keyword, String or Map")
                )
              #_"Object" o (LispReader'read r)]
            (when (instance? IMeta o) => (throw! "metadata can only be applied to IMetas")
                (if (instance? IReference o)
                    (do
                        (reset-meta! o meta)
                        o
                    )
                    (let [#_"IPersistentMap" m
                            (loop-when [m (meta o) #_"ISeq" s (seq meta)] (some? s) => m
                                (let [#_"IMapEntry" e (first s)]
                                    (recur (assoc m (key e) (val e)) (next s))
                                )
                            )]
                        (with-meta o m)
                    )
                )
            )
        )
    )
)

(class-ns SyntaxQuoteReader
    (defn- #_"IPersistentVector" SyntaxQuoteReader'flattened [#_"IPersistentMap" m]
        (loop-when [#_"IPersistentVector" v [] #_"ISeq" s (seq m)] (some? s) => v
            (let [#_"IMapEntry" e (first s)]
                (recur (conj v (key e) (val e)) (next s))
            )
        )
    )

    (defn #_"boolean" SyntaxQuoteReader'isUnquote [#_"Object" form]
        (and (instance? ISeq form) (= (first form) 'clojure.core/unquote))
    )

    (defn #_"boolean" SyntaxQuoteReader'isUnquoteSplicing [#_"Object" form]
        (and (instance? ISeq form) (= (first form) 'clojure.core/unquote-splicing))
    )

    (declare SyntaxQuoteReader'syntaxQuote)

    (defn- #_"ISeq" SyntaxQuoteReader'sqExpandList [#_"ISeq" s]
        (loop-when [#_"PersistentVector" v [] s s] (some? s) => (seq v)
            (let [#_"Object" item (first s)
                  v (cond
                        (SyntaxQuoteReader'isUnquote item)         (conj v (list 'clojure.core/list (second item)))
                        (SyntaxQuoteReader'isUnquoteSplicing item) (conj v (second item))
                        :else                                      (conj v (list 'clojure.core/list (SyntaxQuoteReader'syntaxQuote item)))
                    )]
                (recur v (next s))
            )
        )
    )

    (defn #_"Object" SyntaxQuoteReader'syntaxQuote [#_"Object" form]
        (let [#_"Object" q
                (cond
                    (Compiler'isSpecial form)
                        (list 'quote form)
                    (symbol? form)
                        (let [#_"String" ns (ßns form) #_"String" n (ßname form)
                              form
                                (cond
                                    (and (nil? ns) (.endsWith n, "#"))
                                        (LispReader'registerGensym (symbol (.substring n, 0, (dec (.length n)))))
                                    (and (nil? ns) (.endsWith n, "."))
                                        (symbol (str (ßname (Compiler'resolveSymbol (symbol (.substring n, 0, (dec (.length n)))))) "."))
                                    (and (nil? ns) (.startsWith n, "."))
                                        form ;; simply quote method names
                                    :else
                                        (let-when [#_"Object" c (when (some? ns) (.getMapping *ns*, (symbol ns)))] (class? c) => (Compiler'resolveSymbol form)
                                            ;; Classname/foo -> package.qualified.Classname/foo
                                            (symbol (.getName c) n)
                                        )
                                )]
                            (list 'quote form)
                        )
                    (SyntaxQuoteReader'isUnquote form)
                        (ß return (second form))
                    (SyntaxQuoteReader'isUnquoteSplicing form)
                        (throw! "splice not in list")
                    (instance? IPersistentCollection form)
                        (cond
                            (instance? IPersistentMap form)
                                (list 'clojure.core/apply 'clojure.core/hash-map (list 'clojure.core/seq (cons 'clojure.core/concat (SyntaxQuoteReader'sqExpandList (seq (SyntaxQuoteReader'flattened form))))))
                            (instance? IPersistentVector form)
                                (list 'clojure.core/apply 'clojure.core/vector (list 'clojure.core/seq (cons 'clojure.core/concat (SyntaxQuoteReader'sqExpandList (seq form)))))
                            (instance? IPersistentSet form)
                                (list 'clojure.core/apply 'clojure.core/hash-set (list 'clojure.core/seq (cons 'clojure.core/concat (SyntaxQuoteReader'sqExpandList (seq form)))))
                            (or (instance? ISeq form) (instance? IPersistentList form))
                                (let-when [#_"ISeq" s (seq form)] (some? s) => (cons 'clojure.core/list nil)
                                    (list 'clojure.core/seq (cons 'clojure.core/concat (SyntaxQuoteReader'sqExpandList s)))
                                )
                            :else
                                (throw! "unknown collection type")
                        )
                    (or (keyword? form) (number? form) (char? form) (string? form))
                        form
                    :else
                        (list 'quote form)
                )]
            (when (and (instance? IObj form) (seq (dissoc (meta form) :line :column))) => q
                (list 'clojure.core/with-meta q (SyntaxQuoteReader'syntaxQuote (meta form)))
            )
        )
    )

    (defn #_"Object" syntax-quote-reader [#_"PushbackReader" r, #_"char" _delim]
        (binding [*gensym-env* {}]
            (SyntaxQuoteReader'syntaxQuote (LispReader'read r))
        )
    )
)

(class-ns UnquoteReader
    (defn #_"Object" unquote-reader [#_"PushbackReader" r, #_"char" _delim]
        (let-when [#_"char" ch (LispReader'read1 r)] (some? ch) => (throw! "EOF while reading character")
            (if (= ch \@)
                (list 'clojure.core/unquote-splicing (LispReader'read r))
                (do
                    (LispReader'unread r, ch)
                    (list 'clojure.core/unquote (LispReader'read r))
                )
            )
        )
    )
)

(class-ns CharacterReader
    (defn #_"Object" character-reader [#_"PushbackReader" r, #_"char" _delim]
        (let-when [#_"char" ch (LispReader'read1 r)] (some? ch) => (throw! "EOF while reading character")
            (let [#_"String" token (LispReader'readToken r, ch)]
                (when-not (= (.length token) 1) => (Character/valueOf (.charAt token, 0))
                    (case token
                        "newline"   \newline
                        "space"     \space
                        "tab"       \tab
                        "backspace" \backspace
                        "formfeed"  \formfeed
                        "return"    \return
                        (case (.charAt token, 0)
                            \u  (let [#_"int" c (LispReader'scanDigits token, 1, 4, 16)]
                                    (when (<= 0xd800 c 0xdfff) ;; surrogate code unit?
                                        (throw! (str "invalid character constant: \\u" (Integer/toString c, 16)))
                                    )
                                    (char c)
                                )
                            \o  (let [#_"int" n (dec (.length token))]
                                    (when (< 3 n)
                                        (throw! (str "invalid octal escape sequence length: " n))
                                    )
                                    (let [#_"int" c (LispReader'scanDigits token, 1, n, 8)]
                                        (when (< 0377 c)
                                            (throw! "octal escape sequence must be in range [0, 377]")
                                        )
                                        (char c)
                                    )
                                )
                            (throw! (str "unsupported character: \\" token))
                        )
                    )
                )
            )
        )
    )
)

(class-ns ListReader
    (defn #_"Object" list-reader [#_"PushbackReader" r, #_"char" _delim]
        (let-when [#_"PersistentVector" v (LispReader'readDelimitedForms r, \))] (seq v) => ()
            (PersistentList/create #_(.toArray v) v)
        )
    )
)

(class-ns VectorReader
    (defn #_"Object" vector-reader [#_"PushbackReader" r, #_"char" _delim]
        (#_"LazilyPersistentVector'create" identity (LispReader'readDelimitedForms r, \]))
    )
)

(class-ns MapReader
    (defn #_"Object" map-reader [#_"PushbackReader" r, #_"char" _delim]
        (let [#_"PersistentVector" v (LispReader'readDelimitedForms r, \})]
            (when (zero? (% (count v) 2)) => (throw! "map literal must contain an even number of forms")
                (RT/map (.toArray v))
            )
        )
    )
)

(class-ns SetReader
    (defn #_"Object" set-reader [#_"PushbackReader" r, #_"char" _delim]
        (PersistentHashSet/createWithCheck #_"-1i" (LispReader'readDelimitedForms r, \}))
    )
)

(class-ns UnmatchedDelimiterReader
    (defn #_"Object" unmatched-delimiter-reader [#_"PushbackReader" _r, #_"char" delim]
        (throw! (str "unmatched delimiter: " delim))
    )
)

(class-ns LispReader
    (def #_"{char IFn}" LispReader'macros
        (hash-map
            \"  string-reader ;; oops! "
            \;  comment-reader
            \'  quote-reader
            \@  deref-reader
            \^  meta-reader
            \`  syntax-quote-reader
            \~  unquote-reader
            \(  list-reader,    \) unmatched-delimiter-reader
            \[  vector-reader,  \] unmatched-delimiter-reader
            \{  map-reader,     \} unmatched-delimiter-reader
            \\  character-reader
            \%  arg-reader
            \#  dispatch-reader
        )
    )

    (def #_"{char IFn}" LispReader'dispatchMacros
        (hash-map
            \^  meta-reader
            \#  symbolic-value-reader
            \'  var-reader
            \"  regex-reader ;; oops! "
            \(  fn-reader
            \{  set-reader
            \!  comment-reader
            \_  discard-reader
        )
    )
)
)

(java-ns cloiure.lang.Compiler

(class-ns Compiler
    (defn #_"Object" Compiler'load [#_"Reader" reader]
        (let [#_"PushbackReader" r (if (instance? PushbackReader reader) reader (PushbackReader. reader))
              #_"Object" EOF (Object.)]
            (binding [*ns* *ns*, *warn-on-reflection* *warn-on-reflection*, *line* 0]
                (loop [#_"Object" val nil]
                    (LispReader'consumeWhitespaces r)
                    (let-when-not [#_"Object" form (LispReader'read r, false, EOF)] (identical? form EOF) => val
                        (recur
                            (binding [*last-unique-id*     -1
                                      *closes*             {}
                                      *no-recur*           false
                                      *in-catch-finally*   false
                                      *in-return-context*  false
                                      *compile-stub-sym*   nil
                                      *compile-stub-class* nil]
                                (Compiler'eval form)
                            )
                        )
                    )
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.Murmur3

;;;
 ; See http://smhasher.googlecode.com/svn/trunk/MurmurHash3.cpp
 ; MurmurHash3_x86_32
 ;
 ; @author Austin Appleby
 ; @author Dimitris Andreou
 ; @author Kurt Alfred Kluever
 ;;
(class-ns Murmur3
    (def- #_"int" Murmur3'seed 0)
    (def- #_"int" Murmur3'C1 0xcc9e2d51)
    (def- #_"int" Murmur3'C2 0x1b873593)

    (defn- #_"int" Murmur3'mixK1 [#_"int" k1]
        (-> k1 (* Murmur3'C1) (Integer/rotateLeft 15) (* Murmur3'C2))
    )

    (defn- #_"int" Murmur3'mixH1 [#_"int" h1, #_"int" k1]
        (-> h1 (bit-xor k1) (Integer/rotateLeft 13) (* 5) (+ 0xe6546b64))
    )

    ;; finalization mix - force all bits of a hash block to avalanche
    (defn- #_"int" Murmur3'fmix [#_"int" h1, #_"int" n]
        (let [h1 (bit-xor h1 n)    h1 (bit-xor h1 (>>> h1 16))
              h1 (* h1 0x85ebca6b) h1 (bit-xor h1 (>>> h1 13))
              h1 (* h1 0xc2b2ae35) h1 (bit-xor h1 (>>> h1 16))]
            h1
        )
    )

    (defn #_"int" Murmur3'hashInt [#_"int" input]
        (when-not (zero? input) => 0
            (let [#_"int" k1 (Murmur3'mixK1 input)
                  #_"int" h1 (Murmur3'mixH1 Murmur3'seed, k1)]
                (Murmur3'fmix h1, 4)
            )
        )
    )

    (defn #_"int" Murmur3'hashLong [#_"long" input]
        (when-not (zero? input) => 0
            (let [#_"int" low (int input)
                  #_"int" high (int (>>> input 32))
                  #_"int" k1 (Murmur3'mixK1 low)
                  #_"int" h1 (Murmur3'mixH1 Murmur3'seed, k1)
                  k1 (Murmur3'mixK1 high)
                  h1 (Murmur3'mixH1 h1, k1)]
                (Murmur3'fmix h1, 8)
            )
        )
    )

    (defn #_"int" Murmur3'hashUnencodedChars [#_"CharSequence" input]
        (let [#_"int" h1 ;; step through the input 2 chars at a time
                (loop-when [h1 Murmur3'seed #_"int" i 1] (< i (.length input)) => h1
                    (let [#_"int" k1 (| (.charAt input, (dec i)) (<< (.charAt input, i) 16))]
                        (recur (Murmur3'mixH1 h1, (Murmur3'mixK1 k1)) (+ i 2))
                    )
                )
              h1 ;; deal with any remaining characters
                (when (= (& (.length input) 1) 1) => h1
                    (let [#_"int" k1 (.charAt input, (dec (.length input)))]
                        (bit-xor h1 (Murmur3'mixK1 k1))
                    )
                )]
            (Murmur3'fmix h1, (* 2 (.length input)))
        )
    )

    (defn #_"int" Murmur3'mixCollHash [#_"int" hash, #_"int" n]
        (Murmur3'fmix (Murmur3'mixH1 Murmur3'seed, (Murmur3'mixK1 hash)), n)
    )

    (declare Util'hasheq)

    (defn #_"int" Murmur3'hashOrdered [#_"Iterable" xs]
        (let [#_"Iterator" it (.iterator xs)]
            (loop-when-recur [#_"int" hash 1 #_"int" n 0]
                             (.hasNext it)
                             [(+ (* 31 hash) (Util'hasheq (.next it))) (inc n)]
                          => (Murmur3'mixCollHash hash, n)
            )
        )
    )

    (defn #_"int" Murmur3'hashUnordered [#_"Iterable" xs]
        (let [#_"Iterator" it (.iterator xs)]
            (loop-when-recur [#_"int" hash 0 #_"int" n 0]
                             (.hasNext it)
                             [(+ hash (Util'hasheq (.next it))) (inc n)]
                          => (Murmur3'mixCollHash hash, n)
            )
        )
    )
)
)

(java-ns cloiure.lang.IFn
    ;;;
     ; IFn provides complete access to invoking any of Cloiure's APIs.
     ; You can also access any other library written in Cloiure, after
     ; adding either its source or compiled form to the classpath.
     ;;
    (§ soon interface! IFn [Callable Runnable]
        #_abstract
        (#_"Object" invoke [#_"IFn" this])
        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1])
        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2])
        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3])
        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4])
        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5])
        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6])
        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7])
        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8])

        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9])

        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10])

        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11])

        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12])

        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13])

        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14])

        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15])

        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16])

        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17])

        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18])

        #_abstract
        (#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19])

        #_abstract
    #_(#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20])

        #_abstract
    #_(#_"Object" invoke [#_"IFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" #_arg19, #_"Object" #_arg20 & #_"Object..." args])

        #_abstract
        (#_"Object" applyTo [#_"IFn" this, #_"ISeq" args])
    )
)

(java-ns cloiure.lang.Fn
    (interface! Fn []
    )
)

(java-ns cloiure.lang.Sequential
    (interface! Sequential []
    )
)

(java-ns cloiure.lang.Seqable
    (interface! Seqable []
        #_abstract
        (#_"ISeq" seq [#_"Seqable" this])
    )
)

(java-ns cloiure.lang.Reversible
    (interface! Reversible []
        #_abstract
        (#_"ISeq" rseq [#_"Reversible" this])
    )
)

(java-ns cloiure.lang.Sorted
    (interface! Sorted []
        #_abstract
        (#_"Comparator" comparator [#_"Sorted" this])
        #_abstract
        (#_"Object" entryKey [#_"Sorted" this, #_"Object" entry])
        #_abstract
        (#_"ISeq" seq [#_"Sorted" this, #_"boolean" ascending?])
        #_abstract
        (#_"ISeq" seqFrom [#_"Sorted" this, #_"Object" key, #_"boolean" ascending?])
    )
)

(java-ns cloiure.lang.Counted
    (interface! Counted []
        #_abstract
        (#_"int" count [#_"Counted" this])
    )
)

(java-ns cloiure.lang.IPersistentCollection
    (§ soon interface! IPersistentCollection [Seqable]
        #_abstract
        (#_"int" count [#_"IPersistentCollection" this])
        #_abstract
        (#_"IPersistentCollection" conj [#_"IPersistentCollection" this, #_"Object" o])
        #_abstract
        (#_"IPersistentCollection" empty [#_"IPersistentCollection" this])
        #_abstract
        (#_"boolean" equiv [#_"IPersistentCollection" this, #_"Object" o])
    )
)

(java-ns cloiure.lang.ISeq
    (§ soon interface! ISeq [IPersistentCollection]
        #_abstract
        (#_"Object" first [#_"ISeq" this])
        #_abstract
        (#_"ISeq" next [#_"ISeq" this])
        #_abstract
        (#_"ISeq" rest [#_"ISeq" this])
        #_abstract
        (#_"ISeq" cons [#_"ISeq" this, #_"Object" o])
    )
)

(java-ns cloiure.lang.IAtom
    (interface! IAtom []
        #_abstract
        (#_"Object" swap [#_"IAtom" this, #_"IFn" f])
        #_abstract
        (#_"Object" swap [#_"IAtom" this, #_"IFn" f, #_"Object" arg])
        #_abstract
        (#_"Object" swap [#_"IAtom" this, #_"IFn" f, #_"Object" arg1, #_"Object" arg2])
        #_abstract
        (#_"Object" swap [#_"IAtom" this, #_"IFn" f, #_"Object" x, #_"Object" y, #_"ISeq" args])
        #_abstract
        (#_"boolean" compareAndSet [#_"IAtom" this, #_"Object" oldv, #_"Object" newv])
        #_abstract
        (#_"Object" reset [#_"IAtom" this, #_"Object" newval])
    )
)

(java-ns cloiure.lang.IAtom2
    (interface! IAtom2 [IAtom]
        #_abstract
        (#_"IPersistentVector" swapVals [#_"IAtom2" this, #_"IFn" f])
        #_abstract
        (#_"IPersistentVector" swapVals [#_"IAtom2" this, #_"IFn" f, #_"Object" arg])
        #_abstract
        (#_"IPersistentVector" swapVals [#_"IAtom2" this, #_"IFn" f, #_"Object" arg1, #_"Object" arg2])
        #_abstract
        (#_"IPersistentVector" swapVals [#_"IAtom2" this, #_"IFn" f, #_"Object" x, #_"Object" y, #_"ISeq" args])
        #_abstract
        (#_"IPersistentVector" resetVals [#_"IAtom2" this, #_"Object" newv])
    )
)

(java-ns cloiure.lang.IDeref
    (interface! IDeref []
        #_abstract
        (#_"Object" deref [#_"IDeref" this])
    )
)

(java-ns cloiure.lang.IEditableCollection
    (interface! IEditableCollection []
        #_abstract
        (#_"ITransientCollection" asTransient [#_"IEditableCollection" this])
    )
)

(java-ns cloiure.lang.IHashEq
    (interface! IHashEq []
        #_abstract
        (#_"int" hasheq [#_"IHashEq" this])
    )
)

(java-ns cloiure.lang.MapEquivalence
    (interface! MapEquivalence []
    )
)

(java-ns cloiure.lang.ILookup
    (§ soon interface! ILookup []
        #_abstract
        (#_"Object" valAt [#_"ILookup" this, #_"Object" key])
        #_abstract
        (#_"Object" valAt [#_"ILookup" this, #_"Object" key, #_"Object" notFound])
    )
)

(java-ns cloiure.lang.ILookupSite
    (§ soon interface! ILookupSite []
        #_abstract
        (#_"ILookupThunk" fault [#_"ILookupSite" this, #_"Object" target])
    )
)

(java-ns cloiure.lang.ILookupThunk
    (§ soon interface! ILookupThunk []
        #_abstract
        (#_"Object" get [#_"ILookupThunk" this, #_"Object" target])
    )
)

(java-ns cloiure.lang.IMapEntry
    (§ soon interface! IMapEntry [Map$Entry]
        #_abstract
        (#_"Object" key [#_"IMapEntry" this])
        #_abstract
        (#_"Object" val [#_"IMapEntry" this])
    )
)

(java-ns cloiure.lang.IMapIterable
    (interface! IMapIterable []
        #_abstract
        (#_"Iterator" keyIterator [#_"IMapIterable" this])
        #_abstract
        (#_"Iterator" valIterator [#_"IMapIterable" this])
    )
)

(java-ns cloiure.lang.Named
    (interface! Named []
        #_abstract
        (#_"String" getNamespace [#_"Named" this])
        #_abstract
        (#_"String" getName [#_"Named" this])
    )
)

(java-ns cloiure.lang.IMeta
    (§ soon interface! IMeta []
        #_abstract
        (#_"IPersistentMap" meta [#_"IMeta" this])
    )
)

(java-ns cloiure.lang.IObj
    (§ soon interface! IObj [IMeta]
        #_abstract
        (#_"IObj" withMeta [#_"IObj" this, #_"IPersistentMap" meta])
    )
)

(java-ns cloiure.lang.IReference
    (§ soon interface! IReference [IMeta]
        #_abstract
        (#_"IPersistentMap" alterMeta [#_"IReference" this, #_"IFn" alter, #_"ISeq" args])
        #_abstract
        (#_"IPersistentMap" resetMeta [#_"IReference" this, #_"IPersistentMap" m])
    )
)

(java-ns cloiure.lang.Indexed
    (interface! Indexed [Counted]
        #_abstract
        (#_"Object" nth [#_"Indexed" this, #_"int" i])
        #_abstract
        (#_"Object" nth [#_"Indexed" this, #_"int" i, #_"Object" notFound])
    )
)

(java-ns cloiure.lang.IndexedSeq
    (interface! IndexedSeq [ISeq Sequential Counted]
        #_abstract
        (#_"int" index [#_"IndexedSeq" this])
    )
)

(java-ns cloiure.lang.IChunk
    (interface! IChunk [Indexed]
        #_abstract
        (#_"IChunk" dropFirst [#_"IChunk" this])
        #_abstract
        (#_"Object" reduce [#_"IChunk" this, #_"IFn" f, #_"Object" start])
    )
)

(java-ns cloiure.lang.IChunkedSeq
    (interface! IChunkedSeq [ISeq Sequential]
        #_abstract
        (#_"IChunk" chunkedFirst [#_"IChunkedSeq" this])
        #_abstract
        (#_"ISeq" chunkedNext [#_"IChunkedSeq" this])
        #_abstract
        (#_"ISeq" chunkedMore [#_"IChunkedSeq" this])
    )
)

(java-ns cloiure.lang.IPending
    (interface! IPending []
        #_abstract
        (#_"boolean" isRealized [#_"IPending" this])
    )
)

(java-ns cloiure.lang.Associative
    (interface! Associative [IPersistentCollection ILookup]
        #_abstract
        (#_"boolean" containsKey [#_"Associative" this, #_"Object" key])
        #_abstract
        (#_"IMapEntry" entryAt [#_"Associative" this, #_"Object" key])
        #_abstract
        (#_"Associative" assoc [#_"Associative" this, #_"Object" key, #_"Object" val])
    )
)

(java-ns cloiure.lang.IPersistentMap
    (§ soon interface! IPersistentMap [Iterable Associative Counted]
        #_abstract
        (#_"IPersistentMap" assoc [#_"IPersistentMap" this, #_"Object" key, #_"Object" val])
        #_abstract
        (#_"IPersistentMap" dissoc [#_"IPersistentMap" this, #_"Object" key])
    )
)

(java-ns cloiure.lang.IPersistentSet
    (§ soon interface! IPersistentSet [IPersistentCollection Counted]
        #_abstract
        (#_"IPersistentSet" disj [#_"IPersistentSet" this, #_"Object" key])
        #_abstract
        (#_"boolean" contains [#_"IPersistentSet" this, #_"Object" key])
        #_abstract
        (#_"Object" get [#_"IPersistentSet" this, #_"Object" key])
    )
)

(java-ns cloiure.lang.IPersistentStack
    (interface! IPersistentStack [IPersistentCollection]
        #_abstract
        (#_"Object" peek [#_"IPersistentStack" this])
        #_abstract
        (#_"IPersistentStack" pop [#_"IPersistentStack" this])
    )
)

(java-ns cloiure.lang.IPersistentList
    (§ soon interface! IPersistentList [Sequential IPersistentStack]
    )
)

(java-ns cloiure.lang.IPersistentVector
    (§ soon interface! IPersistentVector [Associative Sequential IPersistentStack Reversible Indexed]
        #_abstract
        (#_"IPersistentVector" assocN [#_"IPersistentVector" this, #_"int" i, #_"Object" val])
        #_abstract
        (#_"IPersistentVector" conj [#_"IPersistentVector" this, #_"Object" o])
    )
)

(java-ns cloiure.lang.IReduceInit
    (interface! IReduceInit []
        #_abstract
        (#_"Object" reduce [#_"IReduceInit" this, #_"IFn" f, #_"Object" start])
    )
)

(java-ns cloiure.lang.IReduce
    (interface! IReduce [IReduceInit]
        #_abstract
        (#_"Object" reduce [#_"IReduce" this, #_"IFn" f])
    )
)

(java-ns cloiure.lang.IKVReduce
    (interface! IKVReduce []
        #_abstract
        (#_"Object" kvreduce [#_"IKVReduce" this, #_"IFn" f, #_"Object" r])
    )
)

(java-ns cloiure.lang.ITransientCollection
    (interface! ITransientCollection []
        #_abstract
        (#_"ITransientCollection" conj [#_"ITransientCollection" this, #_"Object" val])
        #_abstract
        (#_"IPersistentCollection" persistent [#_"ITransientCollection" this])
    )
)

(java-ns cloiure.lang.ITransientAssociative
    (interface! ITransientAssociative [ITransientCollection ILookup]
        #_abstract
        (#_"ITransientAssociative" assoc [#_"ITransientAssociative" this, #_"Object" key, #_"Object" val])
    )
)

(java-ns cloiure.lang.ITransientAssociative2
    (interface! ITransientAssociative2 [ITransientAssociative]
        #_abstract
        (#_"boolean" containsKey [#_"ITransientAssociative2" this, #_"Object" key])
        #_abstract
        (#_"IMapEntry" entryAt [#_"ITransientAssociative2" this, #_"Object" key])
    )
)

(java-ns cloiure.lang.ITransientMap
    (interface! ITransientMap [ITransientAssociative Counted]
        #_abstract
        (#_"ITransientMap" assoc [#_"ITransientMap" this, #_"Object" key, #_"Object" val])
        #_abstract
        (#_"ITransientMap" dissoc [#_"ITransientMap" this, #_"Object" key])
        #_abstract
        (#_"IPersistentMap" persistent [#_"ITransientMap" this])
    )
)

(java-ns cloiure.lang.ITransientSet
    (interface! ITransientSet [ITransientCollection Counted]
        #_abstract
        (#_"ITransientSet" disj [#_"ITransientSet" this, #_"Object" key])
        #_abstract
        (#_"boolean" contains [#_"ITransientSet" this, #_"Object" key])
        #_abstract
        (#_"Object" get [#_"ITransientSet" this, #_"Object" key])
    )
)

(java-ns cloiure.lang.ITransientVector
    (interface! ITransientVector [ITransientAssociative Indexed]
        #_abstract
        (#_"ITransientVector" assocN [#_"ITransientVector" this, #_"int" i, #_"Object" val])
        #_abstract
        (#_"ITransientVector" pop [#_"ITransientVector" this])
    )
)

(java-ns cloiure.lang.PersistentHashMap
    (interface! INode []
        #_abstract
        (#_"INode" assoc [#_"INode" this, #_"int" shift, #_"int" hash, #_"Object" key, #_"Object" val, #_"Box" addedLeaf])
        #_abstract
        (#_"INode" dissoc [#_"INode" this, #_"int" shift, #_"int" hash, #_"Object" key])
        #_abstract
        (#_"IMapEntry" find [#_"INode" this, #_"int" shift, #_"int" hash, #_"Object" key])
        #_abstract
        (#_"Object" find [#_"INode" this, #_"int" shift, #_"int" hash, #_"Object" key, #_"Object" notFound])
        #_abstract
        (#_"ISeq" nodeSeq [#_"INode" this])
        #_abstract
        (#_"INode" assoc [#_"INode" this, #_"AtomicReference<Thread>" edit, #_"int" shift, #_"int" hash, #_"Object" key, #_"Object" val, #_"Box" addedLeaf])
        #_abstract
        (#_"INode" dissoc [#_"INode" this, #_"AtomicReference<Thread>" edit, #_"int" shift, #_"int" hash, #_"Object" key, #_"Box" removedLeaf])
        #_abstract
        (#_"Object" kvreduce [#_"INode" this, #_"IFn" f, #_"Object" r])
        #_abstract
        (#_"Object" fold [#_"INode" this, #_"IFn" combinef, #_"IFn" reducef, #_"IFn" fjtask, #_"IFn" fjfork, #_"IFn" fjjoin])
        ;; returns the result of (f [k v]) for each iterated element
        #_abstract
        (#_"Iterator" iterator [#_"INode" this, #_"IFn" f])
    )
)

(java-ns cloiure.lang.Range
    (interface! RangeBoundsCheck []
        #_abstract
        (#_"boolean" exceededBounds [#_"RangeBoundsCheck" this, #_"Object" val])
    )
)

(java-ns cloiure.lang.LongRange
    (interface! LongRangeBoundsCheck []
        #_abstract
        (#_"boolean" exceededBounds [#_"LongRangeBoundsCheck" this, #_"long" val])
    )
)

(java-ns cloiure.lang.IType
    (§ soon interface! IType []
    )
)

(java-ns cloiure.lang.IProxy
    (interface! IProxy []
        #_abstract
        (#_"void" __initCloiureFnMappings [#_"IProxy" this, #_"IPersistentMap" m])
        #_abstract
        (#_"void" __updateCloiureFnMappings [#_"IProxy" this, #_"IPersistentMap" m])
        #_abstract
        (#_"IPersistentMap" __getCloiureFnMappings [#_"IProxy" this])
    )
)

(java-ns cloiure.lang.Util
    (interface! EquivPred []
        #_abstract
        (#_"boolean" equiv [#_"EquivPred" this, #_"Object" k1, #_"Object" k2])
    )

    #_stateless
    (§ soon class! Util [])
)

(java-ns cloiure.lang.DynamicClassLoader
    (§ soon class! DynamicClassLoader [#_"ClassLoader"])
)

(java-ns cloiure.lang.BigInt
    (§ soon class! BigInt [#_"Number" IHashEq])
)

(java-ns cloiure.lang.Ratio
    (class! Ratio [#_"Number" Comparable])
)

(java-ns cloiure.lang.Numbers
    (interface! Ops []
        #_abstract
        (#_"Ops" combine [#_"Ops" this, #_"Ops" y])
        #_abstract
        (#_"Ops" opsWithLong [#_"Ops" this, #_"LongOps" x])
        #_abstract
        (#_"Ops" opsWithDouble [#_"Ops" this, #_"DoubleOps" x])
        #_abstract
        (#_"Ops" opsWithRatio [#_"Ops" this, #_"RatioOps" x])
        #_abstract
        (#_"Ops" opsWithBigInt [#_"Ops" this, #_"BigIntOps" x])
        #_abstract
        (#_"Ops" opsWithBigDecimal [#_"Ops" this, #_"BigDecimalOps" x])
        #_abstract
        (#_"boolean" isZero [#_"Ops" this, #_"Number" x])
        #_abstract
        (#_"boolean" isPos [#_"Ops" this, #_"Number" x])
        #_abstract
        (#_"boolean" isNeg [#_"Ops" this, #_"Number" x])
        #_abstract
        (#_"Number" add [#_"Ops" this, #_"Number" x, #_"Number" y])
        #_abstract
        (#_"Number" addP [#_"Ops" this, #_"Number" x, #_"Number" y])
        #_abstract
        (#_"Number" multiply [#_"Ops" this, #_"Number" x, #_"Number" y])
        #_abstract
        (#_"Number" multiplyP [#_"Ops" this, #_"Number" x, #_"Number" y])
        #_abstract
        (#_"Number" divide [#_"Ops" this, #_"Number" x, #_"Number" y])
        #_abstract
        (#_"Number" quotient [#_"Ops" this, #_"Number" x, #_"Number" y])
        #_abstract
        (#_"Number" remainder [#_"Ops" this, #_"Number" x, #_"Number" y])
        #_abstract
        (#_"boolean" equiv [#_"Ops" this, #_"Number" x, #_"Number" y])
        #_abstract
        (#_"boolean" lt [#_"Ops" this, #_"Number" x, #_"Number" y])
        #_abstract
        (#_"boolean" lte [#_"Ops" this, #_"Number" x, #_"Number" y])
        #_abstract
        (#_"boolean" gte [#_"Ops" this, #_"Number" x, #_"Number" y])
        #_abstract
        (#_"Number" negate [#_"Ops" this, #_"Number" x])
        #_abstract
        (#_"Number" negateP [#_"Ops" this, #_"Number" x])
        #_abstract
        (#_"Number" inc [#_"Ops" this, #_"Number" x])
        #_abstract
        (#_"Number" incP [#_"Ops" this, #_"Number" x])
        #_abstract
        (#_"Number" dec [#_"Ops" this, #_"Number" x])
        #_abstract
        (#_"Number" decP [#_"Ops" this, #_"Number" x])
    )

    #_abstract
    (class! OpsP [Ops])
    (class! LongOps [Ops])
    (class! DoubleOps [#_"OpsP"])
    (class! RatioOps [#_"OpsP"])
    (class! BigIntOps [#_"OpsP"])
    (class! BigDecimalOps [#_"OpsP"])
    #_stateless
    (§ soon class! Numbers [])
)

(java-ns cloiure.lang.AFn
    #_abstract
    (§ soon class! AFn [IFn]
        #_abstract
        (#_"Object" throwArity [#_"AFn" this, #_"int" n])
    )
)

(java-ns cloiure.lang.Symbol
    (§ soon class! Symbol [#_"AFn" IObj Comparable Named IHashEq])
)

(java-ns cloiure.lang.Keyword
    (§ soon class! Keyword [IFn Comparable Named IHashEq])
)

(java-ns cloiure.lang.AFunction
    #_abstract
    (§ soon class! AFunction [#_"AFn" IObj Comparator Fn])
)

(java-ns cloiure.lang.RestFn
    #_abstract
    (§ soon class! RestFn [#_"AFunction"]
        #_abstract
        (#_"int" getRequiredArity [#_"RestFn" this])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" args])
        #_abstract
        (#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" args])
        #_abstract
      #_(#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" args])
        #_abstract
      #_(#_"Object" doInvoke [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20, #_"Object" args])
    )
)

(java-ns cloiure.lang.ASeq
    #_abstract
    (class! ASeq [IObj ISeq Sequential List IHashEq])
)

(java-ns cloiure.lang.LazySeq
    (§ soon class! LazySeq [IObj ISeq Sequential List IPending IHashEq])
)

(java-ns cloiure.lang.APersistentMap
    (class! KeySeq [#_"ASeq"])
    (class! ValSeq [#_"ASeq"])
    #_abstract
    (§ soon class! APersistentMap [#_"AFn" IPersistentMap Map Iterable MapEquivalence IHashEq])
)

(java-ns cloiure.lang.APersistentSet
    #_abstract
    (§ soon class! APersistentSet [#_"AFn" IPersistentSet Collection Set IHashEq])
)

(java-ns cloiure.lang.APersistentVector
    (class! VSeq [#_"ASeq" IndexedSeq IReduce])
    (class! RSeq [#_"ASeq" IndexedSeq Counted])
    #_abstract
    (§ soon class! APersistentVector [#_"AFn" IPersistentVector Iterable List Comparable IHashEq]
        #_abstract
        (#_"Iterator" rangedIterator [#_"APersistentVector" this, #_"int" start, #_"int" end])
    )
    (class! SubVector [#_"APersistentVector" IObj])
)

(java-ns cloiure.lang.AMapEntry
    #_abstract
    (class! AMapEntry [#_"APersistentVector" IMapEntry])
)

(java-ns cloiure.lang.ArrayChunk
    (class! ArrayChunk [IChunk])
)

(java-ns cloiure.lang.ArraySeq
    (class! ArraySeq_int [#_"ASeq" IndexedSeq IReduce])
    (class! ArraySeq_float [#_"ASeq" IndexedSeq IReduce])
    (class! ArraySeq_double [#_"ASeq" IndexedSeq IReduce])
    (class! ArraySeq_long [#_"ASeq" IndexedSeq IReduce])
    (class! ArraySeq_byte [#_"ASeq" IndexedSeq IReduce])
    (class! ArraySeq_char [#_"ASeq" IndexedSeq IReduce])
    (class! ArraySeq_short [#_"ASeq" IndexedSeq IReduce])
    (class! ArraySeq_boolean [#_"ASeq" IndexedSeq IReduce])
    (§ soon class! ArraySeq [#_"ASeq" IndexedSeq IReduce])
)

(java-ns cloiure.lang.Atom
    (class! Atom [IReference IDeref IAtom2])
)

(java-ns cloiure.lang.ATransientMap
    #_abstract
    (class! ATransientMap [#_"AFn" ITransientMap ITransientAssociative2]
        #_abstract
        (#_"void" ensureEditable [#_"ATransientMap" this])
        #_abstract
        (#_"ITransientMap" doAssoc [#_"ATransientMap" this, #_"Object" key, #_"Object" val])
        #_abstract
        (#_"ITransientMap" doDissoc [#_"ATransientMap" this, #_"Object" key])
        #_abstract
        (#_"Object" doValAt [#_"ATransientMap" this, #_"Object" key, #_"Object" notFound])
        #_abstract
        (#_"int" doCount [#_"ATransientMap" this])
        #_abstract
        (#_"IPersistentMap" doPersistent [#_"ATransientMap" this])
    )
)

(java-ns cloiure.lang.ATransientSet
    #_abstract
    (class! ATransientSet [#_"AFn" ITransientSet])
)

(java-ns cloiure.lang.Binding
    (class! Binding #_"<T>" [])
)

(java-ns cloiure.lang.Box
    (class! Box [])
)

(java-ns cloiure.lang.ChunkBuffer
    (class! ChunkBuffer [Counted])
)

(java-ns cloiure.lang.ChunkedCons
    (class! ChunkedCons [#_"ASeq" IChunkedSeq])
)

(java-ns cloiure.lang.Cons
    (class! Cons [#_"ASeq"])
)

(java-ns cloiure.lang.Cycle
    (class! Cycle [#_"ASeq" IReduce IPending])
)

(java-ns cloiure.lang.Delay
    (class! Delay [IDeref IPending])
)

(java-ns cloiure.lang.Iterate
    (class! Iterate [#_"ASeq" IReduce IPending])
)

(java-ns cloiure.lang.KeywordLookupSite
    (§ soon class! KeywordLookupSite [ILookupSite ILookupThunk])
)

(java-ns cloiure.lang.LongRange
    (class! LongChunk [IChunk])
    (class! LongRange [#_"ASeq" Counted IChunkedSeq IReduce])
)

(java-ns cloiure.lang.MapEntry
    (class! MapEntry [#_"AMapEntry"])
)

(java-ns cloiure.lang.MethodImplCache
    (class! Entry [])
    (class! MethodImplCache [])
)

(java-ns cloiure.lang.MultiFn
    (class! MultiFn [#_"AFn"])
)

(java-ns cloiure.lang.Namespace
    (§ soon class! Namespace [IReference])
)

(java-ns cloiure.lang.PersistentArrayMap
    (class! MSeq [#_"ASeq" Counted])
    (class! TransientArrayMap [#_"ATransientMap"])
    (§ soon class! PersistentArrayMap [#_"APersistentMap" IObj IEditableCollection IMapIterable IKVReduce])
)

(java-ns cloiure.lang.PersistentHashMap
    (class! TransientHashMap [#_"ATransientMap"])
    (class! HSeq [#_"ASeq"])
    (class! ArrayNode [INode])
    (class! BitmapIndexedNode [INode])
    (class! HashCollisionNode [INode])
    (class! NodeSeq [#_"ASeq"])
    (class! PersistentHashMap [#_"APersistentMap" IEditableCollection IObj IMapIterable IKVReduce])
)

(java-ns cloiure.lang.PersistentHashSet
    (class! TransientHashSet [#_"ATransientSet"])
    (§ soon class! PersistentHashSet [#_"APersistentSet" IObj IEditableCollection])
)

(java-ns cloiure.lang.PersistentList
    (class! Primordial [#_"RestFn"])
    (class! EmptyList [IObj IPersistentList List ISeq Counted IHashEq])
    (§ soon class! PersistentList [#_"ASeq" IPersistentList IReduce List Counted])
)

(java-ns cloiure.lang.PersistentQueue
    (class! QSeq [#_"ASeq"])
    (class! PersistentQueue [IObj IPersistentList Collection Counted IHashEq])
)

(java-ns cloiure.lang.PersistentTreeMap
    #_abstract
    (class! TNode [#_"AMapEntry"]
        #_abstract
        (#_"TNode" left [#_"TNode" this])
        #_abstract
        (#_"TNode" right [#_"TNode" this])
        #_abstract
        (#_"TNode" addLeft [#_"TNode" this, #_"TNode" ins])
        #_abstract
        (#_"TNode" addRight [#_"TNode" this, #_"TNode" ins])
        #_abstract
        (#_"TNode" removeLeft [#_"TNode" this, #_"TNode" del])
        #_abstract
        (#_"TNode" removeRight [#_"TNode" this, #_"TNode" del])
        #_abstract
        (#_"TNode" blacken [#_"TNode" this])
        #_abstract
        (#_"TNode" redden [#_"TNode" this])
        #_abstract
        (#_"TNode" balanceLeft [#_"TNode" this, #_"TNode" parent])
        #_abstract
        (#_"TNode" balanceRight [#_"TNode" this, #_"TNode" parent])
        #_abstract
        (#_"TNode" replace [#_"TNode" this, #_"Object" key, #_"Object" val, #_"TNode" left, #_"TNode" right])
    )
    (class! Black [#_"TNode"])
    (class! BlackVal [#_"Black"])
    (class! BlackBranch [#_"Black"])
    (class! BlackBranchVal [#_"BlackBranch"])
    (class! Red [#_"TNode"])
    (class! RedVal [#_"Red"])
    (class! RedBranch [#_"Red"])
    (class! RedBranchVal [#_"RedBranch"])
    (class! TSeq [#_"ASeq"])
    (class! PersistentTreeMap [#_"APersistentMap" IObj Reversible Sorted IKVReduce])
)

(java-ns cloiure.lang.PersistentTreeSet
    (class! PersistentTreeSet [#_"APersistentSet" IObj Reversible Sorted])
)

(java-ns cloiure.lang.PersistentVector
    (class! VNode [])
    (class! ChunkedSeq [#_"ASeq" IChunkedSeq Counted])
    (class! TransientVector [#_"AFn" ITransientVector ITransientAssociative2 Counted])
    (§ soon class! PersistentVector [#_"APersistentVector" IObj IEditableCollection IReduce IKVReduce])
)

(java-ns cloiure.lang.Range
    (class! Range [#_"ASeq" IChunkedSeq IReduce])
)

(java-ns cloiure.lang.Reduced
    (class! Reduced [IDeref])
)

(java-ns cloiure.lang.Repeat
    (class! Repeat [#_"ASeq" IReduce])
)

(java-ns cloiure.lang.StringSeq
    (class! StringSeq [#_"ASeq" IndexedSeq])
)

(java-ns cloiure.lang.Tuple
    #_stateless
    (§ soon class! Tuple [])
)

(java-ns cloiure.lang.Var
    (class! TBox [])
    (class! Unbound [#_"AFn"])
    (class! Frame [])
    (§ soon class! Var [IReference IFn IDeref])
)

(java-ns cloiure.lang.Volatile
    (class! Volatile [IDeref])
)

(java-ns cloiure.lang.RT
    #_stateless
    (§ soon class! RT [])
)

(java-ns cloiure.lang.Util

(class-ns Util
    (defn- #_"boolean" Util'pcequiv [#_"Object" k1, #_"Object" k2]
        (if (instance? IPersistentCollection k1)
            (.equiv k1, k2)
            (.equiv k2, k1)
        )
    )

    (declare Numbers'equal)

    (defn #_"boolean" Util'equiv-2oo [#_"Object" k1, #_"Object" k2]
        (cond
            (identical? k1 k2) true
            (nil? k1) false
            (and (number? k1) (number? k2)) (Numbers'equal k1, k2)
            (or (instance? IPersistentCollection k1) (instance? IPersistentCollection k2)) (Util'pcequiv k1, k2)
            :else (.equals k1, k2)
        )
    )

    (def #_"EquivPred" Util'equivNull
        (reify EquivPred
            #_override
            (#_"boolean" equiv [#_"EquivPred" _self, #_"Object" k1, #_"Object" k2]
                (nil? k2)
            )
        )
    )

    (def #_"EquivPred" Util'equivEquals
        (reify EquivPred
            #_override
            (#_"boolean" equiv [#_"EquivPred" _self, #_"Object" k1, #_"Object" k2]
                (.equals k1, k2)
            )
        )
    )

    (def #_"EquivPred" Util'equivNumber
        (reify EquivPred
            #_override
            (#_"boolean" equiv [#_"EquivPred" _self, #_"Object" k1, #_"Object" k2]
                (and (number? k2) (Numbers'equal k1, k2))
            )
        )
    )

    (def #_"EquivPred" Util'equivColl
        (reify EquivPred
            #_override
            (#_"boolean" equiv [#_"EquivPred" _self, #_"Object" k1, #_"Object" k2]
                (if (or (instance? IPersistentCollection k1) (instance? IPersistentCollection k2)) (Util'pcequiv k1, k2) (.equals k1, k2))
            )
        )
    )

    (defn #_"EquivPred" Util'equivPred [#_"Object" k1]
        (cond
            (nil? k1)                                         Util'equivNull
            (number? k1)                                      Util'equivNumber
            (or (string? k1) (symbol? k1))                    Util'equivEquals
            (or (instance? Collection k1) (instance? Map k1)) Util'equivColl
            :else                                             Util'equivEquals
        )
    )

    (defn #_"boolean" Util'equiv-2ll [#_"long" k1, #_"long" k2]
        (= k1 k2)
    )

    (defn #_"boolean" Util'equiv-2ol [#_"Object" k1, #_"long" k2]
        (Util'equiv-2oo k1, (cast Object k2))
    )

    (defn #_"boolean" Util'equiv-2lo [#_"long" k1, #_"Object" k2]
        (Util'equiv-2oo (cast Object k1), k2)
    )

    (defn #_"boolean" Util'equiv-2dd [#_"double" k1, #_"double" k2]
        (= k1 k2)
    )

    (defn #_"boolean" Util'equiv-2od [#_"Object" k1, #_"double" k2]
        (Util'equiv-2oo k1, (cast Object k2))
    )

    (defn #_"boolean" Util'equiv-2do [#_"double" k1, #_"Object" k2]
        (Util'equiv-2oo (cast Object k1), k2)
    )

    (defn #_"boolean" Util'equiv-2bb [#_"boolean" k1, #_"boolean" k2]
        (= k1 k2)
    )

    (defn #_"boolean" Util'equiv-2ob [#_"Object" k1, #_"boolean" k2]
        (Util'equiv-2oo k1, (cast Object k2))
    )

    (defn #_"boolean" Util'equiv-2bo [#_"boolean" k1, #_"Object" k2]
        (Util'equiv-2oo (cast Object k1), k2)
    )

    (defn #_"boolean" Util'equiv-2cc [#_"char" c1, #_"char" c2]
        (= c1 c2)
    )

    (defn #_"boolean" Util'equals [#_"Object" k1, #_"Object" k2]
        (or (identical? k1 k2) (and (some? k1) (.equals k1, k2)))
    )

    (defn #_"boolean" Util'identical [#_"Object" k1, #_"Object" k2]
        (identical? k1 k2)
    )

    (declare Numbers'compare)

    (defn #_"int" Util'compare [#_"Object" k1, #_"Object" k2]
        (cond
            (= k1 k2)    0
            (nil? k1)    -1
            (nil? k2)    1
            (number? k1) (Numbers'compare k1, k2)
            :else        (.compareTo (cast Comparable k1), k2)
        )
    )

    (defn #_"int" Util'hash [#_"Object" o]
        (cond
            (nil? o) 0
            :else    (.hashCode o)
        )
    )

    (declare Numbers'hasheq)

    (defn #_"int" Util'hasheq [#_"Object" o]
        (cond
            (nil? o)              0
            (instance? IHashEq o) (.hasheq o)
            (number? o)           (Numbers'hasheq o)
            (string? o)           (Murmur3'hashInt (.hashCode o))
            :else                 (.hashCode o)
        )
    )

    (defn #_"int" Util'hashCombine [#_"int" seed, #_"int" hash]
        ;; a la boost
        (bit-xor seed (+ hash 0x9e3779b9 (<< seed 6) (>> seed 2)))
    )

    (defn #_"<K, V> void" Util'clearCache [#_"ReferenceQueue" rq, #_"ConcurrentHashMap<K, Reference<V>>" cache]
        ;; cleanup any dead entries
        (when (some? (.poll rq))
            (while (some? (.poll rq))
            )
            (doseq [#_"Map$Entry<K, Reference<V>>" e cache]
                (let-when [#_"Reference<V>" r (val e)] (and (some? r) (nil? (.get r)))
                    (.remove cache, (key e), r)
                )
            )
        )
        nil
    )
)
)

(java-ns cloiure.lang.DynamicClassLoader

(class-ns DynamicClassLoader
    (def #_"ConcurrentHashMap<String, Reference<Class>>" DynamicClassLoader'classCache (ConcurrentHashMap.))
    (def #_"ReferenceQueue" DynamicClassLoader'RQ (ReferenceQueue.))

    (defn #_"DynamicClassLoader" DynamicClassLoader'new [#_"ClassLoader" parent]
        (§ foreign ClassLoader'new parent)
    )

    #_method
    (defn #_"Class" DynamicClassLoader''defineClass [#_"DynamicClassLoader" this, #_"String" name, #_"byte[]" bytes]
        (Util'clearCache DynamicClassLoader'RQ, DynamicClassLoader'classCache)
        (let [#_"Class" c (.defineClass this, name, bytes, 0, (alength bytes))]
            (.put DynamicClassLoader'classCache, name, (SoftReference. c, DynamicClassLoader'RQ))
            c
        )
    )

    (defn #_"Class<?>" DynamicClassLoader'findInMemoryClass [#_"String" name]
        (when-let [#_"Reference<Class>" r (.get DynamicClassLoader'classCache, name)]
            (or (.get r) (do (.remove DynamicClassLoader'classCache, name, r) nil))
        )
    )

    #_foreign
    (defn #_"Class<?>" findClass---DynamicClassLoader [#_"DynamicClassLoader" this, #_"String" name]
        (or (DynamicClassLoader'findInMemoryClass name) (throw (ClassNotFoundException. name)))
    )
)
)

(java-ns cloiure.lang.BigInt

(class-ns BigInt
    (defn- #_"BigInt" BigInt'new [#_"long" lpart, #_"BigInteger" bipart]
        (merge (§ foreign Number'new)
            (hash-map
                #_"long" :lpart lpart
                #_"BigInteger" :bipart bipart
            )
        )
    )

    (def #_"BigInt" BigInt'ZERO (BigInt'new 0, nil))
    (def #_"BigInt" BigInt'ONE (BigInt'new 1, nil))

    ;; must follow Long
    #_foreign
    (defn #_"int" hashCode---BigInt [#_"BigInt" this]
        (if (nil? (:bipart this))
            (int (bit-xor (:lpart this) (>>> (:lpart this) 32)))
            (.hashCode (:bipart this))
        )
    )

    #_override
    (defn #_"int" IHashEq'''hasheq--BigInt [#_"BigInt" this]
        (if (nil? (:bipart this))
            (Murmur3'hashLong (:lpart this))
            (.hashCode (:bipart this))
        )
    )

    #_foreign
    (defn #_"boolean" equals---BigInt [#_"BigInt" this, #_"Object" that]
        (or (identical? this that)
            (and (instance? BigInt that)
                (if (nil? (:bipart this))
                    (and (nil? (:bipart that)) (= (:lpart this) (:lpart that)))
                    (and (some? (:bipart that)) (.equals (:bipart this), (:bipart that)))
                )
            )
        )
    )

    (defn #_"BigInt" BigInt'fromBigInteger [#_"BigInteger" val]
        (if (< (.bitLength val) 64)
            (BigInt'new (.longValue val), nil)
            (BigInt'new 0, val)
        )
    )

    (defn #_"BigInt" BigInt'fromLong [#_"long" val]
        (BigInt'new val, nil)
    )

    #_method
    (defn #_"BigInteger" BigInt''toBigInteger [#_"BigInt" this]
        (if (nil? (:bipart this))
            (BigInteger/valueOf (:lpart this))
            (:bipart this)
        )
    )

    #_method
    (defn #_"BigDecimal" BigInt''toBigDecimal [#_"BigInt" this]
        (if (nil? (:bipart this))
            (BigDecimal/valueOf (:lpart this))
            (BigDecimal. (:bipart this))
        )
    )

    #_method
    (defn #_"int" BigInt''intValue [#_"BigInt" this]
        (if (nil? (:bipart this))
            (int (:lpart this))
            (.intValue (:bipart this))
        )
    )

    #_method
    (defn #_"long" BigInt''longValue [#_"BigInt" this]
        (if (nil? (:bipart this))
            (:lpart this)
            (.longValue (:bipart this))
        )
    )

    #_method
    (defn #_"float" BigInt''floatValue [#_"BigInt" this]
        (if (nil? (:bipart this))
            (:lpart this)
            (.floatValue (:bipart this))
        )
    )

    #_method
    (defn #_"double" BigInt''doubleValue [#_"BigInt" this]
        (if (nil? (:bipart this))
            (:lpart this)
            (.doubleValue (:bipart this))
        )
    )

    #_method
    (defn #_"byte" BigInt''byteValue [#_"BigInt" this]
        (if (nil? (:bipart this))
            (byte (:lpart this))
            (.byteValue (:bipart this))
        )
    )

    #_method
    (defn #_"short" BigInt''shortValue [#_"BigInt" this]
        (if (nil? (:bipart this))
            (short (:lpart this))
            (.shortValue (:bipart this))
        )
    )

    (defn #_"BigInt" BigInt'valueOf [#_"long" val]
        (BigInt'new val, nil)
    )

    #_foreign
    (defn #_"String" toString---BigInt [#_"BigInt" this]
        (if (nil? (:bipart this))
            (String/valueOf (:lpart this))
            (.toString (:bipart this))
        )
    )

    #_method
    (defn #_"int" BigInt''bitLength [#_"BigInt" this]
        (.bitLength (BigInt''toBigInteger this))
    )

    #_method
    (defn #_"BigInt" BigInt''add [#_"BigInt" this, #_"BigInt" y]
        (or
            (when (and (nil? (:bipart this)) (nil? (:bipart y)))
                (let [#_"long" ret (+ (:lpart this) (:lpart y))]
                    (when (or (<= 0 (bit-xor ret (:lpart this))) (<= 0 (bit-xor ret (:lpart y))))
                        (BigInt'valueOf ret)
                    )
                )
            )
            (BigInt'fromBigInteger (.add (BigInt''toBigInteger this), (BigInt''toBigInteger y)))
        )
    )

    #_method
    (defn #_"BigInt" BigInt''multiply [#_"BigInt" this, #_"BigInt" y]
        (or
            (when (and (nil? (:bipart this)) (nil? (:bipart y)))
                (let [#_"long" ret (* (:lpart this) (:lpart y))]
                    (when (or (zero? (:lpart y)) (and (= (/ ret (:lpart y)) (:lpart this)) (not= (:lpart this) Long/MIN_VALUE)))
                        (BigInt'valueOf ret)
                    )
                )
            )
            (BigInt'fromBigInteger (.multiply (BigInt''toBigInteger this), (BigInt''toBigInteger y)))
        )
    )

    #_method
    (defn #_"BigInt" BigInt''quotient [#_"BigInt" this, #_"BigInt" y]
        (if (and (nil? (:bipart this)) (nil? (:bipart y)))
            (if (and (= (:lpart this) Long/MIN_VALUE) (= (:lpart y) -1))
                (BigInt'fromBigInteger (.negate (BigInt''toBigInteger this)))
                (BigInt'valueOf (/ (:lpart this) (:lpart y)))
            )
            (BigInt'fromBigInteger (.divide (BigInt''toBigInteger this), (BigInt''toBigInteger y)))
        )
    )

    #_method
    (defn #_"BigInt" BigInt''remainder [#_"BigInt" this, #_"BigInt" y]
        (if (and (nil? (:bipart this)) (nil? (:bipart y)))
            (BigInt'valueOf (% (:lpart this) (:lpart y)))
            (BigInt'fromBigInteger (.remainder (BigInt''toBigInteger this), (BigInt''toBigInteger y)))
        )
    )

    #_method
    (defn #_"boolean" BigInt''lt [#_"BigInt" this, #_"BigInt" y]
        (if (and (nil? (:bipart this)) (nil? (:bipart y)))
            (< (:lpart this) (:lpart y))
            (neg? (.compareTo (BigInt''toBigInteger this), (BigInt''toBigInteger y)))
        )
    )
)
)

(java-ns cloiure.lang.Ratio

(class-ns Ratio
    (defn #_"Ratio" Ratio'new [#_"BigInteger" numerator, #_"BigInteger" denominator]
        (merge (§ foreign Number'new)
            (hash-map
                #_"BigInteger" :numerator numerator
                #_"BigInteger" :denominator denominator
            )
        )
    )

    #_foreign
    (defn #_"boolean" equals---Ratio [#_"Ratio" this, #_"Object" that]
        (and (instance? Ratio that) (.equals (:numerator that), (:numerator this)) (.equals (:denominator that), (:denominator this)))
    )

    #_foreign
    (defn #_"int" hashCode---Ratio [#_"Ratio" this]
        (bit-xor (.hashCode (:numerator this)) (.hashCode (:denominator this)))
    )

    #_foreign
    (defn #_"String" toString---Ratio [#_"Ratio" this]
        (str (:numerator this) "/" (:denominator this))
    )

    #_method
    (defn #_"BigInteger" Ratio''bigIntegerValue [#_"Ratio" this]
        (.divide (:numerator this), (:denominator this))
    )

    #_method
    (defn #_"long" Ratio''longValue [#_"Ratio" this]
        (.longValue (Ratio''bigIntegerValue this))
    )

    #_method
    (defn #_"BigDecimal" Ratio''decimalValue
        ([#_"Ratio" this] (Ratio''decimalValue this, MathContext/UNLIMITED))
        ([#_"Ratio" this, #_"MathContext" mc]
            (let [#_"BigDecimal" numerator (BigDecimal. (:numerator this))
                  #_"BigDecimal" denominator (BigDecimal. (:denominator this))]
                (.divide numerator, denominator, mc)
            )
        )
    )

    #_method
    (defn #_"double" Ratio''doubleValue [#_"Ratio" this]
        (.doubleValue (Ratio''decimalValue this, MathContext/DECIMAL64))
    )

    #_method
    (defn #_"float" Ratio''floatValue [#_"Ratio" this]
        (float (Ratio''doubleValue this))
    )

    #_method
    (defn #_"int" Ratio''intValue [#_"Ratio" this]
        (int (Ratio''doubleValue this))
    )

    #_foreign
    (defn #_"int" compareTo---Ratio [#_"Ratio" this, #_"Object" o]
        (Numbers'compare this, (cast Number o))
    )
)
)

(java-ns cloiure.lang.Numbers

(class-ns OpsP
    (defn #_"OpsP" OpsP'new []
        (hash-map)
    )

    #_override
    (defn #_"Number" Ops'''addP--OpsP [#_"OpsP" this, #_"Number" x, #_"Number" y]
        (.add this, x, y)
    )

    #_override
    (defn #_"Number" Ops'''multiplyP--OpsP [#_"OpsP" this, #_"Number" x, #_"Number" y]
        (.multiply this, x, y)
    )

    #_override
    (defn #_"Number" Ops'''negateP--OpsP [#_"OpsP" this, #_"Number" x]
        (.negate this, x)
    )

    #_override
    (defn #_"Number" Ops'''incP--OpsP [#_"OpsP" this, #_"Number" x]
        (.inc this, x)
    )

    #_override
    (defn #_"Number" Ops'''decP--OpsP [#_"OpsP" this, #_"Number" x]
        (.dec this, x)
    )
)

(class-ns LongOps
    (defn #_"LongOps" LongOps'new []
        (hash-map)
    )

    #_override
    (defn #_"Ops" Ops'''combine--LongOps [#_"LongOps" this, #_"Ops" y]
        (.opsWithLong y, this)
    )

    #_override
    (defn #_"Ops" Ops'''opsWithLong--LongOps [#_"LongOps" this, #_"LongOps" x]
        this
    )

    (declare Numbers'DOUBLE_OPS)

    #_override
    (defn #_"Ops" Ops'''opsWithDouble--LongOps [#_"LongOps" this, #_"DoubleOps" x]
        Numbers'DOUBLE_OPS
    )

    (declare Numbers'RATIO_OPS)

    #_override
    (defn #_"Ops" Ops'''opsWithRatio--LongOps [#_"LongOps" this, #_"RatioOps" x]
        Numbers'RATIO_OPS
    )

    (declare Numbers'BIGINT_OPS)

    #_override
    (defn #_"Ops" Ops'''opsWithBigInt--LongOps [#_"LongOps" this, #_"BigIntOps" x]
        Numbers'BIGINT_OPS
    )

    (declare Numbers'BIGDECIMAL_OPS)

    #_override
    (defn #_"Ops" Ops'''opsWithBigDecimal--LongOps [#_"LongOps" this, #_"BigDecimalOps" x]
        Numbers'BIGDECIMAL_OPS
    )

    #_override
    (defn #_"boolean" Ops'''isZero--LongOps [#_"LongOps" this, #_"Number" x]
        (zero? (.longValue x))
    )

    #_override
    (defn #_"boolean" Ops'''isPos--LongOps [#_"LongOps" this, #_"Number" x]
        (pos? (.longValue x))
    )

    #_override
    (defn #_"boolean" Ops'''isNeg--LongOps [#_"LongOps" this, #_"Number" x]
        (neg? (.longValue x))
    )

    (declare Numbers'num-1l)
    (declare Numbers'add-2ll)

    #_override
    (defn #_"Number" Ops'''add--LongOps [#_"LongOps" this, #_"Number" x, #_"Number" y]
        (Numbers'num-1l (Numbers'add-2ll (.longValue x), (.longValue y)))
    )

    #_override
    (defn #_"Number" Ops'''addP--LongOps [#_"LongOps" this, #_"Number" x, #_"Number" y]
        (let [#_"long" lx (.longValue x) #_"long" ly (.longValue y) #_"long" lz (+ lx ly)]
            (if (and (neg? (bit-xor lz lx)) (neg? (bit-xor lz ly)))
                (.add Numbers'BIGINT_OPS, x, y)
                (Numbers'num-1l lz)
            )
        )
    )

    (declare Numbers'multiply-2ll)

    #_override
    (defn #_"Number" Ops'''multiply--LongOps [#_"LongOps" this, #_"Number" x, #_"Number" y]
        (Numbers'num-1l (Numbers'multiply-2ll (.longValue x), (.longValue y)))
    )

    #_override
    (defn #_"Number" Ops'''multiplyP--LongOps [#_"LongOps" this, #_"Number" x, #_"Number" y]
        (let [#_"long" lx (.longValue x) #_"long" ly (.longValue y)]
            (if (and (= lx Long/MIN_VALUE) (neg? ly))
                (.multiply Numbers'BIGINT_OPS, x, y)
                (let [#_"long" lz (* lx ly)]
                    (if (and (not= ly 0) (not= (/ lz ly) lx))
                        (.multiply Numbers'BIGINT_OPS, x, y)
                        (Numbers'num-1l lz)
                    )
                )
            )
        )
    )

    (defn #_"long" LongOps'gcd [#_"long" u, #_"long" v] (if (zero? v) u (recur v (% u v))))

    #_override
    (defn #_"Number" Ops'''divide--LongOps [#_"LongOps" this, #_"Number" x, #_"Number" y]
        (let [#_"long" lx (.longValue x) #_"long" ly (.longValue y)]
            (let-when-not [#_"long" gcd (LongOps'gcd lx, ly)] (zero? gcd) => (Numbers'num-1l 0)
                (let-when-not [lx (/ lx gcd) ly (/ ly gcd)] (= ly 1) => (Numbers'num-1l lx)
                    (let [[lx ly]
                            (when (neg? ly) => [lx ly]
                                [(- lx) (- ly)]
                            )]
                        (Ratio'new (BigInteger/valueOf lx), (BigInteger/valueOf ly))
                    )
                )
            )
        )
    )

    #_override
    (defn #_"Number" Ops'''quotient--LongOps [#_"LongOps" this, #_"Number" x, #_"Number" y]
        (Numbers'num-1l (/ (.longValue x) (.longValue y)))
    )

    #_override
    (defn #_"Number" Ops'''remainder--LongOps [#_"LongOps" this, #_"Number" x, #_"Number" y]
        (Numbers'num-1l (% (.longValue x) (.longValue y)))
    )

    #_override
    (defn #_"boolean" Ops'''equiv--LongOps [#_"LongOps" this, #_"Number" x, #_"Number" y]
        (= (.longValue x) (.longValue y))
    )

    #_override
    (defn #_"boolean" Ops'''lt--LongOps [#_"LongOps" this, #_"Number" x, #_"Number" y]
        (< (.longValue x) (.longValue y))
    )

    #_override
    (defn #_"boolean" Ops'''lte--LongOps [#_"LongOps" this, #_"Number" x, #_"Number" y]
        (<= (.longValue x) (.longValue y))
    )

    #_override
    (defn #_"boolean" Ops'''gte--LongOps [#_"LongOps" this, #_"Number" x, #_"Number" y]
        (>= (.longValue x) (.longValue y))
    )

    (declare Numbers'minus-1l)

    #_override
    (defn #_"Number" Ops'''negate--LongOps [#_"LongOps" this, #_"Number" x]
        (let [#_"long" val (.longValue x)]
            (Numbers'num-1l (Numbers'minus-1l val))
        )
    )

    #_override
    (defn #_"Number" Ops'''negateP--LongOps [#_"LongOps" this, #_"Number" x]
        (let [#_"long" val (.longValue x)]
            (if (< Long/MIN_VALUE val)
                (Numbers'num-1l (- val))
                (BigInt'fromBigInteger (.negate (BigInteger/valueOf val)))
            )
        )
    )

    (declare Numbers'inc-1l)

    #_override
    (defn #_"Number" Ops'''inc--LongOps [#_"LongOps" this, #_"Number" x]
        (let [#_"long" val (.longValue x)]
            (Numbers'num-1l (Numbers'inc-1l val))
        )
    )

    #_override
    (defn #_"Number" Ops'''incP--LongOps [#_"LongOps" this, #_"Number" x]
        (let [#_"long" val (.longValue x)]
            (if (< val Long/MAX_VALUE)
                (Numbers'num-1l (inc val))
                (.inc Numbers'BIGINT_OPS, x)
            )
        )
    )

    (declare Numbers'dec-1l)

    #_override
    (defn #_"Number" Ops'''dec--LongOps [#_"LongOps" this, #_"Number" x]
        (let [#_"long" val (.longValue x)]
            (Numbers'num-1l (Numbers'dec-1l val))
        )
    )

    #_override
    (defn #_"Number" Ops'''decP--LongOps [#_"LongOps" this, #_"Number" x]
        (let [#_"long" val (.longValue x)]
            (if (< Long/MIN_VALUE val)
                (Numbers'num-1l (dec val))
                (.dec Numbers'BIGINT_OPS, x)
            )
        )
    )
)

(class-ns DoubleOps
    (defn #_"DoubleOps" DoubleOps'new []
        (OpsP'new)
    )

    #_override
    (defn #_"Ops" Ops'''combine--DoubleOps [#_"DoubleOps" this, #_"Ops" y]
        (.opsWithDouble y, this)
    )

    #_override
    (defn #_"Ops" Ops'''opsWithLong--DoubleOps [#_"DoubleOps" this, #_"LongOps" x]
        this
    )

    #_override
    (defn #_"Ops" Ops'''opsWithDouble--DoubleOps [#_"DoubleOps" this, #_"DoubleOps" x]
        this
    )

    #_override
    (defn #_"Ops" Ops'''opsWithRatio--DoubleOps [#_"DoubleOps" this, #_"RatioOps" x]
        this
    )

    #_override
    (defn #_"Ops" Ops'''opsWithBigInt--DoubleOps [#_"DoubleOps" this, #_"BigIntOps" x]
        this
    )

    #_override
    (defn #_"Ops" Ops'''opsWithBigDecimal--DoubleOps [#_"DoubleOps" this, #_"BigDecimalOps" x]
        this
    )

    #_override
    (defn #_"boolean" Ops'''isZero--DoubleOps [#_"DoubleOps" this, #_"Number" x]
        (zero? (.doubleValue x))
    )

    #_override
    (defn #_"boolean" Ops'''isPos--DoubleOps [#_"DoubleOps" this, #_"Number" x]
        (pos? (.doubleValue x))
    )

    #_override
    (defn #_"boolean" Ops'''isNeg--DoubleOps [#_"DoubleOps" this, #_"Number" x]
        (neg? (.doubleValue x))
    )

    #_override
    (defn #_"Number" Ops'''add--DoubleOps [#_"DoubleOps" this, #_"Number" x, #_"Number" y]
        (Double/valueOf (+ (.doubleValue x) (.doubleValue y)))
    )

    #_override
    (defn #_"Number" Ops'''multiply--DoubleOps [#_"DoubleOps" this, #_"Number" x, #_"Number" y]
        (Double/valueOf (* (.doubleValue x) (.doubleValue y)))
    )

    #_override
    (defn #_"Number" Ops'''divide--DoubleOps [#_"DoubleOps" this, #_"Number" x, #_"Number" y]
        (Double/valueOf (/ (.doubleValue x) (.doubleValue y)))
    )

    (declare Numbers'quotient-2dd)

    #_override
    (defn #_"Number" Ops'''quotient--DoubleOps [#_"DoubleOps" this, #_"Number" x, #_"Number" y]
        (Numbers'quotient-2dd (.doubleValue x), (.doubleValue y))
    )

    (declare Numbers'remainder-2dd)

    #_override
    (defn #_"Number" Ops'''remainder--DoubleOps [#_"DoubleOps" this, #_"Number" x, #_"Number" y]
        (Numbers'remainder-2dd (.doubleValue x), (.doubleValue y))
    )

    #_override
    (defn #_"boolean" Ops'''equiv--DoubleOps [#_"DoubleOps" this, #_"Number" x, #_"Number" y]
        (= (.doubleValue x) (.doubleValue y))
    )

    #_override
    (defn #_"boolean" Ops'''lt--DoubleOps [#_"DoubleOps" this, #_"Number" x, #_"Number" y]
        (< (.doubleValue x) (.doubleValue y))
    )

    #_override
    (defn #_"boolean" Ops'''lte--DoubleOps [#_"DoubleOps" this, #_"Number" x, #_"Number" y]
        (<= (.doubleValue x) (.doubleValue y))
    )

    #_override
    (defn #_"boolean" Ops'''gte--DoubleOps [#_"DoubleOps" this, #_"Number" x, #_"Number" y]
        (>= (.doubleValue x) (.doubleValue y))
    )

    #_override
    (defn #_"Number" Ops'''negate--DoubleOps [#_"DoubleOps" this, #_"Number" x]
        (Double/valueOf (- (.doubleValue x)))
    )

    #_override
    (defn #_"Number" Ops'''inc--DoubleOps [#_"DoubleOps" this, #_"Number" x]
        (Double/valueOf (inc (.doubleValue x)))
    )

    #_override
    (defn #_"Number" Ops'''dec--DoubleOps [#_"DoubleOps" this, #_"Number" x]
        (Double/valueOf (dec (.doubleValue x)))
    )
)

(class-ns RatioOps
    (defn #_"RatioOps" RatioOps'new []
        (OpsP'new)
    )

    #_override
    (defn #_"Ops" Ops'''combine--RatioOps [#_"RatioOps" this, #_"Ops" y]
        (.opsWithRatio y, this)
    )

    #_override
    (defn #_"Ops" Ops'''opsWithLong--RatioOps [#_"RatioOps" this, #_"LongOps" x]
        this
    )

    #_override
    (defn #_"Ops" Ops'''opsWithDouble--RatioOps [#_"RatioOps" this, #_"DoubleOps" x]
        Numbers'DOUBLE_OPS
    )

    #_override
    (defn #_"Ops" Ops'''opsWithRatio--RatioOps [#_"RatioOps" this, #_"RatioOps" x]
        this
    )

    #_override
    (defn #_"Ops" Ops'''opsWithBigInt--RatioOps [#_"RatioOps" this, #_"BigIntOps" x]
        this
    )

    #_override
    (defn #_"Ops" Ops'''opsWithBigDecimal--RatioOps [#_"RatioOps" this, #_"BigDecimalOps" x]
        Numbers'BIGDECIMAL_OPS
    )

    #_override
    (defn #_"boolean" Ops'''isZero--RatioOps [#_"RatioOps" this, #_"Number" x]
        (zero? (.signum (:numerator (cast Ratio x))))
    )

    #_override
    (defn #_"boolean" Ops'''isPos--RatioOps [#_"RatioOps" this, #_"Number" x]
        (pos? (.signum (:numerator (cast Ratio x))))
    )

    #_override
    (defn #_"boolean" Ops'''isNeg--RatioOps [#_"RatioOps" this, #_"Number" x]
        (neg? (.signum (:numerator (cast Ratio x))))
    )

    (defn #_"Number" RatioOps'normalizeRet [#_"Number" ret, #_"Number" x, #_"Number" y]
        ret
    )

    (declare Numbers'toRatio)

    #_override
    (defn #_"Number" Ops'''add--RatioOps [#_"RatioOps" this, #_"Number" x, #_"Number" y]
        (let [#_"Ratio" rx (Numbers'toRatio x) #_"Ratio" ry (Numbers'toRatio y)
              #_"Number" ret (.divide this, (.add (.multiply (:numerator ry), (:denominator rx)), (.multiply (:numerator rx), (:denominator ry))), (.multiply (:denominator ry), (:denominator rx)))]
            (RatioOps'normalizeRet ret, x, y)
        )
    )

    #_override
    (defn #_"Number" Ops'''multiply--RatioOps [#_"RatioOps" this, #_"Number" x, #_"Number" y]
        (let [#_"Ratio" rx (Numbers'toRatio x) #_"Ratio" ry (Numbers'toRatio y)
              #_"Number" ret (.divide this, (.multiply (:numerator ry), (:numerator rx)), (.multiply (:denominator ry), (:denominator rx)))]
            (RatioOps'normalizeRet ret, x, y)
        )
    )

    #_override
    (defn #_"Number" Ops'''divide--RatioOps [#_"RatioOps" this, #_"Number" x, #_"Number" y]
        (let [#_"Ratio" rx (Numbers'toRatio x) #_"Ratio" ry (Numbers'toRatio y)
              #_"Number" ret (.divide this, (.multiply (:denominator ry), (:numerator rx)), (.multiply (:numerator ry), (:denominator rx)))]
            (RatioOps'normalizeRet ret, x, y)
        )
    )

    #_override
    (defn #_"Number" Ops'''quotient--RatioOps [#_"RatioOps" this, #_"Number" x, #_"Number" y]
        (let [#_"Ratio" rx (Numbers'toRatio x) #_"Ratio" ry (Numbers'toRatio y)
              #_"BigInteger" q (.divide (.multiply (:numerator rx), (:denominator ry)), (.multiply (:denominator rx), (:numerator ry)))]
            (RatioOps'normalizeRet (BigInt'fromBigInteger q), x, y)
        )
    )

    (declare Numbers'minus-2oo)
    (declare Numbers'multiply-2oo)

    #_override
    (defn #_"Number" Ops'''remainder--RatioOps [#_"RatioOps" this, #_"Number" x, #_"Number" y]
        (let [#_"Ratio" rx (Numbers'toRatio x) #_"Ratio" ry (Numbers'toRatio y)
              #_"BigInteger" q (.divide (.multiply (:numerator rx), (:denominator ry)), (.multiply (:denominator rx), (:numerator ry)))
              #_"Number" ret (Numbers'minus-2oo x, (Numbers'multiply-2oo q, y))]
            (RatioOps'normalizeRet ret, x, y)
        )
    )

    #_override
    (defn #_"boolean" Ops'''equiv--RatioOps [#_"RatioOps" this, #_"Number" x, #_"Number" y]
        (let [#_"Ratio" rx (Numbers'toRatio x) #_"Ratio" ry (Numbers'toRatio y)]
            (and (.equals (:numerator rx), (:numerator ry)) (.equals (:denominator rx), (:denominator ry)))
        )
    )

    (declare Numbers'lt-2oo)

    #_override
    (defn #_"boolean" Ops'''lt--RatioOps [#_"RatioOps" this, #_"Number" x, #_"Number" y]
        (let [#_"Ratio" rx (Numbers'toRatio x) #_"Ratio" ry (Numbers'toRatio y)]
            (Numbers'lt-2oo (.multiply (:numerator rx), (:denominator ry)), (.multiply (:numerator ry), (:denominator rx)))
        )
    )

    (declare Numbers'lte-2oo)

    #_override
    (defn #_"boolean" Ops'''lte--RatioOps [#_"RatioOps" this, #_"Number" x, #_"Number" y]
        (let [#_"Ratio" rx (Numbers'toRatio x) #_"Ratio" ry (Numbers'toRatio y)]
            (Numbers'lte-2oo (.multiply (:numerator rx), (:denominator ry)), (.multiply (:numerator ry), (:denominator rx)))
        )
    )

    (declare Numbers'gte-2oo)

    #_override
    (defn #_"boolean" Ops'''gte--RatioOps [#_"RatioOps" this, #_"Number" x, #_"Number" y]
        (let [#_"Ratio" rx (Numbers'toRatio x) #_"Ratio" ry (Numbers'toRatio y)]
            (Numbers'gte-2oo (.multiply (:numerator rx), (:denominator ry)), (.multiply (:numerator ry), (:denominator rx)))
        )
    )

    #_override
    (defn #_"Number" Ops'''negate--RatioOps [#_"RatioOps" this, #_"Number" x]
        (let [#_"Ratio" r (cast Ratio x)]
            (Ratio'new (.negate (:numerator r)), (:denominator r))
        )
    )

    (declare Numbers'add-2ol)

    #_override
    (defn #_"Number" Ops'''inc--RatioOps [#_"RatioOps" this, #_"Number" x]
        (Numbers'add-2ol x, 1)
    )

    #_override
    (defn #_"Number" Ops'''dec--RatioOps [#_"RatioOps" this, #_"Number" x]
        (Numbers'add-2ol x, -1)
    )
)

(class-ns BigIntOps
    (defn #_"BigIntOps" BigIntOps'new []
        (OpsP'new)
    )

    #_override
    (defn #_"Ops" Ops'''combine--BigIntOps [#_"BigIntOps" this, #_"Ops" y]
        (.opsWithBigInt y, this)
    )

    #_override
    (defn #_"Ops" Ops'''opsWithLong--BigIntOps [#_"BigIntOps" this, #_"LongOps" x]
        this
    )

    #_override
    (defn #_"Ops" Ops'''opsWithDouble--BigIntOps [#_"BigIntOps" this, #_"DoubleOps" x]
        Numbers'DOUBLE_OPS
    )

    #_override
    (defn #_"Ops" Ops'''opsWithRatio--BigIntOps [#_"BigIntOps" this, #_"RatioOps" x]
        Numbers'RATIO_OPS
    )

    #_override
    (defn #_"Ops" Ops'''opsWithBigInt--BigIntOps [#_"BigIntOps" this, #_"BigIntOps" x]
        this
    )

    #_override
    (defn #_"Ops" Ops'''opsWithBigDecimal--BigIntOps [#_"BigIntOps" this, #_"BigDecimalOps" x]
        Numbers'BIGDECIMAL_OPS
    )

    (declare Numbers'toBigInt)

    #_override
    (defn #_"boolean" Ops'''isZero--BigIntOps [#_"BigIntOps" this, #_"Number" x]
        (let [#_"BigInt" bx (Numbers'toBigInt x)]
            (zero? (if (some? (:bipart bx)) (.signum (:bipart bx)) (:lpart bx)))
        )
    )

    #_override
    (defn #_"boolean" Ops'''isPos--BigIntOps [#_"BigIntOps" this, #_"Number" x]
        (let [#_"BigInt" bx (Numbers'toBigInt x)]
            (pos? (if (some? (:bipart bx)) (.signum (:bipart bx)) (:lpart bx)))
        )
    )

    #_override
    (defn #_"boolean" Ops'''isNeg--BigIntOps [#_"BigIntOps" this, #_"Number" x]
        (let [#_"BigInt" bx (Numbers'toBigInt x)]
            (neg? (if (some? (:bipart bx)) (.signum (:bipart bx)) (:lpart bx)))
        )
    )

    #_override
    (defn #_"Number" Ops'''add--BigIntOps [#_"BigIntOps" this, #_"Number" x, #_"Number" y]
        (BigInt''add (Numbers'toBigInt x), (Numbers'toBigInt y))
    )

    #_override
    (defn #_"Number" Ops'''multiply--BigIntOps [#_"BigIntOps" this, #_"Number" x, #_"Number" y]
        (BigInt''multiply (Numbers'toBigInt x), (Numbers'toBigInt y))
    )

    (declare Numbers'divide-2ii)

    #_override
    (defn #_"Number" Ops'''divide--BigIntOps [#_"BigIntOps" this, #_"Number" x, #_"Number" y]
        (Numbers'divide-2ii (.toBigInteger this, x), (.toBigInteger this, y))
    )

    #_override
    (defn #_"Number" Ops'''quotient--BigIntOps [#_"BigIntOps" this, #_"Number" x, #_"Number" y]
        (BigInt''quotient (Numbers'toBigInt x), (Numbers'toBigInt y))
    )

    #_override
    (defn #_"Number" Ops'''remainder--BigIntOps [#_"BigIntOps" this, #_"Number" x, #_"Number" y]
        (BigInt''remainder (Numbers'toBigInt x), (Numbers'toBigInt y))
    )

    #_override
    (defn #_"boolean" Ops'''equiv--BigIntOps [#_"BigIntOps" this, #_"Number" x, #_"Number" y]
        (.equals (Numbers'toBigInt x), (Numbers'toBigInt y))
    )

    #_override
    (defn #_"boolean" Ops'''lt--BigIntOps [#_"BigIntOps" this, #_"Number" x, #_"Number" y]
        (BigInt''lt (Numbers'toBigInt x), (Numbers'toBigInt y))
    )

    #_override
    (defn #_"boolean" Ops'''lte--BigIntOps [#_"BigIntOps" this, #_"Number" x, #_"Number" y]
        (<= (.compareTo (.toBigInteger this, x), (.toBigInteger this, y)) 0)
    )

    #_override
    (defn #_"boolean" Ops'''gte--BigIntOps [#_"BigIntOps" this, #_"Number" x, #_"Number" y]
        (>= (.compareTo (.toBigInteger this, x), (.toBigInteger this, y)) 0)
    )

    #_override
    (defn #_"Number" Ops'''negate--BigIntOps [#_"BigIntOps" this, #_"Number" x]
        (BigInt'fromBigInteger (.negate (.toBigInteger this, x)))
    )

    #_override
    (defn #_"Number" Ops'''inc--BigIntOps [#_"BigIntOps" this, #_"Number" x]
        (BigInt'fromBigInteger (.add (.toBigInteger this, x), BigInteger/ONE))
    )

    #_override
    (defn #_"Number" Ops'''dec--BigIntOps [#_"BigIntOps" this, #_"Number" x]
        (BigInt'fromBigInteger (.subtract (.toBigInteger this, x), BigInteger/ONE))
    )
)

(class-ns BigDecimalOps
    (def #_"Var" BigDecimalOps'MATH_CONTEXT (§ soon RT'MATH_CONTEXT))

    (defn #_"BigDecimalOps" BigDecimalOps'new []
        (OpsP'new)
    )

    #_override
    (defn #_"Ops" Ops'''combine--BigDecimalOps [#_"BigDecimalOps" this, #_"Ops" y]
        (.opsWithBigDecimal y, this)
    )

    #_override
    (defn #_"Ops" Ops'''opsWithLong--BigDecimalOps [#_"BigDecimalOps" this, #_"LongOps" x]
        this
    )

    #_override
    (defn #_"Ops" Ops'''opsWithDouble--BigDecimalOps [#_"BigDecimalOps" this, #_"DoubleOps" x]
        Numbers'DOUBLE_OPS
    )

    #_override
    (defn #_"Ops" Ops'''opsWithRatio--BigDecimalOps [#_"BigDecimalOps" this, #_"RatioOps" x]
        this
    )

    #_override
    (defn #_"Ops" Ops'''opsWithBigInt--BigDecimalOps [#_"BigDecimalOps" this, #_"BigIntOps" x]
        this
    )

    #_override
    (defn #_"Ops" Ops'''opsWithBigDecimal--BigDecimalOps [#_"BigDecimalOps" this, #_"BigDecimalOps" x]
        this
    )

    #_override
    (defn #_"boolean" Ops'''isZero--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x]
        (zero? (.signum (cast BigDecimal x)))
    )

    #_override
    (defn #_"boolean" Ops'''isPos--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x]
        (pos? (.signum (cast BigDecimal x)))
    )

    #_override
    (defn #_"boolean" Ops'''isNeg--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x]
        (neg? (.signum (cast BigDecimal x)))
    )

    #_override
    (defn #_"Number" Ops'''add--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x, #_"Number" y]
        (let [#_"MathContext" mc (deref BigDecimalOps'MATH_CONTEXT)]
            (if (nil? mc) (.add (.toBigDecimal this, x), (.toBigDecimal this, y)) (.add (.toBigDecimal this, x), (.toBigDecimal this, y), mc))
        )
    )

    #_override
    (defn #_"Number" Ops'''multiply--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x, #_"Number" y]
        (let [#_"MathContext" mc (deref BigDecimalOps'MATH_CONTEXT)]
            (if (nil? mc) (.multiply (.toBigDecimal this, x), (.toBigDecimal this, y)) (.multiply (.toBigDecimal this, x), (.toBigDecimal this, y), mc))
        )
    )

    #_override
    (defn #_"Number" Ops'''divide--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x, #_"Number" y]
        (let [#_"MathContext" mc (deref BigDecimalOps'MATH_CONTEXT)]
            (if (nil? mc) (.divide (.toBigDecimal this, x), (.toBigDecimal this, y)) (.divide (.toBigDecimal this, x), (.toBigDecimal this, y), mc))
        )
    )

    #_override
    (defn #_"Number" Ops'''quotient--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x, #_"Number" y]
        (let [#_"MathContext" mc (deref BigDecimalOps'MATH_CONTEXT)]
            (if (nil? mc) (.divideToIntegralValue (.toBigDecimal this, x), (.toBigDecimal this, y)) (.divideToIntegralValue (.toBigDecimal this, x), (.toBigDecimal this, y), mc))
        )
    )

    #_override
    (defn #_"Number" Ops'''remainder--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x, #_"Number" y]
        (let [#_"MathContext" mc (deref BigDecimalOps'MATH_CONTEXT)]
            (if (nil? mc) (.remainder (.toBigDecimal this, x), (.toBigDecimal this, y)) (.remainder (.toBigDecimal this, x), (.toBigDecimal this, y), mc))
        )
    )

    #_override
    (defn #_"boolean" Ops'''equiv--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x, #_"Number" y]
        (zero? (.compareTo (.toBigDecimal this, x), (.toBigDecimal this, y)))
    )

    #_override
    (defn #_"boolean" Ops'''lt--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x, #_"Number" y]
        (neg? (.compareTo (.toBigDecimal this, x), (.toBigDecimal this, y)))
    )

    #_override
    (defn #_"boolean" Ops'''lte--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x, #_"Number" y]
        (<= (.compareTo (.toBigDecimal this, x), (.toBigDecimal this, y)) 0)
    )

    #_override
    (defn #_"boolean" Ops'''gte--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x, #_"Number" y]
        (>= (.compareTo (.toBigDecimal this, x), (.toBigDecimal this, y)) 0)
    )

    #_override
    (defn #_"Number" Ops'''negate--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x]
        (let [#_"BigDecimal" bx (cast BigDecimal x) #_"MathContext" mc (deref BigDecimalOps'MATH_CONTEXT)]
            (if (some? mc) (.negate bx, mc) (.negate bx))
        )
    )

    #_override
    (defn #_"Number" Ops'''inc--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x]
        (let [#_"BigDecimal" bx (cast BigDecimal x) #_"MathContext" mc (deref BigDecimalOps'MATH_CONTEXT)]
            (if (some? mc) (.add bx, BigDecimal/ONE, mc) (.add bx, BigDecimal/ONE))
        )
    )

    #_override
    (defn #_"Number" Ops'''dec--BigDecimalOps [#_"BigDecimalOps" this, #_"Number" x]
        (let [#_"BigDecimal" bx (cast BigDecimal x) #_"MathContext" mc (deref BigDecimalOps'MATH_CONTEXT)]
            (if (some? mc) (.subtract bx, BigDecimal/ONE, mc) (.subtract bx, BigDecimal/ONE))
        )
    )
)

(def Category'enum-set
    (hash-set
        :Category'INTEGER
        :Category'FLOATING
        :Category'DECIMAL
        :Category'RATIO
    )
)

(class-ns Numbers
    (def #_"LongOps"       Numbers'LONG_OPS       (LongOps'new)      )
    (def #_"DoubleOps"     Numbers'DOUBLE_OPS     (DoubleOps'new)    )
    (def #_"RatioOps"      Numbers'RATIO_OPS      (RatioOps'new)     )
    (def #_"BigIntOps"     Numbers'BIGINT_OPS     (BigIntOps'new)    )
    (def #_"BigDecimalOps" Numbers'BIGDECIMAL_OPS (BigDecimalOps'new))

    (defn #_"Ops" Numbers'ops [#_"Object" x]
        (condp = (class x)
            Integer    Numbers'LONG_OPS
            Long       Numbers'LONG_OPS
            BigInt     Numbers'BIGINT_OPS
            BigInteger Numbers'BIGINT_OPS
            Ratio      Numbers'RATIO_OPS
            Float      Numbers'DOUBLE_OPS
            Double     Numbers'DOUBLE_OPS
            BigDecimal Numbers'BIGDECIMAL_OPS
                       Numbers'LONG_OPS
        )
    )

    (defn #_"Category" Numbers'category [#_"Object" x]
        (condp = (class x)
            Integer    :Category'INTEGER
            Long       :Category'INTEGER
            BigInt     :Category'INTEGER
            Ratio      :Category'RATIO
            Float      :Category'FLOATING
            Double     :Category'FLOATING
            BigDecimal :Category'DECIMAL
                       :Category'INTEGER
        )
    )

    (defn #_"boolean" Numbers'isInteger [#_"Object" x]
        (or (instance? Integer x) (instance? Long x) (instance? BigInt x) (instance? BigInteger x))
    )

    (defn #_"boolean" Numbers'isNaN [#_"Object" x]
        (or (and (instance? Double x) (.isNaN (cast Double x))) (and (instance? Float x) (.isNaN (cast Float x))))
    )

    (defn #_"Number" Numbers'num-1l [#_"long"   x] (Long/valueOf   x))
    (defn #_"Number" Numbers'num-1f [#_"float"  x] (Float/valueOf  x))
    (defn #_"Number" Numbers'num-1d [#_"double" x] (Double/valueOf x))
    (defn #_"Number" Numbers'num-1o [#_"Object" x] (cast Number    x))

    (defn #_"boolean" Numbers'isZero-1o [#_"Object" x] (.isZero (Numbers'ops x), (cast Number x)))
    (defn #_"boolean" Numbers'isPos-1o  [#_"Object" x] (.isPos  (Numbers'ops x), (cast Number x)))
    (defn #_"boolean" Numbers'isNeg-1o  [#_"Object" x] (.isNeg  (Numbers'ops x), (cast Number x)))

    (defn #_"Number" Numbers'minus-1o  [#_"Object" x] (.negate  (Numbers'ops x), (cast Number x)))
    (defn #_"Number" Numbers'minusP-1o [#_"Object" x] (.negateP (Numbers'ops x), (cast Number x)))
    (defn #_"Number" Numbers'inc-1o    [#_"Object" x] (.inc     (Numbers'ops x), (cast Number x)))
    (defn #_"Number" Numbers'incP-1o   [#_"Object" x] (.incP    (Numbers'ops x), (cast Number x)))
    (defn #_"Number" Numbers'dec-1o    [#_"Object" x] (.dec     (Numbers'ops x), (cast Number x)))
    (defn #_"Number" Numbers'decP-1o   [#_"Object" x] (.decP    (Numbers'ops x), (cast Number x)))

    (defn #_"Number" Numbers'add-2oo [#_"Object" x, #_"Object" y]
        (-> (.combine (Numbers'ops x), (Numbers'ops y)) (.add (cast Number x), (cast Number y)))
    )

    (defn #_"Number" Numbers'addP-2oo [#_"Object" x, #_"Object" y]
        (-> (.combine (Numbers'ops x), (Numbers'ops y)) (.addP (cast Number x), (cast Number y)))
    )

    (defn #_"Number" Numbers'minus-2oo [#_"Object" x, #_"Object" y]
        (let [#_"Ops" yops (Numbers'ops y)]
            (-> (.combine (Numbers'ops x), yops) (.add (cast Number x), (.negate yops, (cast Number y))))
        )
    )

    (defn #_"Number" Numbers'minusP-2oo [#_"Object" x, #_"Object" y]
        (let [#_"Ops" yops (Numbers'ops y)
              #_"Number" negativeY (.negateP yops, (cast Number y))
              #_"Ops" negativeYOps (Numbers'ops negativeY)]
            (-> (.combine (Numbers'ops x), negativeYOps) (.addP (cast Number x), negativeY))
        )
    )

    (defn #_"Number" Numbers'multiply-2oo [#_"Object" x, #_"Object" y]
        (-> (.combine (Numbers'ops x), (Numbers'ops y)) (.multiply (cast Number x), (cast Number y)))
    )

    (defn #_"Number" Numbers'multiplyP-2oo [#_"Object" x, #_"Object" y]
        (-> (.combine (Numbers'ops x), (Numbers'ops y)) (.multiplyP (cast Number x), (cast Number y)))
    )

    (defn #_"Number" Numbers'divide-2oo [#_"Object" x, #_"Object" y]
        (cond
            (Numbers'isNaN x) (cast Number x)
            (Numbers'isNaN y) (cast Number y)
            :else
                (let [#_"Ops" yops (Numbers'ops y)]
                    (when (.isZero yops, (cast Number y))
                        (throw (ArithmeticException. "Divide by zero"))
                    )
                    (-> (.combine (Numbers'ops x), yops) (.divide (cast Number x), (cast Number y)))
                )
        )
    )

    (defn #_"Number" Numbers'quotient-2oo [#_"Object" x, #_"Object" y]
        (let [#_"Ops" yops (Numbers'ops y)]
            (when (.isZero yops, (cast Number y))
                (throw (ArithmeticException. "Divide by zero"))
            )
            (-> (.combine (Numbers'ops x), yops) (.quotient (cast Number x), (cast Number y)))
        )
    )

    (defn #_"Number" Numbers'remainder-2oo [#_"Object" x, #_"Object" y]
        (let [#_"Ops" yops (Numbers'ops y)]
            (when (.isZero yops, (cast Number y))
                (throw (ArithmeticException. "Divide by zero"))
            )
            (-> (.combine (Numbers'ops x), yops) (.remainder (cast Number x), (cast Number y)))
        )
    )

    (defn #_"double" Numbers'quotient-2dd [#_"double" n, #_"double" d]
        (when (zero? d)
            (throw (ArithmeticException. "Divide by zero"))
        )

        (let [#_"double" q (/ n d)]
            (cond (<= Long/MIN_VALUE q Long/MAX_VALUE)
                (do
                    (double (long q))
                )
                :else ;; bigint quotient
                (do
                    (.doubleValue (.toBigInteger (BigDecimal. q)))
                )
            )
        )
    )

    (defn #_"double" Numbers'remainder-2dd [#_"double" n, #_"double" d]
        (when (zero? d)
            (throw (ArithmeticException. "Divide by zero"))
        )

        (let [#_"double" q (/ n d)]
            (cond (<= Long/MIN_VALUE q Long/MAX_VALUE)
                (do
                    (- n (* (long q) d))
                )
                :else ;; bigint quotient
                (let [#_"Number" bq (.toBigInteger (BigDecimal. q))]
                    (- n (* (.doubleValue bq) d))
                )
            )
        )
    )

    (defn #_"boolean" Numbers'equiv-2nn [#_"Number" x, #_"Number" y]
        (-> (.combine (Numbers'ops x), (Numbers'ops y)) (.equiv x, y))
    )

    (defn #_"boolean" Numbers'equiv-2oo [#_"Object" x, #_"Object" y]
        (Numbers'equiv-2nn (cast Number x), (cast Number y))
    )

    (defn #_"boolean" Numbers'equal [#_"Number" x, #_"Number" y]
        (and (= (Numbers'category x) (Numbers'category y)) (.equiv (.combine (Numbers'ops x), (Numbers'ops y)), x, y))
    )

    (defn #_"boolean" Numbers'lt-2oo [#_"Object" x, #_"Object" y]
        (-> (.combine (Numbers'ops x), (Numbers'ops y)) (.lt (cast Number x), (cast Number y)))
    )

    (defn #_"boolean" Numbers'lte-2oo [#_"Object" x, #_"Object" y]
        (-> (.combine (Numbers'ops x), (Numbers'ops y)) (.lte (cast Number x), (cast Number y)))
    )

    (defn #_"boolean" Numbers'gt-2oo [#_"Object" x, #_"Object" y]
        (-> (.combine (Numbers'ops x), (Numbers'ops y)) (.lt (cast Number y), (cast Number x)))
    )

    (defn #_"boolean" Numbers'gte-2oo [#_"Object" x, #_"Object" y]
        (-> (.combine (Numbers'ops x), (Numbers'ops y)) (.gte (cast Number x), (cast Number y)))
    )

    (defn #_"int" Numbers'compare [#_"Number" x, #_"Number" y]
        (let [#_"Ops" ops (.combine (Numbers'ops x), (Numbers'ops y))]
            (cond (.lt ops, x, y) -1 (.lt ops, y, x) 1 :else 0)
        )
    )

    (defn #_"BigInt" Numbers'toBigInt [#_"Object" x]
        (condp instance? x
            BigInt     x
            BigInteger (BigInt'fromBigInteger x)
                       (BigInt'fromLong (.longValue (cast Number x)))
        )
    )

    (defn #_"BigInteger" Numbers'toBigInteger [#_"Object" x]
        (condp instance? x
            BigInteger x
            BigInt     (BigInt''toBigInteger x)
                       (BigInteger/valueOf (.longValue (cast Number x)))
        )
    )

    (defn #_"BigDecimal" Numbers'toBigDecimal [#_"Object" x]
        (condp instance? x
            BigDecimal x
            BigInt     (if (some? (:bipart x)) (BigDecimal. (:bipart x)) (BigDecimal/valueOf (:lpart x)))
            BigInteger (BigDecimal. x)
            Double     (BigDecimal. (.doubleValue x))
            Float      (BigDecimal. (.doubleValue x))
            Ratio      (cast BigDecimal (Numbers'divide-2oo (BigDecimal. (:numerator x)), (:denominator x)))
                       (BigDecimal/valueOf (.longValue (cast Number x)))
        )
    )

    (defn #_"Ratio" Numbers'toRatio [#_"Object" x]
        (condp instance? x
            Ratio x
            BigDecimal
                (let [#_"BigInteger" i (.unscaledValue x) #_"int" scale (.scale x)]
                    (if (neg? scale)
                        (Ratio'new (.multiply i, (.pow BigInteger/TEN, (- scale))), BigInteger/ONE)
                        (Ratio'new i, (.pow BigInteger/TEN, scale))
                    )
                )
                (Ratio'new (Numbers'toBigInteger x), BigInteger/ONE)
        )
    )

    (defn #_"Number" Numbers'rationalize [#_"Number" x]
        (cond
            (or (instance? Float x) (instance? Double x))
                (Numbers'rationalize (BigDecimal/valueOf (.doubleValue x)))
            (instance? BigDecimal x)
                (let [#_"BigInteger" i (.unscaledValue x) #_"int" scale (.scale x)]
                    (if (neg? scale)
                        (BigInt'fromBigInteger (.multiply i, (.pow BigInteger/TEN, (- scale))))
                        (Numbers'divide-2ii i, (.pow BigInteger/TEN, scale))
                    )
                )
            :else
                x
        )
    )

    (defn #_"Number" Numbers'reduceBigInt [#_"BigInt" val]
        (or (:bipart val) (Numbers'num-1l (:lpart val)))
    )

    (defn #_"Number" Numbers'divide-2ii [#_"BigInteger" n, #_"BigInteger" d]
        (when-not (= d BigInteger/ZERO) => (throw (ArithmeticException. "Divide by zero"))
            (let [#_"BigInteger" gcd (.gcd n, d)]
                (when-not (= gcd BigInteger/ZERO) => BigInt'ZERO
                    (let [n (.divide n, gcd) d (.divide d, gcd)]
                        (cond
                            (= d BigInteger/ONE)
                                (BigInt'fromBigInteger n)
                            (= d (.negate BigInteger/ONE))
                                (BigInt'fromBigInteger (.negate n))
                            :else
                                (Ratio'new (if (neg? (.signum d)) (.negate n) n), (if (neg? (.signum d)) (.negate d) d))
                        )
                    )
                )
            )
        )
    )

    (defn #_"long" Numbers'bitOpsCast [#_"Object" x]
        (let [#_"Class" xc (class x)]                   ;; no bignums, no decimals
            (when (any = xc Long Integer Short Byte) => (throw! (str "bit operation not supported for: " xc))
                (long x)
            )
        )
    )

    (defn #_"int" Numbers'shiftLeftInt [#_"int" x, #_"int" n]
        (<< x n)
    )

    (defn #_"long" Numbers'shiftLeft-2ll [#_"long"   x, #_"long"   n] (<< x n))
    (defn #_"long" Numbers'shiftLeft-2oo [#_"Object" x, #_"Object" n] (Numbers'shiftLeft-2ll (Numbers'bitOpsCast x), (Numbers'bitOpsCast n)))
    (defn #_"long" Numbers'shiftLeft-2ol [#_"Object" x, #_"long"   n] (Numbers'shiftLeft-2ll (Numbers'bitOpsCast x),                     n ))
    (defn #_"long" Numbers'shiftLeft-2lo [#_"long"   x, #_"Object" n] (Numbers'shiftLeft-2ll                     x , (Numbers'bitOpsCast n)))

    (defn #_"int" Numbers'shiftRightInt [#_"int" x, #_"int" n]
        (>> x n)
    )

    (defn #_"long" Numbers'shiftRight-2ll [#_"long"   x, #_"long"   n] (>> x n))
    (defn #_"long" Numbers'shiftRight-2oo [#_"Object" x, #_"Object" n] (Numbers'shiftRight-2ll (Numbers'bitOpsCast x), (Numbers'bitOpsCast n)))
    (defn #_"long" Numbers'shiftRight-2ol [#_"Object" x, #_"long"   n] (Numbers'shiftRight-2ll (Numbers'bitOpsCast x),                     n ))
    (defn #_"long" Numbers'shiftRight-2lo [#_"long"   x, #_"Object" n] (Numbers'shiftRight-2ll                     x , (Numbers'bitOpsCast n)))

    (defn #_"int" Numbers'unsignedShiftRightInt [#_"int" x, #_"int" n]
        (>>> x n)
    )

    (defn #_"long" Numbers'unsignedShiftRight-2ll [#_"long"   x, #_"long"   n] (>>> x n))
    (defn #_"long" Numbers'unsignedShiftRight-2oo [#_"Object" x, #_"Object" n] (Numbers'unsignedShiftRight-2ll (Numbers'bitOpsCast x), (Numbers'bitOpsCast n)))
    (defn #_"long" Numbers'unsignedShiftRight-2ol [#_"Object" x, #_"long"   n] (Numbers'unsignedShiftRight-2ll (Numbers'bitOpsCast x),                     n ))
    (defn #_"long" Numbers'unsignedShiftRight-2lo [#_"long"   x, #_"Object" n] (Numbers'unsignedShiftRight-2ll                     x , (Numbers'bitOpsCast n)))

    (defn #_"float[]" Numbers'float_array-2 [#_"int" size, #_"Object" init]
        (let [#_"float[]" ret (.float-array size)]
            (if (number? init)
                (let [#_"float" f (.floatValue init)]
                    (dotimes [#_"int" i (alength ret)]
                        (aset ret i f)
                    )
                )
                (let [#_"ISeq" s (seq init)]
                    (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                        (aset ret i (.floatValue (first s)))
                    )
                )
            )
            ret
        )
    )

    (defn #_"float[]" Numbers'float_array-1 [#_"Object" sizeOrSeq]
        (if (number? sizeOrSeq)
            (.float-array (.intValue sizeOrSeq))
            (let [#_"ISeq" s (seq sizeOrSeq)
                  #_"int" size (count s)
                  #_"float[]" ret (.float-array size)]
                (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                    (aset ret i (.floatValue (first s)))
                )
                ret
            )
        )
    )

    (defn #_"double[]" Numbers'double_array-2 [#_"int" size, #_"Object" init]
        (let [#_"double[]" ret (.double-array size)]
            (if (number? init)
                (let [#_"double" f (.doubleValue init)]
                    (dotimes [#_"int" i (alength ret)]
                        (aset ret i f)
                    )
                )
                (let [#_"ISeq" s (seq init)]
                    (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                        (aset ret i (.doubleValue (first s)))
                    )
                )
            )
            ret
        )
    )

    (defn #_"double[]" Numbers'double_array-1 [#_"Object" sizeOrSeq]
        (if (number? sizeOrSeq)
            (.double-array (.intValue sizeOrSeq))
            (let [#_"ISeq" s (seq sizeOrSeq)
                  #_"int" size (count s)
                  #_"double[]" ret (.double-array size)]
                (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                    (aset ret i (.doubleValue (first s)))
                )
                ret
            )
        )
    )

    (defn #_"int[]" Numbers'int_array-2 [#_"int" size, #_"Object" init]
        (let [#_"int[]" ret (.int-array size)]
            (if (number? init)
                (let [#_"int" f (.intValue init)]
                    (dotimes [#_"int" i (alength ret)]
                        (aset ret i f)
                    )
                )
                (let [#_"ISeq" s (seq init)]
                    (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                        (aset ret i (.intValue (first s)))
                    )
                )
            )
            ret
        )
    )

    (defn #_"int[]" Numbers'int_array-1 [#_"Object" sizeOrSeq]
        (if (number? sizeOrSeq)
            (.int-array (.intValue sizeOrSeq))
            (let [#_"ISeq" s (seq sizeOrSeq)
                  #_"int" size (count s)
                  #_"int[]" ret (.int-array size)]
                (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                    (aset ret i (.intValue (first s)))
                )
                ret
            )
        )
    )

    (defn #_"long[]" Numbers'long_array-2 [#_"int" size, #_"Object" init]
        (let [#_"long[]" ret (.long-array size)]
            (if (number? init)
                (let [#_"long" f (.longValue init)]
                    (dotimes [#_"int" i (alength ret)]
                        (aset ret i f)
                    )
                )
                (let [#_"ISeq" s (seq init)]
                    (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                        (aset ret i (.longValue (first s)))
                    )
                )
            )
            ret
        )
    )

    (defn #_"long[]" Numbers'long_array-1 [#_"Object" sizeOrSeq]
        (if (number? sizeOrSeq)
            (.long-array (.intValue sizeOrSeq))
            (let [#_"ISeq" s (seq sizeOrSeq)
                  #_"int" size (count s)
                  #_"long[]" ret (.long-array size)]
                (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                    (aset ret i (.longValue (first s)))
                )
                ret
            )
        )
    )

    (defn #_"short[]" Numbers'short_array-2 [#_"int" size, #_"Object" init]
        (let [#_"short[]" ret (.short-array size)]
            (if (instance? Short init)
                (let [#_"short" s init]
                    (dotimes [#_"int" i (alength ret)]
                        (aset ret i s)
                    )
                )
                (let [#_"ISeq" s (seq init)]
                    (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                        (aset ret i (.shortValue (first s)))
                    )
                )
            )
            ret
        )
    )

    (defn #_"short[]" Numbers'short_array-1 [#_"Object" sizeOrSeq]
        (if (number? sizeOrSeq)
            (.short-array (.intValue sizeOrSeq))
            (let [#_"ISeq" s (seq sizeOrSeq)
                  #_"int" size (count s)
                  #_"short[]" ret (.short-array size)]
                (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                    (aset ret i (.shortValue (first s)))
                )
                ret
            )
        )
    )

    (defn #_"char[]" Numbers'char_array-2 [#_"int" size, #_"Object" init]
        (let [#_"char[]" ret (.char-array size)]
            (if (instance? Character init)
                (let [#_"char" c init]
                    (dotimes [#_"int" i (alength ret)]
                        (aset ret i c)
                    )
                )
                (let [#_"ISeq" s (seq init)]
                    (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                        (aset ret i (cast Character (first s)))
                    )
                )
            )
            ret
        )
    )

    (defn #_"char[]" Numbers'char_array-1 [#_"Object" sizeOrSeq]
        (if (number? sizeOrSeq)
            (.char-array (.intValue sizeOrSeq))
            (let [#_"ISeq" s (seq sizeOrSeq)
                  #_"int" size (count s)
                  #_"char[]" ret (.char-array size)]
                (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                    (aset ret i (cast Character (first s)))
                )
                ret
            )
        )
    )

    (defn #_"byte[]" Numbers'byte_array-2 [#_"int" size, #_"Object" init]
        (let [#_"byte[]" ret (.byte-array size)]
            (if (instance? Byte init)
                (let [#_"byte" b init]
                    (dotimes [#_"int" i (alength ret)]
                        (aset ret i b)
                    )
                )
                (let [#_"ISeq" s (seq init)]
                    (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                        (aset ret i (.byteValue (first s)))
                    )
                )
            )
            ret
        )
    )

    (defn #_"byte[]" Numbers'byte_array-1 [#_"Object" sizeOrSeq]
        (if (number? sizeOrSeq)
            (.byte-array (.intValue sizeOrSeq))
            (let [#_"ISeq" s (seq sizeOrSeq)
                  #_"int" size (count s)
                  #_"byte[]" ret (.byte-array size)]
                (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                    (aset ret i (.byteValue (first s)))
                )
                ret
            )
        )
    )

    (defn #_"boolean[]" Numbers'boolean_array-2 [#_"int" size, #_"Object" init]
        (let [#_"boolean[]" ret (.boolean-array size)]
            (if (instance? Boolean init)
                (let [#_"boolean" b init]
                    (dotimes [#_"int" i (alength ret)]
                        (aset ret i b)
                    )
                )
                (let [#_"ISeq" s (seq init)]
                    (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                        (aset ret i (cast Boolean (first s)))
                    )
                )
            )
            ret
        )
    )

    (defn #_"boolean[]" Numbers'boolean_array-1 [#_"Object" sizeOrSeq]
        (if (number? sizeOrSeq)
            (.boolean-array (.intValue sizeOrSeq))
            (let [#_"ISeq" s (seq sizeOrSeq)
                  #_"int" size (count s)
                  #_"boolean[]" ret (.boolean-array size)]
                (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                    (aset ret i (cast Boolean (first s)))
                )
                ret
            )
        )
    )

    (defn #_"boolean[]" Numbers'booleans [#_"Object" array] (cast Compiler'BOOLEANS_CLASS array))
    (defn #_"byte[]"    Numbers'bytes    [#_"Object" array] (cast Compiler'BYTES_CLASS    array))
    (defn #_"short[]"   Numbers'shorts   [#_"Object" array] (cast Compiler'SHORTS_CLASS   array))
    (defn #_"char[]"    Numbers'chars    [#_"Object" array] (cast Compiler'CHARS_CLASS    array))
    (defn #_"int[]"     Numbers'ints     [#_"Object" array] (cast Compiler'INTS_CLASS     array))
    (defn #_"long[]"    Numbers'longs    [#_"Object" array] (cast Compiler'LONGS_CLASS    array))
    (defn #_"float[]"   Numbers'floats   [#_"Object" array] (cast Compiler'FLOATS_CLASS   array))
    (defn #_"double[]"  Numbers'doubles  [#_"Object" array] (cast Compiler'DOUBLES_CLASS  array))

    (defn #_"double" Numbers'add-2dd    [#_"double" x, #_"double" y] (+ x y))
    (defn #_"double" Numbers'addP-2dd   [#_"double" x, #_"double" y] (+ x y))
    (defn #_"double" Numbers'minus-2dd  [#_"double" x, #_"double" y] (- x y))
    (defn #_"double" Numbers'minusP-2dd [#_"double" x, #_"double" y] (- x y))

    (defn #_"double" Numbers'minus-1d  [#_"double" x] (- x))
    (defn #_"double" Numbers'minusP-1d [#_"double" x] (- x))
    (defn #_"double" Numbers'inc-1d    [#_"double" x] (inc x))
    (defn #_"double" Numbers'incP-1d   [#_"double" x] (inc x))
    (defn #_"double" Numbers'dec-1d    [#_"double" x] (dec x))
    (defn #_"double" Numbers'decP-1d   [#_"double" x] (dec x))

    (defn #_"double" Numbers'multiply-2dd  [#_"double" x, #_"double" y] (* x y))
    (defn #_"double" Numbers'multiplyP-2dd [#_"double" x, #_"double" y] (* x y))
    (defn #_"double" Numbers'divide-2dd    [#_"double" x, #_"double" y] (/ x y))

    (defn #_"boolean" Numbers'equiv-2dd [#_"double" x, #_"double" y] (= x y))
    (defn #_"boolean" Numbers'lt-2dd    [#_"double" x, #_"double" y] (< x y))
    (defn #_"boolean" Numbers'lte-2dd   [#_"double" x, #_"double" y] (<= x y))
    (defn #_"boolean" Numbers'gt-2dd    [#_"double" x, #_"double" y] (> x y))
    (defn #_"boolean" Numbers'gte-2dd   [#_"double" x, #_"double" y] (>= x y))

    (defn #_"boolean" Numbers'isPos-1d  [#_"double" x] (> x 0))
    (defn #_"boolean" Numbers'isNeg-1d  [#_"double" x] (< x 0))
    (defn #_"boolean" Numbers'isZero-1d [#_"double" x] (zero? x))

    (defn #_"int" Numbers'unchecked_int_add       [#_"int" x, #_"int" y] (+ x y))
    (defn #_"int" Numbers'unchecked_int_subtract  [#_"int" x, #_"int" y] (- x y))
    (defn #_"int" Numbers'unchecked_int_multiply  [#_"int" x, #_"int" y] (* x y))
    (defn #_"int" Numbers'unchecked_int_divide    [#_"int" x, #_"int" y] (/ x y))
    (defn #_"int" Numbers'unchecked_int_remainder [#_"int" x, #_"int" y] (% x y))

    (defn #_"int" Numbers'unchecked_int_inc    [#_"int" x] (inc x))
    (defn #_"int" Numbers'unchecked_int_dec    [#_"int" x] (dec x))
    (defn #_"int" Numbers'unchecked_int_negate [#_"int" x] (- x)  )

    (defn #_"long" Numbers'not-1l [#_"long"   x] (bit-not x))
    (defn #_"long" Numbers'not-1o [#_"Object" x] (Numbers'not-1l (Numbers'bitOpsCast x)))

    (defn #_"long" Numbers'and-2ll [#_"long"   x, #_"long"   y] (& x y))
    (defn #_"long" Numbers'and-2oo [#_"Object" x, #_"Object" y] (Numbers'and-2ll (Numbers'bitOpsCast x), (Numbers'bitOpsCast y)))
    (defn #_"long" Numbers'and-2ol [#_"Object" x, #_"long"   y] (Numbers'and-2ll (Numbers'bitOpsCast x),                     y ))
    (defn #_"long" Numbers'and-2lo [#_"long"   x, #_"Object" y] (Numbers'and-2ll                     x , (Numbers'bitOpsCast y)))

    (defn #_"long" Numbers'or-2ll [#_"long"   x, #_"long"   y] (| x y))
    (defn #_"long" Numbers'or-2oo [#_"Object" x, #_"Object" y] (Numbers'or-2ll (Numbers'bitOpsCast x), (Numbers'bitOpsCast y)))
    (defn #_"long" Numbers'or-2ol [#_"Object" x, #_"long"   y] (Numbers'or-2ll (Numbers'bitOpsCast x),                     y ))
    (defn #_"long" Numbers'or-2lo [#_"long"   x, #_"Object" y] (Numbers'or-2ll                     x , (Numbers'bitOpsCast y)))

    (defn #_"long" Numbers'xor-2ll [#_"long"   x, #_"long"   y] (bit-xor x y))
    (defn #_"long" Numbers'xor-2oo [#_"Object" x, #_"Object" y] (Numbers'xor-2ll (Numbers'bitOpsCast x), (Numbers'bitOpsCast y)))
    (defn #_"long" Numbers'xor-2ol [#_"Object" x, #_"long"   y] (Numbers'xor-2ll (Numbers'bitOpsCast x),                     y ))
    (defn #_"long" Numbers'xor-2lo [#_"long"   x, #_"Object" y] (Numbers'xor-2ll                     x , (Numbers'bitOpsCast y)))

    (defn #_"long" Numbers'andNot-2ll [#_"long"   x, #_"long"   y] (& x (bit-not y)))
    (defn #_"long" Numbers'andNot-2oo [#_"Object" x, #_"Object" y] (Numbers'andNot-2ll (Numbers'bitOpsCast x), (Numbers'bitOpsCast y)))
    (defn #_"long" Numbers'andNot-2ol [#_"Object" x, #_"long"   y] (Numbers'andNot-2ll (Numbers'bitOpsCast x),                     y ))
    (defn #_"long" Numbers'andNot-2lo [#_"long"   x, #_"Object" y] (Numbers'andNot-2ll                     x , (Numbers'bitOpsCast y)))

    (defn #_"long" Numbers'clearBit-2ll [#_"long"   x, #_"long"   n] (& x (bit-not (<< 1 n))))
    (defn #_"long" Numbers'clearBit-2oo [#_"Object" x, #_"Object" n] (Numbers'clearBit-2ll (Numbers'bitOpsCast x), (Numbers'bitOpsCast n)))
    (defn #_"long" Numbers'clearBit-2ol [#_"Object" x, #_"long"   n] (Numbers'clearBit-2ll (Numbers'bitOpsCast x),                     n ))
    (defn #_"long" Numbers'clearBit-2lo [#_"long"   x, #_"Object" n] (Numbers'clearBit-2ll                     x , (Numbers'bitOpsCast n)))

    (defn #_"long" Numbers'setBit-2ll [#_"long"   x, #_"long"   n] (| x (<< 1 n)))
    (defn #_"long" Numbers'setBit-2oo [#_"Object" x, #_"Object" n] (Numbers'setBit-2ll (Numbers'bitOpsCast x), (Numbers'bitOpsCast n)))
    (defn #_"long" Numbers'setBit-2ol [#_"Object" x, #_"long"   n] (Numbers'setBit-2ll (Numbers'bitOpsCast x),                     n ))
    (defn #_"long" Numbers'setBit-2lo [#_"long"   x, #_"Object" n] (Numbers'setBit-2ll                     x , (Numbers'bitOpsCast n)))

    (defn #_"long" Numbers'flipBit-2ll [#_"long"   x, #_"long"   n] (bit-xor x (<< 1 n)))
    (defn #_"long" Numbers'flipBit-2oo [#_"Object" x, #_"Object" n] (Numbers'flipBit-2ll (Numbers'bitOpsCast x), (Numbers'bitOpsCast n)))
    (defn #_"long" Numbers'flipBit-2ol [#_"Object" x, #_"long"   n] (Numbers'flipBit-2ll (Numbers'bitOpsCast x),                     n ))
    (defn #_"long" Numbers'flipBit-2lo [#_"long"   x, #_"Object" n] (Numbers'flipBit-2ll                     x , (Numbers'bitOpsCast n)))

    (defn #_"boolean" Numbers'testBit-2ll [#_"long"   x, #_"long"   n] (not= (& x (<< 1 n)) 0))
    (defn #_"boolean" Numbers'testBit-2oo [#_"Object" x, #_"Object" n] (Numbers'testBit-2ll (Numbers'bitOpsCast x), (Numbers'bitOpsCast n)))
    (defn #_"boolean" Numbers'testBit-2ol [#_"Object" x, #_"long"   n] (Numbers'testBit-2ll (Numbers'bitOpsCast x),                     n ))
    (defn #_"boolean" Numbers'testBit-2lo [#_"long"   x, #_"Object" n] (Numbers'testBit-2ll                     x , (Numbers'bitOpsCast n)))

    (defn #_"Number" Numbers'quotient-2do [#_"double" x, #_"Object" y] (Numbers'quotient-2oo (cast Object x),              y ))
    (defn #_"Number" Numbers'quotient-2od [#_"Object" x, #_"double" y] (Numbers'quotient-2oo              x , (cast Object y)))
    (defn #_"Number" Numbers'quotient-2lo [#_"long"   x, #_"Object" y] (Numbers'quotient-2oo (cast Object x),              y ))
    (defn #_"Number" Numbers'quotient-2ol [#_"Object" x, #_"long"   y] (Numbers'quotient-2oo              x , (cast Object y)))
    (defn #_"double" Numbers'quotient-2dl [#_"double" x, #_"long"   y] (Numbers'quotient-2dd              x ,      (double y)))
    (defn #_"double" Numbers'quotient-2ld [#_"long"   x, #_"double" y] (Numbers'quotient-2dd      (double x),              y ))

    (defn #_"Number" Numbers'remainder-2do [#_"double" x, #_"Object" y] (Numbers'remainder-2oo (cast Object x),              y ))
    (defn #_"Number" Numbers'remainder-2od [#_"Object" x, #_"double" y] (Numbers'remainder-2oo              x , (cast Object y)))
    (defn #_"Number" Numbers'remainder-2lo [#_"long"   x, #_"Object" y] (Numbers'remainder-2oo (cast Object x),              y ))
    (defn #_"Number" Numbers'remainder-2ol [#_"Object" x, #_"long"   y] (Numbers'remainder-2oo              x , (cast Object y)))
    (defn #_"double" Numbers'remainder-2dl [#_"double" x, #_"long"   y] (Numbers'remainder-2dd              x ,      (double y)))
    (defn #_"double" Numbers'remainder-2ld [#_"long"   x, #_"double" y] (Numbers'remainder-2dd      (double x),              y ))

    (defn #_"int" Numbers'throwIntOverflow []
        (throw (ArithmeticException. "integer overflow"))
    )

    (defn #_"long" Numbers'add-2ll [#_"long" x, #_"long" y]
        (let [#_"long" ret (+ x y)]
            (when-not (and (neg? (bit-xor ret x)) (neg? (bit-xor ret y))) => (Numbers'throwIntOverflow)
                ret
            )
        )
    )

    (defn #_"Number" Numbers'addP-2ll [#_"long" x, #_"long" y]
        (let [#_"long" ret (+ x y)]
            (if (and (neg? (bit-xor ret x)) (neg? (bit-xor ret y)))
                (Numbers'addP-2oo (cast Number x), (cast Number y))
                (Numbers'num-1l ret)
            )
        )
    )

    (defn #_"long" Numbers'minus-2ll [#_"long" x, #_"long" y]
        (let [#_"long" ret (- x y)]
            (when-not (and (neg? (bit-xor ret x)) (neg? (bit-xor ret (bit-not y)))) => (Numbers'throwIntOverflow)
                ret
            )
        )
    )

    (defn #_"Number" Numbers'minusP-2ll [#_"long" x, #_"long" y]
        (let [#_"long" ret (- x y)]
            (if (and (neg? (bit-xor ret x)) (neg? (bit-xor ret (bit-not y))))
                (Numbers'minusP-2oo (cast Number x), (cast Number y))
                (Numbers'num-1l ret)
            )
        )
    )

    (defn #_"long" Numbers'minus-1l [#_"long" x]
        (when-not (= x Long/MIN_VALUE) => (Numbers'throwIntOverflow)
            (- x)
        )
    )

    (defn #_"Number" Numbers'minusP-1l [#_"long" x]
        (if (= x Long/MIN_VALUE)
            (BigInt'fromBigInteger (.negate (BigInteger/valueOf x)))
            (Numbers'num-1l (- x))
        )
    )

    (defn #_"long" Numbers'inc-1l [#_"long" x] (if (= x Long/MAX_VALUE) (Numbers'throwIntOverflow) (inc x)))
    (defn #_"long" Numbers'dec-1l [#_"long" x] (if (= x Long/MIN_VALUE) (Numbers'throwIntOverflow) (dec x)))

    (defn #_"Number" Numbers'incP-1l [#_"long" x] (if (= x Long/MAX_VALUE) (.inc Numbers'BIGINT_OPS, x) (Numbers'num-1l (inc x))))
    (defn #_"Number" Numbers'decP-1l [#_"long" x] (if (= x Long/MIN_VALUE) (.dec Numbers'BIGINT_OPS, x) (Numbers'num-1l (dec x))))

    (defn #_"long" Numbers'multiply-2ll [#_"long" x, #_"long" y]
        (when-not (and (= x Long/MIN_VALUE) (neg? y)) => (Numbers'throwIntOverflow)
            (let [#_"long" ret (* x y)]
                (when (or (zero? y) (= (/ ret y) x)) => (Numbers'throwIntOverflow)
                    ret
                )
            )
        )
    )

    (defn #_"Number" Numbers'multiplyP-2ll [#_"long" x, #_"long" y]
        (when-not (and (= x Long/MIN_VALUE) (neg? y)) => (Numbers'multiplyP-2oo (cast Number x), (cast Number y))
            (let [#_"long" ret (* x y)]
                (when (or (zero? y) (= (/ ret y) x)) => (Numbers'multiplyP-2oo (cast Number x), (cast Number y))
                    (Numbers'num-1l ret)
                )
            )
        )
    )

    (defn #_"long" Numbers'quotient-2ll  [#_"long" x, #_"long" y] (/ x y))
    (defn #_"long" Numbers'remainder-2ll [#_"long" x, #_"long" y] (% x y))

    (defn #_"boolean" Numbers'equiv-2ll [#_"long" x, #_"long" y] (= x y))
    (defn #_"boolean" Numbers'lt-2ll    [#_"long" x, #_"long" y] (< x y))
    (defn #_"boolean" Numbers'lte-2ll   [#_"long" x, #_"long" y] (<= x y))
    (defn #_"boolean" Numbers'gt-2ll    [#_"long" x, #_"long" y] (> x y))
    (defn #_"boolean" Numbers'gte-2ll   [#_"long" x, #_"long" y] (>= x y))

    (defn #_"boolean" Numbers'isPos-1l  [#_"long" x] (> x 0))
    (defn #_"boolean" Numbers'isNeg-1l  [#_"long" x] (< x 0))
    (defn #_"boolean" Numbers'isZero-1l [#_"long" x] (zero? x))

    (defn #_"Number" Numbers'add-2lo [#_"long"   x, #_"Object" y] (Numbers'add-2oo (cast Object x), y))
    (defn #_"Number" Numbers'add-2ol [#_"Object" x, #_"long"   y] (Numbers'add-2oo x, (cast Object y)))
    (defn #_"double" Numbers'add-2do [#_"double" x, #_"Object" y] (Numbers'add-2dd x, (.doubleValue (cast Number y))))
    (defn #_"double" Numbers'add-2od [#_"Object" x, #_"double" y] (Numbers'add-2dd (.doubleValue (cast Number x)), y))
    (defn #_"double" Numbers'add-2dl [#_"double" x, #_"long"   y] (+ x y))
    (defn #_"double" Numbers'add-2ld [#_"long"   x, #_"double" y] (+ x y))

    (defn #_"Number" Numbers'addP-2lo [#_"long"   x, #_"Object" y] (Numbers'addP-2oo (cast Object x), y))
    (defn #_"Number" Numbers'addP-2ol [#_"Object" x, #_"long"   y] (Numbers'addP-2oo x, (cast Object y)))
    (defn #_"double" Numbers'addP-2do [#_"double" x, #_"Object" y] (Numbers'addP-2dd x, (.doubleValue (cast Number y))))
    (defn #_"double" Numbers'addP-2od [#_"Object" x, #_"double" y] (Numbers'addP-2dd (.doubleValue (cast Number x)), y))
    (defn #_"double" Numbers'addP-2dl [#_"double" x, #_"long"   y] (+ x y))
    (defn #_"double" Numbers'addP-2ld [#_"long"   x, #_"double" y] (+ x y))

    (defn #_"Number" Numbers'minus-2lo [#_"long"   x, #_"Object" y] (Numbers'minus-2oo (cast Object x), y))
    (defn #_"Number" Numbers'minus-2ol [#_"Object" x, #_"long"   y] (Numbers'minus-2oo x, (cast Object y)))
    (defn #_"double" Numbers'minus-2do [#_"double" x, #_"Object" y] (Numbers'minus-2dd x, (.doubleValue (cast Number y))))
    (defn #_"double" Numbers'minus-2od [#_"Object" x, #_"double" y] (Numbers'minus-2dd (.doubleValue (cast Number x)), y))
    (defn #_"double" Numbers'minus-2dl [#_"double" x, #_"long"   y] (- x y))
    (defn #_"double" Numbers'minus-2ld [#_"long"   x, #_"double" y] (- x y))

    (defn #_"Number" Numbers'minusP-2lo [#_"long"   x, #_"Object" y] (Numbers'minusP-2oo (cast Object x), y))
    (defn #_"Number" Numbers'minusP-2ol [#_"Object" x, #_"long"   y] (Numbers'minusP-2oo x, (cast Object y)))
    (defn #_"double" Numbers'minusP-2do [#_"double" x, #_"Object" y] (Numbers'minusP-2dd x, (.doubleValue (cast Number y))))
    (defn #_"double" Numbers'minusP-2od [#_"Object" x, #_"double" y] (Numbers'minusP-2dd (.doubleValue (cast Number x)), y))
    (defn #_"double" Numbers'minusP-2dl [#_"double" x, #_"long"   y] (- x y))
    (defn #_"double" Numbers'minusP-2ld [#_"long"   x, #_"double" y] (- x y))

    (defn #_"Number" Numbers'multiply-2lo [#_"long"   x, #_"Object" y] (Numbers'multiply-2oo (cast Object x), y))
    (defn #_"Number" Numbers'multiply-2ol [#_"Object" x, #_"long"   y] (Numbers'multiply-2oo x, (cast Object y)))
    (defn #_"double" Numbers'multiply-2do [#_"double" x, #_"Object" y] (Numbers'multiply-2dd x, (.doubleValue (cast Number y))))
    (defn #_"double" Numbers'multiply-2od [#_"Object" x, #_"double" y] (Numbers'multiply-2dd (.doubleValue (cast Number x)), y))
    (defn #_"double" Numbers'multiply-2dl [#_"double" x, #_"long"   y] (* x y))
    (defn #_"double" Numbers'multiply-2ld [#_"long"   x, #_"double" y] (* x y))

    (defn #_"Number" Numbers'multiplyP-2lo [#_"long"   x, #_"Object" y] (Numbers'multiplyP-2oo (cast Object x), y))
    (defn #_"Number" Numbers'multiplyP-2ol [#_"Object" x, #_"long"   y] (Numbers'multiplyP-2oo x, (cast Object y)))
    (defn #_"double" Numbers'multiplyP-2do [#_"double" x, #_"Object" y] (Numbers'multiplyP-2dd x, (.doubleValue (cast Number y))))
    (defn #_"double" Numbers'multiplyP-2od [#_"Object" x, #_"double" y] (Numbers'multiplyP-2dd (.doubleValue (cast Number x)), y))
    (defn #_"double" Numbers'multiplyP-2dl [#_"double" x, #_"long"   y] (* x y))
    (defn #_"double" Numbers'multiplyP-2ld [#_"long"   x, #_"double" y] (* x y))

    (defn #_"Number" Numbers'divide-2lo [#_"long"   x, #_"Object" y] (Numbers'divide-2oo (cast Object x), y))
    (defn #_"Number" Numbers'divide-2ol [#_"Object" x, #_"long"   y] (Numbers'divide-2oo x, (cast Object y)))
    (defn #_"double" Numbers'divide-2do [#_"double" x, #_"Object" y] (/ x (.doubleValue (cast Number y))))
    (defn #_"double" Numbers'divide-2od [#_"Object" x, #_"double" y] (/ (.doubleValue (cast Number x)) y))
    (defn #_"double" Numbers'divide-2dl [#_"double" x, #_"long"   y] (/ x y))
    (defn #_"double" Numbers'divide-2ld [#_"long"   x, #_"double" y] (/ x y))
    (defn #_"Number" Numbers'divide-2ll [#_"long"   x, #_"long"   y] (Numbers'divide-2oo (cast Number x), (cast Number y)))

    (defn #_"boolean" Numbers'lt-2lo [#_"long"   x, #_"Object" y] (Numbers'lt-2oo (cast Object x), y))
    (defn #_"boolean" Numbers'lt-2ol [#_"Object" x, #_"long"   y] (Numbers'lt-2oo x, (cast Object y)))
    (defn #_"boolean" Numbers'lt-2do [#_"double" x, #_"Object" y] (< x (.doubleValue (cast Number y))))
    (defn #_"boolean" Numbers'lt-2od [#_"Object" x, #_"double" y] (< (.doubleValue (cast Number x)) y))
    (defn #_"boolean" Numbers'lt-2dl [#_"double" x, #_"long"   y] (< x y))
    (defn #_"boolean" Numbers'lt-2ld [#_"long"   x, #_"double" y] (< x y))

    (defn #_"boolean" Numbers'lte-2lo [#_"long"   x, #_"Object" y] (Numbers'lte-2oo (cast Object x), y))
    (defn #_"boolean" Numbers'lte-2ol [#_"Object" x, #_"long"   y] (Numbers'lte-2oo x, (cast Object y)))
    (defn #_"boolean" Numbers'lte-2do [#_"double" x, #_"Object" y] (<= x (.doubleValue (cast Number y))))
    (defn #_"boolean" Numbers'lte-2od [#_"Object" x, #_"double" y] (<= (.doubleValue (cast Number x)) y))
    (defn #_"boolean" Numbers'lte-2dl [#_"double" x, #_"long"   y] (<= x y))
    (defn #_"boolean" Numbers'lte-2ld [#_"long"   x, #_"double" y] (<= x y))

    (defn #_"boolean" Numbers'gt-2lo [#_"long"   x, #_"Object" y] (Numbers'gt-2oo (cast Object x), y))
    (defn #_"boolean" Numbers'gt-2ol [#_"Object" x, #_"long"   y] (Numbers'gt-2oo x, (cast Object y)))
    (defn #_"boolean" Numbers'gt-2do [#_"double" x, #_"Object" y] (> x (.doubleValue (cast Number y))))
    (defn #_"boolean" Numbers'gt-2od [#_"Object" x, #_"double" y] (> (.doubleValue (cast Number x)) y))
    (defn #_"boolean" Numbers'gt-2dl [#_"double" x, #_"long"   y] (> x y))
    (defn #_"boolean" Numbers'gt-2ld [#_"long"   x, #_"double" y] (> x y))

    (defn #_"boolean" Numbers'gte-2lo [#_"long"   x, #_"Object" y] (Numbers'gte-2oo (cast Object x), y))
    (defn #_"boolean" Numbers'gte-2ol [#_"Object" x, #_"long"   y] (Numbers'gte-2oo x, (cast Object y)))
    (defn #_"boolean" Numbers'gte-2do [#_"double" x, #_"Object" y] (>= x (.doubleValue (cast Number y))))
    (defn #_"boolean" Numbers'gte-2od [#_"Object" x, #_"double" y] (>= (.doubleValue (cast Number x)) y))
    (defn #_"boolean" Numbers'gte-2dl [#_"double" x, #_"long"   y] (>= x y))
    (defn #_"boolean" Numbers'gte-2ld [#_"long"   x, #_"double" y] (>= x y))

    (defn #_"boolean" Numbers'equiv-2lo [#_"long"   x, #_"Object" y] (Numbers'equiv-2oo (cast Object x), y))
    (defn #_"boolean" Numbers'equiv-2ol [#_"Object" x, #_"long"   y] (Numbers'equiv-2oo x, (cast Object y)))
    (defn #_"boolean" Numbers'equiv-2do [#_"double" x, #_"Object" y] (= x (.doubleValue (cast Number y))))
    (defn #_"boolean" Numbers'equiv-2od [#_"Object" x, #_"double" y] (= (.doubleValue (cast Number x)) y))
    (defn #_"boolean" Numbers'equiv-2dl [#_"double" x, #_"long"   y] (= x y))
    (defn #_"boolean" Numbers'equiv-2ld [#_"long"   x, #_"double" y] (= x y))

    (defn #_"long" Numbers'max-2ll [#_"long" x, #_"long" y] (if (> x y) x y))
    (defn #_"long" Numbers'min-2ll [#_"long" x, #_"long" y] (if (< x y) x y))

    (defn #_"double" Numbers'max-2dd [#_"double" x, #_"double" y] (Math/max x, y))
    (defn #_"double" Numbers'min-2dd [#_"double" x, #_"double" y] (Math/min x, y))

    (defn #_"Object" Numbers'max-2ld [#_"long" x, #_"double" y] (cond (Double/isNaN y) y (> x y) x :else y))
    (defn #_"Object" Numbers'max-2dl [#_"double" x, #_"long" y] (cond (Double/isNaN x) x (> x y) x :else y))
    (defn #_"Object" Numbers'min-2ld [#_"long" x, #_"double" y] (cond (Double/isNaN y) y (< x y) x :else y))
    (defn #_"Object" Numbers'min-2dl [#_"double" x, #_"long" y] (cond (Double/isNaN x) x (< x y) x :else y))

    (defn #_"Object" Numbers'max-2lo [#_"long" x, #_"Object" y] (cond (Numbers'isNaN y) y (Numbers'gt-2lo x, y) x :else y))
    (defn #_"Object" Numbers'max-2ol [#_"Object" x, #_"long" y] (cond (Numbers'isNaN x) x (Numbers'gt-2ol x, y) x :else y))
    (defn #_"Object" Numbers'min-2lo [#_"long" x, #_"Object" y] (cond (Numbers'isNaN y) y (Numbers'lt-2lo x, y) x :else y))
    (defn #_"Object" Numbers'min-2ol [#_"Object" x, #_"long" y] (cond (Numbers'isNaN x) x (Numbers'lt-2ol x, y) x :else y))

    (defn #_"Object" Numbers'max-2do [#_"double" x, #_"Object" y] (cond (Double/isNaN x) x (Numbers'isNaN y) y (> x (.doubleValue (cast Number y))) x :else y))
    (defn #_"Object" Numbers'max-2od [#_"Object" x, #_"double" y] (cond (Numbers'isNaN x) x (Double/isNaN y) y (> (.doubleValue (cast Number x)) y) x :else y))
    (defn #_"Object" Numbers'min-2do [#_"double" x, #_"Object" y] (cond (Double/isNaN x) x (Numbers'isNaN y) y (< x (.doubleValue (cast Number y))) x :else y))
    (defn #_"Object" Numbers'min-2od [#_"Object" x, #_"double" y] (cond (Numbers'isNaN x) x (Double/isNaN y) y (< (.doubleValue (cast Number x)) y) x :else y))

    (defn #_"Object" Numbers'max-2oo [#_"Object" x, #_"Object" y] (cond (Numbers'isNaN x) x (Numbers'isNaN y) y (Numbers'gt-2oo x, y) x :else y))
    (defn #_"Object" Numbers'min-2oo [#_"Object" x, #_"Object" y] (cond (Numbers'isNaN x) x (Numbers'isNaN y) y (Numbers'lt-2oo x, y) x :else y))

    (defn #_"long" Numbers'unchecked_add-2ll      [#_"long" x, #_"long" y] (+ x y))
    (defn #_"long" Numbers'unchecked_minus-2ll    [#_"long" x, #_"long" y] (- x y))
    (defn #_"long" Numbers'unchecked_multiply-2ll [#_"long" x, #_"long" y] (* x y))

    (defn #_"long" Numbers'unchecked_minus-1l [#_"long" x] (- x))
    (defn #_"long" Numbers'unchecked_inc-1l   [#_"long" x] (inc x))
    (defn #_"long" Numbers'unchecked_dec-1l   [#_"long" x] (dec x))

    (defn #_"Number" Numbers'unchecked_add-2oo      [#_"Object" x, #_"Object" y] (Numbers'add-2oo      x, y))
    (defn #_"Number" Numbers'unchecked_minus-2oo    [#_"Object" x, #_"Object" y] (Numbers'minus-2oo    x, y))
    (defn #_"Number" Numbers'unchecked_multiply-2oo [#_"Object" x, #_"Object" y] (Numbers'multiply-2oo x, y))

    (defn #_"Number" Numbers'unchecked_inc-1o   [#_"Object" x] (Numbers'inc-1o   x))
    (defn #_"Number" Numbers'unchecked_dec-1o   [#_"Object" x] (Numbers'dec-1o   x))
    (defn #_"Number" Numbers'unchecked_minus-1o [#_"Object" x] (Numbers'minus-1o x))

    (defn #_"double" Numbers'unchecked_add-2dd      [#_"double" x, #_"double" y] (Numbers'add-2dd      x, y))
    (defn #_"double" Numbers'unchecked_minus-2dd    [#_"double" x, #_"double" y] (Numbers'minus-2dd    x, y))
    (defn #_"double" Numbers'unchecked_multiply-2dd [#_"double" x, #_"double" y] (Numbers'multiply-2dd x, y))

    (defn #_"double" Numbers'unchecked_inc-1d   [#_"double" x] (Numbers'inc-1d   x))
    (defn #_"double" Numbers'unchecked_dec-1d   [#_"double" x] (Numbers'dec-1d   x))
    (defn #_"double" Numbers'unchecked_minus-1d [#_"double" x] (Numbers'minus-1d x))

    (defn #_"double" Numbers'unchecked_add-2do      [#_"double" x, #_"Object" y] (Numbers'add-2do      x, y))
    (defn #_"double" Numbers'unchecked_minus-2do    [#_"double" x, #_"Object" y] (Numbers'minus-2do    x, y))
    (defn #_"double" Numbers'unchecked_multiply-2do [#_"double" x, #_"Object" y] (Numbers'multiply-2do x, y))

    (defn #_"double" Numbers'unchecked_add-2od      [#_"Object" x, #_"double" y] (Numbers'add-2od      x, y))
    (defn #_"double" Numbers'unchecked_minus-2od    [#_"Object" x, #_"double" y] (Numbers'minus-2od    x, y))
    (defn #_"double" Numbers'unchecked_multiply-2od [#_"Object" x, #_"double" y] (Numbers'multiply-2od x, y))

    (defn #_"double" Numbers'unchecked_add-2dl      [#_"double" x, #_"long" y] (Numbers'add-2dl      x, y))
    (defn #_"double" Numbers'unchecked_minus-2dl    [#_"double" x, #_"long" y] (Numbers'minus-2dl    x, y))
    (defn #_"double" Numbers'unchecked_multiply-2dl [#_"double" x, #_"long" y] (Numbers'multiply-2dl x, y))

    (defn #_"double" Numbers'unchecked_add-2ld      [#_"long" x, #_"double" y] (Numbers'add-2ld      x, y))
    (defn #_"double" Numbers'unchecked_minus-2ld    [#_"long" x, #_"double" y] (Numbers'minus-2ld    x, y))
    (defn #_"double" Numbers'unchecked_multiply-2ld [#_"long" x, #_"double" y] (Numbers'multiply-2ld x, y))

    (defn #_"Number" Numbers'unchecked_add-2lo      [#_"long" x, #_"Object" y] (Numbers'add-2lo      x, y))
    (defn #_"Number" Numbers'unchecked_minus-2lo    [#_"long" x, #_"Object" y] (Numbers'minus-2lo    x, y))
    (defn #_"Number" Numbers'unchecked_multiply-2lo [#_"long" x, #_"Object" y] (Numbers'multiply-2lo x, y))

    (defn #_"Number" Numbers'unchecked_add-2ol      [#_"Object" x, #_"long" y] (Numbers'add-2ol      x, y))
    (defn #_"Number" Numbers'unchecked_minus-2ol    [#_"Object" x, #_"long" y] (Numbers'minus-2ol    x, y))
    (defn #_"Number" Numbers'unchecked_multiply-2ol [#_"Object" x, #_"long" y] (Numbers'multiply-2ol x, y))

    (defn- #_"int" Numbers'hasheqFrom [#_"Number" x, #_"Class" xc]
        (cond
            (or (any = xc Integer Short Byte) (and (= xc BigInteger) (Numbers'lte-2ol x, Long/MAX_VALUE) (Numbers'gte-2ol x, Long/MIN_VALUE)))
                (Murmur3'hashLong (.longValue x))
            (= xc BigDecimal)
                ;; stripTrailingZeros() to make all numerically equal BigDecimal values come out the same before calling hashCode.
                ;; Special check for 0 because stripTrailingZeros() does not do anything to values equal to 0 with different scales.
                (.hashCode (if (Numbers'isZero-1o x) BigDecimal/ZERO (.stripTrailingZeros (cast BigDecimal x))))
            (and (= xc Float) (= x (float -0.0)))
                0 ;; match 0.0f
            :else
                (.hashCode x)
        )
    )

    (defn #_"int" Numbers'hasheq [#_"Number" x]
        (let [#_"Class" xc (class x)]
            (condp = xc
                Long
                    (Murmur3'hashLong (.longValue x))
                Double
                    (if (= x -0.0)
                        0 ;; match 0.0
                        (.hashCode x)
                    )
                (Numbers'hasheqFrom x, xc)
            )
        )
    )
)
)

(java-ns cloiure.lang.AFn

(class-ns AFn
    (defn #_"AFn" AFn'new []
        (hash-map)
    )

    #_foreign
    (defn #_"Object" call---AFn [#_"AFn" this]
        (.invoke this)
    )

    #_foreign
    (defn #_"void" run---AFn [#_"AFn" this]
        (.invoke this)
        nil
    )

    #_override
    (defn #_"Object" IFn'''invoke-1--AFn [#_"AFn" this]
        (.throwArity this, 0)
    )

    #_override
    (defn #_"Object" IFn'''invoke-2--AFn [#_"AFn" this, #_"Object" arg1]
        (.throwArity this, 1)
    )

    #_override
    (defn #_"Object" IFn'''invoke-3--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2]
        (.throwArity this, 2)
    )

    #_override
    (defn #_"Object" IFn'''invoke-4--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3]
        (.throwArity this, 3)
    )

    #_override
    (defn #_"Object" IFn'''invoke-5--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4]
        (.throwArity this, 4)
    )

    #_override
    (defn #_"Object" IFn'''invoke-6--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5]
        (.throwArity this, 5)
    )

    #_override
    (defn #_"Object" IFn'''invoke-7--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6]
        (.throwArity this, 6)
    )

    #_override
    (defn #_"Object" IFn'''invoke-8--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7]
        (.throwArity this, 7)
    )

    #_override
    (defn #_"Object" IFn'''invoke-9--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8]
        (.throwArity this, 8)
    )

    #_override
    (defn #_"Object" IFn'''invoke-10--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9]
        (.throwArity this, 9)
    )

    #_override
    (defn #_"Object" IFn'''invoke-11--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10]
        (.throwArity this, 10)
    )

    #_override
    (defn #_"Object" IFn'''invoke-12--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11]
        (.throwArity this, 11)
    )

    #_override
    (defn #_"Object" IFn'''invoke-13--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12]
        (.throwArity this, 12)
    )

    #_override
    (defn #_"Object" IFn'''invoke-14--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13]
        (.throwArity this, 13)
    )

    #_override
    (defn #_"Object" IFn'''invoke-15--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14]
        (.throwArity this, 14)
    )

    #_override
    (defn #_"Object" IFn'''invoke-16--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15]
        (.throwArity this, 15)
    )

    #_override
    (defn #_"Object" IFn'''invoke-17--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16]
        (.throwArity this, 16)
    )

    #_override
    (defn #_"Object" IFn'''invoke-18--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17]
        (.throwArity this, 17)
    )

    #_override
    (defn #_"Object" IFn'''invoke-19--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18]
        (.throwArity this, 18)
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-20--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19]
        (.throwArity this, 19)
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-21--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20]
        (.throwArity this, 20)
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-22--AFn [#_"AFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20 & #_"Object..." args]
        (.throwArity this, 21)
    )

    (declare AFn'applyToHelper)

    #_override
    (defn #_"Object" IFn'''applyTo--AFn [#_"AFn" this, #_"ISeq" args]
        (AFn'applyToHelper this, args)
    )

    (declare RT'boundedLength)
    (declare RT'seqToArray)

    (defn #_"Object" AFn'applyToHelper [#_"IFn" ifn, #_"ISeq" args]
        (case (RT'boundedLength args, 20)
            0
                (.invoke ifn)
            1
                (.invoke ifn, (first args))
            2
                (.invoke ifn, (first args),
                    (first (next args))
                )
            3
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            4
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            5
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            6
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            7
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            8
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            9
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            10
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            11
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            12
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            13
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            14
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            15
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            16
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            17
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            18
                (.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            19
              #_(.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            20
              #_(.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (next args))
                )
            #_else
              #_(.invoke ifn, (first args),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (first (§ ass args (next args))),
                    (RT'seqToArray (next args))
                )
        )
    )

    (declare Compiler'demunge)

    #_override
    (defn #_"Object" AFn'''throwArity--AFn [#_"AFn" this, #_"int" n]
        (throw! (str "wrong number of args (" n ") passed to: " (Compiler'demunge (.getSimpleName (class this)))))
    )
)
)

(java-ns cloiure.lang.Symbol

(class-ns Symbol
    (defn- #_"Symbol" Symbol'new
        ([#_"String" ns, #_"String" name] (Symbol'new nil, ns, name))
        ([#_"IPersistentMap" meta, #_"String" ns, #_"String" name]
            (merge (AFn'new)
                (hash-map
                    #_"IPersistentMap" :_meta meta
                    #_"String" :ns ns
                    #_"String" :name name

                    #_mutable #_"int" :_hasheq 0
                    #_mutable #_"String" :_str nil
                )
            )
        )
    )

    (defn #_"Symbol" Symbol'intern
        ([#_"String" nsname]
            (let [#_"int" i (.indexOf nsname, (int \/))]
                (if (or (= i -1) (= nsname "/"))
                    (Symbol'new nil, nsname)
                    (Symbol'new (.substring nsname, 0, i), (.substring nsname, (inc i)))
                )
            )
        )
        ([#_"String" ns, #_"String" name]
            (Symbol'new ns, name)
        )
    )

    #_foreign
    (defn #_"String" toString---Symbol [#_"Symbol" this]
        (or (:_str this)
            (§ set! (:_str this) (if (some? (:ns this)) (str (:ns this) "/" (:name this)) (:name this)))
        )
    )

    #_override
    (defn #_"String" Named'''getNamespace--Symbol [#_"Symbol" this]
        (:ns this)
    )

    #_override
    (defn #_"String" Named'''getName--Symbol [#_"Symbol" this]
        (:name this)
    )

    #_foreign
    (defn #_"boolean" equals---Symbol [#_"Symbol" this, #_"Object" that]
        (cond
            (identical? this that)
                true
            (symbol? that)
                (and (= (:ns this) (:ns that)) (= (:name this) (:name that)))
            :else
                false
        )
    )

    #_foreign
    (defn #_"int" hashCode---Symbol [#_"Symbol" this]
        (Util'hashCombine (.hashCode (:name this)), (Util'hash (:ns this)))
    )

    #_override
    (defn #_"int" IHashEq'''hasheq--Symbol [#_"Symbol" this]
        (let-when [#_"int" cached (:_hasheq this)] (zero? cached) => cached
            (§ set! (:_hasheq this) (Util'hashCombine (Murmur3'hashUnencodedChars (:name this)), (Util'hash (:ns this))))
        )
    )

    #_override
    (defn #_"Symbol" IObj'''withMeta--Symbol [#_"Symbol" this, #_"IPersistentMap" meta]
        (Symbol'new meta, (:ns this), (:name this))
    )

    #_foreign
    (defn #_"int" compareTo---Symbol [#_"Symbol" this, #_"Symbol" that]
        (cond
            (.equals this, that)                       0
            (and (nil? (:ns this)) (some? (:ns that))) -1
            (nil? (:ns this))                          (compare (:name this) (:name that))
            (nil? (:ns that))                          1
            :else
                (let-when [#_"int" cmp (compare (:ns this) (:ns that))] (zero? cmp) => cmp
                    (compare (:name this) (:name that))
                )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-2--Symbol [#_"Symbol" this, #_"Object" obj]
        (get obj this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-3--Symbol [#_"Symbol" this, #_"Object" obj, #_"Object" notFound]
        (get obj this notFound)
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--Symbol [#_"Symbol" this]
        (:_meta this)
    )
)
)

(java-ns cloiure.lang.Keyword

(class-ns Keyword
    (def- #_"ConcurrentHashMap<Symbol, Reference<Keyword>>" Keyword'TABLE (ConcurrentHashMap.))

    (def #_"ReferenceQueue" Keyword'RQ (ReferenceQueue.))

    (defn- #_"Keyword" Keyword'new [#_"Symbol" sym]
        (hash-map
            #_"Symbol" :sym sym
            #_"int" :hasheq (+ (.hasheq sym) 0x9e3779b9)

            #_mutable #_"String" :_str nil
        )
    )

    (defn #_"Keyword" Keyword'intern [#_"Symbol" sym]
        (let [#_"Reference<Keyword>" r (.get Keyword'TABLE, sym)
              [sym r #_"Keyword" k]
                (when (nil? r) => [sym r nil]
                    (Util'clearCache Keyword'RQ, Keyword'TABLE)
                    (let [sym
                            (when (some? (meta sym)) => sym
                                (with-meta sym nil)
                            )
                          k (Keyword'new sym)
                          r (.putIfAbsent Keyword'TABLE, sym, (WeakReference. #_"<Keyword>" k, Keyword'RQ))]
                        [sym r k]
                    )
                )]
            (when (some? r) => k
                (or (.get r)
                    (do ;; entry died in the interim, do over
                        (.remove Keyword'TABLE, sym, r)
                        (recur #_"Keyword'intern" sym)
                    )
                )
            )
        )
    )

    (defn #_"Keyword" Keyword'find [#_"Symbol" sym]
        (let [#_"Reference<Keyword>" ref (.get Keyword'TABLE, sym)]
            (when (some? ref)
                (.get ref)
            )
        )
    )

    (defn #_"Keyword" Keyword'find-2 [#_"String" ns, #_"String" name]
        (Keyword'find (Symbol'intern ns, name))
    )

    (defn #_"Keyword" Keyword'find-1 [#_"String" nsname]
        (Keyword'find (Symbol'intern nsname))
    )

    #_foreign
    (defn #_"int" hashCode---Keyword [#_"Keyword" this]
        (+ (.hashCode (:sym this)) 0x9e3779b9)
    )

    #_override
    (defn #_"int" IHashEq'''hasheq--Keyword [#_"Keyword" this]
        (:hasheq this)
    )

    #_foreign
    (defn #_"String" toString---Keyword [#_"Keyword" this]
        (or (:_str this)
            (§ set! (:_str this) (str ":" (:sym this)))
        )
    )

    #_method
    (defn #_"Object" Keyword''throwArity [#_"Keyword" this]
        (throw! (str "wrong number of args passed to keyword: " this))
    )

    #_foreign
    (defn #_"Object" call---Keyword [#_"Keyword" this]
        (Keyword''throwArity this)
    )

    #_foreign
    (defn #_"void" run---Keyword [#_"Keyword" this]
        (throw! "unsupported operation")
    )

    #_override
    (defn #_"Object" IFn'''invoke-1--Keyword [#_"Keyword" this]
        (Keyword''throwArity this)
    )

    #_foreign
    (defn #_"int" compareTo---Keyword [#_"Keyword" this, #_"Keyword" that]
        (compare (:sym this) (:sym that))
    )

    #_override
    (defn #_"String" Named'''getNamespace--Keyword [#_"Keyword" this]
        (.getNamespace (:sym this))
    )

    #_override
    (defn #_"String" Named'''getName--Keyword [#_"Keyword" this]
        (.getName (:sym this))
    )

    #_override
    (defn #_"Object" IFn'''invoke-2--Keyword [#_"Keyword" this, #_"Object" obj]
        (get obj this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-3--Keyword [#_"Keyword" this, #_"Object" obj, #_"Object" notFound]
        (get obj this notFound)
    )

    #_override
    (defn #_"Object" IFn'''invoke-4--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-5--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-6--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-7--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-8--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-9--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-10--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-11--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-12--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-13--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-14--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-15--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-16--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-17--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-18--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''invoke-19--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18]
        (Keyword''throwArity this)
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-20--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19]
        (Keyword''throwArity this)
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-21--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20]
        (Keyword''throwArity this)
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-22--Keyword [#_"Keyword" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20 & #_"Object..." args]
        (Keyword''throwArity this)
    )

    #_override
    (defn #_"Object" IFn'''applyTo--Keyword [#_"Keyword" this, #_"ISeq" args]
        (AFn'applyToHelper this, args)
    )
)
)

(java-ns cloiure.lang.AFunction

(class-ns AFunction
    (defn #_"AFunction" AFunction'new []
        (merge (AFn'new)
            (hash-map
                #_volatile #_"MethodImplCache" :__methodImplCache nil
            )
        )
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--AFunction [#_"AFunction" this]
        nil
    )

    #_override
    (defn #_"IObj" IObj'''withMeta--AFunction [#_"AFunction" this, #_"IPersistentMap" meta]
        (§ proxy RestFn()
            #_override
            (defn #_"Object" RestFn'''doInvoke-2--RestFn [#_"RestFn" this, #_"Object" args]
                (.applyTo (§ this AFunction), (cast ISeq args))
            )

            #_override
            (defn #_"IPersistentMap" IMeta'''meta--RestFn [#_"RestFn" this]
                meta
            )

            #_override
            (defn #_"IObj" IObj'''withMeta--RestFn [#_"RestFn" this, #_"IPersistentMap" meta]
                (.withMeta (§ this AFunction), meta)
            )

            #_override
            (defn #_"int" RestFn'''getRequiredArity--RestFn [#_"RestFn" this]
                0
            )
        )
    )

    #_foreign
    (defn #_"int" compare---AFunction [#_"AFunction" this, #_"Object" o1, #_"Object" o2]
        (let [#_"Object" o (.invoke this, o1, o2)]
            (if (instance? Boolean o)
                (cond (boolean o) -1 (boolean (.invoke this, o2, o1)) 1 :else 0)
                (.intValue (cast Number o))
            )
        )
    )
)
)

(java-ns cloiure.lang.RestFn

(class-ns RestFn
    (defn #_"RestFn" RestFn'new []
        (AFunction'new)
    )

    (defn #_"ISeq" RestFn'findKey [#_"Object" key, #_"ISeq" args]
        (loop-when args (some? args)
            (if (= key (first args)) (next args) (recur (next (next args))))
        )
    )

    (declare ArraySeq'create-1)

    (defn #_"ISeq" RestFn'ontoArrayPrepend [#_"Object[]" array & #_"Object..." args]
        (loop-when-recur [#_"ISeq" s (ArraySeq'create-1 array) #_"int" i (dec (alength args))] (<= 0 i) [(cons (aget args i) s) (dec i)] => s)
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-2--RestFn [#_"RestFn" this, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-3--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-4--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-5--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-6--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-7--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-8--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-9--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-10--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-11--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-12--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-13--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-14--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-15--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-16--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-17--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-18--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-19--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" RestFn'''doInvoke-20--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" args]
        nil
    )

    #_override
  #_(defn #_"Object" RestFn'''doInvoke-21--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" args]
        nil
    )

    #_override
  #_(defn #_"Object" RestFn'''doInvoke-22--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20, #_"Object" args]
        nil
    )

    #_override
    (defn #_"Object" IFn'''applyTo--RestFn [#_"RestFn" this, #_"ISeq" args]
        (when (< (.getRequiredArity this) (RT'boundedLength args, (.getRequiredArity this))) => (AFn'applyToHelper this, args)
            (case (.getRequiredArity this)
                0
                    (.doInvoke this, args)
                1
                    (.doInvoke this, (first args),
                        (next args)
                    )
                2
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                3
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                4
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                5
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                6
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                7
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                8
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                9
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                10
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                11
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                12
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                13
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                14
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                15
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                16
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                17
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                18
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                19
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                20
                    (.doInvoke this, (first args),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (first (§ ass args (next args))),
                        (next args)
                    )
                (.throwArity this, -1)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-1--RestFn [#_"RestFn" this]
        (case (.getRequiredArity this)
            0
                (.doInvoke this, nil)
            (do
                (.throwArity this, 0)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-2--RestFn [#_"RestFn" this, #_"Object" arg1]
        (case (.getRequiredArity this)
            0
                (.doInvoke this, (ArraySeq'create-1 arg1))
            1
                (.doInvoke this, arg1, nil)
            (do
                (.throwArity this, 1)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-3--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2))
            2
                (.doInvoke this, arg1, arg2, nil)
            (do
                (.throwArity this, 2)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-4--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3))
            3
                (.doInvoke this, arg1, arg2, arg3, nil)
            (do
                (.throwArity this, 3)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-5--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4, nil)
            (do
                (.throwArity this, 4)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-6--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, nil)
            (do
                (.throwArity this, 5)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-7--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, nil)
            (do
                (.throwArity this, 6)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-8--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, nil)
            (do
                (.throwArity this, 7)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-9--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7, arg8))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7, arg8))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7, arg8))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7, arg8))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7, arg8))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7, arg8))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (ArraySeq'create-1 arg8))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, nil)
            (do
                (.throwArity this, 8)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-10--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7, arg8, arg9))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7, arg8, arg9))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7, arg8, arg9))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7, arg8, arg9))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7, arg8, arg9))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (ArraySeq'create-1 arg8, arg9))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
                    (ArraySeq'create-1 arg9))
            9
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, nil)
            (do
                (.throwArity this, 9)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-11--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7, arg8, arg9, arg10))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7, arg8, arg9, arg10))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7, arg8, arg9, arg10))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7, arg8, arg9, arg10))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (ArraySeq'create-1 arg8, arg9, arg10))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
                    (ArraySeq'create-1 arg9, arg10))
            9
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                    (ArraySeq'create-1 arg10))
            10
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, nil)
            (do
                (.throwArity this, 10)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-12--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7, arg8, arg9, arg10, arg11))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7, arg8, arg9, arg10, arg11))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7, arg8, arg9, arg10, arg11))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (ArraySeq'create-1 arg8, arg9, arg10, arg11))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
                    (ArraySeq'create-1 arg9, arg10, arg11))
            9
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                    (ArraySeq'create-1 arg10, arg11))
            10
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                    (ArraySeq'create-1 arg11))
            11
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, nil)
            (do
                (.throwArity this, 11)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-13--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7, arg8, arg9, arg10, arg11, arg12))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7, arg8, arg9, arg10, arg11, arg12))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (ArraySeq'create-1 arg8, arg9, arg10, arg11, arg12))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
                    (ArraySeq'create-1 arg9, arg10, arg11, arg12))
            9
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                    (ArraySeq'create-1 arg10, arg11, arg12))
            10
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                    (ArraySeq'create-1 arg11, arg12))
            11
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11,
                    (ArraySeq'create-1 arg12))
            12
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, nil)
            (do
                (.throwArity this, 12)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-14--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7, arg8, arg9, arg10, arg11, arg12, arg13))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (ArraySeq'create-1 arg8, arg9, arg10, arg11, arg12, arg13))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
                    (ArraySeq'create-1 arg9, arg10, arg11, arg12, arg13))
            9
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                    (ArraySeq'create-1 arg10, arg11, arg12, arg13))
            10
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                    (ArraySeq'create-1 arg11, arg12, arg13))
            11
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11,
                    (ArraySeq'create-1 arg12, arg13))
            12
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12,
                    (ArraySeq'create-1 arg13))
            13
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, nil)
            (do
                (.throwArity this, 13)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-15--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (ArraySeq'create-1 arg8, arg9, arg10, arg11, arg12, arg13, arg14))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
                    (ArraySeq'create-1 arg9, arg10, arg11, arg12, arg13, arg14))
            9
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                    (ArraySeq'create-1 arg10, arg11, arg12, arg13, arg14))
            10
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                    (ArraySeq'create-1 arg11, arg12, arg13, arg14))
            11
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11,
                    (ArraySeq'create-1 arg12, arg13, arg14))
            12
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12,
                    (ArraySeq'create-1 arg13, arg14))
            13
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13,
                    (ArraySeq'create-1 arg14))
            14
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, nil)
            (do
                (.throwArity this, 14)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-16--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (ArraySeq'create-1 arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
                    (ArraySeq'create-1 arg9, arg10, arg11, arg12, arg13, arg14, arg15))
            9
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                    (ArraySeq'create-1 arg10, arg11, arg12, arg13, arg14, arg15))
            10
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                    (ArraySeq'create-1 arg11, arg12, arg13, arg14, arg15))
            11
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11,
                    (ArraySeq'create-1 arg12, arg13, arg14, arg15))
            12
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12,
                    (ArraySeq'create-1 arg13, arg14, arg15))
            13
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13,
                    (ArraySeq'create-1 arg14, arg15))
            14
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14,
                    (ArraySeq'create-1 arg15))
            15
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, nil)
            (do
                (.throwArity this, 15)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-17--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (ArraySeq'create-1 arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
                    (ArraySeq'create-1 arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16))
            9
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                    (ArraySeq'create-1 arg10, arg11, arg12, arg13, arg14, arg15, arg16))
            10
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                    (ArraySeq'create-1 arg11, arg12, arg13, arg14, arg15, arg16))
            11
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11,
                    (ArraySeq'create-1 arg12, arg13, arg14, arg15, arg16))
            12
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12,
                    (ArraySeq'create-1 arg13, arg14, arg15, arg16))
            13
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13,
                    (ArraySeq'create-1 arg14, arg15, arg16))
            14
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14,
                    (ArraySeq'create-1 arg15, arg16))
            15
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15,
                    (ArraySeq'create-1 arg16))
            16
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, nil)
            (do
                (.throwArity this, 16)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-18--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (ArraySeq'create-1 arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
                    (ArraySeq'create-1 arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17))
            9
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                    (ArraySeq'create-1 arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17))
            10
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                    (ArraySeq'create-1 arg11, arg12, arg13, arg14, arg15, arg16, arg17))
            11
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11,
                    (ArraySeq'create-1 arg12, arg13, arg14, arg15, arg16, arg17))
            12
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12,
                    (ArraySeq'create-1 arg13, arg14, arg15, arg16, arg17))
            13
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13,
                    (ArraySeq'create-1 arg14, arg15, arg16, arg17))
            14
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14,
                    (ArraySeq'create-1 arg15, arg16, arg17))
            15
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15,
                    (ArraySeq'create-1 arg16, arg17))
            16
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16,
                    (ArraySeq'create-1 arg17))
            17
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, nil)
            (do
                (.throwArity this, 17)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-19--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (ArraySeq'create-1 arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
                    (ArraySeq'create-1 arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18))
            9
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                    (ArraySeq'create-1 arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18))
            10
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                    (ArraySeq'create-1 arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18))
            11
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11,
                    (ArraySeq'create-1 arg12, arg13, arg14, arg15, arg16, arg17, arg18))
            12
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12,
                    (ArraySeq'create-1 arg13, arg14, arg15, arg16, arg17, arg18))
            13
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13,
                    (ArraySeq'create-1 arg14, arg15, arg16, arg17, arg18))
            14
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14,
                    (ArraySeq'create-1 arg15, arg16, arg17, arg18))
            15
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15,
                    (ArraySeq'create-1 arg16, arg17, arg18))
            16
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16,
                    (ArraySeq'create-1 arg17, arg18))
            17
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17,
                    (ArraySeq'create-1 arg18))
            18
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, nil)
            (do
                (.throwArity this, 18)
            )
        )
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-20--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (ArraySeq'create-1 arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
                    (ArraySeq'create-1 arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19))
            9
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                    (ArraySeq'create-1 arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19))
            10
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                    (ArraySeq'create-1 arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19))
            11
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11,
                    (ArraySeq'create-1 arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19))
            12
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12,
                    (ArraySeq'create-1 arg13, arg14, arg15, arg16, arg17, arg18, arg19))
            13
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13,
                    (ArraySeq'create-1 arg14, arg15, arg16, arg17, arg18, arg19))
            14
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14,
                    (ArraySeq'create-1 arg15, arg16, arg17, arg18, arg19))
            15
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15,
                    (ArraySeq'create-1 arg16, arg17, arg18, arg19))
            16
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16,
                    (ArraySeq'create-1 arg17, arg18, arg19))
            17
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17,
                    (ArraySeq'create-1 arg18, arg19))
            18
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18,
                    (ArraySeq'create-1 arg19))
            19
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, nil)
            (do
                (.throwArity this, 19)
            )
        )
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-21--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (ArraySeq'create-1 arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            1
                (.doInvoke this, arg1,
                    (ArraySeq'create-1 arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            2
                (.doInvoke this, arg1, arg2,
                    (ArraySeq'create-1 arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (ArraySeq'create-1 arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (ArraySeq'create-1 arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (ArraySeq'create-1 arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (ArraySeq'create-1 arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (ArraySeq'create-1 arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
                    (ArraySeq'create-1 arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            9
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                    (ArraySeq'create-1 arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            10
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                    (ArraySeq'create-1 arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            11
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11,
                    (ArraySeq'create-1 arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            12
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12,
                    (ArraySeq'create-1 arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            13
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13,
                    (ArraySeq'create-1 arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            14
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14,
                    (ArraySeq'create-1 arg15, arg16, arg17, arg18, arg19, arg20))
            15
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15,
                    (ArraySeq'create-1 arg16, arg17, arg18, arg19, arg20))
            16
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16,
                    (ArraySeq'create-1 arg17, arg18, arg19, arg20))
            17
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17,
                    (ArraySeq'create-1 arg18, arg19, arg20))
            18
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18,
                    (ArraySeq'create-1 arg19, arg20))
            19
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19,
                    (ArraySeq'create-1 arg20))
            20
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, nil)
            (do
                (.throwArity this, 20)
            )
        )
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-22--RestFn [#_"RestFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20 & #_"Object..." args]
        (case (.getRequiredArity this)
            0
                (.doInvoke this,
                    (RestFn'ontoArrayPrepend args, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            1
                (.doInvoke this, arg1,
                    (RestFn'ontoArrayPrepend args, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            2
                (.doInvoke this, arg1, arg2,
                    (RestFn'ontoArrayPrepend args, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            3
                (.doInvoke this, arg1, arg2, arg3,
                    (RestFn'ontoArrayPrepend args, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            4
                (.doInvoke this, arg1, arg2, arg3, arg4,
                    (RestFn'ontoArrayPrepend args, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            5
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5,
                    (RestFn'ontoArrayPrepend args, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            6
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6,
                    (RestFn'ontoArrayPrepend args, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            7
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                    (RestFn'ontoArrayPrepend args, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            8
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
                    (RestFn'ontoArrayPrepend args, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            9
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                    (RestFn'ontoArrayPrepend args, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            10
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                    (RestFn'ontoArrayPrepend args, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            11
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11,
                    (RestFn'ontoArrayPrepend args, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            12
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12,
                    (RestFn'ontoArrayPrepend args, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            13
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13,
                    (RestFn'ontoArrayPrepend args, arg14, arg15, arg16, arg17, arg18, arg19, arg20))
            14
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14,
                    (RestFn'ontoArrayPrepend args, arg15, arg16, arg17, arg18, arg19, arg20))
            15
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15,
                    (RestFn'ontoArrayPrepend args, arg16, arg17, arg18, arg19, arg20))
            16
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16,
                    (RestFn'ontoArrayPrepend args, arg17, arg18, arg19, arg20))
            17
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17,
                    (RestFn'ontoArrayPrepend args, arg18, arg19, arg20))
            18
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18,
                    (RestFn'ontoArrayPrepend args, arg19, arg20))
            19
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19,
                    (RestFn'ontoArrayPrepend args, arg20))
            20
                (.doInvoke this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20,
                    (ArraySeq'create-1 args))
            (do
                (.throwArity this, 21)
            )
        )
    )
)
)

(java-ns cloiure.lang.ASeq

(class-ns ASeq
    (defn #_"ASeq" ASeq'new [#_"IPersistentMap" meta]
        (hash-map
            #_"IPersistentMap" :_meta meta

            #_mutable #_"int" :_hash 0
            #_mutable #_"int" :_hasheq 0
        )
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--ASeq [#_"ASeq" this]
        (:_meta this)
    )

    #_foreign
    (defn #_"String" toString---ASeq [#_"ASeq" this]
        (RT'printString this)
    )

    #_override
    (defn #_"IPersistentCollection" IPersistentCollection'''empty--ASeq [#_"ASeq" this]
        ()
    )

    #_override
    (defn #_"boolean" IPersistentCollection'''equiv--ASeq [#_"ASeq" this, #_"Object" that]
        (and (or (instance? Sequential that) (instance? List that))
            (let [#_"ISeq" ms (seq that)]
                (loop-when [#_"ISeq" s (seq this) ms ms] (some? s) => (nil? ms)
                    (and (some? ms) (Util'equiv-2oo (first s), (first ms)) (recur (next s) (next ms)))
                )
            )
        )
    )

    #_foreign
    (defn #_"boolean" equals---ASeq [#_"ASeq" this, #_"Object" that]
        (or (identical? this that)
            (and (or (instance? Sequential that) (instance? List that))
                (let [#_"ISeq" ms (seq that)]
                    (loop-when [#_"ISeq" s (seq this) ms ms] (some? s) => (nil? ms)
                        (and (some? ms) (Util'equals (first s), (first ms)) (recur (next s) (next ms)))
                    )
                )
            )
        )
    )

    #_foreign
    (defn #_"int" hashCode---ASeq [#_"ASeq" this]
        (let-when [#_"int" hash (:_hash this)] (zero? hash) => hash
            (loop-when [hash 1 #_"ISeq" s (seq this)] (some? s) => (§ set! (:_hash this) hash)
                (recur (+ (* 31 hash) (if (some? (first s)) (.hashCode (first s)) 0)) (next s))
            )
        )
    )

    #_override
    (defn #_"int" IHashEq'''hasheq--ASeq [#_"ASeq" this]
        (let-when [#_"int" cached (:_hasheq this)] (zero? cached) => cached
            (§ set! (:_hasheq this) (Murmur3'hashOrdered this))
        )
    )

    #_override
    (defn #_"int" Counted'''count--ASeq [#_"ASeq" this]
        (loop-when [#_"ISeq" s (next this) #_"int" i 1] (some? s) => i
            (if (instance? Counted s) (+ i (.count s)) (recur (next s) (inc i)))
        )
    )

    #_override
    (defn #_"ISeq" Seqable'''seq--ASeq [#_"ASeq" this]
        this
    )

    (declare Cons'new)

    #_override
    (defn #_"ISeq" ISeq'''cons--ASeq [#_"ASeq" this, #_"Object" o]
        (Cons'new o, this)
    )

    #_override
    (defn #_"ISeq" ISeq'''rest--ASeq [#_"ASeq" this]
        (or (next this) ())
    )

    #_foreign
    (defn #_"Object[]" toArray---ASeq [#_"ASeq" this]
        (RT'seqToArray (seq this))
    )

    #_foreign
    (defn #_"Object[]" toArray---ASeq [#_"ASeq" this, #_"Object[]" a]
        (RT'seqToPassedArray (seq this), a)
    )

    #_foreign
    (defn #_"int" size---ASeq [#_"ASeq" this]
        (count this)
    )

    #_foreign
    (defn #_"boolean" contains---ASeq [#_"ASeq" this, #_"Object" o]
        (loop-when [#_"ISeq" s (seq this)] (some? s) => false
            (or (Util'equiv-2oo (first s), o) (recur (next s)))
        )
    )

    (declare SeqIterator'new)

    #_foreign
    (defn #_"Iterator" iterator---ASeq [#_"ASeq" this]
        (SeqIterator'new this)
    )

    #_foreign
    (defn #_"Object" get---ASeq [#_"ASeq" this, #_"int" index]
        (nth this index)
    )
)
)

(java-ns cloiure.lang.LazySeq

(class-ns LazySeq
    (defn- #_"LazySeq" LazySeq'init [#_"IPersistentMap" meta, #_"ISeq" s, #_"IFn" fn]
        (hash-map
            #_"IPersistentMap" :_meta meta
            #_mutable #_"ISeq" :s s
            #_mutable #_"IFn" :fn fn

            #_mutable #_"Object" :sv nil
        )
    )

    (defn- #_"LazySeq" LazySeq'new
        ([#_"IPersistentMap" meta, #_"ISeq" s] (LazySeq'init meta, s, nil))
        ([#_"IFn" fn]                          (LazySeq'init nil, nil, fn))
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--LazySeq [#_"LazySeq" this]
        (:_meta this)
    )

    #_override
    (defn #_"LazySeq" IObj'''withMeta--LazySeq [#_"LazySeq" this, #_"IPersistentMap" meta]
        (LazySeq'new meta, (seq this))
    )

    #_method
    (defn #_"Object" LazySeq''sval [#_"LazySeq" this]
        (§ sync this
            (when (some? (:fn this))
                (§ set! (:sv this) (.invoke (:fn this)))
                (§ set! (:fn this) nil)
            )
            (or (:sv this) (:s this))
        )
    )

    #_override
    (defn #_"ISeq" Seqable'''seq--LazySeq [#_"LazySeq" this]
        (§ sync this
            (LazySeq''sval this)
            (when (some? (:sv this))
                (let [#_"Object" ls (:sv this) _ (§ set! (:sv this) nil)
                      ls (loop-when-recur ls (instance? LazySeq ls) (LazySeq''sval ls) => ls)]
                    (§ set! (:s this) (seq ls))
                )
            )
            (:s this)
        )
    )

    #_override
    (defn #_"int" Counted'''count--LazySeq [#_"LazySeq" this]
        (loop-when-recur [#_"int" c 0 #_"ISeq" s (seq this)] (some? s) [(inc c) (next s)] => c)
    )

    #_override
    (defn #_"Object" ISeq'''first--LazySeq [#_"LazySeq" this]
        (seq this)
        (when (some? (:s this))
            (first (:s this))
        )
    )

    #_override
    (defn #_"ISeq" ISeq'''next--LazySeq [#_"LazySeq" this]
        (seq this)
        (when (some? (:s this))
            (next (:s this))
        )
    )

    #_override
    (defn #_"ISeq" ISeq'''rest--LazySeq [#_"LazySeq" this]
        (seq this)
        (if (some? (:s this)) (rest (:s this)) ())
    )

    #_override
    (defn #_"ISeq" ISeq'''cons--LazySeq [#_"LazySeq" this, #_"Object" o]
        (cons o (seq this))
    )

    #_override
    (defn #_"IPersistentCollection" IPersistentCollection'''empty--LazySeq [#_"LazySeq" this]
        ()
    )

    #_foreign
    (defn #_"boolean" equals---LazySeq [#_"LazySeq" this, #_"Object" that]
        (let [#_"ISeq" s (seq this)]
            (if (some? s)
                (.equals s, that)
                (and (or (instance? Sequential that) (instance? List that)) (nil? (seq that)))
            )
        )
    )

    #_override
    (defn #_"boolean" IPersistentCollection'''equiv--LazySeq [#_"LazySeq" this, #_"Object" that]
        (let [#_"ISeq" s (seq this)]
            (if (some? s)
                (.equiv s, that)
                (and (or (instance? Sequential that) (instance? List that)) (nil? (seq that)))
            )
        )
    )

    #_foreign
    (defn #_"int" hashCode---LazySeq [#_"LazySeq" this]
        (let [#_"ISeq" s (seq this)]
            (if (some? s) (Util'hash s) 1)
        )
    )

    #_override
    (defn #_"int" IHashEq'''hasheq--LazySeq [#_"LazySeq" this]
        (Murmur3'hashOrdered this)
    )

    #_foreign
    (defn #_"Object[]" toArray---LazySeq [#_"LazySeq" this]
        (RT'seqToArray (seq this))
    )

    #_foreign
    (defn #_"Object[]" toArray---LazySeq [#_"LazySeq" this, #_"Object[]" a]
        (RT'seqToPassedArray (seq this), a)
    )

    #_foreign
    (defn #_"int" size---LazySeq [#_"LazySeq" this]
        (count this)
    )

    #_foreign
    (defn #_"boolean" contains---LazySeq [#_"LazySeq" this, #_"Object" o]
        (loop-when [#_"ISeq" s (seq this)] (some? s) => false
            (or (Util'equiv-2oo (first s), o) (recur (next s)))
        )
    )

    #_foreign
    (defn #_"Iterator" iterator---LazySeq [#_"LazySeq" this]
        (SeqIterator'new this)
    )

    #_foreign
    (defn #_"Object" get---LazySeq [#_"LazySeq" this, #_"int" index]
        (nth this index)
    )

    #_override
    (defn #_"boolean" IPending'''isRealized--LazySeq [#_"LazySeq" this]
        (§ sync this
            (nil? (:fn this))
        )
    )
)
)

(java-ns cloiure.lang.APersistentMap

(class-ns KeySeq
    (defn- #_"KeySeq" KeySeq'new
        ([#_"ISeq" seq, #_"Iterable" iterable] (KeySeq'new nil, seq, iterable))
        ([#_"IPersistentMap" meta, #_"ISeq" seq, #_"Iterable" iterable]
            (merge (ASeq'new meta)
                (hash-map
                    #_"ISeq" :seq seq
                    #_"Iterable" :iterable iterable
                )
            )
        )
    )

    (defn #_"KeySeq" KeySeq'create [#_"ISeq" seq]
        (when (some? seq)
            (KeySeq'new seq, nil)
        )
    )

    (defn #_"KeySeq" KeySeq'createFromMap [#_"IPersistentMap" map]
        (when (some? map)
            (when-let [#_"ISeq" seq (seq map)]
                (KeySeq'new seq, map)
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--KeySeq [#_"KeySeq" this]
        (key (first (:seq this)))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--KeySeq [#_"KeySeq" this]
        (KeySeq'create this, (next (:seq this)))
    )

    #_override
    (defn #_"KeySeq" IObj'''withMeta--KeySeq [#_"KeySeq" this, #_"IPersistentMap" meta]
        (KeySeq'new meta, (:seq this), (:iterable this))
    )

    #_foreign
    (defn #_"Iterator" iterator---KeySeq [#_"KeySeq" this]
        (cond
            (nil? (:iterable this))
                (.iterator (§ super ))
            (instance? IMapIterable (:iterable this))
                (.keyIterator (:iterable this))
            :else
                (let [#_"Iterator" it (.iterator (:iterable this))]
                    (reify Iterator
                        #_foreign
                        (#_"boolean" hasNext [#_"Iterator" _self]
                            (.hasNext it)
                        )

                        #_foreign
                        (#_"Object" next [#_"Iterator" _self]
                            (key (.next it))
                        )
                    )
                )
        )
    )
)

(class-ns ValSeq
    (defn- #_"ValSeq" ValSeq'new
        ([#_"ISeq" seq, #_"Iterable" iterable] (ValSeq'new nil, seq, iterable))
        ([#_"IPersistentMap" meta, #_"ISeq" seq, #_"Iterable" iterable]
            (merge (ASeq'new meta)
                (hash-map
                    #_"ISeq" :seq seq
                    #_"Iterable" :iterable iterable
                )
            )
        )
    )

    (defn #_"ValSeq" ValSeq'create [#_"ISeq" seq]
        (when (some? seq)
            (ValSeq'new seq, nil)
        )
    )

    (defn #_"ValSeq" ValSeq'createFromMap [#_"IPersistentMap" map]
        (when (some? map)
            (when-let [#_"ISeq" seq (seq map)]
                (ValSeq'new seq, map)
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--ValSeq [#_"ValSeq" this]
        (val (first (:seq this)))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--ValSeq [#_"ValSeq" this]
        (ValSeq'create this, (next (:seq this)))
    )

    #_override
    (defn #_"ValSeq" IObj'''withMeta--ValSeq [#_"ValSeq" this, #_"IPersistentMap" meta]
        (ValSeq'new meta, (:seq this), (:iterable this))
    )

    #_foreign
    (defn #_"Iterator" iterator---ValSeq [#_"ValSeq" this]
        (cond
            (nil? (:iterable this))
                (.iterator (§ super ))
            (instance? IMapIterable (:iterable this))
                (.valIterator (:iterable this))
            :else
                (let [#_"Iterator" it (.iterator (:iterable this))]
                    (reify Iterator
                        #_foreign
                        (#_"boolean" hasNext [#_"Iterator" _self]
                            (.hasNext it)
                        )

                        #_foreign
                        (#_"Object" next [#_"Iterator" _self]
                            (val (.next it))
                        )
                    )
                )
        )
    )
)

(class-ns APersistentMap
    (defn #_"APersistentMap" APersistentMap'new []
        (merge (AFn'new)
            (hash-map
                #_mutable #_"int" :_hash 0
                #_mutable #_"int" :_hasheq 0
            )
        )
    )

    #_foreign
    (defn #_"String" toString---APersistentMap [#_"APersistentMap" this]
        (RT'printString this)
    )

    #_override
    (defn #_"IPersistentCollection" IPersistentCollection'''conj--APersistentMap [#_"APersistentMap" this, #_"Object" o]
        (condp instance? o
            Map$Entry
                (assoc this (key o) (val o))
            IPersistentVector
                (when (= (count o) 2) => (throw! "vector arg to map conj must be a pair")
                    (assoc this (nth o 0) (nth o 1))
                )
            #_else
                (loop-when [this this #_"ISeq" s (seq o)] (some? s) => this
                    (let [#_"Map$Entry" e (first s)]
                        (recur (assoc this (key e) (val e)) (next s))
                    )
                )
        )
    )

    #_foreign
    (defn #_"boolean" equals---APersistentMap [#_"APersistentMap" this, #_"Object" that]
        (or (identical? this that)
            (and (instance? Map that) (= (count that) (count this))
                (loop-when [#_"ISeq" s (seq this)] (some? s) => true
                    (let [#_"Map$Entry" e (first s) #_"Object" k (key e)]
                        (and (contains? that k) (Util'equals (val e), (.get that, k))
                            (recur (next s))
                        )
                    )
                )
            )
        )
    )

    #_override
    (defn #_"boolean" IPersistentCollection'''equiv--APersistentMap [#_"APersistentMap" this, #_"Object" that]
        (and (instance? Map that) (not (and (instance? IPersistentMap that) (not (instance? MapEquivalence that)))) (= (count that) (count this))
            (loop-when [#_"ISeq" s (seq this)] (some? s) => true
                (let [#_"Map$Entry" e (first s) #_"Object" k (key e)]
                    (and (contains? that k) (Util'equiv-2oo (val e), (.get that, k))
                        (recur (next s))
                    )
                )
            )
        )
    )

    (defn #_"int" APersistentMap'mapHash [#_"IPersistentMap" m]
        (loop-when [#_"int" hash 0 #_"ISeq" s (seq m)] (some? s) => hash
            (let [#_"Map$Entry" e (first s) #_"Object" k (key e) #_"Object" v (val e)]
                (recur (+ hash (bit-xor (if (some? k) (.hashCode k) 0) (if (some? v) (.hashCode v) 0))) (next s))
            )
        )
    )

    #_foreign
    (defn #_"int" hashCode---APersistentMap [#_"APersistentMap" this]
        (let-when [#_"int" cached (:_hash this)] (zero? cached) => cached
            (§ set! (:_hash this) (APersistentMap'mapHash this))
        )
    )

    #_override
    (defn #_"int" IHashEq'''hasheq--APersistentMap [#_"APersistentMap" this]
        (let-when [#_"int" cached (:_hasheq this)] (zero? cached) => cached
            (§ set! (:_hasheq this) (Murmur3'hashUnordered this))
        )
    )

    (defn #_"int" APersistentMap'mapHasheq [#_"IPersistentMap" m]
        (Murmur3'hashUnordered m)
    )

    (declare MapEntry'create)

    (defn #_"Object" APersistentMap'MAKE_ENTRY [#_"Object" key, #_"Object" val]
        (MapEntry'create key, val)
    )

    (defn #_"Object" APersistentMap'MAKE_KEY [#_"Object" key, #_"Object" val]
        key
    )

    (defn #_"Object" APersistentMap'MAKE_VAL [#_"Object" key, #_"Object" val]
        val
    )

    #_override
    (defn #_"Object" IFn'''invoke-2--APersistentMap [#_"APersistentMap" this, #_"Object" arg1]
        (get this arg1)
    )

    #_override
    (defn #_"Object" IFn'''invoke-3--APersistentMap [#_"APersistentMap" this, #_"Object" arg1, #_"Object" notFound]
        (get this arg1 notFound)
    )

    #_foreign
    (defn #_"Set" entrySet---APersistentMap [#_"APersistentMap" this!]
        (proxy [AbstractSet] []
            #_foreign
            (#_"Iterator" iterator [#_"AbstractSet" #_this]
                (.iterator this!)
            )

            #_foreign
            (#_"int" size [#_"AbstractSet" #_this]
                (count this!)
            )

            #_foreign
            (#_"int" hashCode [#_"AbstractSet" #_this]
                (.hashCode this!)
            )

            #_foreign
            (#_"boolean" contains [#_"AbstractSet" #_this, #_"Object" o]
                (and (instance? Map$Entry o)
                    (let [#_"Map$Entry" e o #_"Map$Entry" found (find this! (key e))]
                        (and (some? found) (Util'equals (val found), (val e)))
                    )
                )
            )
        )
    )

    #_foreign
    (defn #_"Object" get---APersistentMap [#_"APersistentMap" this, #_"Object" key]
        (get this key)
    )

    #_method
    (defn #_"Set" APersistentMap''keySet [#_"APersistentMap" this!]
        (proxy [AbstractSet] []
            #_foreign
            (#_"Iterator" iterator [#_"AbstractSet" #_this]
                (let [#_"Iterator" it (.iterator this!)]
                    (reify Iterator
                        #_foreign
                        (#_"boolean" hasNext [#_"Iterator" _self]
                            (.hasNext it)
                        )

                        #_foreign
                        (#_"Object" next [#_"Iterator" _self]
                            (key (.next it))
                        )
                    )
                )
            )

            #_foreign
            (#_"int" size [#_"AbstractSet" #_this]
                (count this!)
            )

            #_foreign
            (#_"boolean" contains [#_"AbstractSet" #_this, #_"Object" o]
                (contains? this! o)
            )
        )
    )

    #_foreign
    (defn #_"int" size---APersistentMap [#_"APersistentMap" this]
        (count this)
    )

    #_method
    (defn #_"Collection" APersistentMap''values [#_"APersistentMap" this!]
        (proxy [AbstractCollection] []
            #_foreign
            (#_"Iterator" iterator [#_"AbstractCollection" #_this]
                (let [#_"Iterator" it (.iterator this!)]
                    (reify Iterator
                        #_foreign
                        (#_"boolean" hasNext [#_"Iterator" _self]
                            (.hasNext it)
                        )

                        #_foreign
                        (#_"Object" next [#_"Iterator" _self]
                            (val (.next it))
                        )
                    )
                )
            )

            #_foreign
            (#_"int" size [#_"AbstractCollection" #_this]
                (count this!)
            )
        )
    )

    #_method
    (defn #_"boolean" APersistentMap''containsValue [#_"APersistentMap" this, #_"Object" value]
        (.contains (APersistentMap''values this), value)
    )
)
)

(java-ns cloiure.lang.APersistentSet

(class-ns APersistentSet
    (defn #_"APersistentSet" APersistentSet'new [#_"IPersistentMap" impl]
        (merge (AFn'new)
            (hash-map
                #_"IPersistentMap" :impl impl

                #_mutable #_"int" :_hash 0
                #_mutable #_"int" :_hasheq 0
            )
        )
    )

    #_foreign
    (defn #_"String" toString---APersistentSet [#_"APersistentSet" this]
        (RT'printString this)
    )

    #_override
    (defn #_"boolean" IPersistentSet'''contains--APersistentSet [#_"APersistentSet" this, #_"Object" key]
        (contains? (:impl this) key)
    )

    #_override
    (defn #_"Object" IPersistentSet'''get--APersistentSet [#_"APersistentSet" this, #_"Object" key]
        (get (:impl this) key)
    )

    #_override
    (defn #_"int" Counted'''count--APersistentSet [#_"APersistentSet" this]
        (count (:impl this))
    )

    #_override
    (defn #_"ISeq" Seqable'''seq--APersistentSet [#_"APersistentSet" this]
        (keys (:impl this))
    )

    #_override
    (defn #_"Object" IFn'''invoke-2--APersistentSet [#_"APersistentSet" this, #_"Object" arg1]
        (.get this, arg1)
    )

    #_foreign
    (defn #_"boolean" equals---APersistentSet [#_"APersistentSet" this, #_"Object" that]
        (or (identical? this that)
            (and (instance? Set that) (= (count this) (count that))
                (loop-when [#_"ISeq" s (seq that)] (some? s) => true
                    (and (contains? this (first s)) (recur (next s)))
                )
            )
        )
    )

    #_override
    (defn #_"boolean" IPersistentCollection'''equiv--APersistentSet [#_"APersistentSet" this, #_"Object" that]
        (and (instance? Set that) (= (count this) (count that))
            (loop-when [#_"ISeq" s (seq that)] (some? s) => true
                (and (contains? this (first s)) (recur (next s)))
            )
        )
    )

    #_foreign
    (defn #_"int" hashCode---APersistentSet [#_"APersistentSet" this]
        (let-when [#_"int" hash (:_hash this)] (zero? hash) => hash
            (loop-when [hash 0 #_"ISeq" s (seq this)] (some? s) => (§ set! (:_hash this) hash)
                (recur (+ hash (Util'hash (first s))) (next s))
            )
        )
    )

    #_override
    (defn #_"int" IHashEq'''hasheq--APersistentSet [#_"APersistentSet" this]
        (let-when [#_"int" cached (:_hasheq this)] (zero? cached) => cached
            (§ set! (:_hasheq this) (Murmur3'hashUnordered this))
        )
    )

    #_foreign
    (defn #_"Object[]" toArray---APersistentSet [#_"APersistentSet" this]
        (RT'seqToArray (seq this))
    )

    #_foreign
    (defn #_"Object[]" toArray---APersistentSet [#_"APersistentSet" this, #_"Object[]" a]
        (RT'seqToPassedArray (seq this), a)
    )

    #_foreign
    (defn #_"int" size---APersistentSet [#_"APersistentSet" this]
        (count this)
    )

    #_foreign
    (defn #_"Iterator" iterator---APersistentSet [#_"APersistentSet" this]
        (if (instance? IMapIterable (:impl this))
            (.keyIterator (:impl this))
            (let [#_"Iterator" it (.iterator (:impl this))]
                (reify Iterator
                    #_foreign
                    (#_"boolean" hasNext [#_"Iterator" _self]
                        (.hasNext it)
                    )

                    #_foreign
                    (#_"Object" next [#_"Iterator" _self]
                        (key (.next it))
                    )
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.APersistentVector

(class-ns VSeq
    (defn #_"VSeq" VSeq'new
        ([#_"IPersistentVector" v, #_"int" i] (VSeq'new nil, v, i))
        ([#_"IPersistentMap" meta, #_"IPersistentVector" v, #_"int" i]
            (merge (ASeq'new meta)
                (hash-map
                    #_"IPersistentVector" :v v
                    #_"int" :i i
                )
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--VSeq [#_"VSeq" this]
        (nth (:v this) (:i this))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--VSeq [#_"VSeq" this]
        (when (< (inc (:i this)) (count (:v this)))
            (VSeq'new (:v this), (inc (:i this)))
        )
    )

    #_override
    (defn #_"int" IndexedSeq'''index--VSeq [#_"VSeq" this]
        (:i this)
    )

    #_override
    (defn #_"int" Counted'''count--VSeq [#_"VSeq" this]
        (- (count (:v this)) (:i this))
    )

    #_override
    (defn #_"VSeq" IObj'''withMeta--VSeq [#_"VSeq" this, #_"IPersistentMap" meta]
        (VSeq'new meta, (:v this), (:i this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--VSeq [#_"VSeq" this, #_"IFn" f]
        (let [#_"IPersistentVector" v (:v this) #_"int" i (:i this) #_"int" n (count v)]
            (loop-when [#_"Object" r (nth v i) i (inc i)] (< i n) => r
                (let-when [r (.invoke f, r, (nth v i))] (reduced? r) => (recur r (inc i))
                    (deref r)
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--VSeq [#_"VSeq" this, #_"IFn" f, #_"Object" r]
        (let [#_"IPersistentVector" v (:v this) #_"int" i (:i this) #_"int" n (count v)]
            (loop-when [r (.invoke f, r, (nth v i)) i (inc i)] (< i n) => (if (reduced? r) (deref r) r)
                (when (reduced? r) => (recur (.invoke f, r, (nth v i)) (inc i))
                    (deref r)
                )
            )
        )
    )
)

(class-ns RSeq
    (defn #_"RSeq" RSeq'new
        ([#_"IPersistentVector" v, #_"int" i] (RSeq'new nil, v, i))
        ([#_"IPersistentMap" meta, #_"IPersistentVector" v, #_"int" i]
            (merge (ASeq'new meta)
                (hash-map
                    #_"IPersistentVector" :v v
                    #_"int" :i i
                )
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--RSeq [#_"RSeq" this]
        (nth (:v this) (:i this))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--RSeq [#_"RSeq" this]
        (when (pos? (:i this))
            (RSeq'new (:v this), (dec (:i this)))
        )
    )

    #_override
    (defn #_"int" IndexedSeq'''index--RSeq [#_"RSeq" this]
        (:i this)
    )

    #_override
    (defn #_"int" Counted'''count--RSeq [#_"RSeq" this]
        (inc (:i this))
    )

    #_override
    (defn #_"RSeq" IObj'''withMeta--RSeq [#_"RSeq" this, #_"IPersistentMap" meta]
        (RSeq'new meta, (:v this), (:i this))
    )
)

(class-ns APersistentVector
    (defn #_"APersistentVector" APersistentVector'new []
        (merge (AFn'new)
            (hash-map
                #_mutable #_"int" :_hash 0
                #_mutable #_"int" :_hasheq 0
            )
        )
    )

    #_foreign
    (defn #_"String" toString---APersistentVector [#_"APersistentVector" this]
        (RT'printString this)
    )

    #_override
    (defn #_"ISeq" Seqable'''seq--APersistentVector [#_"APersistentVector" this]
        (when (pos? (count this))
            (VSeq'new this, 0)
        )
    )

    #_override
    (defn #_"ISeq" Reversible'''rseq--APersistentVector [#_"APersistentVector" this]
        (when (pos? (count this))
            (RSeq'new this, (dec (count this)))
        )
    )

    (defn #_"boolean" APersistentVector'doEquals [#_"IPersistentVector" v, #_"Object" obj]
        (condp instance? obj
            IPersistentVector
                (when (= (count obj) (count v)) => false
                    (loop-when [#_"int" i 0] (< i (count v)) => true
                        (recur-if (Util'equals (nth v i), (nth obj i)) [(inc i)] => false)
                    )
                )
            List
                (when (and (= (count obj) (count v)) (= (.hashCode obj) (.hashCode v))) => false
                    (loop-when [#_"Iterator" i1 (.iterator v) #_"Iterator" i2 (.iterator obj)] (.hasNext i1) => true
                        (recur-if (Util'equals (.next i1), (.next i2)) [i1 i2] => false)
                    )
                )
            Sequential
                (loop-when [#_"int" i 0 #_"ISeq" s (seq obj)] (< i (count v)) => (nil? s)
                    (recur-if (and (some? s) (Util'equals (nth v i), (first s))) [(inc i) (next s)] => false)
                )
            false
        )
    )

    (defn #_"boolean" APersistentVector'doEquiv [#_"IPersistentVector" v, #_"Object" obj]
        (condp instance? obj
            IPersistentVector
                (when (= (count obj) (count v)) => false
                    (loop-when [#_"int" i 0] (< i (count v)) => true
                        (recur-if (Util'equiv-2oo (nth v i), (nth obj i)) [(inc i)] => false)
                    )
                )
            List
                (when (= (count obj) (count v)) => false
                    (loop-when [#_"Iterator" i1 (.iterator v) #_"Iterator" i2 (.iterator obj)] (.hasNext i1) => true
                        (recur-if (Util'equiv-2oo (.next i1), (.next i2)) [i1 i2] => false)
                    )
                )
            Sequential
                (loop-when [#_"int" i 0 #_"ISeq" s (seq obj)] (< i (count v)) => (nil? s)
                    (recur-if (and (some? s) (Util'equiv-2oo (nth v i), (first s))) [(inc i) (next s)] => false)
                )
            false
        )
    )

    #_foreign
    (defn #_"boolean" equals---APersistentVector [#_"APersistentVector" this, #_"Object" that]
        (or (= this that) (APersistentVector'doEquals this, that))
    )

    #_override
    (defn #_"boolean" IPersistentCollection'''equiv--APersistentVector [#_"APersistentVector" this, #_"Object" that]
        (or (= this that) (APersistentVector'doEquiv this, that))
    )

    #_foreign
    (defn #_"int" hashCode---APersistentVector [#_"APersistentVector" this]
        (let-when [#_"int" hash (:_hash this)] (zero? hash) => hash
            (let [hash
                    (loop-when [hash 1 #_"int" i 0] (< i (count this)) => hash
                        (let [#_"Object" o (nth this i)]
                            (recur (+ (* 31 hash) (if (some? o) (.hashCode o) 0)) (inc i))
                        )
                    )]
                (§ set! (:_hash this) hash)
            )
        )
    )

    #_override
    (defn #_"int" IHashEq'''hasheq--APersistentVector [#_"APersistentVector" this]
        (let-when [#_"int" hash (:_hasheq this)] (zero? hash) => hash
            (let [hash
                    (loop-when [hash 1 #_"int" i 0] (< i (count this)) => (Murmur3'mixCollHash hash, i)
                        (recur (+ (* 31 hash) (Util'hasheq (nth this i))) (inc i))
                    )]
                (§ set! (:_hasheq this) hash)
            )
        )
    )

    #_foreign
    (defn #_"Object" get---APersistentVector [#_"APersistentVector" this, #_"int" index]
        (nth this index)
    )

    #_override
    (defn #_"Object" Indexed'''nth-3--APersistentVector [#_"APersistentVector" this, #_"int" i, #_"Object" notFound]
        (if (< -1 i (count this)) (nth this i) notFound)
    )

    #_override
    (defn #_"Iterator" APersistentVector'''rangedIterator--APersistentVector [#_"APersistentVector" this, #_"int" start, #_"int" end]
        (§ reify Iterator
            [#_mutable #_"int" i start]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (< i end)
            )

            #_foreign
            (#_"Object" next [#_"Iterator" _self]
                (when (< i end) => (throw (NoSuchElementException.))
                    (let [_ (nth this i)]
                        (update! i inc)
                        _
                    )
                )
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-2--APersistentVector [#_"APersistentVector" this, #_"Object" arg1]
        (when (Numbers'isInteger arg1) => (throw! "key must be integer")
            (nth this (.intValue arg1))
        )
    )

    #_foreign
    (defn #_"Iterator" iterator---APersistentVector [#_"APersistentVector" this]
        (§ reify Iterator
            [#_mutable #_"int" i 0]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (< i (count this))
            )

            #_foreign
            (#_"Object" next [#_"Iterator" _self]
                (when (< i (count this)) => (throw (NoSuchElementException.))
                    (let [_ (nth this i)]
                        (update! i inc)
                        _
                    )
                )
            )
        )
    )

    #_override
    (defn #_"Object" IPersistentStack'''peek--APersistentVector [#_"APersistentVector" this]
        (when (pos? (count this))
            (nth this (dec (count this)))
        )
    )

    #_override
    (defn #_"boolean" Associative'''containsKey--APersistentVector [#_"APersistentVector" this, #_"Object" key]
        (and (Numbers'isInteger key) (< -1 (.intValue key) (count this)))
    )

    #_override
    (defn #_"IMapEntry" Associative'''entryAt--APersistentVector [#_"APersistentVector" this, #_"Object" key]
        (when (Numbers'isInteger key)
            (let-when [#_"int" i (.intValue key)] (< -1 i (count this))
                (MapEntry'create key, (nth this i))
            )
        )
    )

    #_override
    (defn #_"IPersistentVector" Associative'''assoc--APersistentVector [#_"APersistentVector" this, #_"Object" key, #_"Object" val]
        (when (Numbers'isInteger key) => (throw! "key must be integer")
            (.assocN this, (.intValue key), val)
        )
    )

    #_override
    (defn #_"Object" ILookup'''valAt-3--APersistentVector [#_"APersistentVector" this, #_"Object" key, #_"Object" notFound]
        (when (Numbers'isInteger key) => notFound
            (let-when [#_"int" i (.intValue key)] (< -1 i (count this)) => notFound
                (nth this i)
            )
        )
    )

    #_override
    (defn #_"Object" ILookup'''valAt-2--APersistentVector [#_"APersistentVector" this, #_"Object" key]
        (.valAt this, key, nil)
    )

    #_foreign
    (defn #_"Object[]" toArray---APersistentVector [#_"APersistentVector" this]
        (let [#_"Object[]" a (make-array Object (count this))]
            (dotimes [#_"int" i (count this)]
                (aset a i (nth this i))
            )
            a
        )
    )

    #_foreign
    (defn #_"Object[]" toArray---APersistentVector [#_"APersistentVector" this, #_"Object[]" a]
        (RT'seqToPassedArray (seq this), a)
    )

    #_foreign
    (defn #_"int" size---APersistentVector [#_"APersistentVector" this]
        (count this)
    )

    #_foreign
    (defn #_"boolean" contains---APersistentVector [#_"APersistentVector" this, #_"Object" o]
        (loop-when [#_"ISeq" s (seq this)] (some? s) => false
            (or (Util'equiv-2oo (first s), o) (recur (next s)))
        )
    )

    #_foreign
    (defn #_"int" compareTo---APersistentVector [#_"APersistentVector" this, #_"IPersistentVector" that]
        (let [#_"int" n (count this) #_"int" m (count that)]
            (cond (< n m) -1 (< m n) 1
                :else
                    (loop-when [#_"int" i 0] (< i n) => 0
                        (let [#_"int" cmp (compare (nth this i) (nth that i))]
                            (recur-if (zero? cmp) [(inc i)] => cmp)
                        )
                    )
            )
        )
    )
)

(class-ns SubVector
    (defn #_"SubVector" SubVector'new [#_"IPersistentMap" meta, #_"IPersistentVector" v, #_"int" start, #_"int" end]
        (let [[v start end]
                (when (instance? SubVector v) => [v start end]
                    (let [#_"SubVector" sv v]
                        [(:v sv) (+ (:start sv) start) (+ (:start sv) end)]
                    )
                )]
            (merge (APersistentVector'new)
                (hash-map
                    #_"IPersistentMap" :_meta meta
                    #_"IPersistentVector" :v v
                    #_"int" :start start
                    #_"int" :end end
                )
            )
        )
    )

    #_foreign
    (defn #_"Iterator" iterator---SubVector [#_"SubVector" this]
        (when (instance? APersistentVector (:v this)) => (.iterator (§ super ))
            (.rangedIterator (:v this), (:start this), (:end this))
        )
    )

    #_override
    (defn #_"Object" Indexed'''nth-2--SubVector [#_"SubVector" this, #_"int" i]
        (when (and (<= 0 i) (< (+ (:start this) i) (:end this))) => (throw (IndexOutOfBoundsException.))
            (nth (:v this) (+ (:start this) i))
        )
    )

    #_override
    (defn #_"IPersistentVector" IPersistentVector'''assocN--SubVector [#_"SubVector" this, #_"int" i, #_"Object" val]
        (cond
            (< (:end this) (+ (:start this) i)) (throw (IndexOutOfBoundsException.))
            (= (+ (:start this) i) (:end this)) (conj this val)
            :else (SubVector'new (:_meta this), (.assocN (:v this), (+ (:start this) i), val), (:start this), (:end this))
        )
    )

    #_override
    (defn #_"int" Counted'''count--SubVector [#_"SubVector" this]
        (- (:end this) (:start this))
    )

    #_override
    (defn #_"IPersistentVector" IPersistentVector'''conj--SubVector [#_"SubVector" this, #_"Object" o]
        (SubVector'new (:_meta this), (.assocN (:v this), (:end this), o), (:start this), (inc (:end this)))
    )

    #_override
    (defn #_"IPersistentCollection" IPersistentCollection'''empty--SubVector [#_"SubVector" this]
        (with-meta [] (meta this))
    )

    #_override
    (defn #_"IPersistentStack" IPersistentStack'''pop--SubVector [#_"SubVector" this]
        (if (= (dec (:end this)) (:start this))
            []
            (SubVector'new (:_meta this), (:v this), (:start this), (dec (:end this)))
        )
    )

    #_override
    (defn #_"SubVector" IObj'''withMeta--SubVector [#_"SubVector" this, #_"IPersistentMap" meta]
        (when-not (= meta (:_meta this)) => this
            (SubVector'new meta, (:v this), (:start this), (:end this))
        )
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--SubVector [#_"SubVector" this]
        (:_meta this)
    )
)
)

(java-ns cloiure.lang.AMapEntry

(class-ns AMapEntry
    (defn #_"AMapEntry" AMapEntry'new []
        (APersistentVector'new)
    )

    #_override
    (defn #_"Object" Indexed'''nth-2--AMapEntry [#_"AMapEntry" this, #_"int" i]
        (case i 0 (key this) 1 (val this) (throw (IndexOutOfBoundsException.)))
    )

    (declare LazilyPersistentVector'createOwning)

    #_method
    (defn- #_"IPersistentVector" AMapEntry''asVector [#_"AMapEntry" this]
        (LazilyPersistentVector'createOwning (key this), (val this))
    )

    #_override
    (defn #_"IPersistentVector" IPersistentVector'''assocN--AMapEntry [#_"AMapEntry" this, #_"int" i, #_"Object" val]
        (.assocN (AMapEntry''asVector this), i, val)
    )

    #_override
    (defn #_"int" Counted'''count--AMapEntry [#_"AMapEntry" this]
        2
    )

    #_override
    (defn #_"ISeq" Seqable'''seq--AMapEntry [#_"AMapEntry" this]
        (seq (AMapEntry''asVector this))
    )

    #_override
    (defn #_"IPersistentVector" IPersistentVector'''conj--AMapEntry [#_"AMapEntry" this, #_"Object" o]
        (conj (AMapEntry''asVector this) o)
    )

    #_override
    (defn #_"IPersistentCollection" IPersistentCollection'''empty--AMapEntry [#_"AMapEntry" this]
        nil
    )

    #_override
    (defn #_"IPersistentStack" IPersistentStack'''pop--AMapEntry [#_"AMapEntry" this]
        (LazilyPersistentVector'createOwning (key this))
    )
)
)

(java-ns cloiure.lang.MapEntry

(class-ns MapEntry
    (defn- #_"MapEntry" MapEntry'new [#_"Object" key, #_"Object" val]
        (merge (AMapEntry'new)
            (hash-map
                #_"Object" :_key key
                #_"Object" :_val val
            )
        )
    )

    (defn #_"MapEntry" MapEntry'create [#_"Object" key, #_"Object" val]
        (MapEntry'new key, val)
    )

    #_override
    (defn #_"Object" IMapEntry'''key--MapEntry [#_"MapEntry" this]
        (:_key this)
    )

    #_override
    (defn #_"Object" IMapEntry'''val--MapEntry [#_"MapEntry" this]
        (:_val this)
    )

    #_foreign
    (defn #_"Object" getKey---MapEntry [#_"MapEntry" this]
        (.key this)
    )

    #_foreign
    (defn #_"Object" getValue---MapEntry [#_"MapEntry" this]
        (.val this)
    )
)
)

(java-ns cloiure.lang.ArrayChunk

(class-ns ArrayChunk
    (defn #_"ArrayChunk" ArrayChunk'new
        ([#_"Object[]" array] (ArrayChunk'new array, 0))
        ([#_"Object[]" array, #_"int" off] (ArrayChunk'new array, off, (alength array)))
        ([#_"Object[]" array, #_"int" off, #_"int" end]
            (hash-map
                #_"Object[]" :array array
                #_"int" :off off
                #_"int" :end end
            )
        )
    )

    #_override
    (defn #_"Object" Indexed'''nth-2--ArrayChunk [#_"ArrayChunk" this, #_"int" i]
        (aget (:array this) (+ (:off this) i))
    )

    #_override
    (defn #_"Object" Indexed'''nth-3--ArrayChunk [#_"ArrayChunk" this, #_"int" i, #_"Object" notFound]
        (if (< -1 i (count this)) (nth this i) notFound)
    )

    #_override
    (defn #_"int" Counted'''count--ArrayChunk [#_"ArrayChunk" this]
        (- (:end this) (:off this))
    )

    #_override
    (defn #_"IChunk" IChunk'''dropFirst--ArrayChunk [#_"ArrayChunk" this]
        (when-not (= (:off this) (:end this)) => (throw! "dropFirst of empty chunk")
            (ArrayChunk'new (:array this), (inc (:off this)), (:end this))
        )
    )

    #_override
    (defn #_"Object" IChunk'''reduce--ArrayChunk [#_"ArrayChunk" this, #_"IFn" f, #_"Object" r]
        (let [r (.invoke f, r, (aget (:array this) (:off this)))]
            (when-not (reduced? r) => r
                (loop-when [#_"int" i (inc (:off this))] (< i (:end this)) => r
                    (let [r (.invoke f, r, (aget (:array this) i))]
                        (when-not (reduced? r) => r
                            (recur (inc i))
                        )
                    )
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.ArrayIter

(class-ns ArrayIter_int
    (defn #_"Iterator" ArrayIter_int'new [#_"int[]" a, #_"int" i]
        (§ reify Iterator
            [#_mutable #_"int" i i]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (and (some? a) (< i (alength a)))
            )

            #_foreign
            (#_"Long" next [#_"Iterator" _self]
                (when (and (some? a) (< i (alength a))) => (throw (NoSuchElementException.))
                    (let [_ (Long/valueOf (aget a i))]
                        (update! i inc)
                        _
                    )
                )
            )
        )
    )
)

(class-ns ArrayIter_float
    (defn #_"Iterator" ArrayIter_float'new [#_"float[]" a, #_"int" i]
        (§ reify Iterator
            [#_mutable #_"int" i i]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (and (some? a) (< i (alength a)))
            )

            #_foreign
            (#_"Double" next [#_"Iterator" _self]
                (when (and (some? a) (< i (alength a))) => (throw (NoSuchElementException.))
                    (let [_ (Double/valueOf (aget a i))]
                        (update! i inc)
                        _
                    )
                )
            )
        )
    )
)

(class-ns ArrayIter_double
    (defn #_"Iterator" ArrayIter_double'new [#_"double[]" a, #_"int" i]
        (§ reify Iterator
            [#_mutable #_"int" i i]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (and (some? a) (< i (alength a)))
            )

            #_foreign
            (#_"Double" next [#_"Iterator" _self]
                (when (and (some? a) (< i (alength a))) => (throw (NoSuchElementException.))
                    (let [_ (aget a i)]
                        (update! i inc)
                        _
                    )
                )
            )
        )
    )
)

(class-ns ArrayIter_long
    (defn #_"Iterator" ArrayIter_long'new [#_"long[]" a, #_"int" i]
        (§ reify Iterator
            [#_mutable #_"int" i i]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (and (some? a) (< i (alength a)))
            )

            #_foreign
            (#_"Long" next [#_"Iterator" _self]
                (when (and (some? a) (< i (alength a))) => (throw (NoSuchElementException.))
                    (let [_ (Long/valueOf (aget a i))]
                        (update! i inc)
                        _
                    )
                )
            )
        )
    )
)

(class-ns ArrayIter_byte
    (defn #_"Iterator" ArrayIter_byte'new [#_"byte[]" a, #_"int" i]
        (§ reify Iterator
            [#_mutable #_"int" i i]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (and (some? a) (< i (alength a)))
            )

            #_foreign
            (#_"Byte" next [#_"Iterator" _self]
                (when (and (some? a) (< i (alength a))) => (throw (NoSuchElementException.))
                    (let [_ (aget a i)]
                        (update! i inc)
                        _
                    )
                )
            )
        )
    )
)

(class-ns ArrayIter_char
    (defn #_"Iterator" ArrayIter_char'new [#_"char[]" a, #_"int" i]
        (§ reify Iterator
            [#_mutable #_"int" i i]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (and (some? a) (< i (alength a)))
            )

            #_foreign
            (#_"Character" next [#_"Iterator" _self]
                (when (and (some? a) (< i (alength a))) => (throw (NoSuchElementException.))
                    (let [_ (aget a i)]
                        (update! i inc)
                        _
                    )
                )
            )
        )
    )
)

(class-ns ArrayIter_short
    (defn #_"Iterator" ArrayIter_short'new [#_"short[]" a, #_"int" i]
        (§ reify Iterator
            [#_mutable #_"int" i i]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (and (some? a) (< i (alength a)))
            )

            #_foreign
            (#_"Long" next [#_"Iterator" _self]
                (when (and (some? a) (< i (alength a))) => (throw (NoSuchElementException.))
                    (let [_ (Long/valueOf (aget a i))]
                        (update! i inc)
                        _
                    )
                )
            )
        )
    )
)

(class-ns ArrayIter_boolean
    (defn #_"Iterator" ArrayIter_boolean'new [#_"boolean[]" a, #_"int" i]
        (§ reify Iterator
            [#_mutable #_"int" i i]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (and (some? a) (< i (alength a)))
            )

            #_foreign
            (#_"Boolean" next [#_"Iterator" _self]
                (when (and (some? a) (< i (alength a))) => (throw (NoSuchElementException.))
                    (let [_ (Boolean/valueOf (aget a i))]
                        (update! i inc)
                        _
                    )
                )
            )
        )
    )
)

(class-ns ArrayIter
    (def #_"Iterator" ArrayIter'EMPTY_ITERATOR
        (reify Iterator
            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                false
            )

            #_foreign
            (#_"Object" next [#_"Iterator" _self]
                (throw (NoSuchElementException.))
            )
        )
    )

    (defn #_"Iterator" ArrayIter'new [#_"Object" array, #_"int" i]
        (let [#_"Object[]" a (cast Compiler'OBJECTS_CLASS array)]
            (§ reify Iterator
                [#_mutable #_"int" i i]

                #_foreign
                (#_"boolean" hasNext [#_"Iterator" _self]
                    (and (some? a) (< i (alength a)))
                )

                #_foreign
                (#_"Object" next [#_"Iterator" _self]
                    (when (and (some? a) (< i (alength a))) => (throw (NoSuchElementException.))
                        (let [_ (aget a i)]
                            (update! i inc)
                            _
                        )
                    )
                )
            )
        )
    )

    (defn #_"Iterator" ArrayIter'create-0 []
        ArrayIter'EMPTY_ITERATOR
    )

    (defn #_"Iterator" ArrayIter'create-1 [& #_"Object..." a]
        (when (and (some? a) (pos? (alength a))) => ArrayIter'EMPTY_ITERATOR
            (ArrayIter'new a, 0)
        )
    )

    (defn #_"Iterator" ArrayIter'createFromObject [#_"Object" a]
        (when (and (some? a) (pos? (Array/getLength a))) => ArrayIter'EMPTY_ITERATOR
            (let [#_"Class" c (class a)]
                (condp = c
                    Compiler'INTS_CLASS     (ArrayIter_int'new     (cast c a), 0)
                    Compiler'FLOATS_CLASS   (ArrayIter_float'new   (cast c a), 0)
                    Compiler'DOUBLES_CLASS  (ArrayIter_double'new  (cast c a), 0)
                    Compiler'LONGS_CLASS    (ArrayIter_long'new    (cast c a), 0)
                    Compiler'BYTES_CLASS    (ArrayIter_byte'new    (cast c a), 0)
                    Compiler'CHARS_CLASS    (ArrayIter_char'new    (cast c a), 0)
                    Compiler'SHORTS_CLASS   (ArrayIter_short'new   (cast c a), 0)
                    Compiler'BOOLEANS_CLASS (ArrayIter_boolean'new (cast c a), 0)
                                            (ArrayIter'new                 a,  0)
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.ArraySeq

(class-ns ArraySeq_int
    (defn #_"ArraySeq_int" ArraySeq_int'new [#_"IPersistentMap" meta, #_"int[]" array, #_"int" i]
        (merge (ASeq'new meta)
            (hash-map
                #_"int[]" :array array
                #_"int" :i i
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--ArraySeq_int [#_"ArraySeq_int" this]
        (aget (:array this) (:i this))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--ArraySeq_int [#_"ArraySeq_int" this]
        (when (< (inc (:i this)) (alength (:array this)))
            (ArraySeq_int'new (meta this), (:array this), (inc (:i this)))
        )
    )

    #_override
    (defn #_"int" Counted'''count--ArraySeq_int [#_"ArraySeq_int" this]
        (- (alength (:array this)) (:i this))
    )

    #_override
    (defn #_"int" IndexedSeq'''index--ArraySeq_int [#_"ArraySeq_int" this]
        (:i this)
    )

    #_override
    (defn #_"ArraySeq_int" IObj'''withMeta--ArraySeq_int [#_"ArraySeq_int" this, #_"IPersistentMap" meta]
        (ArraySeq_int'new meta, (:array this), (:i this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--ArraySeq_int [#_"ArraySeq_int" this, #_"IFn" f]
        (let [#_"int[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [#_"Object" r (aget a i) i (inc i)] (< i n) => r
                (let [r (.invoke f, r, (aget a i))]
                    (if (reduced? r) (deref r) (recur r (inc i)))
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--ArraySeq_int [#_"ArraySeq_int" this, #_"IFn" f, #_"Object" r]
        (let [#_"int[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [r (.invoke f, r, (aget a i)) i (inc i)] (< i n) => (if (reduced? r) (deref r) r)
                (if (reduced? r) (deref r) (recur (.invoke f, r, (aget a i)) (inc i)))
            )
        )
    )
)

(class-ns ArraySeq_float
    (defn #_"ArraySeq_float" ArraySeq_float'new [#_"IPersistentMap" meta, #_"float[]" array, #_"int" i]
        (merge (ASeq'new meta)
            (hash-map
                #_"float[]" :array array
                #_"int" :i i
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--ArraySeq_float [#_"ArraySeq_float" this]
        (Numbers'num-1f (aget (:array this) (:i this)))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--ArraySeq_float [#_"ArraySeq_float" this]
        (when (< (inc (:i this)) (alength (:array this)))
            (ArraySeq_float'new (meta this), (:array this), (inc (:i this)))
        )
    )

    #_override
    (defn #_"int" Counted'''count--ArraySeq_float [#_"ArraySeq_float" this]
        (- (alength (:array this)) (:i this))
    )

    #_override
    (defn #_"int" IndexedSeq'''index--ArraySeq_float [#_"ArraySeq_float" this]
        (:i this)
    )

    #_override
    (defn #_"ArraySeq_float" IObj'''withMeta--ArraySeq_float [#_"ArraySeq_float" this, #_"IPersistentMap" meta]
        (ArraySeq_float'new meta, (:array this), (:i this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--ArraySeq_float [#_"ArraySeq_float" this, #_"IFn" f]
        (let [#_"float[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [#_"Object" r (Numbers'num-1f (aget a i)) i (inc i)] (< i n) => r
                (let [r (.invoke f, r, (Numbers'num-1f (aget a i)))]
                    (if (reduced? r) (deref r) (recur r (inc i)))
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--ArraySeq_float [#_"ArraySeq_float" this, #_"IFn" f, #_"Object" r]
        (let [#_"float[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [r (.invoke f, r, (Numbers'num-1f (aget a i))) i (inc i)] (< i n) => (if (reduced? r) (deref r) r)
                (if (reduced? r) (deref r) (recur (.invoke f, r, (Numbers'num-1f (aget a i))) (inc i)))
            )
        )
    )
)

(class-ns ArraySeq_double
    (defn #_"ArraySeq_double" ArraySeq_double'new [#_"IPersistentMap" meta, #_"double[]" array, #_"int" i]
        (merge (ASeq'new meta)
            (hash-map
                #_"double[]" :array array
                #_"int" :i i
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--ArraySeq_double [#_"ArraySeq_double" this]
        (aget (:array this) (:i this))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--ArraySeq_double [#_"ArraySeq_double" this]
        (when (< (inc (:i this)) (alength (:array this)))
            (ArraySeq_double'new (meta this), (:array this), (inc (:i this)))
        )
    )

    #_override
    (defn #_"int" Counted'''count--ArraySeq_double [#_"ArraySeq_double" this]
        (- (alength (:array this)) (:i this))
    )

    #_override
    (defn #_"int" IndexedSeq'''index--ArraySeq_double [#_"ArraySeq_double" this]
        (:i this)
    )

    #_override
    (defn #_"ArraySeq_double" IObj'''withMeta--ArraySeq_double [#_"ArraySeq_double" this, #_"IPersistentMap" meta]
        (ArraySeq_double'new meta, (:array this), (:i this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--ArraySeq_double [#_"ArraySeq_double" this, #_"IFn" f]
        (let [#_"double[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [#_"Object" r (aget a i) i (inc i)] (< i n) => r
                (let [r (.invoke f, r, (aget a i))]
                    (if (reduced? r) (deref r) (recur r (inc i)))
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--ArraySeq_double [#_"ArraySeq_double" this, #_"IFn" f, #_"Object" r]
        (let [#_"double[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [r (.invoke f, r, (aget a i)) i (inc i)] (< i n) => (if (reduced? r) (deref r) r)
                (if (reduced? r) (deref r) (recur (.invoke f, r, (aget a i)) (inc i)))
            )
        )
    )
)

(class-ns ArraySeq_long
    (defn #_"ArraySeq_long" ArraySeq_long'new [#_"IPersistentMap" meta, #_"long[]" array, #_"int" i]
        (merge (ASeq'new meta)
            (hash-map
                #_"long[]" :array array
                #_"int" :i i
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--ArraySeq_long [#_"ArraySeq_long" this]
        (Numbers'num-1l (aget (:array this) (:i this)))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--ArraySeq_long [#_"ArraySeq_long" this]
        (when (< (inc (:i this)) (alength (:array this)))
            (ArraySeq_long'new (meta this), (:array this), (inc (:i this)))
        )
    )

    #_override
    (defn #_"int" Counted'''count--ArraySeq_long [#_"ArraySeq_long" this]
        (- (alength (:array this)) (:i this))
    )

    #_override
    (defn #_"int" IndexedSeq'''index--ArraySeq_long [#_"ArraySeq_long" this]
        (:i this)
    )

    #_override
    (defn #_"ArraySeq_long" IObj'''withMeta--ArraySeq_long [#_"ArraySeq_long" this, #_"IPersistentMap" meta]
        (ArraySeq_long'new meta, (:array this), (:i this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--ArraySeq_long [#_"ArraySeq_long" this, #_"IFn" f]
        (let [#_"long[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [#_"Object" r (Numbers'num-1l (aget a i)) i (inc i)] (< i n) => r
                (let [r (.invoke f, r, (Numbers'num-1l (aget a i)))]
                    (if (reduced? r) (deref r) (recur r (inc i)))
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--ArraySeq_long [#_"ArraySeq_long" this, #_"IFn" f, #_"Object" r]
        (let [#_"long[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [r (.invoke f, r, (Numbers'num-1l (aget a i))) i (inc i)] (< i n) => (if (reduced? r) (deref r) r)
                (if (reduced? r) (deref r) (recur (.invoke f, r, (Numbers'num-1l (aget a i))) (inc i)))
            )
        )
    )
)

(class-ns ArraySeq_byte
    (defn #_"ArraySeq_byte" ArraySeq_byte'new [#_"IPersistentMap" meta, #_"byte[]" array, #_"int" i]
        (merge (ASeq'new meta)
            (hash-map
                #_"byte[]" :array array
                #_"int" :i i
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--ArraySeq_byte [#_"ArraySeq_byte" this]
        (aget (:array this) (:i this))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--ArraySeq_byte [#_"ArraySeq_byte" this]
        (when (< (inc (:i this)) (alength (:array this)))
            (ArraySeq_byte'new (meta this), (:array this), (inc (:i this)))
        )
    )

    #_override
    (defn #_"int" Counted'''count--ArraySeq_byte [#_"ArraySeq_byte" this]
        (- (alength (:array this)) (:i this))
    )

    #_override
    (defn #_"int" IndexedSeq'''index--ArraySeq_byte [#_"ArraySeq_byte" this]
        (:i this)
    )

    #_override
    (defn #_"ArraySeq_byte" IObj'''withMeta--ArraySeq_byte [#_"ArraySeq_byte" this, #_"IPersistentMap" meta]
        (ArraySeq_byte'new meta, (:array this), (:i this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--ArraySeq_byte [#_"ArraySeq_byte" this, #_"IFn" f]
        (let [#_"byte[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [#_"Object" r (aget a i) i (inc i)] (< i n) => r
                (let [r (.invoke f, r, (aget a i))]
                    (if (reduced? r) (deref r) (recur r (inc i)))
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--ArraySeq_byte [#_"ArraySeq_byte" this, #_"IFn" f, #_"Object" r]
        (let [#_"byte[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [r (.invoke f, r, (aget a i)) i (inc i)] (< i n) => (if (reduced? r) (deref r) r)
                (if (reduced? r) (deref r) (recur (.invoke f, r, (aget a i)) (inc i)))
            )
        )
    )
)

(class-ns ArraySeq_char
    (defn #_"ArraySeq_char" ArraySeq_char'new [#_"IPersistentMap" meta, #_"char[]" array, #_"int" i]
        (merge (ASeq'new meta)
            (hash-map
                #_"char[]" :array array
                #_"int" :i i
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--ArraySeq_char [#_"ArraySeq_char" this]
        (aget (:array this) (:i this))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--ArraySeq_char [#_"ArraySeq_char" this]
        (when (< (inc (:i this)) (alength (:array this)))
            (ArraySeq_char'new (meta this), (:array this), (inc (:i this)))
        )
    )

    #_override
    (defn #_"int" Counted'''count--ArraySeq_char [#_"ArraySeq_char" this]
        (- (alength (:array this)) (:i this))
    )

    #_override
    (defn #_"int" IndexedSeq'''index--ArraySeq_char [#_"ArraySeq_char" this]
        (:i this)
    )

    #_override
    (defn #_"ArraySeq_char" IObj'''withMeta--ArraySeq_char [#_"ArraySeq_char" this, #_"IPersistentMap" meta]
        (ArraySeq_char'new meta, (:array this), (:i this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--ArraySeq_char [#_"ArraySeq_char" this, #_"IFn" f]
        (let [#_"char[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [#_"Object" r (aget a i) i (inc i)] (< i n) => r
                (let [r (.invoke f, r, (aget a i))]
                    (if (reduced? r) (deref r) (recur r (inc i)))
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--ArraySeq_char [#_"ArraySeq_char" this, #_"IFn" f, #_"Object" r]
        (let [#_"char[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [r (.invoke f, r, (aget a i)) i (inc i)] (< i n) => (if (reduced? r) (deref r) r)
                (if (reduced? r) (deref r) (recur (.invoke f, r, (aget a i)) (inc i)))
            )
        )
    )
)

(class-ns ArraySeq_short
    (defn #_"ArraySeq_short" ArraySeq_short'new [#_"IPersistentMap" meta, #_"short[]" array, #_"int" i]
        (merge (ASeq'new meta)
            (hash-map
                #_"short[]" :array array
                #_"int" :i i
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--ArraySeq_short [#_"ArraySeq_short" this]
        (aget (:array this) (:i this))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--ArraySeq_short [#_"ArraySeq_short" this]
        (when (< (inc (:i this)) (alength (:array this)))
            (ArraySeq_short'new (meta this), (:array this), (inc (:i this)))
        )
    )

    #_override
    (defn #_"int" Counted'''count--ArraySeq_short [#_"ArraySeq_short" this]
        (- (alength (:array this)) (:i this))
    )

    #_override
    (defn #_"int" IndexedSeq'''index--ArraySeq_short [#_"ArraySeq_short" this]
        (:i this)
    )

    #_override
    (defn #_"ArraySeq_short" IObj'''withMeta--ArraySeq_short [#_"ArraySeq_short" this, #_"IPersistentMap" meta]
        (ArraySeq_short'new meta, (:array this), (:i this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--ArraySeq_short [#_"ArraySeq_short" this, #_"IFn" f]
        (let [#_"short[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [#_"Object" r (aget a i) i (inc i)] (< i n) => r
                (let [r (.invoke f, r, (aget a i))]
                    (if (reduced? r) (deref r) (recur r (inc i)))
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--ArraySeq_short [#_"ArraySeq_short" this, #_"IFn" f, #_"Object" r]
        (let [#_"short[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [r (.invoke f, r, (aget a i)) i (inc i)] (< i n) => (if (reduced? r) (deref r) r)
                (if (reduced? r) (deref r) (recur (.invoke f, r, (aget a i)) (inc i)))
            )
        )
    )
)

(class-ns ArraySeq_boolean
    (defn #_"ArraySeq_boolean" ArraySeq_boolean'new [#_"IPersistentMap" meta, #_"boolean[]" array, #_"int" i]
        (merge (ASeq'new meta)
            (hash-map
                #_"boolean[]" :array array
                #_"int" :i i
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--ArraySeq_boolean [#_"ArraySeq_boolean" this]
        (aget (:array this) (:i this))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--ArraySeq_boolean [#_"ArraySeq_boolean" this]
        (when (< (inc (:i this)) (alength (:array this)))
            (ArraySeq_boolean'new (meta this), (:array this), (inc (:i this)))
        )
    )

    #_override
    (defn #_"int" Counted'''count--ArraySeq_boolean [#_"ArraySeq_boolean" this]
        (- (alength (:array this)) (:i this))
    )

    #_override
    (defn #_"int" IndexedSeq'''index--ArraySeq_boolean [#_"ArraySeq_boolean" this]
        (:i this)
    )

    #_override
    (defn #_"ArraySeq_boolean" IObj'''withMeta--ArraySeq_boolean [#_"ArraySeq_boolean" this, #_"IPersistentMap" meta]
        (ArraySeq_boolean'new meta, (:array this), (:i this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--ArraySeq_boolean [#_"ArraySeq_boolean" this, #_"IFn" f]
        (let [#_"boolean[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [#_"Object" r (aget a i) i (inc i)] (< i n) => r
                (let [r (.invoke f, r, (aget a i))]
                    (if (reduced? r) (deref r) (recur r (inc i)))
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--ArraySeq_boolean [#_"ArraySeq_boolean" this, #_"IFn" f, #_"Object" r]
        (let [#_"boolean[]" a (:array this) #_"int" i (:i this) #_"int" n (alength a)]
            (loop-when [r (.invoke f, r, (aget a i)) i (inc i)] (< i n) => (if (reduced? r) (deref r) r)
                (if (reduced? r) (deref r) (recur (.invoke f, r, (aget a i)) (inc i)))
            )
        )
    )
)

(class-ns ArraySeq
    (defn #_"ArraySeq" ArraySeq'new
        ([#_"Object" array, #_"int" i] (ArraySeq'new nil, array, i))
        ([#_"IPersistentMap" meta, #_"Object" array, #_"int" i]
            (merge (ASeq'new meta)
                (hash-map
                    #_"Object[]" :array (cast Compiler'OBJECTS_CLASS array)
                    #_"int" :i i
                )
            )
        )
    )

    (defn #_"ArraySeq" ArraySeq'create-0 []
        nil
    )

    (defn #_"ArraySeq" ArraySeq'create-1 [& #_"Object..." array]
        (when (and (some? array) (pos? (alength array)))
            (ArraySeq'new array, 0)
        )
    )

    (defn #_"ISeq" ArraySeq'createFromObject [#_"Object" array]
        (when (and (some? array) (pos? (Array/getLength array)))
            (let [#_"Class" c (class array)]
                (condp = c
                    Compiler'INTS_CLASS     (ArraySeq_int'new     nil, (cast c array), 0)
                    Compiler'FLOATS_CLASS   (ArraySeq_float'new   nil, (cast c array), 0)
                    Compiler'DOUBLES_CLASS  (ArraySeq_double'new  nil, (cast c array), 0)
                    Compiler'LONGS_CLASS    (ArraySeq_long'new    nil, (cast c array), 0)
                    Compiler'BYTES_CLASS    (ArraySeq_byte'new    nil, (cast c array), 0)
                    Compiler'CHARS_CLASS    (ArraySeq_char'new    nil, (cast c array), 0)
                    Compiler'SHORTS_CLASS   (ArraySeq_short'new   nil, (cast c array), 0)
                    Compiler'BOOLEANS_CLASS (ArraySeq_boolean'new nil, (cast c array), 0)
                                            (ArraySeq'new                      array,  0)
                )
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--ArraySeq [#_"ArraySeq" this]
        (when (some? (:array this))
            (aget (:array this) (:i this))
        )
    )

    #_override
    (defn #_"ISeq" ISeq'''next--ArraySeq [#_"ArraySeq" this]
        (when (and (some? (:array this)) (< (inc (:i this)) (alength (:array this))))
            (ArraySeq'new (:array this), (inc (:i this)))
        )
    )

    #_override
    (defn #_"int" Counted'''count--ArraySeq [#_"ArraySeq" this]
        (if (some? (:array this)) (- (alength (:array this)) (:i this)) 0)
    )

    #_override
    (defn #_"int" IndexedSeq'''index--ArraySeq [#_"ArraySeq" this]
        (:i this)
    )

    #_override
    (defn #_"ArraySeq" IObj'''withMeta--ArraySeq [#_"ArraySeq" this, #_"IPersistentMap" meta]
        (ArraySeq'new meta, (:array this), (:i this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--ArraySeq [#_"ArraySeq" this, #_"IFn" f]
        (when-let [#_"Object[]" a (:array this)]
            (let [#_"int" i (:i this) #_"int" n (alength a)]
                (loop-when [#_"Object" r (aget a i) i (inc i)] (< i n) => r
                    (let [r (.invoke f, r, (aget a i))]
                        (if (reduced? r) (deref r) (recur r (inc i)))
                    )
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--ArraySeq [#_"ArraySeq" this, #_"IFn" f, #_"Object" r]
        (when-let [#_"Object[]" a (:array this)]
            (let [#_"int" i (:i this) #_"int" n (alength a)]
                (loop-when [r (.invoke f, r, (aget a i)) i (inc i)] (< i n) => (if (reduced? r) (deref r) r)
                    (if (reduced? r) (deref r) (recur (.invoke f, r, (aget a i)) (inc i)))
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.Atom

(class-ns Atom
    (defn #_"Atom" Atom'new
        ([#_"Object" state] (Atom'new state, nil))
        ([#_"Object" state, #_"IPersistentMap" meta]
            (hash-map
                #_"AtomicReference" :state (AtomicReference. state)
                #_mutable #_"IPersistentMap" :_meta meta
            )
        )
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--Atom [#_"Atom" this]
        (§ sync this
            (:_meta this)
        )
    )

    #_override
    (defn #_"IPersistentMap" IReference'''alterMeta--Atom [#_"Atom" this, #_"IFn" f, #_"ISeq" args]
        (§ sync this
            (§ update! (:_meta this) #(apply f % args))
        )
    )

    #_override
    (defn #_"IPersistentMap" IReference'''resetMeta--Atom [#_"Atom" this, #_"IPersistentMap" m]
        (§ sync this
            (§ set! (:_meta this) m)
        )
    )

    #_override
    (defn #_"Object" IDeref'''deref--Atom [#_"Atom" this]
        (.get (:state this))
    )

    #_override
    (defn #_"Object" IAtom'''swap-2--Atom [#_"Atom" this, #_"IFn" f]
        (loop []
            (let [#_"Object" v (deref this) #_"Object" newv (.invoke f, v)]
                (when (.compareAndSet (:state this), v, newv) => (recur)
                    newv
                )
            )
        )
    )

    #_override
    (defn #_"Object" IAtom'''swap-3--Atom [#_"Atom" this, #_"IFn" f, #_"Object" arg]
        (loop []
            (let [#_"Object" v (deref this) #_"Object" newv (.invoke f, v, arg)]
                (when (.compareAndSet (:state this), v, newv) => (recur)
                    newv
                )
            )
        )
    )

    #_override
    (defn #_"Object" IAtom'''swap-4--Atom [#_"Atom" this, #_"IFn" f, #_"Object" arg1, #_"Object" arg2]
        (loop []
            (let [#_"Object" v (deref this) #_"Object" newv (.invoke f, v, arg1, arg2)]
                (when (.compareAndSet (:state this), v, newv) => (recur)
                    newv
                )
            )
        )
    )

    #_override
    (defn #_"Object" IAtom'''swap-5--Atom [#_"Atom" this, #_"IFn" f, #_"Object" x, #_"Object" y, #_"ISeq" args]
        (loop []
            (let [#_"Object" v (deref this) #_"Object" newv (.applyTo f, (list* v x y args))]
                (when (.compareAndSet (:state this), v, newv) => (recur)
                    newv
                )
            )
        )
    )

    #_override
    (defn #_"IPersistentVector" IAtom2'''swapVals-2--Atom [#_"Atom" this, #_"IFn" f]
        (loop []
            (let [#_"Object" oldv (deref this) #_"Object" newv (.invoke f, oldv)]
                (when (.compareAndSet (:state this), oldv, newv) => (recur)
                    (LazilyPersistentVector'createOwning oldv, newv)
                )
            )
        )
    )

    #_override
    (defn #_"IPersistentVector" IAtom2'''swapVals-3--Atom [#_"Atom" this, #_"IFn" f, #_"Object" arg]
        (loop []
            (let [#_"Object" oldv (deref this) #_"Object" newv (.invoke f, oldv, arg)]
                (when (.compareAndSet (:state this), oldv, newv) => (recur)
                    (LazilyPersistentVector'createOwning oldv, newv)
                )
            )
        )
    )

    #_override
    (defn #_"IPersistentVector" IAtom2'''swapVals-4--Atom [#_"Atom" this, #_"IFn" f, #_"Object" arg1, #_"Object" arg2]
        (loop []
            (let [#_"Object" oldv (deref this) #_"Object" newv (.invoke f, oldv, arg1, arg2)]
                (when (.compareAndSet (:state this), oldv, newv) => (recur)
                    (LazilyPersistentVector'createOwning oldv, newv)
                )
            )
        )
    )

    #_override
    (defn #_"IPersistentVector" IAtom2'''swapVals-5--Atom [#_"Atom" this, #_"IFn" f, #_"Object" x, #_"Object" y, #_"ISeq" args]
        (loop []
            (let [#_"Object" oldv (deref this) #_"Object" newv (.applyTo f, (list* oldv x y args))]
                (when (.compareAndSet (:state this), oldv, newv) => (recur)
                    (LazilyPersistentVector'createOwning oldv, newv)
                )
            )
        )
    )

    #_override
    (defn #_"boolean" IAtom'''compareAndSet--Atom [#_"Atom" this, #_"Object" oldv, #_"Object" newv]
        (.compareAndSet (:state this), oldv, newv)
    )

    #_override
    (defn #_"Object" IAtom'''reset--Atom [#_"Atom" this, #_"Object" newval]
        (let [#_"Object" oldval (.get (:state this))]
            (.set (:state this), newval)
            newval
        )
    )

    #_override
    (defn #_"IPersistentVector" IAtom2'''resetVals--Atom [#_"Atom" this, #_"Object" newv]
        (loop []
            (let [#_"Object" oldv (deref this)]
                (when (.compareAndSet (:state this), oldv, newv) => (recur)
                    (LazilyPersistentVector'createOwning oldv, newv)
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.ATransientMap

(class-ns ATransientMap
    (defn #_"ATransientMap" ATransientMap'new []
        (AFn'new)
    )

    #_method
    (defn #_"ITransientMap" ATransientMap''conj [#_"ATransientMap" this, #_"Object" o]
        (.ensureEditable this)
        (condp instance? o
            Map$Entry
                (assoc this (key o) (val o))
            IPersistentVector
                (when (= (count o) 2) => (throw! "vector arg to map conj must be a pair")
                    (assoc this (nth o 0) (nth o 1))
                )
            #_else
                (loop-when [this this #_"ISeq" s (seq o)] (some? s) => this
                    (let [#_"Map$Entry" e (first s)]
                        (recur (assoc this (key e) (val e)) (next s))
                    )
                )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-2--ATransientMap [#_"ATransientMap" this, #_"Object" arg1]
        (get this arg1)
    )

    #_override
    (defn #_"Object" IFn'''invoke-3--ATransientMap [#_"ATransientMap" this, #_"Object" arg1, #_"Object" notFound]
        (get this arg1 notFound)
    )

    #_override
    (defn #_"ITransientMap" ITransientMap'''assoc--ATransientMap [#_"ATransientMap" this, #_"Object" key, #_"Object" val]
        (.ensureEditable this)
        (.doAssoc this, key, val)
    )

    #_override
    (defn #_"ITransientMap" ITransientMap'''dissoc--ATransientMap [#_"ATransientMap" this, #_"Object" key]
        (.ensureEditable this)
        (.doDissoc this, key)
    )

    #_override
    (defn #_"IPersistentMap" ITransientMap'''persistent--ATransientMap [#_"ATransientMap" this]
        (.ensureEditable this)
        (.doPersistent this)
    )

    #_override
    (defn #_"Object" ILookup'''valAt-2--ATransientMap [#_"ATransientMap" this, #_"Object" key]
        (.valAt this, key, nil)
    )

    #_override
    (defn #_"Object" ILookup'''valAt-3--ATransientMap [#_"ATransientMap" this, #_"Object" key, #_"Object" notFound]
        (.ensureEditable this)
        (.doValAt this, key, notFound)
    )

    (def- #_"Object" ATransientMap'NOT_FOUND (Object.))

    #_override
    (defn #_"boolean" ITransientAssociative2'''containsKey--ATransientMap [#_"ATransientMap" this, #_"Object" key]
        (not (identical? (get this key ATransientMap'NOT_FOUND) ATransientMap'NOT_FOUND))
    )

    #_override
    (defn #_"IMapEntry" ITransientAssociative2'''entryAt--ATransientMap [#_"ATransientMap" this, #_"Object" key]
        (let [#_"Object" v (get this key ATransientMap'NOT_FOUND)]
            (when-not (identical? v ATransientMap'NOT_FOUND)
                (MapEntry'create key, v)
            )
        )
    )

    #_override
    (defn #_"int" Counted'''count--ATransientMap [#_"ATransientMap" this]
        (.ensureEditable this)
        (.doCount this)
    )
)
)

(java-ns cloiure.lang.ATransientSet

(class-ns ATransientSet
    (defn #_"ATransientSet" ATransientSet'new [#_"ITransientMap" impl]
        (merge (AFn'new)
            (hash-map
                #_"ITransientMap" :impl impl
            )
        )
    )

    #_override
    (defn #_"int" Counted'''count--ATransientSet [#_"ATransientSet" this]
        (count (:impl this))
    )

    #_override
    (defn #_"ITransientSet" ITransientCollection'''conj--ATransientSet [#_"ATransientSet" this, #_"Object" val]
        (let [#_"ITransientMap" m (assoc (:impl this) val val)]
            (when-not (= m (:impl this)) => this
                (assoc this :impl m)
            )
        )
    )

    #_override
    (defn #_"ITransientSet" ITransientSet'''disj--ATransientSet [#_"ATransientSet" this, #_"Object" key]
        (let [#_"ITransientMap" m (dissoc (:impl this) key)]
            (when-not (= m (:impl this)) => this
                (assoc this :impl m)
            )
        )
    )

    #_override
    (defn #_"boolean" ITransientSet'''contains--ATransientSet [#_"ATransientSet" this, #_"Object" key]
        (not (identical? (get (:impl this) key this) this))
    )

    #_override
    (defn #_"Object" ITransientSet'''get--ATransientSet [#_"ATransientSet" this, #_"Object" key]
        (get (:impl this) key)
    )

    #_override
    (defn #_"Object" IFn'''invoke-2--ATransientSet [#_"ATransientSet" this, #_"Object" key]
        (get (:impl this) key)
    )

    #_override
    (defn #_"Object" IFn'''invoke-3--ATransientSet [#_"ATransientSet" this, #_"Object" key, #_"Object" notFound]
        (get (:impl this) key notFound)
    )
)
)

(java-ns cloiure.lang.Binding

(class-ns Binding
    (defn #_"Binding" Binding'new
        ([#_"T" val] (Binding'new val, nil))
        ([#_"T" val, #_"Binding" rest]
            (hash-map
                #_"T" :val val
                #_"Binding" :rest rest
            )
        )
    )
)
)

(java-ns cloiure.lang.Box

(class-ns Box
    (defn #_"Box" Box'new [#_"Object" val]
        (hash-map
            #_mutable #_"Object" :val val
        )
    )
)
)

(java-ns cloiure.lang.ChunkBuffer

(class-ns ChunkBuffer
    (defn #_"ChunkBuffer" ChunkBuffer'new [#_"int" capacity]
        (hash-map
            #_mutable #_"Object[]" :buffer (make-array Object capacity)
            #_mutable #_"int" :end 0
        )
    )

    #_method
    (defn #_"void" ChunkBuffer''add [#_"ChunkBuffer" this, #_"Object" o]
        (aset (:buffer this) (:end this) o)
        (§ update! (:end this) inc)
        nil
    )

    #_method
    (defn #_"IChunk" ChunkBuffer''chunk [#_"ChunkBuffer" this]
        (let [_ (ArrayChunk'new (:buffer this), 0, (:end this))]
            (§ set! (:buffer this) nil)
            _
        )
    )

    #_override
    (defn #_"int" Counted'''count--ChunkBuffer [#_"ChunkBuffer" this]
        (:end this)
    )
)
)

(java-ns cloiure.lang.ChunkedCons

(class-ns ChunkedCons
    (defn #_"ChunkedCons" ChunkedCons'new
        ([#_"IChunk" chunk, #_"ISeq" more] (ChunkedCons'new nil, chunk, more))
        ([#_"IPersistentMap" meta, #_"IChunk" chunk, #_"ISeq" more]
            (merge (ASeq'new meta)
                (hash-map
                    #_"IChunk" :chunk chunk
                    #_"ISeq" :_more more
                )
            )
        )
    )

    #_override
    (defn #_"ChunkedCons" IObj'''withMeta--ChunkedCons [#_"ChunkedCons" this, #_"IPersistentMap" meta]
        (when-not (= meta (:_meta this)) => this
            (ChunkedCons'new meta, (:chunk this), (:_more this))
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--ChunkedCons [#_"ChunkedCons" this]
        (nth (:chunk this) 0)
    )

    #_override
    (defn #_"ISeq" ISeq'''next--ChunkedCons [#_"ChunkedCons" this]
        (if (< 1 (count (:chunk this)))
            (ChunkedCons'new (.dropFirst (:chunk this)), (:_more this))
            (.chunkedNext this)
        )
    )

    #_override
    (defn #_"ISeq" ISeq'''rest--ChunkedCons [#_"ChunkedCons" this]
        (if (< 1 (count (:chunk this)))
            (ChunkedCons'new (.dropFirst (:chunk this)), (:_more this))
            (or (:_more this) ())
        )
    )

    #_override
    (defn #_"IChunk" IChunkedSeq'''chunkedFirst--ChunkedCons [#_"ChunkedCons" this]
        (:chunk this)
    )

    #_override
    (defn #_"ISeq" IChunkedSeq'''chunkedNext--ChunkedCons [#_"ChunkedCons" this]
        (seq (.chunkedMore this))
    )

    #_override
    (defn #_"ISeq" IChunkedSeq'''chunkedMore--ChunkedCons [#_"ChunkedCons" this]
        (or (:_more this) ())
    )
)
)

(java-ns cloiure.lang.Cons

(class-ns Cons
    (defn #_"Cons" Cons'new
        ([#_"Object" _first, #_"ISeq" _more] (Cons'new nil, _first, _more))
        ([#_"IPersistentMap" meta, #_"Object" _first, #_"ISeq" _more]
            (merge (ASeq'new meta)
                (hash-map
                    #_"Object" :_first _first
                    #_"ISeq" :_more _more
                )
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--Cons [#_"Cons" this]
        (:_first this)
    )

    #_override
    (defn #_"ISeq" ISeq'''next--Cons [#_"Cons" this]
        (seq (rest this))
    )

    #_override
    (defn #_"ISeq" ISeq'''rest--Cons [#_"Cons" this]
        (or (:_more this) ())
    )

    #_override
    (defn #_"int" Counted'''count--Cons [#_"Cons" this]
        (inc (count (:_more this)))
    )

    #_override
    (defn #_"Cons" IObj'''withMeta--Cons [#_"Cons" this, #_"IPersistentMap" meta]
        (Cons'new meta, (:_first this), (:_more this))
    )
)
)

(java-ns cloiure.lang.Cycle

(class-ns Cycle
    (defn- #_"Cycle" Cycle'new
        ([#_"ISeq" all, #_"ISeq" prev, #_"ISeq" current] (Cycle'new nil, all, prev, current, nil))
        ([#_"IPersistentMap" meta, #_"ISeq" all, #_"ISeq" prev, #_"ISeq" current, #_"ISeq" next]
            (merge (ASeq'new meta)
                (hash-map
                    #_"ISeq" :all all ;; never nil
                    #_"ISeq" :prev prev
                    #_volatile #_"ISeq" :_current current ;; lazily realized
                    #_volatile #_"ISeq" :_next next ;; cached
                )
            )
        )
    )

    (defn #_"ISeq" Cycle'create [#_"ISeq" vals]
        (if (some? vals) (Cycle'new vals, nil, vals) ())
    )

    #_method
    (defn- #_"ISeq" Cycle''current [#_"Cycle" this]
        (or (:_current this)
            (§ set! (:_current this) (or (next (:prev this)) (:all this)))
        )
    )

    #_override
    (defn #_"boolean" IPending'''isRealized--Cycle [#_"Cycle" this]
        (some? (:_current this))
    )

    #_override
    (defn #_"Object" ISeq'''first--Cycle [#_"Cycle" this]
        (first (Cycle''current this))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--Cycle [#_"Cycle" this]
        (or (:_next this)
            (§ set! (:_next this) (Cycle'new (:all this), (Cycle''current this), nil))
        )
    )

    #_override
    (defn #_"Cycle" IObj'''withMeta--Cycle [#_"Cycle" this, #_"IPersistentMap" meta]
        (Cycle'new meta, (:all this), (:prev this), (:_current this), (:_next this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--Cycle [#_"Cycle" this, #_"IFn" f]
        (loop [#_"ISeq" s (Cycle''current this) #_"Object" r (first s)]
            (let [s (or (next s) (:all this)) r (.invoke f, r, (first s))]
                (when-not (reduced? r) => (deref r)
                    (recur s r)
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--Cycle [#_"Cycle" this, #_"IFn" f, #_"Object" r]
        (loop [#_"ISeq" s (Cycle''current this) r (.invoke f, r, (first s))]
            (when-not (reduced? r) => (deref r)
                (let [s (or (next s) (:all this))]
                    (recur s (.invoke f, r, (first s)))
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.Delay

(class-ns Delay
    (defn #_"Delay" Delay'new [#_"IFn" fn]
        (hash-map
            #_volatile #_"Object" :val nil
            #_volatile #_"Throwable" :exception nil
            #_volatile #_"IFn" :fn fn
        )
    )

    (defn #_"Object" Delay'force [#_"Object" x]
        (if (instance? Delay x) (deref x) x)
    )

    #_override
    (defn #_"Object" IDeref'''deref--Delay [#_"Delay" this]
        (when (some? (:fn this))
            (§ sync this
                ;; double check
                (when (some? (:fn this))
                    (try
                        (§ set! (:val this) (.invoke (:fn this)))
                        (catch Throwable t
                            (§ set! (:exception this) t)
                        )
                    )
                    (§ set! (:fn this) nil)
                )
            )
        )
        (when (some? (:exception this))
            (throw (:exception this))
        )
        (:val this)
    )

    #_override
    (defn #_"boolean" IPending'''isRealized--Delay [#_"Delay" this]
        (§ sync this
            (nil? (:fn this))
        )
    )
)
)

(java-ns cloiure.lang.Iterate

(class-ns Iterate
    (def- #_"Object" Iterate'UNREALIZED_SEED (Object.))

    (defn- #_"Iterate" Iterate'new
        ([#_"IFn" f, #_"Object" prevSeed, #_"Object" seed] (Iterate'new nil, f, prevSeed, seed, nil))
        ([#_"IPersistentMap" meta, #_"IFn" f, #_"Object" prevSeed, #_"Object" seed, #_"ISeq" next]
            (merge (ASeq'new meta)
                (hash-map
                    #_"IFn" :f f ;; never nil
                    #_"Object" :prevSeed prevSeed
                    #_volatile #_"Object" :_seed seed ;; lazily realized
                    #_volatile #_"ISeq" :_next next ;; cached
                )
            )
        )
    )

    (defn #_"ISeq" Iterate'create [#_"IFn" f, #_"Object" seed]
        (Iterate'new f, nil, seed)
    )

    #_override
    (defn #_"boolean" IPending'''isRealized--Iterate [#_"Iterate" this]
        (not= (:_seed this) Iterate'UNREALIZED_SEED)
    )

    #_override
    (defn #_"Object" ISeq'''first--Iterate [#_"Iterate" this]
        (let-when [#_"Object" seed (:_seed this)] (= seed Iterate'UNREALIZED_SEED) => seed
            (§ set! (:_seed this) (.invoke (:f this), (:prevSeed this)))
        )
    )

    #_override
    (defn #_"ISeq" ISeq'''next--Iterate [#_"Iterate" this]
        (or (:_next this)
            (§ set! (:_next this) (Iterate'new (:f this), (first this), Iterate'UNREALIZED_SEED))
        )
    )

    #_override
    (defn #_"Iterate" IObj'''withMeta--Iterate [#_"Iterate" this, #_"IPersistentMap" meta]
        (Iterate'new meta, (:f this), (:prevSeed this), (:_seed this), (:_next this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--Iterate [#_"Iterate" this, #_"IFn" f]
        (loop [#_"Object" r (first this) #_"Object" v (.invoke (:f this), r)]
            (let [r (.invoke f, r, v)]
                (when-not (reduced? r) => (deref r)
                    (recur r (.invoke (:f this), v))
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--Iterate [#_"Iterate" this, #_"IFn" f, #_"Object" r]
        (loop [r r #_"Object" v (first this)]
            (let [r (.invoke f, r, v)]
                (when-not (reduced? r) => (deref r)
                    (recur r (.invoke (:f this), v))
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.KeywordLookupSite

(class-ns KeywordLookupSite
    (defn #_"KeywordLookupSite" KeywordLookupSite'new [#_"Keyword" k]
        (hash-map
            #_"Keyword" :k k
        )
    )

    #_method
    (defn- #_"ILookupThunk" KeywordLookupSite''ilookupThunk [#_"KeywordLookupSite" this, #_"Class" c]
        (reify ILookupThunk
            #_override
            (#_"Object" get [#_"ILookupThunk" self, #_"Object" target]
                (if (and (some? target) (= (class target) c))
                    (.valAt (cast ILookup target), (:k this))
                    self
                )
            )
        )
    )

    #_override
    (defn #_"ILookupThunk" ILookupSite'''fault--KeywordLookupSite [#_"KeywordLookupSite" this, #_"Object" target]
        (if (instance? ILookup target)
            (KeywordLookupSite''ilookupThunk this, (class target))
            this
        )
    )

    #_override
    (defn #_"Object" ILookupThunk'''get--KeywordLookupSite [#_"KeywordLookupSite" this, #_"Object" target]
        (if (instance? ILookup target)
            this
            (get target (:k this))
        )
    )
)
)

(java-ns cloiure.lang.LongRange

(class-ns LongChunk
    (defn #_"LongChunk" LongChunk'new [#_"long" start, #_"long" step, #_"int" count]
        (hash-map
            #_"long" :start start
            #_"long" :step step
            #_"int" :count count
        )
    )

    #_method
    (defn #_"long" LongChunk''first [#_"LongChunk" this]
        (:start this)
    )

    #_override
    (defn #_"Object" Indexed'''nth-2--LongChunk [#_"LongChunk" this, #_"int" i]
        (+ (:start this) (* i (:step this)))
    )

    #_override
    (defn #_"Object" Indexed'''nth-3--LongChunk [#_"LongChunk" this, #_"int" i, #_"Object" notFound]
        (if (< -1 i (:count this)) (+ (:start this) (* i (:step this))) notFound)
    )

    #_override
    (defn #_"int" Counted'''count--LongChunk [#_"LongChunk" this]
        (:count this)
    )

    #_override
    (defn #_"LongChunk" IChunk'''dropFirst--LongChunk [#_"LongChunk" this]
        (when (< 1 (:count this)) => (throw! "dropFirst of empty chunk")
            (LongChunk'new (+ (:start this) (:step this)), (:step this), (dec (:count this)))
        )
    )

    #_override
    (defn #_"Object" IChunk'''reduce--LongChunk [#_"LongChunk" this, #_"IFn" f, #_"Object" r]
        (loop-when [r r #_"long" x (:start this) #_"int" i 0] (< i (:count this)) => r
            (let-when-not [r (.invoke f, r, x)] (reduced? r) => r
                (recur r (+ x (:step this)) (inc i))
            )
        )
    )
)

;;;
 ; Implements the special common case of a finite range based on long start, end, and step.
 ;;
(class-ns LongRange
    (def- #_"int" LongRange'CHUNK_SIZE 32)

    (defn- #_"LongRangeBoundsCheck" LongRange'positiveStep [#_"long" end]
        (reify LongRangeBoundsCheck
            #_override
            (#_"boolean" exceededBounds [#_"LongRangeBoundsCheck" _self, #_"long" val]
                (<= end val)
            )
        )
    )

    (defn- #_"LongRangeBoundsCheck" LongRange'negativeStep [#_"long" end]
        (reify LongRangeBoundsCheck
            #_override
            (#_"boolean" exceededBounds [#_"LongRangeBoundsCheck" _self, #_"long" val]
                (<= val end)
            )
        )
    )

    (defn- #_"LongRange" LongRange'new
        ([#_"long" start, #_"long" end, #_"long" step, #_"LongRangeBoundsCheck" boundsCheck]
            (LongRange'new start, end, step, boundsCheck, nil, nil)
        )
        ([#_"long" start, #_"long" end, #_"long" step, #_"LongRangeBoundsCheck" boundsCheck, #_"LongChunk" chunk, #_"ISeq" chunkNext]
            (LongRange'new nil, start, end, step, boundsCheck, chunk, chunkNext)
        )
        ([#_"IPersistentMap" meta, #_"long" start, #_"long" end, #_"long" step, #_"LongRangeBoundsCheck" boundsCheck, #_"LongChunk" chunk, #_"ISeq" chunkNext]
            (merge (ASeq'new meta)
                (hash-map
                    ;; Invariants guarantee this is never an empty or infinite seq
                    #_"long" :start start
                    #_"long" :end end
                    #_"long" :step step
                    #_"LongRangeBoundsCheck" :boundsCheck boundsCheck

                    #_volatile #_"LongChunk" :_chunk chunk ;; lazy
                    #_volatile #_"ISeq" :_chunkNext chunkNext ;; lazy
                    #_volatile #_"ISeq" :_next nil ;; cached
                )
            )
        )
    )

    (defn #_"ISeq" LongRange'create-1 [#_"long" end]
        (when (< 0 end) => ()
            (LongRange'new 0, end, 1, (LongRange'positiveStep end))
        )
    )

    (defn #_"ISeq" LongRange'create-2 [#_"long" start, #_"long" end]
        (when (< start end) => ()
            (LongRange'new start, end, 1, (LongRange'positiveStep end))
        )
    )

    (declare Repeat'create-1)

    (defn #_"ISeq" LongRange'create-3 [#_"long" start, #_"long" end, #_"long" step]
        (cond
            (pos? step) (if (< start end) (LongRange'new start, end, step, (LongRange'positiveStep end)) ())
            (neg? step) (if (< end start) (LongRange'new start, end, step, (LongRange'negativeStep end)) ())
            :else       (if (= start end) () (Repeat'create-1 start))
        )
    )

    #_override
    (defn #_"LongRange" IObj'''withMeta--LongRange [#_"LongRange" this, #_"IPersistentMap" meta]
        (when-not (= meta (:_meta this)) => this
            (LongRange'new meta, (:start this), (:end this), (:step this), (:boundsCheck this), (:_chunk this), (:_chunkNext this))
        )
    )

    ;; fallback count mechanism for pathological cases
    ;; returns either exact count or CHUNK_SIZE+1
    #_method
    (defn #_"long" LongRange''steppingCount [#_"LongRange" this, #_"long" start, #_"long" end, #_"long" step]
        (loop-when [#_"long" s start #_"long" n 1] (<= n LongRange'CHUNK_SIZE) => n
            (let [[s n]
                    (try
                        (let [s (Numbers'add-2ll s, step)]
                            (if (.exceededBounds (:boundsCheck this), s)
                                [nil n]
                                [s (inc n)]
                            )
                        )
                        (catch ArithmeticException _
                            [nil n]
                        )
                    )]
                (recur-if (some? s) [s n] => n)
            )
        )
    )

    ;; returns exact size of remaining items OR throws ArithmeticException for overflow case
    #_method
    (defn #_"long" LongRange''rangeCount [#_"LongRange" this, #_"long" start, #_"long" end, #_"long" step]
        ;; (1) count = ceiling ((end - start) / step)
        ;; (2) ceiling(a/b) = (a+b+o)/b where o=-1 for positive stepping and +1 for negative stepping
        ;; thus: count = end - start + step + o / step
        (/ (Numbers'add-2ll (Numbers'add-2ll (Numbers'minus-2ll end, start), step), (if (pos? (:step this)) -1 1)) step)
    )

    #_override
    (defn #_"int" Counted'''count--LongRange [#_"LongRange" this]
        (try
            (let [#_"long" n (LongRange''rangeCount this, (:start this), (:end this), (:step this))]
                (when (<= n Integer/MAX_VALUE) => (Numbers'throwIntOverflow)
                    (int n)
                )
            )
            (catch ArithmeticException _
                ;; rare case from large range or step, fall back to iterating and counting
                (let [#_"long" n
                        (loop-when-recur [#_"Iterator" it (.iterator this) n 0] (.hasNext it) [it (inc n)] => n
                            (.next it)
                        )]
                    (when (<= n Integer/MAX_VALUE) => (Numbers'throwIntOverflow)
                        (int n)
                    )
                )
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--LongRange [#_"LongRange" this]
        (:start this)
    )

    #_method
    (defn #_"void" LongRange''forceChunk [#_"LongRange" this]
        (when (nil? (:_chunk this))
            (let [#_"long" n
                    (try
                        (LongRange''rangeCount this, (:start this), (:end this), (:step this))
                        (catch ArithmeticException _
                            ;; size of total range is > Long.MAX_VALUE, so must step to count
                            ;; this only happens in pathological range cases like:
                            ;; (range -9223372036854775808 9223372036854775807 9223372036854775807)
                            (LongRange''steppingCount this, (:start this), (:end this), (:step this))
                        )
                    )]
                (if (< LongRange'CHUNK_SIZE n)
                    ;; not last chunk
                    (let [#_"long" nextStart (+ (:start this) (* (:step this) LongRange'CHUNK_SIZE))] ;; cannot overflow, must be < end
                        (§ set! (:_chunkNext this) (LongRange'new nextStart, (:end this), (:step this), (:boundsCheck this)))
                        (§ set! (:_chunk this) (LongChunk'new (:start this), (:step this), LongRange'CHUNK_SIZE))
                    )
                    ;; last chunk
                    (§ set! (:_chunk this) (LongChunk'new (:start this), (:step this), (int n))) ;; n must be <= CHUNK_SIZE
                )
            )
        )
        nil
    )

    #_override
    (defn #_"ISeq" ISeq'''next--LongRange [#_"LongRange" this]
        (let-when [#_"ISeq" _next (:_next this)] (nil? _next) => _next
            (LongRange''forceChunk this)
            (when (< 1 (count (:_chunk this))) => (.chunkedNext this)
                (let [#_"LongChunk" _rest (.dropFirst (:_chunk this))]
                    (§ set! (:_next this) (LongRange'new (LongChunk''first _rest), (:end this), (:step this), (:boundsCheck this), _rest, (:_chunkNext this)))
                )
            )
        )
    )

    #_override
    (defn #_"IChunk" IChunkedSeq'''chunkedFirst--LongRange [#_"LongRange" this]
        (LongRange''forceChunk this)
        (:_chunk this)
    )

    #_override
    (defn #_"ISeq" IChunkedSeq'''chunkedNext--LongRange [#_"LongRange" this]
        (seq (.chunkedMore this))
    )

    #_override
    (defn #_"ISeq" IChunkedSeq'''chunkedMore--LongRange [#_"LongRange" this]
        (LongRange''forceChunk this)
        (or (:_chunkNext this) ())
    )

    #_override
    (defn #_"Object" IReduce'''reduce--LongRange [#_"LongRange" this, #_"IFn" f]
        (loop [#_"Object" r (:start this) #_"long" n r]
            (let-when-not [n (+ n (:step this))] (.exceededBounds (:boundsCheck this), n) => r
                (let-when-not [r (.invoke f, r, n)] (reduced? r) => (deref r)
                    (recur r n)
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--LongRange [#_"LongRange" this, #_"IFn" f, #_"Object" r]
        (loop [r r #_"long" n (:start this)]
            (let-when-not [r (.invoke f, r, n)] (reduced? r) => (deref r)
                (let-when-not [n (+ n (:step this))] (.exceededBounds (:boundsCheck this), n) => r
                    (recur r n)
                )
            )
        )
    )

    #_foreign
    (defn #_"Iterator" iterator---LongRange [#_"LongRange" this]
        (§ reify Iterator
            [#_mutable #_"long" n (:start this)
             #_mutable #_"boolean" m true]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                m
            )

            #_foreign
            (#_"Object" next [#_"Iterator" _self]
                (when m => (throw (NoSuchElementException.))
                    (let [_ n]
                        (try
                            (update! n Numbers'add-2ll (:step this))
                            (set! m (not (.exceededBounds (:boundsCheck this), n)))
                            (catch ArithmeticException _
                                (set! m false)
                            )
                        )
                        _
                    )
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.MethodImplCache

(class-ns Entry
    (defn #_"Entry" Entry'new [#_"Class" c, #_"IFn" fn]
        (hash-map
            #_"Class" :c c
            #_"IFn" :fn fn
        )
    )
)

(class-ns MethodImplCache
    (defn- #_"MethodImplCache" MethodImplCache'init [#_"IPersistentMap" protocol, #_"Keyword" methodk, #_"int" shift, #_"int" mask, #_"Object[]" table, #_"Map" map]
        (hash-map
            #_"IPersistentMap" :protocol protocol
            #_"Keyword" :methodk methodk
            #_"int" :shift shift
            #_"int" :mask mask
            #_"Object[]" :table table ;; [class, entry. class, entry ...]
            #_"Map" :map map

            #_mutable #_"Entry" :mre nil
        )
    )

    (defn #_"MethodImplCache" MethodImplCache'new
        ([#_"IPersistentMap" protocol, #_"Keyword" methodk]
            (MethodImplCache'new protocol, methodk, 0, 0, (make-array Object 0))
        )
        ([#_"IPersistentMap" protocol, #_"Keyword" methodk, #_"int" shift, #_"int" mask, #_"Object[]" table]
            (MethodImplCache'init protocol, methodk, shift, mask, table, nil)
        )
        ([#_"IPersistentMap" protocol, #_"Keyword" methodk, #_"Map" map]
            (MethodImplCache'init protocol, methodk, 0, 0, nil, map)
        )
    )

    #_method
    (defn #_"IFn" MethodImplCache''findFnFor [#_"MethodImplCache" this, #_"Class" c]
        (if (some? (:map this))
            (let [#_"Entry" e (cast Entry (.get (:map this), c))]
                (§ set! (:mre this) e)
                (when (some? e) (:fn e))
            )
            (let [#_"int" idx (<< (& (>> (Util'hash c) (:shift this)) (:mask this)) 1)]
                (when (and (< idx (alength (:table this))) (= (aget (:table this) idx) c))
                    (let [#_"Entry" e (cast Entry (aget (:table this) (inc idx)))]
                        (§ set! (:mre this) e)
                        (when (some? e) (:fn e))
                    )
                )
            )
        )
    )

    #_method
    (defn #_"IFn" MethodImplCache''fnFor [#_"MethodImplCache" this, #_"Class" c]
        (let [#_"Entry" last (:mre this)]
            (if (and (some? last) (= (:c last) c)) (:fn last) (MethodImplCache''findFnFor this, c))
        )
    )
)
)

(java-ns cloiure.lang.MultiFn

(class-ns MultiFn
    (defn #_"MultiFn" MultiFn'new [#_"String" name, #_"IFn" dispatchFn, #_"Object" defaultDispatchVal, #_"IDeref" hierarchy]
        (merge (AFn'new)
            (hash-map
                #_"String" :name name
                #_"IFn" :dispatchFn dispatchFn
                #_"Object" :defaultDispatchVal defaultDispatchVal
                #_"IDeref" :hierarchy hierarchy

                #_"ReentrantReadWriteLock" :rw (ReentrantReadWriteLock.)

                #_volatile #_"IPersistentMap" :methodTable {}
                #_volatile #_"IPersistentMap" :preferTable {}
                #_volatile #_"IPersistentMap" :methodCache {}
                #_volatile #_"Object" :cachedHierarchy nil
            )
        )
    )

    #_method
    (defn #_"MultiFn" MultiFn''reset [#_"MultiFn" this]
        (.lock (.writeLock (:rw this)))
        (try
            (§ set! (:methodTable this) {})
            (§ set! (:methodCache this) {})
            (§ set! (:preferTable this) {})
            (§ set! (:cachedHierarchy this) nil)
            this
            (finally
                (.unlock (.writeLock (:rw this)))
            )
        )
    )

    #_method
    (defn- #_"IPersistentMap" MultiFn''resetCache [#_"MultiFn" this]
        (.lock (.writeLock (:rw this)))
        (try
            (§ set! (:methodCache this) (:methodTable this))
            (§ set! (:cachedHierarchy this) (deref (:hierarchy this)))
            (:methodCache this)
            (finally
                (.unlock (.writeLock (:rw this)))
            )
        )
    )

    #_method
    (defn #_"MultiFn" MultiFn''addMethod [#_"MultiFn" this, #_"Object" dispatchVal, #_"IFn" method]
        (.lock (.writeLock (:rw this)))
        (try
            (let [_ (§ update! (:methodTable this) assoc dispatchVal method)]
                (MultiFn''resetCache this)
                this
            )
            (finally
                (.unlock (.writeLock (:rw this)))
            )
        )
    )

    #_method
    (defn #_"MultiFn" MultiFn''removeMethod [#_"MultiFn" this, #_"Object" dispatchVal]
        (.lock (.writeLock (:rw this)))
        (try
            (let [_ (§ update! (:methodTable this) dissoc dispatchVal)]
                (MultiFn''resetCache this)
                this
            )
            (finally
                (.unlock (.writeLock (:rw this)))
            )
        )
    )

    #_method
    (defn- #_"boolean" MultiFn''prefers [#_"MultiFn" this, #_"Object" x, #_"Object" y]
        (or
            (let [#_"IPersistentSet" xprefs (get (:preferTable this) x)]
                (and (some? xprefs) (contains? xprefs y))
            )
            (loop-when [#_"ISeq" ps (seq (parents y))] (some? ps) => false
                (or (MultiFn''prefers this, x, (first ps)) (recur (next ps)))
            )
            (loop-when [#_"ISeq" ps (seq (parents x))] (some? ps) => false
                (or (MultiFn''prefers this, (first ps), y) (recur (next ps)))
            )
        )
    )

    #_method
    (defn #_"MultiFn" MultiFn''preferMethod [#_"MultiFn" this, #_"Object" dispatchValX, #_"Object" dispatchValY]
        (.lock (.writeLock (:rw this)))
        (try
            (when (MultiFn''prefers this, dispatchValY, dispatchValX)
                (throw! (str "preference conflict in multimethod '" (:name this) "': " dispatchValY " is already preferred to " dispatchValX))
            )
            (let [_ (§ update! (:preferTable this) #(assoc % dispatchValX (conj (get % dispatchValX #{}) dispatchValY)))]
                (MultiFn''resetCache this)
                this
            )
            (finally
                (.unlock (.writeLock (:rw this)))
            )
        )
    )

    #_method
    (defn- #_"boolean" MultiFn''isA [#_"MultiFn" this, #_"Object" x, #_"Object" y]
        (isa? (deref (:hierarchy this)) x y)
    )

    #_method
    (defn- #_"boolean" MultiFn''dominates [#_"MultiFn" this, #_"Object" x, #_"Object" y]
        (or (MultiFn''prefers this, x, y) (MultiFn''isA this, x, y))
    )

    #_method
    (defn- #_"IFn" MultiFn''findAndCacheBestMethod [#_"MultiFn" this, #_"Object" dispatchVal]
        (.lock (.readLock (:rw this)))
        (let [#_"IPersistentMap" mt (:methodTable this) #_"IPersistentMap" pt (:preferTable this) #_"Object" ch (:cachedHierarchy this)
              #_"Object" bestValue
                (try
                    (let [#_"Map$Entry" bestEntry
                            (loop-when [bestEntry nil #_"ISeq" s (seq (:methodTable this))] (some? s) => bestEntry
                                (let-when [#_"Map$Entry" e (first s)] (MultiFn''isA this, dispatchVal, (key e)) => (recur bestEntry (next s))
                                    (let [bestEntry
                                            (when (or (nil? bestEntry) (MultiFn''dominates this, (key e), (key bestEntry))) => bestEntry
                                                e
                                            )]
                                        (when-not (MultiFn''dominates this, (key bestEntry), (key e))
                                            (throw! (str "multiple methods in multimethod '" (:name this) "' match dispatch value: " dispatchVal " -> " (key e) " and " (key bestEntry) ", and neither is preferred"))
                                        )
                                        (recur bestEntry (next s))
                                    )
                                )
                            )]
                        (if (some? bestEntry) (val bestEntry) (get (:methodTable this) (:defaultDispatchVal this)))
                    )
                    (finally
                        (.unlock (.readLock (:rw this)))
                    )
                )]
            (when (some? bestValue)
                ;; ensure basis has stayed stable throughout, else redo
                (.lock (.writeLock (:rw this)))
                (try
                    (if (and (= mt (:methodTable this)) (= pt (:preferTable this)) (= ch (:cachedHierarchy this)) (= (:cachedHierarchy this) (deref (:hierarchy this))))
                        (do
                            ;; place in cache
                            (§ update! (:methodCache this) assoc dispatchVal bestValue)
                            (cast IFn bestValue)
                        )
                        (do
                            (MultiFn''resetCache this)
                            (MultiFn''findAndCacheBestMethod this, dispatchVal)
                        )
                    )
                    (finally
                        (.unlock (.writeLock (:rw this)))
                    )
                )
            )
        )
    )

    #_method
    (defn #_"IFn" MultiFn''getMethod [#_"MultiFn" this, #_"Object" dispatchVal]
        (when-not (= (:cachedHierarchy this) (deref (:hierarchy this)))
            (MultiFn''resetCache this)
        )
        (let [#_"IFn" targetFn (get (:methodCache this) dispatchVal)]
            (or targetFn (MultiFn''findAndCacheBestMethod this, dispatchVal))
        )
    )

    #_method
    (defn- #_"IFn" MultiFn''getFn [#_"MultiFn" this, #_"Object" dispatchVal]
        (let [#_"IFn" targetFn (MultiFn''getMethod this, dispatchVal)]
            (or targetFn (throw! (str "no method in multimethod '" (:name this) "' for dispatch value: " dispatchVal)))
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-1--MultiFn [#_"MultiFn" this]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this))))
    )

    #_override
    (defn #_"Object" IFn'''invoke-2--MultiFn [#_"MultiFn" this, #_"Object" arg1]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1)), arg1
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-3--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2)), arg1, arg2
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-4--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3)), arg1, arg2, arg3
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-5--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4)), arg1, arg2, arg3, arg4
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-6--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5)), arg1, arg2, arg3, arg4, arg5
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-7--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6)), arg1, arg2, arg3, arg4, arg5, arg6
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-8--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7)), arg1, arg2, arg3, arg4, arg5, arg6, arg7
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-9--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-10--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-11--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-12--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-13--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-14--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-15--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-16--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-17--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-18--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-19--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18
        )
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-20--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19
        )
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-21--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20
        )
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-22--MultiFn [#_"MultiFn" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20 & #_"Object..." args]
        (.invoke (MultiFn''getFn this, (.invoke (:dispatchFn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, args)), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20,
            args
        )
    )
)
)

(java-ns cloiure.lang.Namespace

(class-ns Namespace
    (def #_"ConcurrentHashMap<Symbol, Namespace>" Namespace'namespaces (ConcurrentHashMap.))

    (defn #_"Namespace" Namespace'new [#_"Symbol" name]
        (hash-map
            #_mutable #_"IPersistentMap" :_meta (meta name)
            #_"Symbol" :name name

            #_"AtomicReference<IPersistentMap>" :mappings (AtomicReference. {})
            #_"AtomicReference<IPersistentMap>" :aliases (AtomicReference. {})
        )
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--Namespace [#_"Namespace" this]
        (§ sync this
            (:_meta this)
        )
    )

    #_override
    (defn #_"IPersistentMap" IReference'''alterMeta--Namespace [#_"Namespace" this, #_"IFn" f, #_"ISeq" args]
        (§ sync this
            (§ update! (:_meta this) #(apply f % args))
        )
    )

    #_override
    (defn #_"IPersistentMap" IReference'''resetMeta--Namespace [#_"Namespace" this, #_"IPersistentMap" m]
        (§ sync this
            (§ set! (:_meta this) m)
        )
    )

    #_foreign
    (defn #_"String" toString---Namespace [#_"Namespace" this]
        (.toString (:name this))
    )

    (defn #_"ISeq" Namespace'all []
        (seq (.values Namespace'namespaces))
    )

    #_method
    (defn #_"Symbol" Namespace''getName [#_"Namespace" this]
        (:name this)
    )

    #_method
    (defn #_"IPersistentMap" Namespace''getMappings [#_"Namespace" this]
        (.get (:mappings this))
    )

    #_method
    (defn- #_"void" Namespace''warnOrFailOnReplace [#_"Namespace" this, #_"Symbol" sym, #_"Object" o, #_"Var" var]
        (or
            (when (instance? Var o)
                (when-not (or (= (:ns o) this) (= (:ns var) RT'CLOIURE_NS)) => :ok
                    (when-not (= (:ns o) RT'CLOIURE_NS)
                        (throw! (str sym " already refers to: " o " in namespace: " (:name this)))
                    )
                )
            )
            (.println *err*, (str "WARNING: " sym " already refers to: " o " in namespace: " (:name this) ", being replaced by: " var))
        )
        nil
    )

    (declare Var'new)

    #_method
    (defn #_"Var" Namespace''intern [#_"Namespace" this, #_"Symbol" sym]
        (when (nil? (:ns sym)) => (throw! "can't intern namespace-qualified symbol")
            (let [[#_"IPersistentMap" m #_"Object" o #_"Var" v]
                    (loop [v nil]
                        (let-when [m (Namespace''getMappings this) o (get m sym)] (nil? o) => [m o v]
                            (let [v (or v (Var'new this, sym))]
                                (.compareAndSet (:mappings this), m, (assoc m sym v))
                                (recur v)
                            )
                        )
                    )]
                (when-not (and (instance? Var o) (= (:ns o) this)) => o
                    (let [v (or v (Var'new this, sym))]
                        (Namespace''warnOrFailOnReplace this, sym, o, v)
                        (loop-when-recur m (not (.compareAndSet (:mappings this), m, (assoc m sym v))) (Namespace''getMappings this))
                        v
                    )
                )
            )
        )
    )

    #_method
    (defn #_"Var" Namespace''referenceVar [#_"Namespace" this, #_"Symbol" sym, #_"Var" var]
        (when (nil? (:ns sym)) => (throw! "can't intern namespace-qualified symbol")
            (let [[#_"IPersistentMap" m #_"Object" o]
                    (loop []
                        (let-when [m (Namespace''getMappings this) o (get m sym)] (nil? o) => [m o]
                            (.compareAndSet (:mappings this), m, (assoc m sym var))
                            (recur)
                        )
                    )]
                (when-not (= o var)
                    (Namespace''warnOrFailOnReplace this, sym, o, var)
                    (loop-when-recur m (not (.compareAndSet (:mappings this), m, (assoc m sym var))) (Namespace''getMappings this))
                )
                var
            )
        )
    )

    (defn #_"boolean" Namespace'areDifferentInstancesOfSameClassName [#_"Class" cls1, #_"Class" cls2]
        (and (not= cls1 cls2) (= (.getName cls1) (.getName cls2)))
    )

    #_method
    (defn #_"Class" Namespace''referenceClass [#_"Namespace" this, #_"Symbol" sym, #_"Class" cls]
        (when (nil? (:ns sym)) => (throw! "can't intern namespace-qualified symbol")
            (let [#_"Class" c
                    (loop []
                        (let [#_"IPersistentMap" m (Namespace''getMappings this) c (get m sym)]
                            (when (or (nil? c) (Namespace'areDifferentInstancesOfSameClassName c, cls)) => c
                                (.compareAndSet (:mappings this), m, (assoc m sym cls))
                                (recur)
                            )
                        )
                    )]
                (when (= c cls) => (throw! (str sym " already refers to: " c " in namespace: " (:name this)))
                    c
                )
            )
        )
    )

    #_method
    (defn #_"void" Namespace''unmap [#_"Namespace" this, #_"Symbol" sym]
        (when (nil? (:ns sym)) => (throw! "can't unintern namespace-qualified symbol")
            (loop-when-recur [#_"IPersistentMap" m (Namespace''getMappings this)] (contains? m sym) [(Namespace''getMappings this)]
                (.compareAndSet (:mappings this), m, (dissoc m sym))
            )
        )
        nil
    )

    #_method
    (defn #_"Class" Namespace''importClass [#_"Namespace" this, #_"Class" cls]
        (let [#_"String" s (.getName cls)]
            (Namespace''referenceClass this, (Symbol'intern (.substring s, (inc (.lastIndexOf s, (int \.))))), cls)
        )
    )

    #_method
    (defn #_"Var" Namespace''refer [#_"Namespace" this, #_"Symbol" sym, #_"Var" var]
        (Namespace''referenceVar this, sym, var)
    )

    (defn #_"Namespace" Namespace'findOrCreate [#_"Symbol" name]
        (or (.get Namespace'namespaces, name)
            (let [#_"Namespace" ns (Namespace'new name)]
                (or (.putIfAbsent Namespace'namespaces, name, ns) ns)
            )
        )
    )

    (defn #_"Namespace" Namespace'remove [#_"Symbol" name]
        (when (= name (:name RT'CLOIURE_NS))
            (throw! "cannot remove cloiure namespace")
        )
        (.remove Namespace'namespaces, name)
    )

    (defn #_"Namespace" Namespace'find [#_"Symbol" name]
        (.get Namespace'namespaces, name)
    )

    #_method
    (defn #_"Object" Namespace''getMapping [#_"Namespace" this, #_"Symbol" name]
        (get (.get (:mappings this)) name)
    )

    #_method
    (defn #_"Var" Namespace''findInternedVar [#_"Namespace" this, #_"Symbol" name]
        (let [#_"Object" o (get (.get (:mappings this)) name)]
            (when (and (instance? Var o) (= (:ns o) this))
                o
            )
        )
    )

    #_method
    (defn #_"IPersistentMap" Namespace''getAliases [#_"Namespace" this]
        (.get (:aliases this))
    )

    #_method
    (defn #_"Namespace" Namespace''lookupAlias [#_"Namespace" this, #_"Symbol" alias]
        (get (Namespace''getAliases this) alias)
    )

    #_method
    (defn #_"void" Namespace''addAlias [#_"Namespace" this, #_"Symbol" alias, #_"Namespace" ns]
        (when (and (some? alias) (some? ns)) => (throw! "expecting Symbol + Namespace")
            (let [#_"IPersistentMap" m
                    (loop-when-recur [m (Namespace''getAliases this)] (not (contains? m alias)) [(Namespace''getAliases this)] => m
                        (.compareAndSet (:aliases this), m, (assoc m alias ns))
                    )]
                ;; you can rebind an alias, but only to the initially-aliased namespace
                (when-not (.equals (get m alias), ns)
                    (throw! (str "alias " alias " already exists in namespace " (:name this) ", aliasing " (get m alias)))
                )
            )
        )
        nil
    )

    #_method
    (defn #_"void" Namespace''removeAlias [#_"Namespace" this, #_"Symbol" alias]
        (loop-when-recur [#_"IPersistentMap" m (Namespace''getAliases this)] (contains? m alias) [(Namespace''getAliases this)]
            (.compareAndSet (:aliases this), m, (dissoc m alias))
        )
        nil
    )
)
)

(java-ns cloiure.lang.PersistentArrayMap

(class-ns MSeq
    (defn #_"MSeq" MSeq'new
        ([#_"Object[]" array, #_"int" i] (MSeq'new nil, array, i))
        ([#_"IPersistentMap" meta, #_"Object[]" array, #_"int" i]
            (merge (ASeq'new meta)
                (hash-map
                    #_"Object[]" :array array
                    #_"int" :i i
                )
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--MSeq [#_"MSeq" this]
        (MapEntry'create (aget (:array this) (:i this)), (aget (:array this) (inc (:i this))))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--MSeq [#_"MSeq" this]
        (when (< (+ (:i this) 2) (alength (:array this)))
            (MSeq'new (:array this), (+ (:i this) 2))
        )
    )

    #_override
    (defn #_"int" Counted'''count--MSeq [#_"MSeq" this]
        (/ (- (alength (:array this)) (:i this)) 2)
    )

    #_override
    (defn #_"MSeq" IObj'''withMeta--MSeq [#_"MSeq" this, #_"IPersistentMap" meta]
        (MSeq'new meta, (:array this), (:i this))
    )
)

(class-ns MIter
    (defn #_"Iterator" MIter'new [#_"Object[]" a, #_"IFn" f]
        (§ reify Iterator
            [#_mutable #_"int" i -2]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (< (+ i 2) (alength a))
            )

            #_foreign
            (#_"Object" next [#_"Iterator" _self]
                (update! i + 2)
                (try
                    (.invoke f, (aget a i), (aget a (inc i)))
                    (catch IndexOutOfBoundsException _
                        (throw (NoSuchElementException.))
                    )
                )
            )
        )
    )
)

;;;
 ; Simple implementation of persistent map on an array.
 ;
 ; Note that instances of this class are constant values, i.e. add/remove etc return new values.
 ; Copies array on every change, so only appropriate for _very_small_ maps. nil keys and values are
 ; ok, but you won't be able to distinguish a nil value via valAt, use contains/entryAt for that.
 ;;
(class-ns PersistentArrayMap
    (def #_"int" PersistentArrayMap'HASHTABLE_THRESHOLD 16)

    (defn #_"PersistentArrayMap" PersistentArrayMap'new
        ([] (PersistentArrayMap'new (make-array Object 0)))
        ;; This ctor captures/aliases the passed array, so do not modify it later.
        ([#_"Object[]" init] (PersistentArrayMap'new nil, init))
        ([#_"IPersistentMap" meta, #_"Object[]" init]
            (merge (APersistentMap'new)
                (hash-map
                    #_"IPersistentMap" :_meta meta
                    #_"Object[]" :array init
                )
            )
        )
    )

    (def #_"PersistentArrayMap" PersistentArrayMap'EMPTY (PersistentArrayMap'new))

    (defn #_"IPersistentMap" PersistentArrayMap'create [#_"Map" other]
        (loop-when [#_"ITransientMap" m (transient PersistentArrayMap'EMPTY) #_"ISeq" s (seq other)] (some? s) => (persistent! m)
            (let [#_"Map$Entry" e (first s)]
                (recur (assoc m (key e) (val e)) (next s))
            )
        )
    )

    #_override
    (defn #_"PersistentArrayMap" IObj'''withMeta--PersistentArrayMap [#_"PersistentArrayMap" this, #_"IPersistentMap" meta]
        (PersistentArrayMap'new meta, (:array this))
    )

    #_method
    (defn #_"PersistentArrayMap" PersistentArrayMap''create [#_"PersistentArrayMap" this & #_"Object..." init]
        (PersistentArrayMap'new (meta this), init)
    )

    (defn #_"boolean" PersistentArrayMap'equalKey [#_"Object" k1, #_"Object" k2]
        (if (keyword? k1) (= k1 k2) (Util'equiv-2oo k1, k2))
    )

    (defn #_"PersistentArrayMap" PersistentArrayMap'createWithCheck [#_"Object[]" init]
        (loop-when-recur [#_"int" i 0] (< i (alength init)) [(+ i 2)]
            (loop-when-recur [#_"int" j (+ i 2)] (< j (alength init)) [(+ j 2)]
                (when (PersistentArrayMap'equalKey (aget init i), (aget init j))
                    (throw! (str "duplicate key: " (aget init i)))
                )
            )
        )
        (PersistentArrayMap'new init)
    )

    (defn #_"PersistentArrayMap" PersistentArrayMap'createAsIfByAssoc [#_"Object[]" init]
        (when (= (& (alength init) 1) 1)
            (throw! (str "no value supplied for key: " (aget init (dec (alength init)))))
        )
        ;; If this looks like it is doing busy-work, it is because it is achieving these goals: O(n^2) run time
        ;; like createWithCheck(), never modify init arg, and only allocate memory if there are duplicate keys.
        (let [#_"int" n
                (loop-when [n 0 #_"int" i 0] (< i (alength init)) => n
                    (let [#_"boolean" dup?
                            (loop-when [dup? false #_"int" j 0] (< j i) => dup?
                                (or (PersistentArrayMap'equalKey (aget init i), (aget init j))
                                    (recur dup? (+ j 2))
                                )
                            )]
                        (recur (if dup? n (+ n 2)) (+ i 2))
                    )
                )
              init
                (when (< n (alength init)) => init
                    ;; Create a new shorter array with unique keys, and the last value associated with each key.
                    ;; To behave like assoc, the first occurrence of each key must be used, since its metadata
                    ;; may be different than later equal keys.
                    (let [#_"Object[]" nodups (make-array Object n)
                          #_"int" m
                            (loop-when [m 0 #_"int" i 0] (< i (alength init)) => m
                                (let [#_"boolean" dup?
                                        (loop-when [dup? false #_"int" j 0] (< j m) => dup?
                                            (or (PersistentArrayMap'equalKey (aget init i), (aget nodups j))
                                                (recur dup? (+ j 2))
                                            )
                                        )
                                      m (when-not dup? => m
                                            (let [#_"int" j
                                                    (loop-when [j (- (alength init) 2)] (<= i j) => j
                                                        (if (PersistentArrayMap'equalKey (aget init i), (aget init j))
                                                            j
                                                            (recur (- j 2))
                                                        )
                                                    )]
                                                (aset nodups m (aget init i))
                                                (aset nodups (inc m) (aget init (inc j)))
                                                (+ m 2)
                                            )
                                        )]
                                    (recur m (+ i 2))
                                )
                            )]
                        (when (= m n) => (throw! (str "internal error: m=" m))
                            nodups
                        )
                    )
                )]
            (PersistentArrayMap'new init)
        )
    )

    #_override
    (defn #_"int" Counted'''count--PersistentArrayMap [#_"PersistentArrayMap" this]
        (/ (alength (:array this)) 2)
    )

    #_method
    (defn- #_"int" PersistentArrayMap''indexOfObject [#_"PersistentArrayMap" this, #_"Object" key]
        (let [#_"EquivPred" ep (Util'equivPred key)]
            (loop-when [#_"int" i 0] (< i (alength (:array this))) => -1
                (if (.equiv ep, key, (aget (:array this) i)) i (recur (+ i 2)))
            )
        )
    )

    #_method
    (defn- #_"int" PersistentArrayMap''indexOf [#_"PersistentArrayMap" this, #_"Object" key]
        (when (keyword? key) => (PersistentArrayMap''indexOfObject this, key)
            (loop-when [#_"int" i 0] (< i (alength (:array this))) => -1
                (if (= key (aget (:array this) i)) i (recur (+ i 2)))
            )
        )
    )

    #_override
    (defn #_"boolean" Associative'''containsKey--PersistentArrayMap [#_"PersistentArrayMap" this, #_"Object" key]
        (<= 0 (PersistentArrayMap''indexOf this, key))
    )

    #_override
    (defn #_"IMapEntry" Associative'''entryAt--PersistentArrayMap [#_"PersistentArrayMap" this, #_"Object" key]
        (let-when [#_"int" i (PersistentArrayMap''indexOf this, key)] (<= 0 i)
            (MapEntry'create (aget (:array this) i), (aget (:array this) (inc i)))
        )
    )

    (declare PersistentHashMap'create-2)

    #_override
    (defn #_"IPersistentMap" IPersistentMap'''assoc--PersistentArrayMap [#_"PersistentArrayMap" this, #_"Object" key, #_"Object" val]
        (let [#_"int" i (PersistentArrayMap''indexOf this, key)]
            (if (<= 0 i) ;; already have key, same-sized replacement
                (if (= (aget (:array this) (inc i)) val) ;; no change, no op
                    this
                    (let [#_"Object[]" a (.clone (:array this))]
                        (aset a (inc i) val)
                        (PersistentArrayMap''create this, a)
                    )
                )
                ;; didn't have key, grow
                (if (< PersistentArrayMap'HASHTABLE_THRESHOLD (alength (:array this)))
                    (-> (PersistentHashMap'create-2 (meta this), (:array this)) (assoc key val))
                    (let [#_"int" n (alength (:array this)) #_"Object[]" a (make-array Object (+ n 2))]
                        (when (pos? n)
                            (System/arraycopy (:array this), 0, a, 0, n)
                        )
                        (aset a n key)
                        (aset a (inc n) val)
                        (PersistentArrayMap''create this, a)
                    )
                )
            )
        )
    )

    #_override
    (defn #_"IPersistentMap" IPersistentMap'''dissoc--PersistentArrayMap [#_"PersistentArrayMap" this, #_"Object" key]
        (let-when [#_"int" i (PersistentArrayMap''indexOf this, key)] (<= 0 i) => this ;; don't have key, no op
            ;; have key, will remove
            (let-when [#_"int" n (- (alength (:array this)) 2)] (pos? n) => (.empty this)
                (let [#_"Object[]" a (make-array Object n)]
                    (System/arraycopy (:array this), 0, a, 0, i)
                    (System/arraycopy (:array this), (+ i 2), a, i, (- n i))
                    (PersistentArrayMap''create this, a)
                )
            )
        )
    )

    #_override
    (defn #_"IPersistentMap" IPersistentCollection'''empty--PersistentArrayMap [#_"PersistentArrayMap" this]
        (with-meta PersistentArrayMap'EMPTY (meta this))
    )

    #_override
    (defn #_"Object" ILookup'''valAt-2--PersistentArrayMap [#_"PersistentArrayMap" this, #_"Object" key]
        (.valAt this, key, nil)
    )

    #_override
    (defn #_"Object" ILookup'''valAt-3--PersistentArrayMap [#_"PersistentArrayMap" this, #_"Object" key, #_"Object" notFound]
        (let [#_"int" i (PersistentArrayMap''indexOf this, key)]
            (if (<= 0 i) (aget (:array this) (inc i)) notFound)
        )
    )

    #_method
    (defn #_"int" PersistentArrayMap''capacity [#_"PersistentArrayMap" this]
        (count this)
    )

    #_foreign
    (defn #_"Iterator" iterator---PersistentArrayMap [#_"PersistentArrayMap" this]
        (MIter'new (:array this), APersistentMap'MAKE_ENTRY)
    )

    #_override
    (defn #_"Iterator" IMapIterable'''keyIterator--PersistentArrayMap [#_"PersistentArrayMap" this]
        (MIter'new (:array this), APersistentMap'MAKE_KEY)
    )

    #_override
    (defn #_"Iterator" IMapIterable'''valIterator--PersistentArrayMap [#_"PersistentArrayMap" this]
        (MIter'new (:array this), APersistentMap'MAKE_VAL)
    )

    #_override
    (defn #_"ISeq" Seqable'''seq--PersistentArrayMap [#_"PersistentArrayMap" this]
        (when (pos? (alength (:array this)))
            (MSeq'new (:array this), 0)
        )
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--PersistentArrayMap [#_"PersistentArrayMap" this]
        (:_meta this)
    )

    #_override
    (defn #_"Object" IKVReduce'''kvreduce--PersistentArrayMap [#_"PersistentArrayMap" this, #_"IFn" f, #_"Object" r]
        (loop-when [r r #_"int" i 0] (< i (alength (:array this))) => r
            (let [r (.invoke f, r, (aget (:array this) i), (aget (:array this) (inc i)))]
                (if (reduced? r) (deref r) (recur r (+ i 2)))
            )
        )
    )

    (declare TransientArrayMap'new)

    #_override
    (defn #_"ITransientMap" IEditableCollection'''asTransient--PersistentArrayMap [#_"PersistentArrayMap" this]
        (TransientArrayMap'new (:array this))
    )
)

(class-ns TransientArrayMap
    (defn #_"TransientArrayMap" TransientArrayMap'new [#_"Object[]" array]
        (let [#_"Object[]" a (make-array Object (Math/max PersistentArrayMap'HASHTABLE_THRESHOLD, (alength array)))
              _ (System/arraycopy array, 0, a, 0, (alength array))]
            (merge (ATransientMap'new)
                (hash-map
                    #_"Object[]" :array a
                    #_"int" :len (alength array)
                    #_volatile #_"Thread" :owner (Thread/currentThread)
                )
            )
        )
    )

    #_method
    (defn- #_"int" TransientArrayMap''indexOf [#_"TransientArrayMap" this, #_"Object" key]
        (loop-when [#_"int" i 0] (< i (:len this)) => -1
            (if (PersistentArrayMap'equalKey (aget (:array this) i), key) i (recur (+ i 2)))
        )
    )

    (declare PersistentHashMap'create-1a)

    #_override
    (defn #_"ITransientMap" ATransientMap'''doAssoc--TransientArrayMap [#_"TransientArrayMap" this, #_"Object" key, #_"Object" val]
        (let [#_"int" i (TransientArrayMap''indexOf this, key)]
            (cond (<= 0 i) ;; already have key,
                (do
                    (when-not (= (aget (:array this) (inc i)) val) ;; no change, no op
                        (aset (:array this) (inc i) val)
                    )
                    this
                )
                :else ;; didn't have key, grow
                (if (< (:len this) (alength (:array this)))
                    (let [_ (aset (:array this) (:len this) key) this (update this :len inc)
                          _ (aset (:array this) (:len this) val) this (update this :len inc)]
                        this
                    )
                    (-> (PersistentHashMap'create-1a (:array this)) (transient) (assoc key val))
                )
            )
        )
    )

    #_override
    (defn #_"ITransientMap" ATransientMap'''doDissoc--TransientArrayMap [#_"TransientArrayMap" this, #_"Object" key]
        (let-when [#_"int" i (TransientArrayMap''indexOf this, key)] (<= 0 i) => this
            ;; have key, will remove
            (when (<= 2 (:len this))
                (aset (:array this) i (aget (:array this) (- (:len this) 2)))
                (aset (:array this) (inc i) (aget (:array this) (- (:len this) 1)))
            )
            (update this :len - 2)
        )
    )

    #_override
    (defn #_"Object" ATransientMap'''doValAt--TransientArrayMap [#_"TransientArrayMap" this, #_"Object" key, #_"Object" notFound]
        (let [#_"int" i (TransientArrayMap''indexOf this, key)]
            (if (<= 0 i) (aget (:array this) (inc i)) notFound)
        )
    )

    #_override
    (defn #_"int" ATransientMap'''doCount--TransientArrayMap [#_"TransientArrayMap" this]
        (/ (:len this) 2)
    )

    #_override
    (defn #_"IPersistentMap" ATransientMap'''doPersistent--TransientArrayMap [#_"TransientArrayMap" this]
        (.ensureEditable this)
        (§ set! (:owner this) nil)
        (let [#_"Object[]" a (make-array Object (:len this))]
            (System/arraycopy (:array this), 0, a, 0, (:len this))
            (PersistentArrayMap'new a)
        )
    )

    #_override
    (defn #_"void" ATransientMap'''ensureEditable--TransientArrayMap [#_"TransientArrayMap" this]
        (when (nil? (:owner this))
            (throw (IllegalAccessError. "Transient used after persistent! call"))
        )
        nil
    )
)
)

(java-ns cloiure.lang.PersistentHashMap

(class-ns HSeq
    (defn- #_"HSeq" HSeq'new [#_"IPersistentMap" meta, #_"INode[]" nodes, #_"int" i, #_"ISeq" s]
        (merge (ASeq'new meta)
            (hash-map
                #_"INode[]" :nodes nodes
                #_"int" :i i
                #_"ISeq" :s s
            )
        )
    )

    (defn- #_"ISeq" HSeq'create-4 [#_"IPersistentMap" meta, #_"INode[]" nodes, #_"int" i, #_"ISeq" s]
        (when (nil? s) => (HSeq'new meta, nodes, i, s)
            (loop-when i (< i (alength nodes))
                (let-when [#_"INode" ai (aget nodes i)] (some? ai) => (recur (inc i))
                    (let-when [s (.nodeSeq ai)] (some? s) => (recur (inc i))
                        (HSeq'new meta, nodes, (inc i), s)
                    )
                )
            )
        )
    )

    (defn #_"ISeq" HSeq'create-1 [#_"INode[]" nodes]
        (HSeq'create-4 nil, nodes, 0, nil)
    )

    #_override
    (defn #_"HSeq" IObj'''withMeta--HSeq [#_"HSeq" this, #_"IPersistentMap" meta]
        (HSeq'new meta, (:nodes this), (:i this), (:s this))
    )

    #_override
    (defn #_"Object" ISeq'''first--HSeq [#_"HSeq" this]
        (first (:s this))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--HSeq [#_"HSeq" this]
        (HSeq'create-4 nil, (:nodes this), (:i this), (next (:s this)))
    )
)

(class-ns HIter
    (defn #_"Iterator" HIter'new [#_"INode[]" a, #_"IFn" f]
        (§ reify Iterator
            [#_mutable #_"int" i 0
             #_mutable #_"Iterator" it nil]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (loop []
                    (or
                        (when (some? it)
                            (or (.hasNext it)
                                (set! it nil)
                            )
                        )
                        (and (< i (alength a))
                            (let [#_"INode" ai (aget a i)]
                                (update! i inc)
                                (when (some? ai)
                                    (set! it (.iterator ai, f))
                                )
                                (recur)
                            )
                        )
                    )
                )
            )

            #_foreign
            (#_"Object" next [#_"Iterator" self]
                (when (.hasNext self) => (throw (NoSuchElementException.))
                    (.next it)
                )
            )
        )
    )
)

(class-ns NodeIter
    (def- #_"Object" NodeIter'NULL (Object.))

    (defn #_"Iterator" NodeIter'new [#_"Object[]" a, #_"IFn" f]
        (§ reify Iterator
            [#_mutable #_"int" i 0
             #_mutable #_"Object" e NodeIter'NULL
             #_mutable #_"Iterator" it nil]

            #_private
            (#_"boolean" step [_self]
                (loop-when [] (< i (alength a)) => false
                    (let [#_"Object" key (aget a i) #_"Object" nodeOrVal (aget a (inc i)) _ (update! i + 2)]
                        (cond
                            (some? key)
                                (do
                                    (set! e (.invoke f, key, nodeOrVal))
                                    true
                                )
                            (some? nodeOrVal)
                                (let-when [#_"Iterator" it' (.iterator (cast INode nodeOrVal), f)] (and (some? it') (.hasNext it')) => (recur)
                                    (set! it it')
                                    true
                                )
                            :else
                                (recur)
                        )
                    )
                )
            )

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" self]
                (or (not (identical? e NodeIter'NULL)) (some? it) (.step self))
            )

            #_foreign
            (#_"Object" next [#_"Iterator" self]
                (let [#_"Object" e' e]
                    (cond
                        (not (identical? e' NodeIter'NULL))
                            (do
                                (set! e NodeIter'NULL)
                                e'
                            )
                        (some? it)
                            (let [e' (.next it)]
                                (when-not (.hasNext it)
                                    (set! it nil)
                                )
                                e'
                            )
                        (.step self)
                            (.next self)
                        :else
                            (throw (NoSuchElementException.))
                    )
                )
            )
        )
    )
)

(class-ns NodeSeq
    (defn #_"NodeSeq" NodeSeq'new
        ([#_"Object[]" array, #_"int" i] (NodeSeq'new nil, array, i, nil))
        ([#_"IPersistentMap" meta, #_"Object[]" array, #_"int" i, #_"ISeq" s]
            (merge (ASeq'new meta)
                (hash-map
                    #_"Object[]" :array array
                    #_"int" :i i
                    #_"ISeq" :s s
                )
            )
        )
    )

    (defn- #_"ISeq" NodeSeq'create-3 [#_"Object[]" array, #_"int" i, #_"ISeq" s]
        (when (nil? s) => (NodeSeq'new nil, array, i, s)
            (loop-when i (< i (alength array))
                (when (nil? (aget array i)) => (NodeSeq'new nil, array, i, nil)
                    (or
                        (when-let [#_"INode" node (cast INode (aget array (inc i)))]
                            (when-let [s (.nodeSeq node)]
                                (NodeSeq'new nil, array, (+ i 2), s)
                            )
                        )
                        (recur (+ i 2))
                    )
                )
            )
        )
    )

    (defn #_"ISeq" NodeSeq'create-1 [#_"Object[]" array]
        (NodeSeq'create-3 array, 0, nil)
    )

    (defn #_"Object" NodeSeq'kvreduce [#_"Object[]" array, #_"IFn" f, #_"Object" r]
        (loop-when [r r #_"int" i 0] (< i (alength array)) => r
            (let [r (if (some? (aget array i))
                        (.invoke f, r, (aget array i), (aget array (inc i)))
                        (let-when [#_"INode" node (cast INode (aget array (inc i)))] (some? node) => r
                            (.kvreduce node, f, r)
                        )
                    )]
                (when-not (reduced? r) => r
                    (recur r (+ i 2))
                )
            )
        )
    )

    #_override
    (defn #_"NodeSeq" IObj'''withMeta--NodeSeq [#_"NodeSeq" this, #_"IPersistentMap" meta]
        (NodeSeq'new meta, (:array this), (:i this), (:s this))
    )

    #_override
    (defn #_"Object" ISeq'''first--NodeSeq [#_"NodeSeq" this]
        (if (some? (:s this))
            (first (:s this))
            (MapEntry'create (aget (:array this) (:i this)), (aget (:array this) (inc (:i this))))
        )
    )

    #_override
    (defn #_"ISeq" ISeq'''next--NodeSeq [#_"NodeSeq" this]
        (if (some? (:s this))
            (NodeSeq'create-3 (:array this), (:i this), (next (:s this)))
            (NodeSeq'create-3 (:array this), (+ (:i this) 2), nil)
        )
    )
)

(class-ns PersistentHashMap
    (defn #_"int" PersistentHashMap'mask [#_"int" hash, #_"int" shift]
        (& (>>> hash shift) 0x01f)
    )

    (defn- #_"int" PersistentHashMap'bitpos [#_"int" hash, #_"int" shift]
        (<< 1 (PersistentHashMap'mask hash, shift))
    )

    (defn- #_"Object[]" PersistentHashMap'cloneAndSet
        ([#_"Object[]" array, #_"int" i, #_"Object" x]
            (let [#_"Object[]" a (.clone array)]
                (aset a i x)
                a
            )
        )
        ([#_"Object[]" array, #_"int" i, #_"Object" x, #_"int" j, #_"Object" y]
            (let [#_"Object[]" a (.clone array)]
                (aset a i x)
                (aset a j y)
                a
            )
        )
    )

    (defn- #_"Object[]" PersistentHashMap'removePair [#_"Object[]" array, #_"int" i]
        (let [#_"Object[]" a (make-array Object (- (alength array) 2)) #_"int" ii (* 2 i)]
            (System/arraycopy array, 0, a, 0, ii)
            (System/arraycopy array, (+ ii 2), a, ii, (- (alength a) ii))
            a
        )
    )

    (defn #_"int" PersistentHashMap'hash [#_"Object" k]
        (Util'hasheq k)
    )
)

(class-ns ArrayNode
    (defn #_"ArrayNode" ArrayNode'new [#_"AtomicReference<Thread>" edit, #_"int" count, #_"INode[]" array]
        (hash-map
            #_"AtomicReference<Thread>" :edit edit
            #_"int" :count count
            #_"INode[]" :array array
        )
    )

    (declare BitmapIndexedNode'EMPTY)

    #_override
    (defn #_"INode" INode'''assoc-6--ArrayNode [#_"ArrayNode" this, #_"int" shift, #_"int" hash, #_"Object" key, #_"Object" val, #_"Box" addedLeaf]
        (let [#_"int" i (PersistentHashMap'mask hash, shift) #_"INode" ai (aget (:array this) i)]
            (if (some? ai)
                (let [#_"INode" node (.assoc ai, (+ shift 5), hash, key, val, addedLeaf)]
                    (when-not (= node ai) => this
                        (ArrayNode'new nil, (:count this), (PersistentHashMap'cloneAndSet (:array this), i, node))
                    )
                )
                (let [#_"INode" node (.assoc BitmapIndexedNode'EMPTY, (+ shift 5), hash, key, val, addedLeaf)]
                    (ArrayNode'new nil, (inc (:count this)), (PersistentHashMap'cloneAndSet (:array this), i, node))
                )
            )
        )
    )

    (declare BitmapIndexedNode'new)

    #_method
    (defn- #_"INode" ArrayNode''pack [#_"ArrayNode" this, #_"AtomicReference<Thread>" edit, #_"int" idx]
        (let [#_"Object[]" a (make-array Object (* 2 (dec (:count this))))
              [#_"int" bitmap #_"int" j]
                (loop-when [bitmap 0 j 1 #_"int" i 0] (< i idx) => [bitmap j]
                    (let [[bitmap j]
                            (when (some? (aget (:array this) i)) => [bitmap j]
                                (aset a j (aget (:array this) i))
                                [(| bitmap (<< 1 i)) (+ j 2)]
                            )]
                        (recur bitmap j (inc i))
                    )
                )
              bitmap
                (loop-when [bitmap bitmap j j #_"int" i (inc idx)] (< i (alength (:array this))) => bitmap
                    (let [[bitmap j]
                            (when (some? (aget (:array this) i)) => [bitmap j]
                                (aset a j (aget (:array this) i))
                                [(| bitmap (<< 1 i)) (+ j 2)]
                            )]
                        (recur bitmap j (inc i))
                    )
                )]
            (BitmapIndexedNode'new edit, bitmap, a)
        )
    )

    #_override
    (defn #_"INode" INode'''dissoc-4--ArrayNode [#_"ArrayNode" this, #_"int" shift, #_"int" hash, #_"Object" key]
        (let-when [#_"int" i (PersistentHashMap'mask hash, shift) #_"INode" ai (aget (:array this) i)] (some? ai) => this
            (let-when-not [#_"INode" node (.dissoc ai, (+ shift 5), hash, key)] (= node ai) => this
                (cond
                    (some? node)         (ArrayNode'new nil, (:count this), (PersistentHashMap'cloneAndSet (:array this), i, node))
                    (<= (:count this) 8) (ArrayNode''pack this, nil, i) ;; shrink
                    :else                (ArrayNode'new nil, (dec (:count this)), (PersistentHashMap'cloneAndSet (:array this), i, node))
                )
            )
        )
    )

    #_override
    (defn #_"IMapEntry" INode'''find-4--ArrayNode [#_"ArrayNode" this, #_"int" shift, #_"int" hash, #_"Object" key]
        (let [#_"int" i (PersistentHashMap'mask hash, shift) #_"INode" node (aget (:array this) i)]
            (when (some? node)
                (.find node, (+ shift 5), hash, key)
            )
        )
    )

    #_override
    (defn #_"Object" INode'''find-5--ArrayNode [#_"ArrayNode" this, #_"int" shift, #_"int" hash, #_"Object" key, #_"Object" notFound]
        (let [#_"int" i (PersistentHashMap'mask hash, shift) #_"INode" node (aget (:array this) i)]
            (when (some? node) => notFound
                (.find node, (+ shift 5), hash, key, notFound)
            )
        )
    )

    #_override
    (defn #_"ISeq" INode'''nodeSeq--ArrayNode [#_"ArrayNode" this]
        (HSeq'create-1 (:array this))
    )

    #_override
    (defn #_"Iterator" INode'''iterator--ArrayNode [#_"ArrayNode" this, #_"IFn" f]
        (HIter'new (:array this), f)
    )

    #_override
    (defn #_"Object" INode'''kvreduce--ArrayNode [#_"ArrayNode" this, #_"IFn" f, #_"Object" r]
        (let [#_"INode[]" a (:array this)]
            (loop-when [r r #_"int" i 0] (< i (alength a)) => r
                (let-when [#_"INode" node (aget a i)] (some? node) => (recur r (inc i))
                    (let [r (.kvreduce node, f, r)]
                        (when-not (reduced? r) => r
                            (recur r (inc i))
                        )
                    )
                )
            )
        )
    )

    (defn #_"Object" ArrayNode'foldTasks [#_"PersistentVector" tasks, #_"IFn" combinef, #_"IFn" fjtask, #_"IFn" fjfork, #_"IFn" fjjoin]
        (let [#_"int" n (count tasks)]
            (case n
                0   (.invoke combinef)
                1   (.call (nth tasks 0))
                    (let [#_"PersistentVector" t1 (subvec tasks 0 (quot n 2)) #_"PersistentVector" t2 (subvec tasks (quot n 2) n)
                          #_"Object" forked (.invoke fjfork, (.invoke fjtask, #(ArrayNode'foldTasks t2, combinef, fjtask, fjfork, fjjoin)))]
                        (.invoke combinef, (ArrayNode'foldTasks t1, combinef, fjtask, fjfork, fjjoin), (.invoke fjjoin, forked))
                    )
            )
        )
    )

    #_override
    (defn #_"Object" INode'''fold--ArrayNode [#_"ArrayNode" this, #_"IFn" combinef, #_"IFn" reducef, #_"IFn" fjtask, #_"IFn" fjfork, #_"IFn" fjjoin]
        (let [#_"INode[]" a (:array this)
              #_"PersistentVector" tasks
                (loop-when [tasks [] #_"int" i 0] (< i (alength a)) => tasks
                    (let [#_"INode" node (aget a i)
                          tasks
                            (when (some? node) => tasks
                                (conj tasks #(.fold node, combinef, reducef, fjtask, fjfork, fjjoin))
                            )]
                        (recur tasks (inc i))
                    )
                )]
            (ArrayNode'foldTasks tasks, combinef, fjtask, fjfork, fjjoin)
        )
    )

    #_method
    (defn- #_"ArrayNode" ArrayNode''ensureEditable [#_"ArrayNode" this, #_"AtomicReference<Thread>" edit]
        (if (= (:edit this) edit)
            this
            (ArrayNode'new edit, (:count this), (.clone (:array this)))
        )
    )

    #_method
    (defn- #_"ArrayNode" ArrayNode''editAndSet [#_"ArrayNode" this, #_"AtomicReference<Thread>" edit, #_"int" i, #_"INode" node]
        (let [#_"ArrayNode" e (ArrayNode''ensureEditable this, edit)]
            (aset (:array e) i node)
            e
        )
    )

    #_override
    (defn #_"INode" INode'''assoc-7--ArrayNode [#_"ArrayNode" this, #_"AtomicReference<Thread>" edit, #_"int" shift, #_"int" hash, #_"Object" key, #_"Object" val, #_"Box" addedLeaf]
        (let [#_"int" i (PersistentHashMap'mask hash, shift) #_"INode" ai (aget (:array this) i)]
            (if (some? ai)
                (let [#_"INode" node (.assoc ai, edit, (+ shift 5), hash, key, val, addedLeaf)]
                    (when-not (= node ai) => this
                        (ArrayNode''editAndSet this, edit, i, node)
                    )
                )
                (-> (ArrayNode''editAndSet this, edit, i, (.assoc BitmapIndexedNode'EMPTY, edit, (+ shift 5), hash, key, val, addedLeaf))
                    (update :count inc)
                )
            )
        )
    )

    #_override
    (defn #_"INode" INode'''dissoc-6--ArrayNode [#_"ArrayNode" this, #_"AtomicReference<Thread>" edit, #_"int" shift, #_"int" hash, #_"Object" key, #_"Box" removedLeaf]
        (let-when [#_"int" i (PersistentHashMap'mask hash, shift) #_"INode" ai (aget (:array this) i)] (some? ai) => this
            (let-when-not [#_"INode" node (.dissoc ai, edit, (+ shift 5), hash, key, removedLeaf)] (= node ai) => this
                (cond
                    (some? node)         (ArrayNode''editAndSet this, edit, i, node)
                    (<= (:count this) 8) (ArrayNode''pack this, edit, i) ;; shrink
                    :else            (-> (ArrayNode''editAndSet this, edit, i, node) (update :count dec))
                )
            )
        )
    )
)

(class-ns BitmapIndexedNode
    (defn #_"BitmapIndexedNode" BitmapIndexedNode'new [#_"AtomicReference<Thread>" edit, #_"int" bitmap, #_"Object[]" array]
        (hash-map
            #_"AtomicReference<Thread>" :edit edit
            #_"int" :bitmap bitmap
            #_"Object[]" :array array
        )
    )

    (def #_"BitmapIndexedNode" BitmapIndexedNode'EMPTY (BitmapIndexedNode'new nil, 0, (object-array 0)))

    #_method
    (defn #_"int" BitmapIndexedNode''index [#_"BitmapIndexedNode" this, #_"int" bit]
        (Integer/bitCount (& (:bitmap this) (dec bit)))
    )

    (declare HashCollisionNode'new)

    (defn- #_"INode" BitmapIndexedNode'createNode-6 [#_"int" shift, #_"Object" key1, #_"Object" val1, #_"int" key2hash, #_"Object" key2, #_"Object" val2]
        (let [#_"int" key1hash (PersistentHashMap'hash key1)]
            (when-not (= key1hash key2hash) => (HashCollisionNode'new nil, key1hash, 2, (object-array [ key1, val1, key2, val2 ]))
                (let [#_"Box" addedLeaf (Box'new nil) #_"AtomicReference<Thread>" edit (AtomicReference.)]
                    (-> BitmapIndexedNode'EMPTY
                        (.assoc edit, shift, key1hash, key1, val1, addedLeaf)
                        (.assoc edit, shift, key2hash, key2, val2, addedLeaf)
                    )
                )
            )
        )
    )

    #_override
    (defn #_"INode" INode'''assoc-6--BitmapIndexedNode [#_"BitmapIndexedNode" this, #_"int" shift, #_"int" hash, #_"Object" key, #_"Object" val, #_"Box" addedLeaf]
        (let [#_"int" bit (PersistentHashMap'bitpos hash, shift) #_"int" idx (BitmapIndexedNode''index this, bit)]
            (if-not (zero? (& (:bitmap this) bit))
                (let [#_"Object" keyOrNull (aget (:array this) (* 2 idx))
                      #_"Object" valOrNode (aget (:array this) (inc (* 2 idx)))
                      _ (cond
                            (nil? keyOrNull)
                                (let [#_"INode" n (.assoc (cast INode valOrNode), (+ shift 5), hash, key, val, addedLeaf)]
                                    (when-not (= n valOrNode)
                                        (PersistentHashMap'cloneAndSet (:array this), (inc (* 2 idx)), n)
                                    )
                                )
                            (Util'equiv-2oo key, keyOrNull)
                                (when-not (= val valOrNode)
                                    (PersistentHashMap'cloneAndSet (:array this), (inc (* 2 idx)), val)
                                )
                            :else
                                (let [_ (§ set! (:val addedLeaf) addedLeaf)]
                                    (PersistentHashMap'cloneAndSet (:array this), (* 2 idx), nil, (inc (* 2 idx)), (BitmapIndexedNode'createNode-6 (+ shift 5), keyOrNull, valOrNode, hash, key, val))
                                )
                        )]
                    (if (some? _) (BitmapIndexedNode'new nil, (:bitmap this), _) this)
                )
                (let [#_"int" n (Integer/bitCount (:bitmap this))]
                    (if (<= 16 n)
                        (let [#_"INode[]" nodes (make-array #_"INode" Object 32) #_"int" jdx (PersistentHashMap'mask hash, shift)]
                            (aset nodes jdx (.assoc BitmapIndexedNode'EMPTY, (+ shift 5), hash, key, val, addedLeaf))
                            (loop-when [#_"int" j 0 #_"int" i 0] (< i 32)
                                (when-not (= (& (>>> (:bitmap this) i) 1) 0) => (recur j (inc i))
                                    (if (some? (aget (:array this) j))
                                        (aset nodes i (.assoc BitmapIndexedNode'EMPTY, (+ shift 5), (PersistentHashMap'hash (aget (:array this) j)), (aget (:array this) j), (aget (:array this) (inc j)), addedLeaf))
                                        (aset nodes i (cast INode (aget (:array this) (inc j))))
                                    )
                                    (recur (+ j 2) (inc i))
                                )
                            )
                            (ArrayNode'new nil, (inc n), nodes)
                        )
                        (let [#_"Object[]" a (make-array Object (* 2 (inc n)))]
                            (System/arraycopy (:array this), 0, a, 0, (* 2 idx))
                            (aset a (* 2 idx) key)
                            (§ set! (:val addedLeaf) addedLeaf)
                            (aset a (inc (* 2 idx)) val)
                            (System/arraycopy (:array this), (* 2 idx), a, (* 2 (inc idx)), (* 2 (- n idx)))
                            (BitmapIndexedNode'new nil, (| (:bitmap this) bit), a)
                        )
                    )
                )
            )
        )
    )

    #_override
    (defn #_"INode" INode'''dissoc-4--BitmapIndexedNode [#_"BitmapIndexedNode" this, #_"int" shift, #_"int" hash, #_"Object" key]
        (let-when-not [#_"int" bit (PersistentHashMap'bitpos hash, shift)] (zero? (& (:bitmap this) bit)) => this
            (let [#_"int" i (BitmapIndexedNode''index this, bit) #_"int" ii (* 2 i)
                  #_"Object" keyOrNull (aget (:array this) ii)
                  #_"Object" valOrNode (aget (:array this) (inc ii))]
                (if (some? keyOrNull)
                    (when (Util'equiv-2oo key, keyOrNull) => this
                        ;; TODO: collapse
                        (BitmapIndexedNode'new nil, (bit-xor (:bitmap this) bit), (PersistentHashMap'removePair (:array this), i))
                    )
                    (let [#_"INode" n (.dissoc (cast INode valOrNode), (+ shift 5), hash, key)]
                        (cond
                            (= n valOrNode)
                                this
                            (some? n)
                                (BitmapIndexedNode'new nil, (:bitmap this), (PersistentHashMap'cloneAndSet (:array this), (inc ii), n))
                            (= (:bitmap this) bit)
                                nil
                            :else
                                (BitmapIndexedNode'new nil, (bit-xor (:bitmap this) bit), (PersistentHashMap'removePair (:array this), i))
                        )
                    )
                )
            )
        )
    )

    #_override
    (defn #_"IMapEntry" INode'''find-4--BitmapIndexedNode [#_"BitmapIndexedNode" this, #_"int" shift, #_"int" hash, #_"Object" key]
        (let-when-not [#_"int" bit (PersistentHashMap'bitpos hash, shift)] (zero? (& (:bitmap this) bit))
            (let [#_"int" i (BitmapIndexedNode''index this, bit)
                  #_"Object" keyOrNull (aget (:array this) (* 2 i))
                  #_"Object" valOrNode (aget (:array this) (inc (* 2 i)))]
                (cond
                    (nil? keyOrNull)                (.find (cast INode valOrNode), (+ shift 5), hash, key)
                    (Util'equiv-2oo key, keyOrNull) (MapEntry'create keyOrNull, valOrNode)
                )
            )
        )
    )

    #_override
    (defn #_"Object" INode'''find-5--BitmapIndexedNode [#_"BitmapIndexedNode" this, #_"int" shift, #_"int" hash, #_"Object" key, #_"Object" notFound]
        (let-when-not [#_"int" bit (PersistentHashMap'bitpos hash, shift)] (zero? (& (:bitmap this) bit)) => notFound
            (let [#_"int" i (BitmapIndexedNode''index this, bit)
                  #_"Object" keyOrNull (aget (:array this) (* 2 i))
                  #_"Object" valOrNode (aget (:array this) (inc (* 2 i)))]
                (cond
                    (nil? keyOrNull)                (.find (cast INode valOrNode), (+ shift 5), hash, key, notFound)
                    (Util'equiv-2oo key, keyOrNull) valOrNode
                    :else                           notFound
                )
            )
        )
    )

    #_override
    (defn #_"ISeq" INode'''nodeSeq--BitmapIndexedNode [#_"BitmapIndexedNode" this]
        (NodeSeq'create-1 (:array this))
    )

    #_override
    (defn #_"Iterator" INode'''iterator--BitmapIndexedNode [#_"BitmapIndexedNode" this, #_"IFn" f]
        (NodeIter'new (:array this), f)
    )

    #_override
    (defn #_"Object" INode'''kvreduce--BitmapIndexedNode [#_"BitmapIndexedNode" this, #_"IFn" f, #_"Object" r]
        (NodeSeq'kvreduce (:array this), f, r)
    )

    #_override
    (defn #_"Object" INode'''fold--BitmapIndexedNode [#_"BitmapIndexedNode" this, #_"IFn" combinef, #_"IFn" reducef, #_"IFn" fjtask, #_"IFn" fjfork, #_"IFn" fjjoin]
        (NodeSeq'kvreduce (:array this), reducef, (.invoke combinef))
    )

    #_method
    (defn- #_"BitmapIndexedNode" BitmapIndexedNode''ensureEditable [#_"BitmapIndexedNode" this, #_"AtomicReference<Thread>" edit]
        (when-not (= (:edit this) edit) => this
            (let [#_"int" n (Integer/bitCount (:bitmap this)) #_"Object[]" a (make-array Object (* 2 (inc n)))] ;; make room for next assoc
                (System/arraycopy (:array this), 0, a, 0, (* 2 n))
                (BitmapIndexedNode'new edit, (:bitmap this), a)
            )
        )
    )

    #_method
    (defn- #_"BitmapIndexedNode" BitmapIndexedNode''editAndSet-4 [#_"BitmapIndexedNode" this, #_"AtomicReference<Thread>" edit, #_"int" i, #_"Object" x]
        (let [#_"BitmapIndexedNode" e (BitmapIndexedNode''ensureEditable this, edit)]
            (aset (:array e) i x)
            e
        )
    )

    #_method
    (defn- #_"BitmapIndexedNode" BitmapIndexedNode''editAndSet-6 [#_"BitmapIndexedNode" this, #_"AtomicReference<Thread>" edit, #_"int" i, #_"Object" x, #_"int" j, #_"Object" y]
        (let [#_"BitmapIndexedNode" e (BitmapIndexedNode''ensureEditable this, edit)]
            (aset (:array e) i x)
            (aset (:array e) j y)
            e
        )
    )

    #_method
    (defn- #_"BitmapIndexedNode" BitmapIndexedNode''editAndRemovePair [#_"BitmapIndexedNode" this, #_"AtomicReference<Thread>" edit, #_"int" bit, #_"int" i]
        (when-not (= (:bitmap this) bit)
            (let [#_"BitmapIndexedNode" e (-> (BitmapIndexedNode''ensureEditable this, edit) (update :bitmap bit-xor bit))
                  #_"Object[]" a (:array e) #_"int" n (alength a)]
                (System/arraycopy a, (* 2 (inc i)), a, (* 2 i), (- n (* 2 (inc i))))
                (aset a (- n 2) nil)
                (aset a (- n 1) nil)
                e
            )
        )
    )

    (defn- #_"INode" BitmapIndexedNode'createNode-7 [#_"AtomicReference<Thread>" edit, #_"int" shift, #_"Object" key1, #_"Object" val1, #_"int" key2hash, #_"Object" key2, #_"Object" val2]
        (let [#_"int" key1hash (PersistentHashMap'hash key1)]
            (when-not (= key1hash key2hash) => (HashCollisionNode'new nil, key1hash, 2, (object-array [ key1, val1, key2, val2 ]))
                (let [#_"Box" addedLeaf (Box'new nil)]
                    (-> BitmapIndexedNode'EMPTY
                        (.assoc edit, shift, key1hash, key1, val1, addedLeaf)
                        (.assoc edit, shift, key2hash, key2, val2, addedLeaf)
                    )
                )
            )
        )
    )

    #_override
    (defn #_"INode" INode'''assoc-7--BitmapIndexedNode [#_"BitmapIndexedNode" this, #_"AtomicReference<Thread>" edit, #_"int" shift, #_"int" hash, #_"Object" key, #_"Object" val, #_"Box" addedLeaf]
        (let [#_"int" bit (PersistentHashMap'bitpos hash, shift) #_"int" idx (BitmapIndexedNode''index this, bit)]
            (if-not (zero? (& (:bitmap this) bit))
                (let [#_"Object" keyOrNull (aget (:array this) (* 2 idx))
                      #_"Object" valOrNode (aget (:array this) (inc (* 2 idx)))]
                    (cond
                        (nil? keyOrNull)
                            (let [#_"INode" n (.assoc (cast INode valOrNode), edit, (+ shift 5), hash, key, val, addedLeaf)]
                                (when-not (= n valOrNode) => this
                                    (BitmapIndexedNode''editAndSet-4 this, edit, (inc (* 2 idx)), n)
                                )
                            )
                        (Util'equiv-2oo key, keyOrNull)
                            (when-not (= val valOrNode) => this
                                (BitmapIndexedNode''editAndSet-4 this, edit, (inc (* 2 idx)), val)
                            )
                        :else
                            (let [_ (§ set! (:val addedLeaf) addedLeaf)]
                                (BitmapIndexedNode''editAndSet-6 this, edit, (* 2 idx), nil, (inc (* 2 idx)), (BitmapIndexedNode'createNode-7 edit, (+ shift 5), keyOrNull, valOrNode, hash, key, val))
                            )
                    )
                )
                (let [#_"int" n (Integer/bitCount (:bitmap this))]
                    (cond
                        (< (* n 2) (alength (:array this)))
                            (let [_ (§ set! (:val addedLeaf) addedLeaf)
                                  #_"BitmapIndexedNode" e (-> (BitmapIndexedNode''ensureEditable this, edit) (update :bitmap | bit))]
                                (System/arraycopy (:array e), (* 2 idx), (:array e), (* 2 (inc idx)), (* 2 (- n idx)))
                                (aset (:array e) (* 2 idx) key)
                                (aset (:array e) (inc (* 2 idx)) val)
                                e
                            )
                        (<= 16 n)
                            (let [#_"INode[]" nodes (make-array #_"INode" Object 32) #_"int" jdx (PersistentHashMap'mask hash, shift)]
                                (aset nodes jdx (.assoc BitmapIndexedNode'EMPTY, edit, (+ shift 5), hash, key, val, addedLeaf))
                                (loop-when [#_"int" j 0 #_"int" i 0] (< i 32)
                                    (when-not (= (& (>>> (:bitmap this) i) 1) 0) => (recur j (inc i))
                                        (if (some? (aget (:array this) j))
                                            (aset nodes i (.assoc BitmapIndexedNode'EMPTY, edit, (+ shift 5), (PersistentHashMap'hash (aget (:array this) j)), (aget (:array this) j), (aget (:array this) (inc j)), addedLeaf))
                                            (aset nodes i (cast INode (aget (:array this) (inc j))))
                                        )
                                        (recur (+ j 2) (inc i))
                                    )
                                )
                                (ArrayNode'new edit, (inc n), nodes)
                            )
                        :else
                            (let [#_"Object[]" a (make-array Object (* 2 (+ n 4)))]
                                (System/arraycopy (:array this), 0, a, 0, (* 2 idx))
                                (aset a (* 2 idx) key)
                                (§ set! (:val addedLeaf) addedLeaf)
                                (aset a (inc (* 2 idx)) val)
                                (System/arraycopy (:array this), (* 2 idx), a, (* 2 (inc idx)), (* 2 (- n idx)))
                                (-> (BitmapIndexedNode''ensureEditable this, edit)
                                    (assoc :array a)
                                    (update :bitmap | bit)
                                )
                            )
                    )
                )
            )
        )
    )

    #_override
    (defn #_"INode" INode'''dissoc-6--BitmapIndexedNode [#_"BitmapIndexedNode" this, #_"AtomicReference<Thread>" edit, #_"int" shift, #_"int" hash, #_"Object" key, #_"Box" removedLeaf]
        (let-when-not [#_"int" bit (PersistentHashMap'bitpos hash, shift)] (zero? (& (:bitmap this) bit)) => this
            (let [#_"int" i (BitmapIndexedNode''index this, bit) #_"int" ii (* 2 i)
                  #_"Object" keyOrNull (aget (:array this) ii)
                  #_"Object" valOrNode (aget (:array this) (inc ii))]
                (if (some? keyOrNull)
                    (when (Util'equiv-2oo key, keyOrNull) => this
                        (§ set! (:val removedLeaf) removedLeaf)
                        ;; TODO: collapse
                        (BitmapIndexedNode''editAndRemovePair this, edit, bit, i)
                    )
                    (let [#_"INode" n (.dissoc (cast INode valOrNode), edit, (+ shift 5), hash, key, removedLeaf)]
                        (cond
                            (= n valOrNode)
                                this
                            (some? n)
                                (BitmapIndexedNode''editAndSet-4 this, edit, (inc ii), n)
                            (= (:bitmap this) bit)
                                nil
                            :else
                                (BitmapIndexedNode''editAndRemovePair this, edit, bit, i)
                        )
                    )
                )
            )
        )
    )
)

(class-ns HashCollisionNode
    (defn #_"HashCollisionNode" HashCollisionNode'new [#_"AtomicReference<Thread>" edit, #_"int" hash, #_"int" count & #_"Object..." array]
        (hash-map
            #_"AtomicReference<Thread>" :edit edit
            #_"int" :hash hash
            #_"int" :count count
            #_"Object[]" :array array
        )
    )

    #_method
    (defn #_"int" HashCollisionNode''findIndex [#_"HashCollisionNode" this, #_"Object" key]
        (let [#_"int" n (* 2 (:count this))]
            (loop-when [#_"int" i 0] (< i n) => -1
                (if (Util'equiv-2oo key, (aget (:array this) i)) i (recur (+ i 2)))
            )
        )
    )

    #_override
    (defn #_"INode" INode'''assoc-6--HashCollisionNode [#_"HashCollisionNode" this, #_"int" shift, #_"int" hash, #_"Object" key, #_"Object" val, #_"Box" addedLeaf]
        (if (= hash (:hash this))
            (let [#_"int" i (HashCollisionNode''findIndex this, key)]
                (if (<= 0 i)
                    (when-not (= (aget (:array this) (inc i)) val) => this
                        (HashCollisionNode'new nil, hash, (:count this), (PersistentHashMap'cloneAndSet (:array this), (inc i), val))
                    )
                    (let [#_"int" n (:count this) #_"Object[]" a (make-array Object (* 2 (inc n)))]
                        (System/arraycopy (:array this), 0, a, 0, (* 2 n))
                        (aset a (* 2 n) key)
                        (aset a (inc (* 2 n)) val)
                        (§ set! (:val addedLeaf) addedLeaf)
                        (HashCollisionNode'new (:edit this), hash, (inc n), a)
                    )
                )
            )
            ;; nest it in a bitmap node
            (let [#_"BitmapIndexedNode" node (BitmapIndexedNode'new nil, (PersistentHashMap'bitpos (:hash this), shift), (object-array [ nil, this ]))]
                (.assoc node, shift, hash, key, val, addedLeaf)
            )
        )
    )

    #_override
    (defn #_"INode" INode'''dissoc-4--HashCollisionNode [#_"HashCollisionNode" this, #_"int" shift, #_"int" hash, #_"Object" key]
        (let-when [#_"int" i (HashCollisionNode''findIndex this, key)] (<= 0 i) => this
            (let-when [#_"int" n (:count this)] (< 1 n)
                (HashCollisionNode'new nil, hash, (dec n), (PersistentHashMap'removePair (:array this), (/ i 2)))
            )
        )
    )

    #_override
    (defn #_"IMapEntry" INode'''find-4--HashCollisionNode [#_"HashCollisionNode" this, #_"int" shift, #_"int" hash, #_"Object" key]
        (let-when [#_"int" i (HashCollisionNode''findIndex this, key)] (<= 0 i)
            (let-when [#_"Object" ai (aget (:array this) i)] (Util'equiv-2oo key, ai)
                (MapEntry'create ai, (aget (:array this) (inc i)))
            )
        )
    )

    #_override
    (defn #_"Object" INode'''find-5--HashCollisionNode [#_"HashCollisionNode" this, #_"int" shift, #_"int" hash, #_"Object" key, #_"Object" notFound]
        (let-when [#_"int" i (HashCollisionNode''findIndex this, key)] (<= 0 i) => notFound
            (when (Util'equiv-2oo key, (aget (:array this) i)) => notFound
                (aget (:array this) (inc i))
            )
        )
    )

    #_override
    (defn #_"ISeq" INode'''nodeSeq--HashCollisionNode [#_"HashCollisionNode" this]
        (NodeSeq'create-1 (:array this))
    )

    #_override
    (defn #_"Iterator" INode'''iterator--HashCollisionNode [#_"HashCollisionNode" this, #_"IFn" f]
        (NodeIter'new (:array this), f)
    )

    #_override
    (defn #_"Object" INode'''kvreduce--HashCollisionNode [#_"HashCollisionNode" this, #_"IFn" f, #_"Object" r]
        (NodeSeq'kvreduce (:array this), f, r)
    )

    #_override
    (defn #_"Object" INode'''fold--HashCollisionNode [#_"HashCollisionNode" this, #_"IFn" combinef, #_"IFn" reducef, #_"IFn" fjtask, #_"IFn" fjfork, #_"IFn" fjjoin]
        (NodeSeq'kvreduce (:array this), reducef, (.invoke combinef))
    )

    #_method
    (defn- #_"HashCollisionNode" HashCollisionNode''ensureEditable-2 [#_"HashCollisionNode" this, #_"AtomicReference<Thread>" edit]
        (when-not (= (:edit this) edit) => this
            (let [#_"int" n (:count this) #_"Object[]" a (make-array Object (* 2 (inc n)))] ;; make room for next assoc
                (System/arraycopy (:array this), 0, a, 0, (* 2 n))
                (HashCollisionNode'new edit, (:hash this), n, a)
            )
        )
    )

    #_method
    (defn- #_"HashCollisionNode" HashCollisionNode''ensureEditable-4 [#_"HashCollisionNode" this, #_"AtomicReference<Thread>" edit, #_"int" count, #_"Object[]" array]
        (if (= (:edit this) edit)
            (assoc this :array array :count count)
            (HashCollisionNode'new edit, (:hash this), count, array)
        )
    )

    #_method
    (defn- #_"HashCollisionNode" HashCollisionNode''editAndSet-4 [#_"HashCollisionNode" this, #_"AtomicReference<Thread>" edit, #_"int" i, #_"Object" a]
        (let [#_"HashCollisionNode" e (HashCollisionNode''ensureEditable-2 this, edit)]
            (aset (:array e) i a)
            e
        )
    )

    #_method
    (defn- #_"HashCollisionNode" HashCollisionNode''editAndSet-6 [#_"HashCollisionNode" this, #_"AtomicReference<Thread>" edit, #_"int" i, #_"Object" a, #_"int" j, #_"Object" b]
        (let [#_"HashCollisionNode" e (HashCollisionNode''ensureEditable-2 this, edit)]
            (aset (:array e) i a)
            (aset (:array e) j b)
            e
        )
    )

    #_override
    (defn #_"INode" INode'''assoc-7--HashCollisionNode [#_"HashCollisionNode" this, #_"AtomicReference<Thread>" edit, #_"int" shift, #_"int" hash, #_"Object" key, #_"Object" val, #_"Box" addedLeaf]
        (if (= hash (:hash this))
            (let [#_"int" i (HashCollisionNode''findIndex this, key)]
                (if (<= 0 i)
                    (when-not (= (aget (:array this) (inc i)) val) => this
                        (HashCollisionNode''editAndSet-4 this, edit, (inc i), val)
                    )
                    (let [#_"int" n (:count this) #_"int" m (alength (:array this))]
                        (if (< (* 2 n) m)
                            (let [_ (§ set! (:val addedLeaf) addedLeaf)]
                                (-> (HashCollisionNode''editAndSet-6 this, edit, (* 2 n), key, (inc (* 2 n)), val)
                                    (update :count inc)
                                )
                            )
                            (let [#_"Object[]" a (make-array Object (+ m 2))]
                                (System/arraycopy (:array this), 0, a, 0, m)
                                (aset a m key)
                                (aset a (inc m) val)
                                (§ set! (:val addedLeaf) addedLeaf)
                                (HashCollisionNode''ensureEditable-4 this, edit, (inc n), a)
                            )
                        )
                    )
                )
            )
            ;; nest it in a bitmap node
            (let [#_"BitmapIndexedNode" node (BitmapIndexedNode'new edit, (PersistentHashMap'bitpos (:hash this), shift), (object-array [ nil, this, nil, nil ]))]
                (.assoc node, edit, shift, hash, key, val, addedLeaf)
            )
        )
    )

    #_override
    (defn #_"INode" INode'''dissoc-6--HashCollisionNode [#_"HashCollisionNode" this, #_"AtomicReference<Thread>" edit, #_"int" shift, #_"int" hash, #_"Object" key, #_"Box" removedLeaf]
        (let-when [#_"int" i (HashCollisionNode''findIndex this, key)] (<= 0 i) => this
            (§ set! (:val removedLeaf) removedLeaf)
            (let-when [#_"int" n (:count this)] (< 1 n)
                (let [#_"HashCollisionNode" e (-> (HashCollisionNode''ensureEditable-2 this, edit) (update :count dec))
                      #_"int" m (* 2 n)]
                    (aset (:array e) i (aget (:array e) (- m 2)))
                    (aset (:array e) (inc i) (aget (:array e) (- m 1)))
                    (aset (:array e) (- m 2) nil)
                    (aset (:array e) (- m 1) nil)
                    e
                )
            )
        )
    )
)

(class-ns TransientHashMap
    (defn #_"TransientHashMap" TransientHashMap'new
        ([#_"PersistentHashMap" m]
            (TransientHashMap'new (AtomicReference. (Thread/currentThread)), (:root m), (:count m), (:hasNull m), (:nullValue m))
        )
        ([#_"AtomicReference<Thread>" edit, #_"INode" root, #_"int" count, #_"boolean" hasNull, #_"Object" nullValue]
            (merge (ATransientMap'new)
                (hash-map
                    #_"AtomicReference<Thread>" :edit edit
                    #_"INode" :root root
                    #_"int" :count count
                    #_"boolean" :hasNull hasNull
                    #_"Object" :nullValue nullValue

                    #_"Box" :leafFlag (Box'new nil)
                )
            )
        )
    )

    #_override
    (defn #_"ITransientMap" ATransientMap'''doAssoc--TransientHashMap [#_"TransientHashMap" this, #_"Object" key, #_"Object" val]
        (if (nil? key)
            (let [this (if (= (:nullValue this) val) this (assoc this :nullValue val))]
                (when-not (:hasNull this) => this
                    (-> this (update :count inc) (assoc :hasNull true))
                )
            )
            (let [_ (§ set! (:val (:leafFlag this)) nil)
                  #_"INode" n (.assoc (or (:root this) BitmapIndexedNode'EMPTY), (:edit this), 0, (PersistentHashMap'hash key), key, val, (:leafFlag this))
                  this (if (= (:root this) n) this (assoc this :root n))]
                (when (some? (:val (:leafFlag this))) => this
                    (update this :count inc)
                )
            )
        )
    )

    #_override
    (defn #_"ITransientMap" ATransientMap'''doDissoc--TransientHashMap [#_"TransientHashMap" this, #_"Object" key]
        (if (nil? key)
            (when (:hasNull this) => this
                (-> this (assoc :hasNull false :nullValue nil) (update :count dec))
            )
            (when (some? (:root this)) => this
                (let [_ (§ set! (:val (:leafFlag this)) nil)
                      #_"INode" n (.dissoc (:root this), (:edit this), 0, (PersistentHashMap'hash key), key, (:leafFlag this))
                      this (if (= (:root this) n) this (assoc this :root n))]
                    (when (some? (:val (:leafFlag this))) => this
                        (update this :count dec)
                    )
                )
            )
        )
    )

    (declare PersistentHashMap'new)

    #_override
    (defn #_"IPersistentMap" ATransientMap'''doPersistent--TransientHashMap [#_"TransientHashMap" this]
        (.set (:edit this), nil)
        (PersistentHashMap'new (:count this), (:root this), (:hasNull this), (:nullValue this))
    )

    #_override
    (defn #_"Object" ATransientMap'''doValAt--TransientHashMap [#_"TransientHashMap" this, #_"Object" key, #_"Object" notFound]
        (if (nil? key)
            (when (:hasNull this) => notFound
                (:nullValue this)
            )
            (when (some? (:root this)) => notFound
                (.find (:root this), 0, (PersistentHashMap'hash key), key, notFound)
            )
        )
    )

    #_override
    (defn #_"int" ATransientMap'''doCount--TransientHashMap [#_"TransientHashMap" this]
        (:count this)
    )

    #_override
    (defn #_"void" ATransientMap'''ensureEditable--TransientHashMap [#_"TransientHashMap" this]
        (when (nil? (.get (:edit this)))
            (throw (IllegalAccessError. "Transient used after persistent! call"))
        )
        nil
    )
)

;;;
 ; A persistent rendition of Phil Bagwell's Hash Array Mapped Trie.
 ;
 ; Uses path copying for persistence,
 ; hash collision leaves vs. extended hashing,
 ; node polymorphism vs. conditionals,
 ; no sub-tree pools or root-resizing.
 ;
 ; Any errors are my own.
 ;;
(class-ns PersistentHashMap
    (def- #_"Object" PersistentHashMap'NOT_FOUND (Object.))

    (defn #_"PersistentHashMap" PersistentHashMap'new
        ([#_"int" count, #_"INode" root, #_"boolean" hasNull, #_"Object" nullValue] (PersistentHashMap'new nil, count, root, hasNull, nullValue))
        ([#_"IPersistentMap" meta, #_"int" count, #_"INode" root, #_"boolean" hasNull, #_"Object" nullValue]
            (merge (APersistentMap'new)
                (hash-map
                    #_"IPersistentMap" :_meta meta
                    #_"int" :count count
                    #_"INode" :root root
                    #_"boolean" :hasNull hasNull
                    #_"Object" :nullValue nullValue
                )
            )
        )
    )

    (def #_"PersistentHashMap" PersistentHashMap'EMPTY (PersistentHashMap'new 0, nil, false, nil))

    (defn #_"IPersistentMap" PersistentHashMap'create-1m [#_"Map" other]
        (loop-when [#_"ITransientMap" m (transient PersistentHashMap'EMPTY) #_"ISeq" s (seq other)] (some? s) => (persistent! m)
            (let [#_"Map$Entry" e (first s)]
                (recur (assoc m (key e) (val e)) (next s))
            )
        )
    )

    (defn #_"PersistentHashMap" PersistentHashMap'create-1a [& #_"Object..." a]
        (loop-when-recur [#_"ITransientMap" m (transient PersistentHashMap'EMPTY) #_"int" i 0]
                         (< i (alength a))
                         [(assoc m (aget a i) (aget a (inc i))) (+ i 2)]
                      => (persistent! m)
        )
    )

    (defn #_"PersistentHashMap" PersistentHashMap'createWithCheck-1a [& #_"Object..." a]
        (let [#_"ITransientMap" m (transient PersistentHashMap'EMPTY)
              m (loop-when [m m #_"int" i 0] (< i (alength a)) => m
                    (let [m (assoc m (aget a i) (aget a (inc i)))]
                        (when (= (count m) (inc (/ i 2))) => (throw! (str "duplicate key: " (aget a i)))
                            (recur m (+ i 2))
                        )
                    )
                )]
            (persistent! m)
        )
    )

    (defn #_"PersistentHashMap" PersistentHashMap'create-1s [#_"ISeq" s]
        (let [#_"ITransientMap" m (transient PersistentHashMap'EMPTY)
              m (loop-when [m m s s] (some? s) => m
                    (when (some? (next s)) => (throw! (str "no value supplied for key: " (first s)))
                        (recur (assoc m (first s) (second s)) (next (next s)))
                    )
                )]
            (persistent! m)
        )
    )

    (defn #_"PersistentHashMap" PersistentHashMap'createWithCheck-1s [#_"ISeq" s]
        (let [#_"ITransientMap" m (transient PersistentHashMap'EMPTY)
              m (loop-when [m m s s #_"int" i 0] (some? s) => m
                    (when (some? (next s)) => (throw! (str "no value supplied for key: " (first s)))
                        (let [m (assoc m (first s) (second s))]
                            (when (= (count m) (inc i)) => (throw! (str "duplicate key: " (first s)))
                                (recur m (next (next s)) (inc i))
                            )
                        )
                    )
                )]
            (persistent! m)
        )
    )

    (defn #_"PersistentHashMap" PersistentHashMap'create-2 [#_"IPersistentMap" meta & #_"Object..." init]
        (-> (PersistentHashMap'create-1a init) (with-meta meta))
    )

    #_override
    (defn #_"boolean" Associative'''containsKey--PersistentHashMap [#_"PersistentHashMap" this, #_"Object" key]
        (if (nil? key)
            (:hasNull this)
            (and (some? (:root this))
                 (not= (.find (:root this), 0, (PersistentHashMap'hash key), key, PersistentHashMap'NOT_FOUND) PersistentHashMap'NOT_FOUND)
            )
        )
    )

    #_override
    (defn #_"IMapEntry" Associative'''entryAt--PersistentHashMap [#_"PersistentHashMap" this, #_"Object" key]
        (if (nil? key)
            (when (:hasNull this) (MapEntry'create nil, (:nullValue this)))
            (when (some? (:root this)) (.find (:root this), 0, (PersistentHashMap'hash key), key))
        )
    )

    #_override
    (defn #_"IPersistentMap" IPersistentMap'''assoc--PersistentHashMap [#_"PersistentHashMap" this, #_"Object" key, #_"Object" val]
        (if (nil? key)
            (when-not (and (:hasNull this) (= val (:nullValue this))) => this
                (PersistentHashMap'new (meta this), (+ (:count this) (if (:hasNull this) 0 1)), (:root this), true, val)
            )
            (let [#_"Box" addedLeaf (Box'new nil)
                  #_"INode" newroot (.assoc (or (:root this) BitmapIndexedNode'EMPTY), 0, (PersistentHashMap'hash key), key, val, addedLeaf)]
                (when-not (= newroot (:root this)) => this
                    (PersistentHashMap'new (meta this), (+ (:count this) (if (some? (:val addedLeaf)) 1 0)), newroot, (:hasNull this), (:nullValue this))
                )
            )
        )
    )

    #_override
    (defn #_"Object" ILookup'''valAt-2--PersistentHashMap [#_"PersistentHashMap" this, #_"Object" key]
        (.valAt this, key, nil)
    )

    #_override
    (defn #_"Object" ILookup'''valAt-3--PersistentHashMap [#_"PersistentHashMap" this, #_"Object" key, #_"Object" notFound]
        (if (nil? key)
            (if (:hasNull this) (:nullValue this) notFound)
            (if (some? (:root this)) (.find (:root this), 0, (PersistentHashMap'hash key), key, notFound) notFound)
        )
    )

    #_override
    (defn #_"IPersistentMap" IPersistentMap'''dissoc--PersistentHashMap [#_"PersistentHashMap" this, #_"Object" key]
        (cond
            (nil? key)
                (if (:hasNull this) (PersistentHashMap'new (meta this), (dec (:count this)), (:root this), false, nil) this)
            (nil? (:root this))
                this
            :else
                (let [#_"INode" newroot (.dissoc (:root this), 0, (PersistentHashMap'hash key), key)]
                    (when-not (= newroot (:root this)) => this
                        (PersistentHashMap'new (meta this), (dec (:count this)), newroot, (:hasNull this), (:nullValue this))
                    )
                )
        )
    )

    (def #_"Iterator" PersistentHashMap'EMPTY_ITER
        (reify Iterator
            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                false
            )

            #_foreign
            (#_"Object" next [#_"Iterator" _self]
                (throw (NoSuchElementException.))
            )
        )
    )

    #_method
    (defn- #_"Iterator" PersistentHashMap''iterator [#_"PersistentHashMap" this, #_"IFn" f]
        (let-when [#_"Iterator" it (if (some? (:root this)) (.iterator (:root this), f) PersistentHashMap'EMPTY_ITER)] (:hasNull this) => it
            (§ reify Iterator
                [#_mutable #_"boolean" seen false]

                #_foreign
                (#_"boolean" hasNext [#_"Iterator" _self]
                    (or (not seen) (.hasNext it))
                )

                #_foreign
                (#_"Object" next [#_"Iterator" _self]
                    (when (not seen) => (.next it)
                        (set! seen true)
                        (.invoke f, nil, (:nullValue this))
                    )
                )
            )
        )
    )

    #_foreign
    (defn #_"Iterator" iterator---PersistentHashMap [#_"PersistentHashMap" this]
        (PersistentHashMap''iterator this, APersistentMap'MAKE_ENTRY)
    )

    #_override
    (defn #_"Iterator" IMapIterable'''keyIterator--PersistentHashMap [#_"PersistentHashMap" this]
        (PersistentHashMap''iterator this, APersistentMap'MAKE_KEY)
    )

    #_override
    (defn #_"Iterator" IMapIterable'''valIterator--PersistentHashMap [#_"PersistentHashMap" this]
        (PersistentHashMap''iterator this, APersistentMap'MAKE_VAL)
    )

    #_override
    (defn #_"Object" IKVReduce'''kvreduce--PersistentHashMap [#_"PersistentHashMap" this, #_"IFn" f, #_"Object" r]
        (let [r (if (:hasNull this) (.invoke f, r, nil, (:nullValue this)) r)]
            (when-not (reduced? r) => (deref r)
                (when (some? (:root this)) => r
                    (let [r (.kvreduce (:root this), f, r)]
                        (when-not (reduced? r) => (deref r)
                            r
                        )
                    )
                )
            )
        )
    )

    #_method
    (defn #_"Object" PersistentHashMap''fold [#_"PersistentHashMap" this, #_"long" n, #_"IFn" combinef, #_"IFn" reducef, #_"IFn" fjinvoke, #_"IFn" fjtask, #_"IFn" fjfork, #_"IFn" fjjoin]
        ;; we are ignoring n for now
        (.invoke fjinvoke,
            #(let [_ (.invoke combinef)
                  _ (if (some? (:root this)) (.invoke combinef, _, (.fold (:root this), combinef, reducef, fjtask, fjfork, fjjoin)) _)
                  _ (if (:hasNull this) (.invoke combinef, _, (.invoke reducef, (.invoke combinef), nil, (:nullValue this))) _)]
                _
            )
        )
    )

    #_override
    (defn #_"int" Counted'''count--PersistentHashMap [#_"PersistentHashMap" this]
        (:count this)
    )

    #_override
    (defn #_"ISeq" Seqable'''seq--PersistentHashMap [#_"PersistentHashMap" this]
        (let [#_"ISeq" s (when (some? (:root this)) (.nodeSeq (:root this)))]
            (if (:hasNull this) (Cons'new (MapEntry'create nil, (:nullValue this)), s) s)
        )
    )

    #_override
    (defn #_"IPersistentCollection" IPersistentCollection'''empty--PersistentHashMap [#_"PersistentHashMap" this]
        (with-meta PersistentHashMap'EMPTY (meta this))
    )

    #_override
    (defn #_"PersistentHashMap" IObj'''withMeta--PersistentHashMap [#_"PersistentHashMap" this, #_"IPersistentMap" meta]
        (PersistentHashMap'new meta, (:count this), (:root this), (:hasNull this), (:nullValue this))
    )

    #_override
    (defn #_"TransientHashMap" IEditableCollection'''asTransient--PersistentHashMap [#_"PersistentHashMap" this]
        (TransientHashMap'new this)
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--PersistentHashMap [#_"PersistentHashMap" this]
        (:_meta this)
    )
)
)

(java-ns cloiure.lang.PersistentHashSet

(class-ns TransientHashSet
    (defn #_"TransientHashSet" TransientHashSet'new [#_"ITransientMap" impl]
        (ATransientSet'new impl)
    )

    (declare PersistentHashSet'new)

    #_override
    (defn #_"IPersistentCollection" ITransientCollection'''persistent--TransientHashSet [#_"TransientHashSet" this]
        (PersistentHashSet'new nil, (persistent! (:impl this)))
    )
)

(class-ns PersistentHashSet
    (defn #_"PersistentHashSet" PersistentHashSet'new [#_"IPersistentMap" meta, #_"IPersistentMap" impl]
        (merge (APersistentSet'new impl)
            (hash-map
                #_"IPersistentMap" :_meta meta
            )
        )
    )

    (def #_"PersistentHashSet" PersistentHashSet'EMPTY (PersistentHashSet'new nil, PersistentHashMap'EMPTY))

    (defn #_"PersistentHashSet" PersistentHashSet'create-1a [& #_"Object..." items]
        (loop-when-recur [#_"ITransientSet" s (transient PersistentHashSet'EMPTY) #_"int" i 0]
                         (< i (alength items))
                         [(conj! s (aget items i)) (inc i)]
                      => (persistent! s)
        )
    )

    (defn #_"PersistentHashSet" PersistentHashSet'create-1l [#_"List" items]
        (let [#_"Iterator" it (.iterator items)]
            (loop-when-recur [#_"ITransientSet" s (transient PersistentHashSet'EMPTY)]
                             (.hasNext it)
                             [(conj! s (.next it))]
                          => (persistent! s)
            )
        )
    )

    (defn #_"PersistentHashSet" PersistentHashSet'create-1s [#_"ISeq" items]
        (loop-when-recur [#_"ITransientSet" s (transient PersistentHashSet'EMPTY) items items]
                         (some? items)
                         [(conj! s (first items)) (next items)]
                      => (persistent! s)
        )
    )

    (defn #_"PersistentHashSet" PersistentHashSet'createWithCheck-1a [& #_"Object..." items]
        (let [#_"ITransientSet" s (transient PersistentHashSet'EMPTY)
              s (loop-when [s s #_"int" i 0] (< i (alength items)) => s
                    (let [s (conj! s (aget items i))]
                        (when (= (count s) (inc i)) => (throw! (str "duplicate key: " (aget items i)))
                            (recur s (inc i))
                        )
                    )
                )]
            (persistent! s)
        )
    )

    (defn #_"PersistentHashSet" PersistentHashSet'createWithCheck-1i [#_"Iterable" items]
        (let [#_"Iterator" it (.iterator items)
              #_"ITransientSet" s (transient PersistentHashSet'EMPTY)
              s (loop-when [s s #_"int" i 0] (.hasNext it) => s
                    (let [#_"Object" key (.next it) s (conj! s key)]
                        (when (= (count s) (inc i)) => (throw! (str "duplicate key: " key))
                            (recur s (inc i))
                        )
                    )
                )]
            (persistent! s)
        )
    )

    (defn #_"PersistentHashSet" PersistentHashSet'createWithCheck-1s [#_"ISeq" items]
        (let [#_"ITransientSet" s (transient PersistentHashSet'EMPTY)
              s (loop-when [s s items items #_"int" i 0] (some? items) => s
                    (let [s (conj! s (first items))]
                        (when (= (count s) (inc i)) => (throw! (str "duplicate key: " (first items)))
                            (recur s (next items) (inc i))
                        )
                    )
                )]
            (persistent! s)
        )
    )

    #_override
    (defn #_"IPersistentSet" IPersistentSet'''disj--PersistentHashSet [#_"PersistentHashSet" this, #_"Object" key]
        (if (contains? this key)
            (PersistentHashSet'new (meta this), (dissoc (:impl this) key))
            this
        )
    )

    #_override
    (defn #_"IPersistentSet" IPersistentCollection'''conj--PersistentHashSet [#_"PersistentHashSet" this, #_"Object" o]
        (if (contains? this o)
            this
            (PersistentHashSet'new (meta this), (assoc (:impl this) o o))
        )
    )

    #_override
    (defn #_"IPersistentCollection" IPersistentCollection'''empty--PersistentHashSet [#_"PersistentHashSet" this]
        (with-meta PersistentHashSet'EMPTY (meta this))
    )

    #_override
    (defn #_"PersistentHashSet" IObj'''withMeta--PersistentHashSet [#_"PersistentHashSet" this, #_"IPersistentMap" meta]
        (PersistentHashSet'new meta, (:impl this))
    )

    #_override
    (defn #_"ITransientCollection" IEditableCollection'''asTransient--PersistentHashSet [#_"PersistentHashSet" this]
        (TransientHashSet'new (transient (:impl this)))
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--PersistentHashSet [#_"PersistentHashSet" this]
        (:_meta this)
    )
)
)

(java-ns cloiure.lang.PersistentList

(class-ns Primordial
    (defn #_"Primordial" Primordial'new []
        (RestFn'new)
    )

    #_override
    (defn #_"int" RestFn'''getRequiredArity--Primordial [#_"Primordial" this]
        0
    )

    (declare PersistentList'EMPTY)
    (declare PersistentList'create)

    #_override
    (defn #_"Object" RestFn'''doInvoke-2--Primordial [#_"Primordial" this, #_"Object" args]
        (if (instance? ArraySeq args)
            (let [#_"Object[]" a (:array args) #_"int" i0 (:i args)]
                (loop-when-recur [#_"IPersistentList" l PersistentList'EMPTY #_"int" i (dec (alength a))]
                                 (<= i0 i)
                                 [(conj l (aget a i)) (dec i)]
                              => l
                )
            )
            (PersistentList'create (RT'seqToArray (seq args)))
        )
    )

    (defn #_"Object" Primordial'invokeStatic [#_"ISeq" args]
        (if (instance? ArraySeq args)
            (let [#_"Object[]" a (:array args)]
                (loop-when-recur [#_"IPersistentList" l PersistentList'EMPTY #_"int" i (dec (alength a))]
                                 (<= 0 i)
                                 [(conj l (aget a i)) (dec i)]
                              => l
                )
            )
            (PersistentList'create (RT'seqToArray (seq args)))
        )
    )

    #_override
    (defn #_"Primordial" IObj'''withMeta--Primordial [#_"Primordial" this, #_"IPersistentMap" meta]
        (throw! "unsupported operation")
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--Primordial [#_"Primordial" this]
        nil
    )
)

(class-ns EmptyList
    (def #_"int" EmptyList'HASHEQ (§ soon Murmur3'hashOrdered Collections/EMPTY_LIST))

    (defn #_"EmptyList" EmptyList'new [#_"IPersistentMap" meta]
        (hash-map
            #_"IPersistentMap" :_meta meta
        )
    )

    #_foreign
    (defn #_"int" hashCode---EmptyList [#_"EmptyList" this]
        1
    )

    #_method
    (defn #_"int" EmptyList'hasheq [#_"EmptyList" this]
        EmptyList'HASHEQ
    )

    #_foreign
    (defn #_"String" toString---EmptyList [#_"EmptyList" this]
        "()"
    )

    #_foreign
    (defn #_"boolean" equals---EmptyList [#_"EmptyList" this, #_"Object" that]
        (and (or (instance? Sequential that) (instance? List that)) (nil? (seq that)))
    )

    #_override
    (defn #_"boolean" IPersistentCollection'''equiv--EmptyList [#_"EmptyList" this, #_"Object" that]
        (.equals this, that)
    )

    #_override
    (defn #_"Object" ISeq'''first--EmptyList [#_"EmptyList" this]
        nil
    )

    #_override
    (defn #_"ISeq" ISeq'''next--EmptyList [#_"EmptyList" this]
        nil
    )

    #_override
    (defn #_"ISeq" ISeq'''rest--EmptyList [#_"EmptyList" this]
        this
    )

    (declare PersistentList'new)

    #_override
    (defn #_"PersistentList" IPersistentCollection'''conj--EmptyList [#_"EmptyList" this, #_"Object" o]
        (PersistentList'new (meta this), o, nil, 1)
    )

    #_override
    (defn #_"IPersistentCollection" IPersistentCollection'''empty--EmptyList [#_"EmptyList" this]
        this
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--EmptyList [#_"EmptyList" this]
        (:_meta this)
    )

    #_override
    (defn #_"EmptyList" IObj'''withMeta--EmptyList [#_"EmptyList" this, #_"IPersistentMap" meta]
        (when-not (= meta (meta this)) => this
            (EmptyList'new meta)
        )
    )

    #_override
    (defn #_"Object" IPersistentStack'''peek--EmptyList [#_"EmptyList" this]
        nil
    )

    #_override
    (defn #_"IPersistentList" IPersistentStack'''pop--EmptyList [#_"EmptyList" this]
        (throw! "can't pop empty list")
    )

    #_override
    (defn #_"int" Counted'''count--EmptyList [#_"EmptyList" this]
        0
    )

    #_override
    (defn #_"ISeq" Seqable'''seq--EmptyList [#_"EmptyList" this]
        nil
    )

    #_foreign
    (defn #_"int" size---EmptyList [#_"EmptyList" this]
        0
    )

    #_foreign
    (defn #_"boolean" contains---EmptyList [#_"EmptyList" this, #_"Object" o]
        false
    )

    #_foreign
    (defn #_"Iterator" iterator---EmptyList [#_"EmptyList" this]
        (reify Iterator
            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                false
            )

            #_foreign
            (#_"Object" next [#_"Iterator" _self]
                (throw (NoSuchElementException.))
            )
        )
    )

    #_foreign
    (defn #_"Object[]" toArray---EmptyList [#_"EmptyList" this]
        (make-array Object 0)
    )

    #_foreign
    (defn #_"Object[]" toArray---EmptyList [#_"EmptyList" this, #_"Object[]" objects]
        (when (pos? (alength objects))
            (aset objects 0 nil)
        )
        objects
    )

    #_foreign
    (defn #_"Object" get---EmptyList [#_"EmptyList" this, #_"int" index]
        (nth this index)
    )
)

(class-ns PersistentList
    (def #_"IFn" PersistentList'creator (§ soon Primordial'new))

    (def #_"EmptyList" PersistentList'EMPTY (§ soon EmptyList'new nil))

    (defn #_"PersistentList" PersistentList'new
        ([#_"Object" _first] (PersistentList'new nil, _first, nil, 1))
        ([#_"IPersistentMap" meta, #_"Object" _first, #_"IPersistentList" _rest, #_"int" _count]
            (merge (ASeq'new meta)
                (hash-map
                    #_"Object" :_first _first
                    #_"IPersistentList" :_rest _rest
                    #_"int" :_count _count
                )
            )
        )
    )

    (defn #_"IPersistentList" PersistentList'create [#_"Object[]" a]
        (loop-when-recur [#_"IPersistentList" l PersistentList'EMPTY #_"int" i (dec (alength a))]
                         (<= 0 i)
                         [(conj l (aget a i)) (dec i)]
                      => l
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--PersistentList [#_"PersistentList" this]
        (:_first this)
    )

    #_override
    (defn #_"ISeq" ISeq'''next--PersistentList [#_"PersistentList" this]
        (when-not (= (:_count this) 1)
            (:_rest this)
        )
    )

    #_override
    (defn #_"Object" IPersistentStack'''peek--PersistentList [#_"PersistentList" this]
        (first this)
    )

    #_override
    (defn #_"IPersistentList" IPersistentStack'''pop--PersistentList [#_"PersistentList" this]
        (or (:_rest this) (with-meta PersistentList'EMPTY (:_meta this)))
    )

    #_override
    (defn #_"int" Counted'''count--PersistentList [#_"PersistentList" this]
        (:_count this)
    )

    #_override
    (defn #_"PersistentList" IPersistentCollection'''conj--PersistentList [#_"PersistentList" this, #_"Object" o]
        (PersistentList'new (meta this), o, this, (inc (:_count this)))
    )

    #_override
    (defn #_"IPersistentCollection" IPersistentCollection'''empty--PersistentList [#_"PersistentList" this]
        (with-meta PersistentList'EMPTY (meta this))
    )

    #_override
    (defn #_"PersistentList" IObj'''withMeta--PersistentList [#_"PersistentList" this, #_"IPersistentMap" meta]
        (when-not (= meta (:_meta this)) => this
            (PersistentList'new meta, (:_first this), (:_rest this), (:_count this))
        )
    )

    #_override
    (defn #_"Object" IReduce'''reduce--PersistentList [#_"PersistentList" this, #_"IFn" f]
        (loop-when [#_"Object" r (first this) #_"ISeq" s (next this)] (some? s) => r
            (let [r (.invoke f, r, (first s))]
                (if (reduced? r) (deref r) (recur r (next s)))
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--PersistentList [#_"PersistentList" this, #_"IFn" f, #_"Object" r]
        (loop-when [r (.invoke f, r, (first this)) #_"ISeq" s (next this)] (some? s) => (if (reduced? r) (deref r) r)
            (if (reduced? r) (deref r) (recur (.invoke f, r, (first s)) (next s)))
        )
    )
)
)

(java-ns cloiure.lang.PersistentQueue

(class-ns QSeq
    (defn #_"QSeq" QSeq'new
        ([#_"ISeq" f, #_"ISeq" rseq] (QSeq'new nil, f, rseq))
        ([#_"IPersistentMap" meta, #_"ISeq" f, #_"ISeq" rseq]
            (merge (ASeq'new meta)
                (hash-map
                    #_"ISeq" :f f
                    #_"ISeq" :rseq rseq
                )
            )
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--QSeq [#_"QSeq" this]
        (first (:f this))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--QSeq [#_"QSeq" this]
        (let [#_"ISeq" f (next (:f this)) #_"ISeq" r (:rseq this)]
            (cond
                (some? f) (QSeq'new f, r)
                (some? r) (QSeq'new r, nil)
            )
        )
    )

    #_override
    (defn #_"int" Counted'''count--QSeq [#_"QSeq" this]
        (+ (count (:f this)) (count (:rseq this)))
    )

    #_override
    (defn #_"QSeq" IObj'''withMeta--QSeq [#_"QSeq" this, #_"IPersistentMap" meta]
        (QSeq'new meta, (:f this), (:rseq this))
    )
)

;;;
 ; conses onto rear, peeks/pops from front
 ;
 ; See Okasaki's Batched Queues.
 ; Differs in that, it uses a PersistentVector as the rear, which is in-order,
 ; so no reversing or suspensions required for persistent use.
 ;;
(class-ns PersistentQueue
    (defn #_"PersistentQueue" PersistentQueue'new [#_"IPersistentMap" meta, #_"int" cnt, #_"ISeq" f, #_"PersistentVector" r]
        (hash-map
            #_"IPersistentMap" :_meta meta
            #_"int" :cnt cnt
            #_"ISeq" :f f
            #_"PersistentVector" :r r

            #_mutable #_"int" :_hash 0
            #_mutable #_"int" :_hasheq 0
        )
    )

    (def #_"PersistentQueue" PersistentQueue'EMPTY (PersistentQueue'new nil, 0, nil, nil))

    #_override
    (defn #_"boolean" IPersistentCollection'''equiv--PersistentQueue [#_"PersistentQueue" this, #_"Object" that]
        (and (instance? Sequential that)
            (loop-when [#_"ISeq" s (seq this) #_"ISeq" ms (seq that)] (some? s) => (nil? ms)
                (and (some? ms) (Util'equiv-2oo (first s), (first ms))
                    (recur (next s) (next ms))
                )
            )
        )
    )

    #_foreign
    (defn #_"boolean" equals---PersistentQueue [#_"PersistentQueue" this, #_"Object" that]
        (and (instance? Sequential that)
            (loop-when [#_"ISeq" s (seq this) #_"ISeq" ms (seq that)] (some? s) => (nil? ms)
                (and (some? ms) (Util'equals (first s), (first ms))
                    (recur (next s) (next ms))
                )
            )
        )
    )

    #_foreign
    (defn #_"int" hashCode---PersistentQueue [#_"PersistentQueue" this]
        (let-when [#_"int" hash (:_hash this)] (zero? hash) => hash
            (loop-when [hash 1 #_"ISeq" s (seq this)] (some? s) => (§ set! (:_hash this) hash)
                (recur (+ (* 31 hash) (if (some? (first s)) (.hashCode (first s)) 0)) (next s))
            )
        )
    )

    #_override
    (defn #_"int" IHashEq'''hasheq--PersistentQueue [#_"PersistentQueue" this]
        (let-when [#_"int" cached (:_hasheq this)] (zero? cached) => cached
            (§ set! (:_hasheq this) (Murmur3'hashOrdered this))
        )
    )

    #_override
    (defn #_"Object" IPersistentStack'''peek--PersistentQueue [#_"PersistentQueue" this]
        (first (:f this))
    )

    #_override
    (defn #_"PersistentQueue" IPersistentStack'''pop--PersistentQueue [#_"PersistentQueue" this]
        (when (some? (:f this)) => this ;; hmmm... pop of empty queue -> empty queue?
            (let [#_"ISeq" f (next (:f this)) #_"PersistentVector" r (:r this)
                  [f r]
                    (when (nil? f) => [f r]
                        [(seq r) nil]
                    )]
                (PersistentQueue'new (meta this), (dec (:cnt this)), f, r)
            )
        )
    )

    #_override
    (defn #_"int" Counted'''count--PersistentQueue [#_"PersistentQueue" this]
        (:cnt this)
    )

    #_override
    (defn #_"ISeq" Seqable'''seq--PersistentQueue [#_"PersistentQueue" this]
        (when (some? (:f this))
            (QSeq'new (:f this), (seq (:r this)))
        )
    )

    #_override
    (defn #_"PersistentQueue" IPersistentCollection'''conj--PersistentQueue [#_"PersistentQueue" this, #_"Object" o]
        (let [[#_"ISeq" f #_"PersistentVector" r]
                (if (nil? (:f this)) ;; empty
                    [(list o) nil]
                    [(:f this) (conj (or (:r this) []) o)]
                )]
            (PersistentQueue'new (meta this), (inc (:cnt this)), f, r)
        )
    )

    #_override
    (defn #_"IPersistentCollection" IPersistentCollection'''empty--PersistentQueue [#_"PersistentQueue" this]
        (with-meta PersistentQueue'EMPTY (meta this))
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--PersistentQueue [#_"PersistentQueue" this]
        (:_meta this)
    )

    #_override
    (defn #_"PersistentQueue" IObj'''withMeta--PersistentQueue [#_"PersistentQueue" this, #_"IPersistentMap" meta]
        (PersistentQueue'new meta, (:cnt this), (:f this), (:r this))
    )

    #_foreign
    (defn #_"Object[]" toArray---PersistentQueue [#_"PersistentQueue" this]
        (RT'seqToArray (seq this))
    )

    #_foreign
    (defn #_"Object[]" toArray---PersistentQueue [#_"PersistentQueue" this, #_"Object[]" a]
        (RT'seqToPassedArray (seq this), a)
    )

    #_foreign
    (defn #_"int" size---PersistentQueue [#_"PersistentQueue" this]
        (count this)
    )

    #_foreign
    (defn #_"boolean" contains---PersistentQueue [#_"PersistentQueue" this, #_"Object" o]
        (loop-when [#_"ISeq" s (seq this)] (some? s) => false
            (or (Util'equiv-2oo (first s), o) (recur (next s)))
        )
    )

    #_foreign
    (defn #_"Iterator" iterator---PersistentQueue [#_"PersistentQueue" this]
        (let [#_"Iterator" it (when (some? (:r this)) (.iterator (:r this)))]
            (§ reify Iterator
                [#_mutable #_"ISeq" s (:f this)]

                #_foreign
                (#_"boolean" hasNext [#_"Iterator" _self]
                    (or (and (some? s) (some? (seq s))) (and (some? it) (.hasNext it)))
                )

                #_foreign
                (#_"Object" next [#_"Iterator" _self]
                    (if (some? s)
                        (let [_ (first s)]
                            (update! s next)
                            _
                        )
                        (when (and (some? it) (.hasNext it)) => (throw (NoSuchElementException.))
                            (.next it)
                        )
                    )
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.PersistentTreeMap

(class-ns TNode
    (defn #_"TNode" TNode'new [#_"Object" key]
        (merge (AMapEntry'new)
            (hash-map
                #_"Object" :key key
            )
        )
    )

    #_override
    (defn #_"Object" IMapEntry'''key--TNode [#_"TNode" this]
        (:key this)
    )

    #_override
    (defn #_"Object" IMapEntry'''val--TNode [#_"TNode" this]
        nil
    )

    #_foreign
    (defn #_"Object" getKey---TNode [#_"TNode" this]
        (.key this)
    )

    #_foreign
    (defn #_"Object" getValue---TNode [#_"TNode" this]
        (.val this)
    )

    #_override
    (defn #_"TNode" TNode'''left--TNode [#_"TNode" this]
        nil
    )

    #_override
    (defn #_"TNode" TNode'''right--TNode [#_"TNode" this]
        nil
    )

    (declare PersistentTreeMap'black)

    #_override
    (defn #_"TNode" TNode'''balanceLeft--TNode [#_"TNode" this, #_"TNode" parent]
        (PersistentTreeMap'black (:key parent), (.val parent), this, (.right parent))
    )

    #_override
    (defn #_"TNode" TNode'''balanceRight--TNode [#_"TNode" this, #_"TNode" parent]
        (PersistentTreeMap'black (:key parent), (.val parent), (.left parent), this)
    )

    #_override
    (defn #_"Object" IKVReduce'''kvreduce--TNode [#_"TNode" this, #_"IFn" f, #_"Object" r]
        (or
            (when (some? (.left this))
                (let [r (.kvreduce (.left this), f, r)]
                    (when (reduced? r)
                        r
                    )
                )
            )
            (let [r (.invoke f, r, (.key this), (.val this))]
                (cond
                    (reduced? r)          r
                    (some? (.right this)) (.kvreduce (.right this), f, r)
                    :else                 r
                )
            )
        )
    )
)

(class-ns Black
    (defn #_"Black" Black'new [#_"Object" key]
        (TNode'new key)
    )

    #_override
    (defn #_"TNode" TNode'''addLeft--Black [#_"Black" this, #_"TNode" ins]
        (.balanceLeft ins, this)
    )

    #_override
    (defn #_"TNode" TNode'''addRight--Black [#_"Black" this, #_"TNode" ins]
        (.balanceRight ins, this)
    )

    (declare PersistentTreeMap'balanceLeftDel)

    #_override
    (defn #_"TNode" TNode'''removeLeft--Black [#_"Black" this, #_"TNode" del]
        (PersistentTreeMap'balanceLeftDel (:key this), (.val this), del, (.right this))
    )

    (declare PersistentTreeMap'balanceRightDel)

    #_override
    (defn #_"TNode" TNode'''removeRight--Black [#_"Black" this, #_"TNode" del]
        (PersistentTreeMap'balanceRightDel (:key this), (.val this), (.left this), del)
    )

    #_override
    (defn #_"TNode" TNode'''blacken--Black [#_"Black" this]
        this
    )

    (declare Red'new)

    #_override
    (defn #_"TNode" TNode'''redden--Black [#_"Black" this]
        (Red'new (:key this))
    )

    #_override
    (defn #_"TNode" TNode'''replace--Black [#_"Black" this, #_"Object" key, #_"Object" val, #_"TNode" left, #_"TNode" right]
        (PersistentTreeMap'black key, val, left, right)
    )
)

(class-ns BlackVal
    (defn #_"BlackVal" BlackVal'new [#_"Object" key, #_"Object" val]
        (merge (Black'new key)
            (hash-map
                #_"Object" :val val
            )
        )
    )

    #_override
    (defn #_"Object" IMapEntry'''val--BlackVal [#_"BlackVal" this]
        (:val this)
    )

    (declare RedVal'new)

    #_override
    (defn #_"TNode" TNode'''redden--BlackVal [#_"BlackVal" this]
        (RedVal'new (:key this), (:val this))
    )
)

(class-ns BlackBranch
    (defn #_"BlackBranch" BlackBranch'new [#_"Object" key, #_"TNode" left, #_"TNode" right]
        (merge (Black'new key)
            (hash-map
                #_"TNode" :left left
                #_"TNode" :right right
            )
        )
    )

    #_override
    (defn #_"TNode" TNode'''left--BlackBranch [#_"BlackBranch" this]
        (:left this)
    )

    #_override
    (defn #_"TNode" TNode'''right--BlackBranch [#_"BlackBranch" this]
        (:right this)
    )

    (declare RedBranch'new)

    #_override
    (defn #_"TNode" TNode'''redden--BlackBranch [#_"BlackBranch" this]
        (RedBranch'new (:key this), (:left this), (:right this))
    )
)

(class-ns BlackBranchVal
    (defn #_"BlackBranchVal" BlackBranchVal'new [#_"Object" key, #_"Object" val, #_"TNode" left, #_"TNode" right]
        (merge (BlackBranch'new key, left, right)
            (hash-map
                #_"Object" :val val
            )
        )
    )

    #_override
    (defn #_"Object" IMapEntry'''val--BlackBranchVal [#_"BlackBranchVal" this]
        (:val this)
    )

    (declare RedBranchVal'new)

    #_override
    (defn #_"TNode" TNode'''redden--BlackBranchVal [#_"BlackBranchVal" this]
        (RedBranchVal'new (:key this), (:val this), (:left this), (:right this))
    )
)

(class-ns Red
    (defn #_"Red" Red'new [#_"Object" key]
        (TNode'new key)
    )

    (declare PersistentTreeMap'red)

    #_override
    (defn #_"TNode" TNode'''addLeft--Red [#_"Red" this, #_"TNode" ins]
        (PersistentTreeMap'red (:key this), (.val this), ins, (.right this))
    )

    #_override
    (defn #_"TNode" TNode'''addRight--Red [#_"Red" this, #_"TNode" ins]
        (PersistentTreeMap'red (:key this), (.val this), (.left this), ins)
    )

    #_override
    (defn #_"TNode" TNode'''removeLeft--Red [#_"Red" this, #_"TNode" del]
        (PersistentTreeMap'red (:key this), (.val this), del, (.right this))
    )

    #_override
    (defn #_"TNode" TNode'''removeRight--Red [#_"Red" this, #_"TNode" del]
        (PersistentTreeMap'red (:key this), (.val this), (.left this), del)
    )

    #_override
    (defn #_"TNode" TNode'''blacken--Red [#_"Red" this]
        (Black'new (:key this))
    )

    #_override
    (defn #_"TNode" TNode'''redden--Red [#_"Red" this]
        (throw! "invariant violation")
    )

    #_override
    (defn #_"TNode" TNode'''replace--Red [#_"Red" this, #_"Object" key, #_"Object" val, #_"TNode" left, #_"TNode" right]
        (PersistentTreeMap'red key, val, left, right)
    )
)

(class-ns RedVal
    (defn #_"RedVal" RedVal'new [#_"Object" key, #_"Object" val]
        (merge (Red'new key)
            (hash-map
                #_"Object" :val val
            )
        )
    )

    #_override
    (defn #_"Object" IMapEntry'''val--RedVal [#_"RedVal" this]
        (:val this)
    )

    #_override
    (defn #_"TNode" TNode'''blacken--RedVal [#_"RedVal" this]
        (BlackVal'new (:key this), (:val this))
    )
)

(class-ns RedBranch
    (defn #_"RedBranch" RedBranch'new [#_"Object" key, #_"TNode" left, #_"TNode" right]
        (merge (Red'new key)
            (hash-map
                #_"TNode" :left left
                #_"TNode" :right right
            )
        )
    )

    #_override
    (defn #_"TNode" TNode'''left--RedBranch [#_"RedBranch" this]
        (:left this)
    )

    #_override
    (defn #_"TNode" TNode'''right--RedBranch [#_"RedBranch" this]
        (:right this)
    )

    #_override
    (defn #_"TNode" TNode'''balanceLeft--RedBranch [#_"RedBranch" this, #_"TNode" parent]
        (cond (instance? Red (:left this))
            (do
                (PersistentTreeMap'red (:key this), (.val this), (.blacken (:left this)), (PersistentTreeMap'black (:key parent), (.val parent), (:right this), (.right parent)))
            )
            (instance? Red (:right this))
            (do
                (PersistentTreeMap'red (:key (:right this)), (.val (:right this)), (PersistentTreeMap'black (:key this), (.val this), (:left this), (.left (:right this))), (PersistentTreeMap'black (:key parent), (.val parent), (.right (:right this)), (.right parent)))
            )
            :else
            (do
                (.balanceLeft (§ super ), parent)
            )
        )
    )

    #_override
    (defn #_"TNode" TNode'''balanceRight--RedBranch [#_"RedBranch" this, #_"TNode" parent]
        (cond (instance? Red (:right this))
            (do
                (PersistentTreeMap'red (:key this), (.val this), (PersistentTreeMap'black (:key parent), (.val parent), (.left parent), (:left this)), (.blacken (:right this)))
            )
            (instance? Red (:left this))
            (do
                (PersistentTreeMap'red (:key (:left this)), (.val (:left this)), (PersistentTreeMap'black (:key parent), (.val parent), (.left parent), (.left (:left this))), (PersistentTreeMap'black (:key this), (.val this), (.right (:left this)), (:right this)))
            )
            :else
            (do
                (.balanceRight (§ super ), parent)
            )
        )
    )

    #_override
    (defn #_"TNode" TNode'''blacken--RedBranch [#_"RedBranch" this]
        (BlackBranch'new (:key this), (:left this), (:right this))
    )
)

(class-ns RedBranchVal
    (defn #_"RedBranchVal" RedBranchVal'new [#_"Object" key, #_"Object" val, #_"TNode" left, #_"TNode" right]
        (merge (RedBranch'new key, left, right)
            (hash-map
                #_"Object" :val val
            )
        )
    )

    #_override
    (defn #_"Object" IMapEntry'''val--RedBranchVal [#_"RedBranchVal" this]
        (:val this)
    )

    #_override
    (defn #_"TNode" TNode'''blacken--RedBranchVal [#_"RedBranchVal" this]
        (BlackBranchVal'new (:key this), (:val this), (:left this), (:right this))
    )
)

(class-ns TSeq
    (defn #_"TSeq" TSeq'new
        ([#_"ISeq" stack, #_"boolean" asc] (TSeq'new stack, asc, -1))
        ([#_"ISeq" stack, #_"boolean" asc, #_"int" cnt] (TSeq'new nil, stack, asc, cnt))
        ([#_"IPersistentMap" meta, #_"ISeq" stack, #_"boolean" asc, #_"int" cnt]
            (merge (ASeq'new meta)
                (hash-map
                    #_"ISeq" :stack stack
                    #_"boolean" :asc asc
                    #_"int" :cnt cnt
                )
            )
        )
    )

    (defn #_"ISeq" TSeq'push [#_"TNode" t, #_"ISeq" stack, #_"boolean" asc]
        (loop-when [stack stack t t] (some? t) => stack
            (recur (cons t stack) (if asc (.left t) (.right t)))
        )
    )

    (defn #_"TSeq" TSeq'create [#_"TNode" t, #_"boolean" asc, #_"int" cnt]
        (TSeq'new (TSeq'push t, nil, asc), asc, cnt)
    )

    #_override
    (defn #_"Object" ISeq'''first--TSeq [#_"TSeq" this]
        (first (:stack this))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--TSeq [#_"TSeq" this]
        (let [#_"TNode" t (cast TNode (first (:stack this))) #_"boolean" asc? (:asc this)]
            (when-let [#_"ISeq" stack (TSeq'push (if asc? (.right t) (.left t)), (next (:stack this)), asc?)]
                (TSeq'new stack, asc?, (dec (:cnt this)))
            )
        )
    )

    #_override
    (defn #_"int" Counted'''count--TSeq [#_"TSeq" this]
        (when (neg? (:cnt this)) => (:cnt this)
            (.count (§ super ))
        )
    )

    #_override
    (defn #_"TSeq" IObj'''withMeta--TSeq [#_"TSeq" this, #_"IPersistentMap" meta]
        (TSeq'new meta, (:stack this), (:asc this), (:cnt this))
    )
)

(class-ns NodeIterator
    (defn #_"Iterator" NodeIterator'new [#_"TNode" t, #_"boolean" asc?]
        (let [#_"Stack" s (Stack.)
              push!
                (fn #_"void" [#_"TNode" t]
                    (loop-when-recur t (some? t) (if asc? (.left t) (.right t)) => nil
                        (.push s, t)
                    )
                )
              _ (push! t)]
            (reify Iterator
                #_foreign
                (#_"boolean" hasNext [#_"Iterator" _self]
                    (not (.isEmpty s))
                )

                #_foreign
                (#_"Object" next [#_"Iterator" _self]
                    (try
                        (let [#_"TNode" t (cast TNode (.pop s))]
                            (push! (if asc? (.right t) (.left t)))
                            t
                        )
                        (catch EmptyStackException _
                            (throw (NoSuchElementException.))
                        )
                    )
                )
            )
        )
    )
)

;;;
 ; Persistent Red Black Tree.
 ;
 ; Note that instances of this class are constant values,
 ; i.e. add/remove etc return new values.
 ;
 ; See Okasaki, Kahrs, Larsen, et al.
 ;;
(class-ns PersistentTreeMap
    (defn #_"PersistentTreeMap" PersistentTreeMap'new
        ([] (PersistentTreeMap'new compare))
        ([#_"Comparator" comp] (PersistentTreeMap'new nil, comp))
        ([#_"IPersistentMap" meta, #_"Comparator" comp] (PersistentTreeMap'new meta, comp, nil, 0))
        ([#_"IPersistentMap" meta, #_"Comparator" comp, #_"TNode" tree, #_"int" _count]
            (merge (APersistentMap'new)
                (hash-map
                    #_"IPersistentMap" :_meta meta
                    #_"Comparator" :comp comp
                    #_"TNode" :tree tree
                    #_"int" :_count _count
                )
            )
        )
    )

    (def #_"PersistentTreeMap" PersistentTreeMap'EMPTY (PersistentTreeMap'new))

    (defn #_"IPersistentMap" PersistentTreeMap'create-1m [#_"Map" other]
        (loop-when [#_"IPersistentMap" m PersistentTreeMap'EMPTY #_"ISeq" s (seq other)] (some? s) => m
            (let [#_"Map$Entry" e (first s)]
                (recur (assoc m (key e) (val e)) (next s))
            )
        )
    )

    #_override
    (defn #_"PersistentTreeMap" IObj'''withMeta--PersistentTreeMap [#_"PersistentTreeMap" this, #_"IPersistentMap" meta]
        (PersistentTreeMap'new meta, (:comp this), (:tree this), (:_count this))
    )

    (defn #_"PersistentTreeMap" PersistentTreeMap'create-1s [#_"ISeq" s]
        (loop-when [#_"IPersistentMap" m PersistentTreeMap'EMPTY s s] (some? s) => m
            (when (some? (next s)) => (throw! (str "no value supplied for key: " (first s)))
                (recur (assoc m (first s) (second s)) (next (next s)))
            )
        )
    )

    (defn #_"PersistentTreeMap" PersistentTreeMap'create-2 [#_"Comparator" comp, #_"ISeq" s]
        (loop-when [#_"IPersistentMap" m (PersistentTreeMap'new comp) s s] (some? s) => m
            (when (some? (next s)) => (throw! (str "no value supplied for key: " (first s)))
                (recur (assoc m (first s) (second s)) (next (next s)))
            )
        )
    )

    #_override
    (defn #_"boolean" Associative'''containsKey--PersistentTreeMap [#_"PersistentTreeMap" this, #_"Object" key]
        (some? (find this key))
    )

    #_foreign
    (defn #_"boolean" equals---PersistentTreeMap [#_"PersistentTreeMap" this, #_"Object" that]
        (try
            (.equals (§ super ), that)
            (catch ClassCastException _
                false
            )
        )
    )

    #_override
    (defn #_"boolean" IPersistentCollection'''equiv--PersistentTreeMap [#_"PersistentTreeMap" this, #_"Object" that]
        (try
            (.equiv (§ super ), that)
            (catch ClassCastException _
                false
            )
        )
    )

    #_override
    (defn #_"ISeq" Seqable'''seq--PersistentTreeMap [#_"PersistentTreeMap" this]
        (when (pos? (:_count this))
            (TSeq'create (:tree this), true, (:_count this))
        )
    )

    #_override
    (defn #_"IPersistentCollection" IPersistentCollection'''empty--PersistentTreeMap [#_"PersistentTreeMap" this]
        (PersistentTreeMap'new (meta this), (:comp this))
    )

    #_override
    (defn #_"ISeq" Reversible'''rseq--PersistentTreeMap [#_"PersistentTreeMap" this]
        (when (pos? (:_count this))
            (TSeq'create (:tree this), false, (:_count this))
        )
    )

    #_override
    (defn #_"Comparator" Sorted'''comparator--PersistentTreeMap [#_"PersistentTreeMap" this]
        (:comp this)
    )

    #_method
    (defn #_"int" PersistentTreeMap''doCompare [#_"PersistentTreeMap" this, #_"Object" k1, #_"Object" k2]
        (.compare (:comp this), k1, k2)
    )

    #_override
    (defn #_"Object" Sorted'''entryKey--PersistentTreeMap [#_"PersistentTreeMap" this, #_"Object" entry]
        (.key (cast IMapEntry entry))
    )

    #_override
    (defn #_"ISeq" Sorted'''seq--PersistentTreeMap [#_"PersistentTreeMap" this, #_"boolean" ascending?]
        (when (pos? (:_count this))
            (TSeq'create (:tree this), ascending?, (:_count this))
        )
    )

    #_override
    (defn #_"ISeq" Sorted'''seqFrom--PersistentTreeMap [#_"PersistentTreeMap" this, #_"Object" key, #_"boolean" ascending?]
        (when (pos? (:_count this))
            (loop-when [#_"ISeq" s nil #_"TNode" t (:tree this)] (some? t) => (when (some? s) (TSeq'new s, ascending?))
                (let [#_"int" cmp (PersistentTreeMap''doCompare this, key, (:key t))]
                    (cond
                        (zero? cmp) (TSeq'new (cons t s), ascending?)
                        ascending?  (if (neg? cmp) (recur (cons t s) (.left t)) (recur s (.right t)))
                        :else       (if (pos? cmp) (recur (cons t s) (.right t)) (recur s (.left t)))
                    )
                )
            )
        )
    )

    #_foreign
    (defn #_"Iterator" iterator---PersistentTreeMap [#_"PersistentTreeMap" this]
        (NodeIterator'new (:tree this), true)
    )

    #_override
    (defn #_"Object" IKVReduce'''kvreduce--PersistentTreeMap [#_"PersistentTreeMap" this, #_"IFn" f, #_"Object" r]
        (let [r (if (some? (:tree this)) (.kvreduce (:tree this), f, r) r)]
            (if (reduced? r) (deref r) r)
        )
    )

    #_method
    (defn #_"Iterator" PersistentTreeMap''reverseIterator [#_"PersistentTreeMap" this]
        (NodeIterator'new (:tree this), false)
    )

    #_method
    (defn #_"Iterator" PersistentTreeMap''keys [#_"PersistentTreeMap" this]
        (let [#_"Iterator" it (.iterator this)]
            (reify Iterator
                #_foreign
                (#_"boolean" hasNext [#_"Iterator" _self]
                    (.hasNext it)
                )

                #_foreign
                (#_"Object" next [#_"Iterator" _self]
                    (:key (cast TNode (.next it)))
                )
            )
        )
    )

    #_method
    (defn #_"Iterator" PersistentTreeMap''vals [#_"PersistentTreeMap" this]
        (let [#_"Iterator" it (.iterator this)]
            (reify Iterator
                #_foreign
                (#_"boolean" hasNext [#_"Iterator" _self]
                    (.hasNext it)
                )

                #_foreign
                (#_"Object" next [#_"Iterator" _self]
                    (.val (cast TNode (.next it)))
                )
            )
        )
    )

    #_method
    (defn #_"TNode" PersistentTreeMap''min [#_"PersistentTreeMap" this]
        (when-let [#_"TNode" t (:tree this)]
            (loop-when-recur t (some? (.left t)) (.left t) => t)
        )
    )

    #_method
    (defn #_"TNode" PersistentTreeMap''max [#_"PersistentTreeMap" this]
        (when-let [#_"TNode" t (:tree this)]
            (loop-when-recur t (some? (.right t)) (.right t) => t)
        )
    )

    #_method
    (defn #_"Object" PersistentTreeMap''minKey [#_"PersistentTreeMap" this]
        (let [#_"TNode" t (PersistentTreeMap''min this)]
            (when (some? t) (:key t))
        )
    )

    #_method
    (defn #_"Object" PersistentTreeMap''maxKey [#_"PersistentTreeMap" this]
        (let [#_"TNode" t (PersistentTreeMap''max this)]
            (when (some? t) (:key t))
        )
    )

    #_method
    (defn #_"int" PersistentTreeMap''depth-2 [#_"PersistentTreeMap" this, #_"TNode" t]
        (when (some? t) => 0
            (inc (Math/max (PersistentTreeMap''depth-2 this, (.left t)), (PersistentTreeMap''depth-2 this, (.right t))))
        )
    )

    #_method
    (defn #_"int" PersistentTreeMap''depth-1 [#_"PersistentTreeMap" this]
        (PersistentTreeMap''depth-2 this, (:tree this))
    )

    #_override
    (defn #_"Object" ILookup'''valAt-2--PersistentTreeMap [#_"PersistentTreeMap" this, #_"Object" key]
        (.valAt this, key, nil)
    )

    #_override
    (defn #_"Object" ILookup'''valAt-3--PersistentTreeMap [#_"PersistentTreeMap" this, #_"Object" key, #_"Object" notFound]
        (let [#_"TNode" n (find this key)]
            (if (some? n) (.val n) notFound)
        )
    )

    #_method
    (defn #_"int" PersistentTreeMap''capacity [#_"PersistentTreeMap" this]
        (:_count this)
    )

    #_override
    (defn #_"int" Counted'''count--PersistentTreeMap [#_"PersistentTreeMap" this]
        (:_count this)
    )

    #_override
    (defn #_"TNode" Associative'''entryAt--PersistentTreeMap [#_"PersistentTreeMap" this, #_"Object" key]
        (loop-when [#_"TNode" t (:tree this)] (some? t) => t
            (let [#_"int" cmp (PersistentTreeMap''doCompare this, key, (:key t))]
                (cond
                    (neg? cmp) (recur (.left t))
                    (pos? cmp) (recur (.right t))
                    :else      t
                )
            )
        )
    )

    (defn #_"TNode" PersistentTreeMap'rightBalance [#_"Object" key, #_"Object" val, #_"TNode" left, #_"TNode" ins]
        (cond
            (and (instance? Red ins) (instance? Red (.right ins)))
                (PersistentTreeMap'red (:key ins), (.val ins), (PersistentTreeMap'black key, val, left, (.left ins)), (.blacken (.right ins)))
            (and (instance? Red ins) (instance? Red (.left ins)))
                (PersistentTreeMap'red (:key (.left ins)), (.val (.left ins)), (PersistentTreeMap'black key, val, left, (.left (.left ins))), (PersistentTreeMap'black (:key ins), (.val ins), (.right (.left ins)), (.right ins)))
            :else
                (PersistentTreeMap'black key, val, left, ins)
        )
    )

    (defn #_"TNode" PersistentTreeMap'balanceLeftDel [#_"Object" key, #_"Object" val, #_"TNode" del, #_"TNode" right]
        (cond
            (instance? Red del)
                (PersistentTreeMap'red key, val, (.blacken del), right)
            (instance? Black right)
                (PersistentTreeMap'rightBalance key, val, del, (.redden right))
            (and (instance? Red right) (instance? Black (.left right)))
                (PersistentTreeMap'red (:key (.left right)), (.val (.left right)), (PersistentTreeMap'black key, val, del, (.left (.left right))), (PersistentTreeMap'rightBalance (:key right), (.val right), (.right (.left right)), (.redden (.right right))))
            :else
                (throw! "invariant violation")
        )
    )

    (defn #_"TNode" PersistentTreeMap'leftBalance [#_"Object" key, #_"Object" val, #_"TNode" ins, #_"TNode" right]
        (cond
            (and (instance? Red ins) (instance? Red (.left ins)))
                (PersistentTreeMap'red (:key ins), (.val ins), (.blacken (.left ins)), (PersistentTreeMap'black key, val, (.right ins), right))
            (and (instance? Red ins) (instance? Red (.right ins)))
                (PersistentTreeMap'red (:key (.right ins)), (.val (.right ins)), (PersistentTreeMap'black (:key ins), (.val ins), (.left ins), (.left (.right ins))), (PersistentTreeMap'black key, val, (.right (.right ins)), right))
            :else
                (PersistentTreeMap'black key, val, ins, right)
        )
    )

    (defn #_"TNode" PersistentTreeMap'balanceRightDel [#_"Object" key, #_"Object" val, #_"TNode" left, #_"TNode" del]
        (cond
            (instance? Red del)
                (PersistentTreeMap'red key, val, left, (.blacken del))
            (instance? Black left)
                (PersistentTreeMap'leftBalance key, val, (.redden left), del)
            (and (instance? Red left) (instance? Black (.right left)))
                (PersistentTreeMap'red (:key (.right left)), (.val (.right left)), (PersistentTreeMap'leftBalance (:key left), (.val left), (.redden (.left left)), (.left (.right left))), (PersistentTreeMap'black key, val, (.right (.right left)), del))
            :else
                (throw! "invariant violation")
        )
    )

    #_method
    (defn #_"TNode" PersistentTreeMap''add [#_"PersistentTreeMap" this, #_"TNode" t, #_"Object" key, #_"Object" val, #_"Box" found]
        (if (nil? t)
            (if (nil? val)
                (Red'new key)
                (RedVal'new key, val)
            )
            (let [#_"int" cmp (PersistentTreeMap''doCompare this, key, (:key t))]
                (if (zero? cmp)
                    (do
                        (§ set! (:val found) t)
                        nil
                    )
                    (let [#_"TNode" ins (if (neg? cmp) (PersistentTreeMap''add this, (.left t), key, val, found) (PersistentTreeMap''add this, (.right t), key, val, found))]
                        (cond
                            (nil? ins) nil ;; found below
                            (neg? cmp) (.addLeft t, ins)
                            :else      (.addRight t, ins)
                        )
                    )
                )
            )
        )
    )

    (defn- #_"TNode" PersistentTreeMap'append [#_"TNode" left, #_"TNode" right]
        (cond
            (nil? left)
                right
            (nil? right)
                left
            (instance? Red left)
                (if (instance? Red right)
                    (let [#_"TNode" app (PersistentTreeMap'append (.right left), (.left right))]
                        (if (instance? Red app)
                            (PersistentTreeMap'red (:key app), (.val app), (PersistentTreeMap'red (:key left), (.val left), (.left left), (.left app)), (PersistentTreeMap'red (:key right), (.val right), (.right app), (.right right)))
                            (PersistentTreeMap'red (:key left), (.val left), (.left left), (PersistentTreeMap'red (:key right), (.val right), app, (.right right)))
                        )
                    )
                    (PersistentTreeMap'red (:key left), (.val left), (.left left), (PersistentTreeMap'append (.right left), right))
                )
            (instance? Red right)
                (PersistentTreeMap'red (:key right), (.val right), (PersistentTreeMap'append left, (.left right)), (.right right))
            :else ;; black/black
                (let [#_"TNode" app (PersistentTreeMap'append (.right left), (.left right))]
                    (if (instance? Red app)
                        (PersistentTreeMap'red (:key app), (.val app), (PersistentTreeMap'black (:key left), (.val left), (.left left), (.left app)), (PersistentTreeMap'black (:key right), (.val right), (.right app), (.right right)))
                        (PersistentTreeMap'balanceLeftDel (:key left), (.val left), (.left left), (PersistentTreeMap'black (:key right), (.val right), app, (.right right)))
                    )
                )
        )
    )

    #_method
    (defn #_"TNode" PersistentTreeMap''remove [#_"PersistentTreeMap" this, #_"TNode" t, #_"Object" key, #_"Box" found]
        (when (some? t) => nil ;; not found indicator
            (let [#_"int" cmp (PersistentTreeMap''doCompare this, key, (:key t))]
                (if (zero? cmp)
                    (do
                        (§ set! (:val found) t)
                        (PersistentTreeMap'append (.left t), (.right t))
                    )
                    (let [#_"TNode" del (if (neg? cmp) (PersistentTreeMap''remove this, (.left t), key, found) (PersistentTreeMap''remove this, (.right t), key, found))]
                        (when (or (some? del) (some? (:val found))) => nil ;; not found below
                            (if (neg? cmp)
                                (if (instance? Black (.left t))
                                    (PersistentTreeMap'balanceLeftDel (:key t), (.val t), del, (.right t))
                                    (PersistentTreeMap'red (:key t), (.val t), del, (.right t))
                                )
                                (if (instance? Black (.right t))
                                    (PersistentTreeMap'balanceRightDel (:key t), (.val t), (.left t), del)
                                    (PersistentTreeMap'red (:key t), (.val t), (.left t), del)
                                )
                            )
                        )
                    )
                )
            )
        )
    )

    #_method
    (defn #_"TNode" PersistentTreeMap''replace [#_"PersistentTreeMap" this, #_"TNode" t, #_"Object" key, #_"Object" val]
        (let [#_"int" cmp (PersistentTreeMap''doCompare this, key, (:key t))]
            (.replace t, (:key t), (if (zero? cmp) val (.val t)), (if (neg? cmp) (PersistentTreeMap''replace this, (.left t), key, val) (.left t)), (if (pos? cmp) (PersistentTreeMap''replace this, (.right t), key, val) (.right t)))
        )
    )

    (defn #_"Red" PersistentTreeMap'red [#_"Object" key, #_"Object" val, #_"TNode" left, #_"TNode" right]
        (if (and (nil? left) (nil? right))
            (if (nil? val)
                (Red'new key)
                (RedVal'new key, val)
            )
            (if (nil? val)
                (RedBranch'new key, left, right)
                (RedBranchVal'new key, val, left, right)
            )
        )
    )

    (defn #_"Black" PersistentTreeMap'black [#_"Object" key, #_"Object" val, #_"TNode" left, #_"TNode" right]
        (if (and (nil? left) (nil? right))
            (if (nil? val)
                (Black'new key)
                (BlackVal'new key, val)
            )
            (if (nil? val)
                (BlackBranch'new key, left, right)
                (BlackBranchVal'new key, val, left, right)
            )
        )
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--PersistentTreeMap [#_"PersistentTreeMap" this]
        (:_meta this)
    )

    #_override
    (defn #_"PersistentTreeMap" IPersistentMap'''assoc--PersistentTreeMap [#_"PersistentTreeMap" this, #_"Object" key, #_"Object" val]
        (let [#_"Box" found (Box'new nil) #_"TNode" t (PersistentTreeMap''add this, (:tree this), key, val, found)]
            (if (nil? t) ;; nil == already contains key
                (if (= (.val (cast TNode (:val found))) val) ;; note only get same collection on identity of val, not equals()
                    this
                    (PersistentTreeMap'new (meta this), (:comp this), (PersistentTreeMap''replace this, (:tree this), key, val), (:_count this))
                )
                (PersistentTreeMap'new (meta this), (:comp this), (.blacken t), (inc (:_count this)))
            )
        )
    )

    #_override
    (defn #_"PersistentTreeMap" IPersistentMap'''dissoc--PersistentTreeMap [#_"PersistentTreeMap" this, #_"Object" key]
        (let [#_"Box" found (Box'new nil) #_"TNode" t (PersistentTreeMap''remove this, (:tree this), key, found)]
            (if (nil? t)
                (if (nil? (:val found)) ;; nil == doesn't contain key
                    this
                    (PersistentTreeMap'new (meta this), (:comp this)) ;; empty
                )
                (PersistentTreeMap'new (meta this), (:comp this), (.blacken t), (dec (:_count this)))
            )
        )
    )
)
)

(java-ns cloiure.lang.PersistentTreeSet

(class-ns PersistentTreeSet
    (defn #_"PersistentTreeSet" PersistentTreeSet'new [#_"IPersistentMap" meta, #_"IPersistentMap" impl]
        (merge (APersistentSet'new impl)
            (hash-map
                #_"IPersistentMap" :_meta meta
            )
        )
    )

    (def #_"PersistentTreeSet" PersistentTreeSet'EMPTY (PersistentTreeSet'new nil, PersistentTreeMap'EMPTY))

    (defn #_"PersistentTreeSet" PersistentTreeSet'create-1 [#_"ISeq" s]
        (loop-when-recur [#_"PersistentTreeSet" t PersistentTreeSet'EMPTY s s]
                         (some? s)
                         [(conj t (first s)) (next s)]
                      => t
        )
    )

    (defn #_"PersistentTreeSet" PersistentTreeSet'create-2 [#_"Comparator" comp, #_"ISeq" s]
        (loop-when-recur [#_"PersistentTreeSet" t (PersistentTreeSet'new nil, (PersistentTreeMap'new nil, comp)) s s]
                         (some? s)
                         [(conj t (first s)) (next s)]
                      => t
        )
    )

    #_foreign
    (defn #_"boolean" equals---PersistentTreeSet [#_"PersistentTreeSet" this, #_"Object" that]
        (try
            (.equals (§ super ), that)
            (catch ClassCastException _
                false
            )
        )
    )

    #_override
    (defn #_"boolean" IPersistentCollection'''equiv--PersistentTreeSet [#_"PersistentTreeSet" this, #_"Object" that]
        (try
            (.equiv (§ super ), that)
            (catch ClassCastException _
                false
            )
        )
    )

    #_override
    (defn #_"IPersistentSet" IPersistentSet'''disj--PersistentTreeSet [#_"PersistentTreeSet" this, #_"Object" key]
        (if (contains? this key)
            (PersistentTreeSet'new (meta this), (dissoc (:impl this) key))
            this
        )
    )

    #_override
    (defn #_"IPersistentSet" IPersistentCollection'''conj--PersistentTreeSet [#_"PersistentTreeSet" this, #_"Object" o]
        (if (contains? this o)
            this
            (PersistentTreeSet'new (meta this), (assoc (:impl this) o o))
        )
    )

    #_override
    (defn #_"IPersistentCollection" IPersistentCollection'''empty--PersistentTreeSet [#_"PersistentTreeSet" this]
        (PersistentTreeSet'new (meta this), (.empty (:impl this)))
    )

    #_override
    (defn #_"ISeq" Reversible'''rseq--PersistentTreeSet [#_"PersistentTreeSet" this]
        (KeySeq'create (.rseq (:impl this)))
    )

    #_override
    (defn #_"PersistentTreeSet" IObj'''withMeta--PersistentTreeSet [#_"PersistentTreeSet" this, #_"IPersistentMap" meta]
        (PersistentTreeSet'new meta, (:impl this))
    )

    #_override
    (defn #_"Comparator" Sorted'''comparator--PersistentTreeSet [#_"PersistentTreeSet" this]
        (.comparator (:impl this))
    )

    #_override
    (defn #_"Object" Sorted'''entryKey--PersistentTreeSet [#_"PersistentTreeSet" this, #_"Object" entry]
        entry
    )

    #_override
    (defn #_"ISeq" Sorted'''seq--PersistentTreeSet [#_"PersistentTreeSet" this, #_"boolean" ascending?]
        (keys (.seq (:impl this), ascending?))
    )

    #_override
    (defn #_"ISeq" Sorted'''seqFrom--PersistentTreeSet [#_"PersistentTreeSet" this, #_"Object" key, #_"boolean" ascending?]
        (keys (.seqFrom (:impl this), key, ascending?))
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--PersistentTreeSet [#_"PersistentTreeSet" this]
        (:_meta this)
    )
)
)

(java-ns cloiure.lang.PersistentVector

(class-ns VNode
    (defn #_"VNode" VNode'new
        ([#_"AtomicReference<Thread>" edit] (VNode'new edit, (make-array Object 32)))
        ([#_"AtomicReference<Thread>" edit, #_"Object[]" array]
            (hash-map
                #_"AtomicReference<Thread>" :edit edit
                #_"Object[]" :array array
            )
        )
    )

    (defn #_"VNode" VNode'newPath [#_"AtomicReference<Thread>" edit, #_"int" level, #_"VNode" node]
        (when-not (zero? level) => node
            (let [#_"VNode" ret (VNode'new edit)]
                (aset (:array ret) 0 (VNode'newPath edit, (- level 5), node))
                ret
            )
        )
    )
)

(declare PersistentVector''arrayFor)

(class-ns ChunkedSeq
    (defn #_"ChunkedSeq" ChunkedSeq'new
        ([#_"PersistentVector" vec, #_"int" i, #_"int" offset] (ChunkedSeq'new nil, vec, (PersistentVector''arrayFor vec, i), i, offset))
        ([#_"PersistentVector" vec, #_"Object[]" node, #_"int" i, #_"int" offset] (ChunkedSeq'new nil, vec, node, i, offset))
        ([#_"IPersistentMap" meta, #_"PersistentVector" vec, #_"Object[]" node, #_"int" i, #_"int" offset]
            (merge (ASeq'new meta)
                (hash-map
                    #_"PersistentVector" :vec vec
                    #_"Object[]" :node node
                    #_"int" :i i
                    #_"int" :offset offset
                )
            )
        )
    )

    #_override
    (defn #_"IChunk" IChunkedSeq'''chunkedFirst--ChunkedSeq [#_"ChunkedSeq" this]
        (ArrayChunk'new (:node this), (:offset this))
    )

    #_override
    (defn #_"ISeq" IChunkedSeq'''chunkedNext--ChunkedSeq [#_"ChunkedSeq" this]
        (when (< (+ (:i this) (alength (:node this))) (:cnt (:vec this)))
            (ChunkedSeq'new (:vec this), (+ (:i this) (alength (:node this))), 0)
        )
    )

    #_override
    (defn #_"ISeq" IChunkedSeq'''chunkedMore--ChunkedSeq [#_"ChunkedSeq" this]
        (or (.chunkedNext this) ())
    )

    #_override
    (defn #_"ChunkedSeq" IObj'''withMeta--ChunkedSeq [#_"ChunkedSeq" this, #_"IPersistentMap" meta]
        (when-not (= meta (:_meta this)) => this
            (ChunkedSeq'new meta, (:vec this), (:node this), (:i this), (:offset this))
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--ChunkedSeq [#_"ChunkedSeq" this]
        (aget (:node this) (:offset this))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--ChunkedSeq [#_"ChunkedSeq" this]
        (if (< (inc (:offset this)) (alength (:node this)))
            (ChunkedSeq'new (:vec this), (:node this), (:i this), (inc (:offset this)))
            (.chunkedNext this)
        )
    )

    #_override
    (defn #_"int" Counted'''count--ChunkedSeq [#_"ChunkedSeq" this]
        (- (:cnt (:vec this)) (+ (:i this) (:offset this)))
    )
)

(class-ns TransientVector
    (defn #_"TransientVector" TransientVector'new
        ([#_"PersistentVector" v] (TransientVector'new (:cnt v), (:shift v), (.editableRoot (:root v)), (.editableTail (:tail v))))
        ([#_"int" cnt, #_"int" shift, #_"VNode" root, #_"Object[]" tail]
            (merge (AFn'new)
                (hash-map
                    #_"int" :cnt cnt
                    #_"int" :shift shift
                    #_"VNode" :root root
                    #_"Object[]" :tail tail
                )
            )
        )
    )

    #_method
    (defn TransientVector''ensureEditable
        (#_"void" [#_"TransientVector" this]
            (when-not (some? (.get (:edit (:root this)))) => nil
                (throw (IllegalAccessError. "Transient used after persistent! call"))
            )
        )
        (#_"VNode" [#_"TransientVector" this, #_"VNode" node]
            (when-not (= (:edit node) (:edit (:root this))) => node
                (VNode'new (:edit (:root this)), (.clone (:array node)))
            )
        )
    )

    #_override
    (defn #_"int" Counted'''count--TransientVector [#_"TransientVector" this]
        (TransientVector''ensureEditable this)
        (:cnt this)
    )

    (defn #_"VNode" TransientVector'editableRoot [#_"VNode" node]
        (VNode'new (AtomicReference. (Thread/currentThread)), (.clone (:array node)))
    )

    #_method
    (defn- #_"int" TransientVector''tailoff [#_"TransientVector" this]
        (if (< (:cnt this) 32) 0 (<< (>>> (dec (:cnt this)) 5) 5))
    )

    (declare PersistentVector'new)

    #_override
    (defn #_"PersistentVector" ITransientCollection'''persistent--TransientVector [#_"TransientVector" this]
        (TransientVector''ensureEditable this)
        (.set (:edit (:root this)), nil)
        (let [#_"Object[]" trimmedTail (make-array Object (- (:cnt this) (TransientVector''tailoff this)))]
            (System/arraycopy (:tail this), 0, trimmedTail, 0, (alength trimmedTail))
            (PersistentVector'new (:cnt this), (:shift this), (:root this), trimmedTail)
        )
    )

    (defn #_"Object[]" TransientVector'editableTail [#_"Object[]" tail]
        (let [#_"Object[]" a (make-array Object 32)]
            (System/arraycopy tail, 0, a, 0, (alength tail))
            a
        )
    )

    #_method
    (defn- #_"VNode" TransientVector''pushTail [#_"TransientVector" this, #_"int" level, #_"VNode" parent, #_"VNode" tailnode]
        ;; if parent is leaf, insert node,
        ;; else does it map to an existing child? -> nodeToInsert = pushNode one more level
        ;; else alloc new path
        ;; return nodeToInsert placed in parent
        (let [parent (TransientVector''ensureEditable this, parent)
              #_"int" i (& (>>> (dec (:cnt this)) level) 0x01f)
              #_"VNode" nodeToInsert
                (when-not (= level 5) => tailnode
                    (let [#_"VNode" child (cast VNode (aget (:array parent) i))]
                        (if (some? child)
                            (TransientVector''pushTail this, (- level 5), child, tailnode)
                            (VNode'newPath (:edit (:root this)), (- level 5), tailnode)
                        )
                    )
                )]
            (aset (:array parent) i nodeToInsert)
            parent
        )
    )

    #_override
    (defn #_"TransientVector" ITransientCollection'''conj--TransientVector [#_"TransientVector" this, #_"Object" val]
        (TransientVector''ensureEditable this)
        (let [#_"int" n (:cnt this)]
            (if (< (- n (TransientVector''tailoff this)) 32) ;; room in tail?
                (do
                    (aset (:tail this) (& n 0x01f) val)
                    (update this :cnt inc)
                )
                ;; full tail, push into tree
                (let [#_"VNode" tailnode (VNode'new (:edit (:root this)), (:tail this))
                      this (assoc this :tail (make-array Object 32))
                      _ (aset (:tail this) 0 val)
                      #_"int" shift (:shift this)
                      [#_"VNode" root shift]
                        (if (< (<< 1 shift) (>>> n 5)) ;; overflow root?
                            (let [root (VNode'new (:edit (:root this)))]
                                (aset (:array root) 0 (:root this))
                                (aset (:array root) 1 (VNode'newPath (:edit (:root this)), shift, tailnode))
                                [root (+ shift 5)]
                            )
                            [(TransientVector''pushTail this, shift, (:root this), tailnode) shift]
                        )]
                    (-> this (assoc :root root :shift shift) (update :cnt inc))
                )
            )
        )
    )

    #_method
    (defn- #_"Object[]" TransientVector''arrayFor [#_"TransientVector" this, #_"int" i]
        (when (< -1 i (:cnt this)) => (throw (IndexOutOfBoundsException.))
            (when (< i (TransientVector''tailoff this)) => (:tail this)
                (loop-when-recur [#_"VNode" node (:root this) #_"int" level (:shift this)]
                                 (< 0 level)
                                 [(cast VNode (aget (:array node) (& (>>> i level) 0x01f))) (- level 5)]
                              => (:array node)
                )
            )
        )
    )

    #_method
    (defn- #_"Object[]" TransientVector''editableArrayFor [#_"TransientVector" this, #_"int" i]
        (when (< -1 i (:cnt this)) => (throw (IndexOutOfBoundsException.))
            (when (< i (TransientVector''tailoff this)) => (:tail this)
                (loop-when-recur [#_"VNode" node (:root this) #_"int" level (:shift this)]
                                 (< 0 level)
                                 [(TransientVector''ensureEditable this, (cast VNode (aget (:array node) (& (>>> i level) 0x01f)))) (- level 5)]
                              => (:array node)
                )
            )
        )
    )

    #_override
    (defn #_"Object" ILookup'''valAt-2--TransientVector [#_"TransientVector" this, #_"Object" key]
        ;; note - relies on ensureEditable in 2-arg valAt
        (.valAt this, key, nil)
    )

    #_override
    (defn #_"Object" ILookup'''valAt-3--TransientVector [#_"TransientVector" this, #_"Object" key, #_"Object" notFound]
        (TransientVector''ensureEditable this)
        (when (Numbers'isInteger key) => notFound
            (let-when [#_"int" i (.intValue key)] (< -1 i (:cnt this)) => notFound
                (nth this i)
            )
        )
    )

    (def- #_"Object" TransientVector'NOT_FOUND (Object.))

    #_override
    (defn #_"boolean" ITransientAssociative2'''containsKey--TransientVector [#_"TransientVector" this, #_"Object" key]
        (not (identical? (get this key TransientVector'NOT_FOUND) TransientVector'NOT_FOUND))
    )

    #_override
    (defn #_"IMapEntry" ITransientAssociative2'''entryAt--TransientVector [#_"TransientVector" this, #_"Object" key]
        (let [#_"Object" v (get this key TransientVector'NOT_FOUND)]
            (when-not (identical? v TransientVector'NOT_FOUND)
                (MapEntry'create key, v)
            )
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-2--TransientVector [#_"TransientVector" this, #_"Object" arg1]
        ;; note - relies on ensureEditable in nth
        (when (Numbers'isInteger arg1) => (throw! "key must be integer")
            (nth this (.intValue arg1))
        )
    )

    #_override
    (defn #_"Object" Indexed'''nth-2--TransientVector [#_"TransientVector" this, #_"int" i]
        (TransientVector''ensureEditable this)
        (let [#_"Object[]" node (TransientVector''arrayFor this, i)]
            (aget node (& i 0x01f))
        )
    )

    #_override
    (defn #_"Object" Indexed'''nth-3--TransientVector [#_"TransientVector" this, #_"int" i, #_"Object" notFound]
        (when (< -1 i (count this)) => notFound
            (nth this i)
        )
    )

    #_method
    (defn- #_"VNode" TransientVector''doAssoc [#_"TransientVector" this, #_"int" level, #_"VNode" node, #_"int" i, #_"Object" val]
        (let [node (TransientVector''ensureEditable this, node)]
            (if (zero? level)
                (aset (:array node) (& i 0x01f) val)
                (let [#_"int" si (& (>>> i level) 0x01f)]
                    (aset (:array node) si (TransientVector''doAssoc this, (- level 5), (cast VNode (aget (:array node) si)), i, val))
                )
            )
            node
        )
    )

    #_override
    (defn #_"TransientVector" ITransientVector'''assocN--TransientVector [#_"TransientVector" this, #_"int" i, #_"Object" val]
        (TransientVector''ensureEditable this)
        (if (< -1 i (:cnt this))
            (if (<= (TransientVector''tailoff this) i)
                (do
                    (aset (:tail this) (& i 0x01f) val)
                    this
                )
                (do
                    (assoc this :root (TransientVector''doAssoc this, (:shift this), (:root this), i, val))
                )
            )
            (when (= i (:cnt this)) => (throw (IndexOutOfBoundsException.))
                (conj! this val)
            )
        )
    )

    #_override
    (defn #_"TransientVector" ITransientAssociative'''assoc--TransientVector [#_"TransientVector" this, #_"Object" key, #_"Object" val]
        ;; note - relies on ensureEditable in assocN
        (when (Numbers'isInteger key) => (throw! "key must be integer")
            (.assocN this, (.intValue key), val)
        )
    )

    #_method
    (defn- #_"VNode" TransientVector''popTail [#_"TransientVector" this, #_"int" level, #_"VNode" node]
        (let [node (TransientVector''ensureEditable this, node)
              #_"int" i (& (>>> (- (:cnt this) 2) level) 0x01f)]
            (cond
                (< 5 level)
                    (let [#_"VNode" child (TransientVector''popTail this, (- level 5), (cast VNode (aget (:array node) i)))]
                        (when-not (and (nil? child) (zero? i))
                            (aset (:array node) i child)
                            node
                        )
                    )
                (pos? i)
                    (do
                        (aset (:array node) i nil)
                        node
                    )
            )
        )
    )

    #_override
    (defn #_"TransientVector" ITransientVector'''pop--TransientVector [#_"TransientVector" this]
        (TransientVector''ensureEditable this)
        (let [#_"int" n (:cnt this)]
            (when-not (zero? n) => (throw! "can't pop empty vector")
                (when (and (not= n 1) (zero? (& (dec n) 0x01f))) => (assoc this :cnt (dec n))
                    (let [#_"Object[]" tail (TransientVector''editableArrayFor this, (- n 2))
                          #_"int" shift (:shift this) #_"VNode" root (:root this)
                          root (or (TransientVector''popTail this, shift, root) (VNode'new (:edit root)))
                          [shift root]
                            (when (and (< 5 shift) (nil? (aget (:array root) 1))) => [shift root]
                                [(- shift 5) (TransientVector''ensureEditable this, (cast VNode (aget (:array root) 0)))]
                            )]
                        (assoc this :cnt (dec n) :shift shift :root root :tail tail)
                    )
                )
            )
        )
    )
)

(class-ns PersistentVector
    (def #_"AtomicReference<Thread>" PersistentVector'NOEDIT (AtomicReference. nil))
    (def #_"VNode" PersistentVector'EMPTY_NODE (VNode'new PersistentVector'NOEDIT, (object-array 32)))

    (defn #_"PersistentVector" PersistentVector'new
        ([#_"int" cnt, #_"int" shift, #_"VNode" root, #_"Object[]" tail] (PersistentVector'new nil, cnt, shift, root, tail))
        ([#_"IPersistentMap" meta, #_"int" cnt, #_"int" shift, #_"VNode" root, #_"Object[]" tail]
            (merge (APersistentVector'new)
                (hash-map
                    #_"IPersistentMap" :_meta meta
                    #_"int" :cnt cnt
                    #_"int" :shift shift
                    #_"VNode" :root root
                    #_"Object[]" :tail tail
                )
            )
        )
    )

    (def #_"PersistentVector" PersistentVector'EMPTY (PersistentVector'new 0, 5, PersistentVector'EMPTY_NODE, (object-array 0)))

    (defn #_"PersistentVector" PersistentVector'adopt [#_"Object[]" items]
        (PersistentVector'new (alength items), 5, PersistentVector'EMPTY_NODE, items)
    )

    (defn #_"PersistentVector" PersistentVector'create-1r [#_"IReduceInit" items]
        (persistent! (reduce conj! (transient PersistentVector'EMPTY) items))
    )

    (defn #_"PersistentVector" PersistentVector'create-1s [#_"ISeq" items]
        (let [#_"Object[]" a (make-array Object 32)
              #_"int" i
                (loop-when-recur [items items i 0] (and (some? items) (< i 32)) [(next items) (inc i)] => i
                    (aset a i (first items))
                )]
            (cond
                (some? items) ;; >32, construct with array directly
                    (let [#_"PersistentVector" v0 (PersistentVector'new 32, 5, PersistentVector'EMPTY_NODE, a)]
                        (loop-when-recur [#_"TransientVector" v (transient v0) items items]
                                         (some? items)
                                         [(conj! v (first items)) (next items)]
                                      => (persistent! v)
                        )
                    )
                (= i 32) ;; exactly 32, skip copy
                    (PersistentVector'new 32, 5, PersistentVector'EMPTY_NODE, a)
                :else ;; <32, copy to minimum array and construct
                    (let [#_"Object[]" b (make-array Object i)]
                        (System/arraycopy a, 0, b, 0, i)
                        (PersistentVector'new i, 5, PersistentVector'EMPTY_NODE, b)
                    )
            )
        )
    )

    (defn #_"PersistentVector" PersistentVector'create-1l [#_"List" items]
        (let-when [#_"int" n (count items)] (< 32 n) => (PersistentVector'new n, 5, PersistentVector'EMPTY_NODE, (.toArray items))
            (loop-when-recur [#_"TransientVector" v (transient PersistentVector'EMPTY) #_"int" i 0]
                             (< i n)
                             [(conj! v (.get items, i)) (inc i)]
                          => (persistent! v)
            )
        )
    )

    (defn #_"PersistentVector" PersistentVector'create-1i [#_"Iterable" items]
        (when-not (instance? ArrayList items) => (PersistentVector'create-1l items) ;; optimize common case
            (let [#_"Iterator" it (.iterator items)]
                (loop-when-recur [#_"TransientVector" v (transient PersistentVector'EMPTY)]
                                 (.hasNext it)
                                 [(conj! v (.next it))]
                              => (persistent! v)
                )
            )
        )
    )

    (defn #_"PersistentVector" PersistentVector'create-1a [& #_"Object..." items]
        (loop-when-recur [#_"TransientVector" v (transient PersistentVector'EMPTY) #_"int" i 0]
                         (< i (alength items))
                         [(conj! v (aget items i)) (inc i)]
                      => (persistent! v)
        )
    )

    #_override
    (defn #_"TransientVector" IEditableCollection'''asTransient--PersistentVector [#_"PersistentVector" this]
        (TransientVector'new this)
    )

    #_method
    (defn #_"int" PersistentVector''tailoff [#_"PersistentVector" this]
        (if (< (:cnt this) 32) 0 (<< (>>> (dec (:cnt this)) 5) 5))
    )

    #_method
    (defn #_"Object[]" PersistentVector''arrayFor [#_"PersistentVector" this, #_"int" i]
        (when (< -1 i (:cnt this)) => (throw (IndexOutOfBoundsException.))
            (when (< i (PersistentVector''tailoff this)) => (:tail this)
                (loop-when-recur [#_"VNode" node (:root this) #_"int" level (:shift this)]
                                 (< 0 level)
                                 [(cast VNode (aget (:array node) (& (>>> i level) 0x01f))) (- level 5)]
                              => (:array node)
                )
            )
        )
    )

    #_override
    (defn #_"Object" Indexed'''nth-2--PersistentVector [#_"PersistentVector" this, #_"int" i]
        (aget (PersistentVector''arrayFor this, i) (& i 0x01f))
    )

    #_override
    (defn #_"Object" Indexed'''nth-3--PersistentVector [#_"PersistentVector" this, #_"int" i, #_"Object" notFound]
        (when (< -1 i (:cnt this)) => notFound
            (nth this i)
        )
    )

    (defn- #_"VNode" PersistentVector'doAssoc [#_"int" level, #_"VNode" node, #_"int" i, #_"Object" val]
        (let [#_"VNode" ret (VNode'new (:edit node), (.clone (:array node)))]
            (if (zero? level)
                (aset (:array ret) (& i 0x01f) val)
                (let [#_"int" si (& (>>> i level) 0x01f)]
                    (aset (:array ret) si (PersistentVector'doAssoc (- level 5), (cast VNode (aget (:array node) si)), i, val))
                )
            )
            ret
        )
    )

    #_override
    (defn #_"PersistentVector" IPersistentVector'''assocN--PersistentVector [#_"PersistentVector" this, #_"int" i, #_"Object" val]
        (if (< -1 i (:cnt this))
            (if (<= (PersistentVector''tailoff this) i)
                (let [#_"Object[]" tail (make-array Object (alength (:tail this)))]
                    (System/arraycopy (:tail this), 0, tail, 0, (alength (:tail this)))
                    (aset tail (& i 0x01f) val)
                    (PersistentVector'new (meta this), (:cnt this), (:shift this), (:root this), tail)
                )
                (PersistentVector'new (meta this), (:cnt this), (:shift this), (PersistentVector'doAssoc (:shift this), (:root this), i, val), (:tail this))
            )
            (when (= i (:cnt this)) => (throw (IndexOutOfBoundsException.))
                (conj this val)
            )
        )
    )

    #_override
    (defn #_"int" Counted'''count--PersistentVector [#_"PersistentVector" this]
        (:cnt this)
    )

    #_override
    (defn #_"PersistentVector" IObj'''withMeta--PersistentVector [#_"PersistentVector" this, #_"IPersistentMap" meta]
        (PersistentVector'new meta, (:cnt this), (:shift this), (:root this), (:tail this))
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--PersistentVector [#_"PersistentVector" this]
        (:_meta this)
    )

    #_method
    (defn- #_"VNode" PersistentVector''pushTail [#_"PersistentVector" this, #_"int" level, #_"VNode" parent, #_"VNode" tailnode]
        ;; if parent is leaf, insert node,
        ;; else does it map to an existing child? -> nodeToInsert = pushNode one more level
        ;; else alloc new path
        ;; return nodeToInsert placed in copy of parent
        (let [#_"int" i (& (>>> (dec (:cnt this)) level) 0x01f)
              #_"VNode" ret (VNode'new (:edit parent), (.clone (:array parent)))
              #_"VNode" nodeToInsert
                (when-not (= level 5) => tailnode
                    (let [#_"VNode" child (cast VNode (aget (:array parent) i))]
                        (if (some? child)
                            (PersistentVector''pushTail this, (- level 5), child, tailnode)
                            (VNode'newPath (:edit (:root this)), (- level 5), tailnode)
                        )
                    )
                )]
            (aset (:array ret) i nodeToInsert)
            ret
        )
    )

    #_override
    (defn #_"PersistentVector" IPersistentVector'''conj--PersistentVector [#_"PersistentVector" this, #_"Object" val]
        (let [#_"int" n (:cnt this)]
            (if (< (- n (PersistentVector''tailoff this)) 32) ;; room in tail?
                (let [#_"int" e (alength (:tail this)) #_"Object[]" tail (make-array Object (inc e))]
                    (System/arraycopy (:tail this), 0, tail, 0, e)
                    (aset tail e val)
                    (PersistentVector'new (meta this), (inc n), (:shift this), (:root this), tail)
                )
                ;; full tail, push into tree
                (let [#_"VNode" tailnode (VNode'new (:edit (:root this)), (:tail this))
                      #_"int" shift (:shift this)
                      [#_"VNode" root shift]
                        (if (< (<< 1 shift) (>>> n 5)) ;; overflow root?
                            (let [root (VNode'new (:edit (:root this)))]
                                (aset (:array root) 0 (:root this))
                                (aset (:array root) 1 (VNode'newPath (:edit (:root this)), shift, tailnode))
                                [root (+ shift 5)]
                            )
                            [(PersistentVector''pushTail this, shift, (:root this), tailnode) shift]
                        )]
                    (PersistentVector'new (meta this), (inc n), shift, root, (object-array [ val ]))
                )
            )
        )
    )

    #_method
    (defn #_"IChunkedSeq" PersistentVector''chunkedSeq [#_"PersistentVector" this]
        (when (pos? (count this))
            (ChunkedSeq'new this, 0, 0)
        )
    )

    #_override
    (defn #_"ISeq" Seqable'''seq--PersistentVector [#_"PersistentVector" this]
        (PersistentVector''chunkedSeq this)
    )

    #_override
    (defn #_"Iterator" APersistentVector'''rangedIterator--PersistentVector [#_"PersistentVector" this, #_"int" start, #_"int" end]
        (§ reify Iterator
            [#_mutable #_"int" i start
             #_mutable #_"int" base (- start (% start 32))
             #_mutable #_"Object[]" a (when (< start (count this)) (PersistentVector''arrayFor this, start))]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (< i end)
            )

            #_foreign
            (#_"Object" next [#_"Iterator" _self]
                (when (< i end) => (throw (NoSuchElementException.))
                    (when (= i (+ base 32))
                        (set! a (PersistentVector''arrayFor this, i))
                        (set! base i)
                    )
                    (let [_ (aget a (& i 0x01f))]
                        (update! i inc)
                        _
                    )
                )
            )
        )
    )

    #_foreign
    (defn #_"Iterator" iterator---PersistentVector [#_"PersistentVector" this]
        (.rangedIterator this, 0, (count this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--PersistentVector [#_"PersistentVector" this, #_"IFn" f]
        (when (pos? (:cnt this)) => (.invoke f)
            (loop-when [#_"Object" r (aget (PersistentVector''arrayFor this, 0) 0) #_"int" i 0] (< i (:cnt this)) => r
                (let [#_"Object[]" a (PersistentVector''arrayFor this, i)
                      r (loop-when [r r #_"int" j (if (zero? i) 1 0)] (< j (alength a)) => r
                            (let [r (.invoke f, r, (aget a j))]
                                (when-not (reduced? r) => (ß return (deref r))
                                    (recur r (inc j))
                                )
                            )
                        )]
                    (recur r (+ i (alength a)))
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--PersistentVector [#_"PersistentVector" this, #_"IFn" f, #_"Object" r]
        (loop-when [r r #_"int" i 0] (< i (:cnt this)) => r
            (let [#_"Object[]" a (PersistentVector''arrayFor this, i)
                  r (loop-when [r r #_"int" j 0] (< j (alength a)) => r
                        (let [r (.invoke f, r, (aget a j))]
                            (when-not (reduced? r) => (ß return (deref r))
                                (recur r (inc j))
                            )
                        )
                    )]
                (recur r (+ i (alength a)))
            )
        )
    )

    #_override
    (defn #_"Object" IKVReduce'''kvreduce--PersistentVector [#_"PersistentVector" this, #_"IFn" f, #_"Object" r]
        (loop-when [r r #_"int" i 0] (< i (:cnt this)) => r
            (let [#_"Object[]" a (PersistentVector''arrayFor this, i)
                  r (loop-when [r r #_"int" j 0] (< j (alength a)) => r
                        (let [r (.invoke f, r, (+ j i), (aget a j))]
                            (when-not (reduced? r) => (ß return (deref r))
                                (recur r (inc j))
                            )
                        )
                    )]
                (recur r (+ i (alength a)))
            )
        )
    )

    #_override
    (defn #_"IPersistentCollection" IPersistentCollection'''empty--PersistentVector [#_"PersistentVector" this]
        (with-meta PersistentVector'EMPTY (meta this))
    )

    #_method
    (defn- #_"VNode" PersistentVector''popTail [#_"PersistentVector" this, #_"int" level, #_"VNode" node]
        (let [#_"int" i (& (>>> (- (:cnt this) 2) level) 0x01f)]
            (cond
                (< 5 level)
                    (let [#_"VNode" child (PersistentVector''popTail this, (- level 5), (cast VNode (aget (:array node) i)))]
                        (when-not (and (nil? child) (zero? i))
                            (let [#_"VNode" ret (VNode'new (:edit (:root this)), (.clone (:array node)))]
                                (aset (:array ret) i child)
                                ret
                            )
                        )
                    )
                (pos? i)
                    (let [#_"VNode" ret (VNode'new (:edit (:root this)), (.clone (:array node)))]
                        (aset (:array ret) i nil)
                        ret
                    )
            )
        )
    )

    #_override
    (defn #_"PersistentVector" IPersistentStack'''pop--PersistentVector [#_"PersistentVector" this]
        (cond
            (zero? (:cnt this))
                (throw! "can't pop empty vector")
            (= (:cnt this) 1)
                (with-meta PersistentVector'EMPTY (meta this))
            (< 1 (- (:cnt this) (PersistentVector''tailoff this)))
                (let [#_"Object[]" tail (make-array Object (dec (alength (:tail this))))]
                    (System/arraycopy (:tail this), 0, tail, 0, (alength tail))
                    (PersistentVector'new (meta this), (dec (:cnt this)), (:shift this), (:root this), tail)
                )
            :else
                (let [#_"Object[]" tail (PersistentVector''arrayFor this, (- (:cnt this) 2))
                      #_"int" shift (:shift this)
                      #_"VNode" root (or (PersistentVector''popTail this, shift, (:root this)) PersistentVector'EMPTY_NODE)
                      [shift root]
                        (when (and (< 5 shift) (nil? (aget (:array root) 1))) => [shift root]
                            [(- shift 5) (cast VNode (aget (:array root) 0))]
                        )]
                    (PersistentVector'new (meta this), (dec (:cnt this)), shift, root, tail)
                )
        )
    )
)
)

(java-ns cloiure.lang.LazilyPersistentVector

(class-ns LazilyPersistentVector
    (defn #_"IPersistentVector" LazilyPersistentVector'createOwning [& #_"Object..." items]
        (if (<= (alength items) 32)
            (PersistentVector'new (alength items), 5, PersistentVector'EMPTY_NODE, items)
            (PersistentVector'create-1a items)
        )
    )

    (declare RT'toArray)

    (defn #_"IPersistentVector" LazilyPersistentVector'create [#_"Object" obj]
        (condp instance? obj
            IReduceInit (PersistentVector'create-1r obj)
            ISeq        (PersistentVector'create-1s (seq obj))
            Iterable    (PersistentVector'create-1i obj)
                        (LazilyPersistentVector'createOwning (RT'toArray obj))
        )
    )
)
)

(java-ns cloiure.lang.Range

;;;
 ; Implements generic numeric (potentially infinite) range.
 ;;
(class-ns Range
    (def- #_"int" Range'CHUNK_SIZE 32)

    (defn- #_"RangeBoundsCheck" Range'positiveStep [#_"Object" end]
        (reify RangeBoundsCheck
            #_override
            (#_"boolean" exceededBounds [#_"RangeBoundsCheck" _self, #_"Object" val]
                (Numbers'gte-2oo val, end)
            )
        )
    )

    (defn- #_"RangeBoundsCheck" Range'negativeStep [#_"Object" end]
        (reify RangeBoundsCheck
            #_override
            (#_"boolean" exceededBounds [#_"RangeBoundsCheck" _self, #_"Object" val]
                (Numbers'lte-2oo val, end)
            )
        )
    )

    (defn- #_"Range" Range'new
        ([#_"Object" start, #_"Object" end, #_"Object" step, #_"RangeBoundsCheck" boundsCheck]
            (Range'new start, end, step, boundsCheck, nil, nil)
        )
        ([#_"Object" start, #_"Object" end, #_"Object" step, #_"RangeBoundsCheck" boundsCheck, #_"IChunk" chunk, #_"ISeq" chunkNext]
            (Range'new nil, start, end, step, boundsCheck, chunk, chunkNext)
        )
        ([#_"IPersistentMap" meta, #_"Object" start, #_"Object" end, #_"Object" step, #_"RangeBoundsCheck" boundsCheck, #_"IChunk" chunk, #_"ISeq" chunkNext]
            (merge (ASeq'new meta)
                (hash-map
                    ;; Invariants guarantee this is never an "empty" seq
                    #_"Object" :start start
                    #_"Object" :end end
                    #_"Object" :step step
                    #_"RangeBoundsCheck" :boundsCheck boundsCheck

                    #_volatile #_"IChunk" :_chunk chunk ;; lazy
                    #_volatile #_"ISeq" :_chunkNext chunkNext ;; lazy
                    #_volatile #_"ISeq" :_next nil ;; cached
                )
            )
        )
    )

    (defn #_"ISeq" Range'create
        ([#_"Object" end]
            (when (Numbers'isPos-1o end) => ()
                (Range'new 0, end, 1, (Range'positiveStep end))
            )
        )
        ([#_"Object" start, #_"Object" end]
            (Range'create start, end, 1)
        )
        ([#_"Object" start, #_"Object" end, #_"Object" step]
            (cond
                (or (and (Numbers'isPos-1o step) (Numbers'gt-2oo start, end))
                    (and (Numbers'isNeg-1o step) (Numbers'gt-2oo end, start))
                    (Numbers'equiv-2oo start, end)
                )
                    ()
                (Numbers'isZero-1o step)
                    (Repeat'create-1 start)
                :else
                    (Range'new start, end, step, (if (Numbers'isPos-1o step) (Range'positiveStep end) (Range'negativeStep end)))
            )
        )
    )

    #_override
    (defn #_"Range" IObj'''withMeta--Range [#_"Range" this, #_"IPersistentMap" meta]
        (when-not (= meta (:_meta this)) => this
            (Range'new meta, (:end this), (:start this), (:step this), (:boundsCheck this), (:_chunk this), (:_chunkNext this))
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--Range [#_"Range" this]
        (:start this)
    )

    #_method
    (defn #_"void" Range''forceChunk [#_"Range" this]
        (when (nil? (:_chunk this))
            (let [#_"Object[]" a (make-array Object Range'CHUNK_SIZE)]
                (loop [#_"Object" n (:start this) #_"int" i 0]
                    (if (< i Range'CHUNK_SIZE)
                        (do
                            (aset a i n)
                            (let-when [n (Numbers'addP-2oo n, (:step this))] (.exceededBounds (:boundsCheck this), n) => (recur n (inc i))
                                ;; partial last chunk
                                (§ set! (:_chunk this) (ArrayChunk'new a, 0, (inc i)))
                            )
                        )
                        (if (.exceededBounds (:boundsCheck this), n)
                            (do
                                ;; full last chunk
                                (§ set! (:_chunk this) (ArrayChunk'new a, 0, Range'CHUNK_SIZE))
                            )
                            (do
                                ;; full intermediate chunk
                                (§ set! (:_chunk this) (ArrayChunk'new a, 0, Range'CHUNK_SIZE))
                                (§ set! (:_chunkNext this) (Range'new n, (:end this), (:step this), (:boundsCheck this)))
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    #_override
    (defn #_"ISeq" ISeq'''next--Range [#_"Range" this]
        (let-when [#_"Range" _next (:_next this)] (nil? _next) => _next
            (Range''forceChunk this)
            (when (< 1 (count (:_chunk this))) => (.chunkedNext this)
                (let [#_"IChunk" _rest (.dropFirst (:_chunk this))]
                    (§ set! (:_next this) (Range'new (nth _rest 0), (:end this), (:step this), (:boundsCheck this), _rest, (:_chunkNext this)))
                )
            )
        )
    )

    #_override
    (defn #_"IChunk" IChunkedSeq'''chunkedFirst--Range [#_"Range" this]
        (Range''forceChunk this)
        (:_chunk this)
    )

    #_override
    (defn #_"ISeq" IChunkedSeq'''chunkedNext--Range [#_"Range" this]
        (seq (.chunkedMore this))
    )

    #_override
    (defn #_"ISeq" IChunkedSeq'''chunkedMore--Range [#_"Range" this]
        (Range''forceChunk this)
        (or (:_chunkNext this) ())
    )

    #_override
    (defn #_"Object" IReduce'''reduce--Range [#_"Range" this, #_"IFn" f]
        (loop [#_"Object" r (:start this) #_"Number" n r]
            (let-when-not [n (Numbers'addP-2oo n, (:step this))] (.exceededBounds (:boundsCheck this), n) => r
                (let-when-not [r (.invoke f, r, n)] (reduced? r) => (deref r)
                    (recur r n)
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--Range [#_"Range" this, #_"IFn" f, #_"Object" r]
        (loop [r r #_"Object" n (:start this)]
            (let-when-not [r (.invoke f, r, n)] (reduced? r) => (deref r)
                (let-when-not [n (Numbers'addP-2oo n, (:step this))] (.exceededBounds (:boundsCheck this), n) => r
                    (recur r n)
                )
            )
        )
    )

    #_foreign
    (defn #_"Iterator" iterator---Range [#_"Range" this]
        (§ reify Iterator
            [#_mutable #_"Object" n (:start this)]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (not (.exceededBounds (:boundsCheck this), n))
            )

            #_foreign
            (#_"Object" next [#_"Iterator" self]
                (when (.hasNext self) => (throw (NoSuchElementException.))
                    (let [_ n]
                        (update! n Numbers'addP-2oo (:step this))
                        _
                    )
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.Reduced

(class-ns Reduced
    (defn #_"Reduced" Reduced'new [#_"Object" val]
        (hash-map
            #_"Object" :val val
        )
    )

    #_override
    (defn #_"Object" IDeref'''deref--Reduced [#_"Reduced" this]
        (:val this)
    )
)
)

(java-ns cloiure.lang.Repeat

(class-ns Repeat
    (def- #_"long" Repeat'INFINITE -1)

    (defn- #_"Repeat" Repeat'new
        ([#_"long" count, #_"Object" val] (Repeat'new nil, count, val))
        ([#_"IPersistentMap" meta, #_"long" count, #_"Object" val]
            (merge (ASeq'new meta)
                (hash-map
                    #_"long" :count count ;; always INFINITE or pos?
                    #_"Object" :val val

                    #_volatile #_"ISeq" :_next nil ;; cached
                )
            )
        )
    )

    (defn #_"Repeat" Repeat'create-1 [#_"Object" val]
        (Repeat'new Repeat'INFINITE, val)
    )

    (defn #_"ISeq" Repeat'create-2 [#_"long" count, #_"Object" val]
        (if (pos? count) (Repeat'new count, val) ())
    )

    #_override
    (defn #_"Object" ISeq'''first--Repeat [#_"Repeat" this]
        (:val this)
    )

    #_override
    (defn #_"ISeq" ISeq'''next--Repeat [#_"Repeat" this]
        (when (nil? (:_next this))
            (cond
                (< 1 (:count this))               (§ set! (:_next this) (Repeat'new (dec (:count this)), (:val this)))
                (= (:count this) Repeat'INFINITE) (§ set! (:_next this) this)
            )
        )
        (:_next this)
    )

    #_override
    (defn #_"Repeat" IObj'''withMeta--Repeat [#_"Repeat" this, #_"IPersistentMap" meta]
        (Repeat'new meta, (:count this), (:val this))
    )

    #_override
    (defn #_"Object" IReduce'''reduce--Repeat [#_"Repeat" this, #_"IFn" f]
        (let [#_"Object" r (:val this)]
            (if (= (:count this) Repeat'INFINITE)
                (loop [r r]
                    (let [r (.invoke f, r, (:val this))]
                        (if (reduced? r) (deref r) (recur r))
                    )
                )
                (loop-when [r r #_"long" i 1] (< i (:count this)) => r
                    (let [r (.invoke f, r, (:val this))]
                        (if (reduced? r) (deref r) (recur r (inc i)))
                    )
                )
            )
        )
    )

    #_override
    (defn #_"Object" IReduceInit'''reduce--Repeat [#_"Repeat" this, #_"IFn" f, #_"Object" r]
        (if (= (:count this) Repeat'INFINITE)
            (loop [r r]
                (let [r (.invoke f, r, (:val this))]
                    (if (reduced? r) (deref r) (recur r))
                )
            )
            (loop-when [r r #_"long" i 0] (< i (:count this)) => r
                (let [r (.invoke f, r, (:val this))]
                    (if (reduced? r) (deref r) (recur r (inc i)))
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.SeqIterator

(class-ns SeqIterator
    (def- #_"Object" SeqIterator'START (Object.))

    (defn #_"Iterator" SeqIterator'new [#_"Object" o]
        (§ reify Iterator
            [#_mutable #_"Object" s SeqIterator'START
             #_mutable #_"Object" n o]

            #_foreign
            (#_"boolean" hasNext [#_"Iterator" _self]
                (some?
                    (condp identical? s
                        SeqIterator'START (do (set! s nil) (update! n seq))
                        n (update! n next)
                        :else n
                    )
                )
            )

            #_foreign
            (#_"Object" next [#_"Iterator" self]
                (when (.hasNext self) => (throw (NoSuchElementException.))
                    (first (set! s n))
                )
            )
        )
    )
)
)

(java-ns cloiure.lang.StringSeq

(class-ns StringSeq
    (defn- #_"StringSeq" StringSeq'new [#_"IPersistentMap" meta, #_"CharSequence" s, #_"int" i]
        (merge (ASeq'new meta)
            (hash-map
                #_"CharSequence" :s s
                #_"int" :i i
            )
        )
    )

    (defn #_"StringSeq" StringSeq'create [#_"CharSequence" s]
        (when (pos? (.length s))
            (StringSeq'new nil, s, 0)
        )
    )

    #_override
    (defn #_"StringSeq" IObj'''withMeta--StringSeq [#_"StringSeq" this, #_"IPersistentMap" meta]
        (when-not (= meta (meta this)) => this
            (StringSeq'new meta, (:s this), (:i this))
        )
    )

    #_override
    (defn #_"Object" ISeq'''first--StringSeq [#_"StringSeq" this]
        (Character/valueOf (.charAt (:s this), (:i this)))
    )

    #_override
    (defn #_"ISeq" ISeq'''next--StringSeq [#_"StringSeq" this]
        (when (< (inc (:i this)) (.length (:s this)))
            (StringSeq'new (:_meta this), (:s this), (inc (:i this)))
        )
    )

    #_override
    (defn #_"int" IndexedSeq'''index--StringSeq [#_"StringSeq" this]
        (:i this)
    )

    #_override
    (defn #_"int" Counted'''count--StringSeq [#_"StringSeq" this]
        (- (.length (:s this)) (:i this))
    )
)
)

(java-ns cloiure.lang.Tuple

(class-ns Tuple
    (def #_"int" Tuple'MAX_SIZE 6)

    (defn #_"IPersistentVector" Tuple'create
        ([] [])
        ([#_"Object" v0] (vector v0))
        ([#_"Object" v0, #_"Object" v1] (vector v0 v1))
        ([#_"Object" v0, #_"Object" v1, #_"Object" v2] (vector v0 v1 v2))
        ([#_"Object" v0, #_"Object" v1, #_"Object" v2, #_"Object" v3] (vector v0 v1 v2 v3))
        ([#_"Object" v0, #_"Object" v1, #_"Object" v2, #_"Object" v3, #_"Object" v4] (vector v0 v1 v2 v3 v4))
        ([#_"Object" v0, #_"Object" v1, #_"Object" v2, #_"Object" v3, #_"Object" v4, #_"Object" v5] (vector v0 v1 v2 v3 v4 v5))
    )
)
)

(java-ns cloiure.lang.Var

(class-ns TBox
    (defn #_"TBox" TBox'new [#_"Thread" t, #_"Object" val]
        (hash-map
            #_"Thread" :thread t
            #_volatile #_"Object" :val val
        )
    )
)

(class-ns Unbound
    (defn #_"Unbound" Unbound'new [#_"Var" v]
        (merge (AFn'new)
            (hash-map
                #_"Var" :v v
            )
        )
    )

    #_foreign
    (defn #_"String" toString---Unbound [#_"Unbound" this]
        (str "Unbound: " (:v this))
    )

    #_override
    (defn #_"Object" AFn'''throwArity--Unbound [#_"Unbound" this, #_"int" n]
        (throw! (str "attempting to call unbound fn: " (:v this)))
    )
)

(class-ns Frame
    (defn #_"Frame" Frame'new [#_"Associative" bindings, #_"Frame" prev]
        (hash-map
            ;; Var->TBox
            #_"Associative" :bindings bindings
            ;; Var->val
            #_"Frame" :prev prev
        )
    )

    (def #_"Frame" Frame'TOP (Frame'new {}, nil))
)

(class-ns Var
    (def #_"ThreadLocal<Frame>" Var'dvals
        (proxy [ThreadLocal #_"<Frame>"] []
            #_foreign
            (#_"Frame" initialValue [#_"ThreadLocal<Frame>" #_this]
                Frame'TOP
            )
        )
    )

    (defn #_"Var" Var'find [#_"Symbol" sym]
        (when (some? (:ns sym)) => (throw! "symbol must be namespace-qualified")
            (let [#_"Namespace" ns (Namespace'find (Symbol'intern (:ns sym)))]
                (when (some? ns) => (throw! (str "no such namespace: " (:ns sym)))
                    (Namespace''findInternedVar ns, (Symbol'intern (:name sym)))
                )
            )
        )
    )

    #_method
    (defn #_"void" Var''setMeta [#_"Var" this, #_"IPersistentMap" m]
        ;; ensure these basis keys
        (reset-meta! this (assoc m :name (:sym this) :ns (:ns this)))
        nil
    )

    (defn #_"Var" Var'create
        ([               ] (Var'new nil, nil      ))
        ([#_"Object" root] (Var'new nil, nil, root))
    )

    (defn #_"Var" Var'new
        ([#_"Namespace" ns, #_"Symbol" sym]
            (let [this
                    (hash-map
                        #_mutable #_"IPersistentMap" :_meta nil
                        #_"Namespace" :ns ns
                        #_"Symbol" :sym sym

                        #_volatile #_"Object" :root (Unbound'new (§ cyc this))
                        #_volatile #_"boolean" :dynamic false
                        #_"AtomicBoolean" :threadBound (AtomicBoolean. false)
                    )]
                (Var''setMeta this, {})
                this
            )
        )
        ([#_"Namespace" ns, #_"Symbol" sym, #_"Object" root]
            (let [this (Var'new ns, sym)]
                (§ set! (:root this) root)
                this
            )
        )
    )

    #_override
    (defn #_"IPersistentMap" IMeta'''meta--Var [#_"Var" this]
        (§ sync this
            (:_meta this)
        )
    )

    #_override
    (defn #_"IPersistentMap" IReference'''alterMeta--Var [#_"Var" this, #_"IFn" f, #_"ISeq" args]
        (§ sync this
            (§ update! (:_meta this) #(apply f % args))
        )
    )

    #_override
    (defn #_"IPersistentMap" IReference'''resetMeta--Var [#_"Var" this, #_"IPersistentMap" m]
        (§ sync this
            (§ set! (:_meta this) m)
        )
    )

    #_method
    (defn #_"Var" Var''setDynamic
        ([#_"Var" this] (Var''setDynamic this, true))
        ([#_"Var" this, #_"boolean" b] (§ set! (:dynamic this) b) this)
    )

    #_method
    (defn #_"boolean" Var''isDynamic [#_"Var" this]
        (:dynamic this)
    )

    #_foreign
    (defn #_"String" toString---Var [#_"Var" this]
        (if (some? (:ns this))
            (str "#'" (:name (:ns this)) "/" (:sym this))
            (str "#<Var: " (or (:sym this) "--unnamed--") ">")
        )
    )

    #_method
    (defn #_"boolean" Var''hasRoot [#_"Var" this]
        (not (instance? Unbound (:root this)))
    )

    #_method
    (defn #_"boolean" Var''isBound [#_"Var" this]
        (or (Var''hasRoot this) (and (.get (:threadBound this)) (contains? (:bindings (.get Var'dvals)) this)))
    )

    #_method
    (defn #_"Object" Var''get [#_"Var" this]
        (if (.get (:threadBound this)) (deref this) (:root this))
    )

    #_method
    (defn #_"TBox" Var''getThreadBinding [#_"Var" this]
        (when (.get (:threadBound this))
            (when-let [#_"IMapEntry" e (find (:bindings (.get Var'dvals)) this)]
                (val e)
            )
        )
    )

    #_override
    (defn #_"Object" IDeref'''deref--Var [#_"Var" this]
        (let [#_"TBox" b (Var''getThreadBinding this)]
            (if (some? b) (:val b) (:root this))
        )
    )

    #_method
    (defn #_"Object" Var''set [#_"Var" this, #_"Object" val]
        (let [#_"TBox" tb (Var''getThreadBinding this)]
            (when (some? tb) => (throw! (str "can't change/establish root binding of: " (:sym this) " with set"))
                (when (= (Thread/currentThread) (:thread tb)) => (throw! (str "can't set!: " (:sym this) " from non-binding thread"))
                    (§ set! (:val tb) val)
                )
            )
        )
    )

    #_method
    (defn #_"Object" Var''alter [#_"Var" this, #_"IFn" fn, #_"ISeq" args]
        (Var''set this, (.applyTo fn, (cons (deref this) args)))
        this
    )

    #_method
    (defn #_"void" Var''setMacro [#_"Var" this]
        (alter-meta! this assoc :macro true)
        nil
    )

    #_method
    (defn #_"boolean" Var''isMacro [#_"Var" this]
        (boolean (get (meta this) :macro))
    )

    #_method
    (defn #_"boolean" Var''isPublic [#_"Var" this]
        (not (get (meta this) :private))
    )

    #_method
    (defn #_"Object" Var''getRawRoot [#_"Var" this]
        (:root this)
    )

    #_method
    (defn #_"Object" Var''getTag [#_"Var" this]
        (get (meta this) :tag)
    )

    #_method
    (defn #_"void" Var''setTag [#_"Var" this, #_"Symbol" tag]
        (alter-meta! this assoc :tag tag)
        nil
    )

    ;; binding root always clears macro flag
    #_method
    (defn #_"void" Var''bindRoot [#_"Var" this, #_"Object" root]
        (§ sync this
            (§ set! (:root this) root)
            (alter-meta! this dissoc :macro)
        )
        nil
    )

    #_method
    (defn #_"void" Var''swapRoot [#_"Var" this, #_"Object" root]
        (§ sync this
            (§ set! (:root this) root)
        )
        nil
    )

    #_method
    (defn #_"void" Var''unbindRoot [#_"Var" this]
        (§ sync this
            (§ set! (:root this) (Unbound'new (§ cyc this)))
        )
        nil
    )

    #_method
    (defn #_"void" Var''commuteRoot [#_"Var" this, #_"IFn" fn]
        (§ sync this
            (§ set! (:root this) (.invoke fn, (:root this)))
        )
        nil
    )

    #_method
    (defn #_"Object" Var''alterRoot [#_"Var" this, #_"IFn" fn, #_"ISeq" args]
        (§ sync this
            (§ set! (:root this) (.applyTo fn, (cons (:root this) args)))
        )
    )

    (defn #_"Var" Var'intern
        ([#_"Namespace" ns, #_"Symbol" sym]
            (Namespace''intern ns, sym)
        )
        ([#_"Namespace" ns, #_"Symbol" sym, #_"Object" root]
            (Var'intern ns, sym, root, true)
        )
        ([#_"Namespace" ns, #_"Symbol" sym, #_"Object" root, #_"boolean" replaceRoot]
            (let [#_"Var" v (Namespace''intern ns, sym)]
                (when (or (not (Var''hasRoot v)) replaceRoot)
                    (Var''bindRoot v, root)
                )
                v
            )
        )
    )

    (defn #_"Var" Var'internPrivate [#_"String" nsName, #_"String" sym]
        (let [#_"Namespace" ns (Namespace'findOrCreate (Symbol'intern nsName)) #_"Var" v (Var'intern ns, (Symbol'intern sym))]
            (Var''setMeta v, {:private true})
            v
        )
    )

    (defn #_"void" Var'pushThreadBindings [#_"Associative" bindings]
        (let [#_"Frame" f (.get Var'dvals)]
            (loop-when [#_"Associative" m (:bindings f) #_"ISeq" s (seq bindings)] (some? s) => (.set Var'dvals, (Frame'new m, f))
                (let [#_"IMapEntry" e (first s) #_"Var" v (key e)]
                    (when-not (Var''isDynamic v)
                        (throw! (str "can't dynamically bind non-dynamic var: " (:ns v) "/" (:sym v)))
                    )
                    (.set (:threadBound v), true)
                    (recur (assoc m v (TBox'new (Thread/currentThread), (val e))) (next s))
                )
            )
        )
        nil
    )

    (defn #_"void" Var'popThreadBindings []
        (let [#_"Frame" f (:prev (.get Var'dvals))]
            (cond
                (nil? f)        (throw! "pop without matching push")
                (= f Frame'TOP) (.remove Var'dvals)
                :else           (.set Var'dvals, f)
            )
        )
        nil
    )

    (defn #_"Associative" Var'getThreadBindings []
        (let [#_"Frame" f (.get Var'dvals)]
            (loop-when [#_"IPersistentMap" m {} #_"ISeq" s (seq (:bindings f))] (some? s) => m
                (let [#_"IMapEntry" e (first s) #_"Var" v (key e) #_"TBox" b (val e)]
                    (recur (assoc m v (:val b)) (next s))
                )
            )
        )
    )

    #_method
    (defn #_"IFn" Var''fn [#_"Var" this]
        (cast IFn (deref this))
    )

    #_foreign
    (defn #_"Object" call---Var [#_"Var" this]
        (.invoke this)
    )

    #_foreign
    (defn #_"void" run---Var [#_"Var" this]
        (.invoke this)
        nil
    )

    #_override
    (defn #_"Object" IFn'''invoke-1--Var [#_"Var" this]
        (.invoke (Var''fn this))
    )

    #_override
    (defn #_"Object" IFn'''invoke-2--Var [#_"Var" this, #_"Object" arg1]
        (.invoke (Var''fn this), arg1)
    )

    #_override
    (defn #_"Object" IFn'''invoke-3--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2]
        (.invoke (Var''fn this), arg1, arg2
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-4--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3]
        (.invoke (Var''fn this), arg1, arg2, arg3
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-5--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-6--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-7--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-8--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-9--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-10--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-11--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-12--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-13--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-14--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-15--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-16--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-17--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-18--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17
        )
    )

    #_override
    (defn #_"Object" IFn'''invoke-19--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18
        )
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-20--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19
        )
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-21--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20
        )
    )

    #_override
  #_(defn #_"Object" IFn'''invoke-22--Var [#_"Var" this, #_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"Object" arg6, #_"Object" arg7, #_"Object" arg8, #_"Object" arg9, #_"Object" arg10, #_"Object" arg11, #_"Object" arg12, #_"Object" arg13, #_"Object" arg14, #_"Object" arg15, #_"Object" arg16, #_"Object" arg17, #_"Object" arg18, #_"Object" arg19, #_"Object" arg20 & #_"Object..." args]
        (.invoke (Var''fn this), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20,
            (cast Compiler'OBJECTS_CLASS args)
        )
    )

    #_override
    (defn #_"Object" IFn'''applyTo--Var [#_"Var" this, #_"ISeq" args]
        (.applyTo (Var''fn this), args)
    )
)
)

(java-ns cloiure.lang.Volatile

(class-ns Volatile
    (defn #_"Volatile" Volatile'new [#_"Object" val]
        (hash-map
            #_volatile #_"Object" :val val
        )
    )

    #_override
    (defn #_"Object" IDeref'''deref--Volatile [#_"Volatile" this]
        (:val this)
    )

    #_method
    (defn #_"Object" Volatile''reset [#_"Volatile" this, #_"Object" newval]
        (§ set! (:val this) newval)
    )
)
)

(java-ns cloiure.lang.RT

(class-ns RT
    (def #_"Namespace" RT'CLOIURE_NS (§ soon Namespace'findOrCreate (Symbol'intern "cloiure.core")))

    ;;;
     ; A java.io.Reader object representing standard input for read operations.
     ; Defaults to System/in, wrapped in a PushbackReader.
     ;;
    (def #_"Var" RT'IN (§ soon Var''setDynamic (Var'intern RT'CLOIURE_NS, (Symbol'intern "*in*"), (PushbackReader. (InputStreamReader. System/in)))))
    ;;;
     ; A java.io.Writer object representing standard output for print operations.
     ; Defaults to System/out, wrapped in an OutputStreamWriter.
     ;;
    (def #_"Var" RT'OUT (§ soon Var''setDynamic (Var'intern RT'CLOIURE_NS, (Symbol'intern "*out*"), (OutputStreamWriter. System/out))))
    ;;;
     ; A java.io.Writer object representing standard error for print operations.
     ; Defaults to System/err, wrapped in a PrintWriter.
     ;;
    (def #_"Var" RT'ERR (§ soon Var''setDynamic (Var'intern RT'CLOIURE_NS, (Symbol'intern "*err*"), (PrintWriter. (OutputStreamWriter. System/err), true))))

    (def #_"Var" RT'ASSERT (§ soon Var''setDynamic (Var'intern RT'CLOIURE_NS, (Symbol'intern "*assert*"), true)))
    (def #_"Var" RT'MATH_CONTEXT (§ soon Var''setDynamic (Var'intern RT'CLOIURE_NS, (Symbol'intern "*math-context*"), nil)))

    ;;;
     ; A cloiure.lang.Namespace object representing the current namespace.
     ;;
    (def #_"Var" RT'CURRENT_NS (§ soon Var''setDynamic (Var'intern RT'CLOIURE_NS, (Symbol'intern "*ns*"), RT'CLOIURE_NS)))
    ;;;
     ; When set to true, output will be flushed whenever a newline is printed.
     ; Defaults to true.
     ;;
    (def #_"Var" RT'FLUSH_ON_NEWLINE (§ soon Var''setDynamic (Var'intern RT'CLOIURE_NS, (Symbol'intern "*flush-on-newline*"), true)))
    ;;;
     ; When set to logical false, strings and characters will be printed with
     ; non-alphanumeric characters converted to the appropriate escape sequences.
     ; Defaults to true.
     ;;
    (def #_"Var" RT'PRINT_READABLY (§ soon Var''setDynamic (Var'intern RT'CLOIURE_NS, (Symbol'intern "*print-readably*"), true)))
    ;;;
     ; When set to true, the compiler will emit warnings when reflection
     ; is needed to resolve Java method calls or field accesses.
     ; Defaults to false.
     ;;
    (def #_"Var" RT'WARN_ON_REFLECTION (§ soon Var''setDynamic (Var'intern RT'CLOIURE_NS, (Symbol'intern "*warn-on-reflection*"), false)))

    (§ static
        (Var''setTag RT'OUT, (Symbol'intern "java.io.Writer"))
        (Var''setTag RT'CURRENT_NS, (Symbol'intern "cloiure.lang.Namespace"))
        (Var''setTag RT'MATH_CONTEXT, (Symbol'intern "java.math.MathContext"))
    )

    (def #_"AtomicInteger" RT'ID (AtomicInteger. 1))

    (defn #_"int" RT'nextID []
        (.getAndIncrement RT'ID)
    )

    (def- #_"int" RT'CHUNK_SIZE 32)

    (defn #_"ISeq" RT'chunkIteratorSeq [#_"Iterator" it]
        (when (.hasNext it)
            (LazySeq'new
                (fn #_"Object" []
                    (let [#_"Object[]" a (make-array Object RT'CHUNK_SIZE)
                          #_"int" n
                            (loop-when-recur [n 0] (and (.hasNext it) (< n RT'CHUNK_SIZE)) [(inc n)] => n
                                (aset a n (.next it))
                            )]
                        (ChunkedCons'new (ArrayChunk'new a, 0, n), (RT'chunkIteratorSeq it))
                    )
                )
            )
        )
    )

    (declare RT'seqFrom)

    (defn #_"ISeq" RT'seq [#_"Object" coll]
        (condp instance? coll
            ASeq    coll
            LazySeq (.seq coll)
                    (RT'seqFrom coll)
        )
    )

    ;; N.B. canSeq must be kept in sync with this!
    (defn #_"ISeq" RT'seqFrom [#_"Object" coll]
        (cond
            (instance? Seqable coll)      (.seq coll)
            (nil? coll)                   nil
            (instance? Iterable coll)     (RT'chunkIteratorSeq (.iterator coll))
            (.isArray (class coll))       (ArraySeq'createFromObject coll)
            (instance? CharSequence coll) (StringSeq'create coll)
            (instance? Map coll)          (seq (.entrySet coll))
            :else (throw! (str "don't know how to create ISeq from: " (.getName (class coll))))
        )
    )

    (defn #_"boolean" RT'canSeq [#_"Object" coll]
        (or
            (instance? ISeq coll)
            (instance? Seqable coll)
            (nil? coll)
            (instance? Iterable coll)
            (.isArray (class coll))
            (instance? CharSequence coll)
            (instance? Map coll)
        )
    )

    (defn #_"Object" RT'seqOrElse [#_"Object" o]
        (when (some? (seq o))
            o
        )
    )

    (defn #_"ISeq" RT'keys [#_"Object" coll]
        (if (instance? IPersistentMap coll)
            (KeySeq'createFromMap coll)
            (KeySeq'create (seq coll))
        )
    )

    (defn #_"ISeq" RT'vals [#_"Object" coll]
        (if (instance? IPersistentMap coll)
            (ValSeq'createFromMap coll)
            (ValSeq'create (seq coll))
        )
    )

    (defn #_"IPersistentMap" RT'meta [#_"Object" x]
        (when (instance? IMeta x)
            (.meta x)
        )
    )

    (defn #_"int" RT'count [#_"Object" o]
        (cond
            (instance? Counted o)
                (.count o)
            (nil? o)
                0
            (instance? IPersistentCollection o)
                (loop-when [#_"int" i 0 #_"ISeq" s (seq o)] (some? s) => i
                    (when (instance? Counted s) => (recur (inc i) (next s))
                        (+ i (.count s))
                    )
                )
            (instance? CharSequence o)
                (.length o)
            (instance? Collection o)
                (.size o)
            (instance? Map o)
                (.size o)
            (instance? Map$Entry o)
                2
            (.isArray (class o))
                (Array/getLength o)
            :else
                (throw! (str "count not supported on this type: " (.getSimpleName (class o))))
        )
    )

    (defn #_"IPersistentCollection" RT'conj [#_"IPersistentCollection" coll, #_"Object" x]
        (if (some? coll) (.conj coll, x) (PersistentList'new x))
    )

    (defn #_"ISeq" RT'cons [#_"Object" x, #_"Object" coll]
        (cond
            (nil? coll)           (PersistentList'new x)
            (instance? ISeq coll) (Cons'new x, coll)
            :else                 (Cons'new x, (seq coll))
        )
    )

    (defn #_"Object" RT'first [#_"Object" x]
        (if (instance? ISeq x)
            (.first x)
            (when-let [#_"ISeq" s (seq x)]
                (.first s)
            )
        )
    )

    (defn #_"ISeq" RT'next [#_"Object" x]
        (if (instance? ISeq x)
            (.next x)
            (when-let [#_"ISeq" s (seq x)]
                (.next s)
            )
        )
    )

    (defn #_"ISeq" RT'rest [#_"Object" x]
        (if (instance? ISeq x)
            (.rest x)
            (let [#_"ISeq" s (seq x)]
                (if (some? s) (.rest s) ())
            )
        )
    )

    (defn #_"Object" RT'peek [#_"Object" x]
        (when (some? x)
            (.peek (cast IPersistentStack x))
        )
    )

    (defn #_"Object" RT'pop [#_"Object" x]
        (when (some? x)
            (.pop (cast IPersistentStack x))
        )
    )

    (defn #_"Object" RT'get
        ([#_"Object" coll, #_"Object" key]
            (cond
                (instance? ILookup coll)
                    (.valAt coll, key)
                (nil? coll)
                    nil
                (instance? Map coll)
                    (.get coll, key)
                (instance? IPersistentSet coll)
                    (.get coll, key)
                (and (number? key) (or (string? coll) (.isArray (class coll))))
                    (let-when [#_"int" n (.intValue key)] (< -1 n (count coll))
                        (nth coll n)
                    )
                (instance? ITransientSet coll)
                    (.get coll, key)
            )
        )
        ([#_"Object" coll, #_"Object" key, #_"Object" notFound]
            (cond
                (instance? ILookup coll)
                    (.valAt coll, key, notFound)
                (nil? coll)
                    notFound
                (instance? Map coll)
                    (let [#_"Map" m coll]
                        (if (contains? m key) (.get m, key) notFound)
                    )
                (instance? IPersistentSet coll)
                    (let [#_"IPersistentSet" s coll]
                        (if (contains? s key) (.get s, key) notFound)
                    )
                (and (number? key) (or (string? coll) (.isArray (class coll))))
                    (let [#_"int" n (.intValue key)]
                        (if (< -1 n (count coll)) (nth coll n) notFound)
                    )
                (instance? ITransientSet coll)
                    (let [#_"ITransientSet" s coll]
                        (if (contains? s key) (.get s, key) notFound)
                    )
                :else
                    notFound
            )
        )
    )

    (defn #_"Associative" RT'assoc [#_"Object" coll, #_"Object" key, #_"Object" val]
        (if (some? coll)
            (.assoc (cast Associative coll), key, val)
            (PersistentArrayMap'new (object-array [ key, val ]))
        )
    )

    (defn #_"Object" RT'contains [#_"Object" coll, #_"Object" key]
        (cond
            (nil? coll)
                false
            (instance? Associative coll)
                (if (.containsKey coll, key) true false)
            (instance? IPersistentSet coll)
                (if (.contains coll, key) true false)
            (instance? Map coll)
                (if (.containsKey coll, key) true false)
            (instance? Set coll)
                (if (.contains coll, key) true false)
            (and (number? key) (or (string? coll) (.isArray (class coll))))
                (let [#_"int" n (.intValue key)]
                    (if (< -1 n (count coll)) true false)
                )
            (instance? ITransientSet coll)
                (if (.contains coll, key) true false)
            (instance? ITransientAssociative2 coll)
                (if (.containsKey coll, key) true false)
            :else
                (throw! (str "contains? not supported on type: " (.getName (class coll))))
        )
    )

    (defn #_"Object" RT'find [#_"Object" coll, #_"Object" key]
        (cond
            (nil? coll)
                nil
            (instance? Associative coll)
                (.entryAt coll, key)
            (instance? Map coll)
                (let-when [#_"Map" m coll] (contains? m key)
                    (MapEntry'create key, (.get m, key))
                )
            (instance? ITransientAssociative2 coll)
                (.entryAt coll, key)
            :else
                (throw! (str "find not supported on type: " (.getName (class coll))))
        )
    )

    ;; takes a seq of key, val, key, val
    ;; returns tail starting at val of matching key if found, else nil

    (defn #_"ISeq" RT'findKey [#_"Keyword" key, #_"ISeq" keyvals]
        (loop-when keyvals (some? keyvals)
            (let-when [#_"ISeq" s (next keyvals)] (some? s) => (throw! "malformed keyword argslist")
                (when-not (= (first keyvals) key) => s
                    (recur (next s))
                )
            )
        )
    )

    (defn #_"Object" RT'dissoc [#_"Object" coll, #_"Object" key]
        (when (some? coll)
            (.dissoc (cast IPersistentMap coll), key)
        )
    )

    (defn #_"Object" RT'nth
        ([#_"Object" coll, #_"int" n]
            (cond
                (instance? Indexed coll)
                    (.nth coll, n)
                (nil? coll)
                    nil
                (instance? CharSequence coll)
                    (Character/valueOf (.charAt coll, n))
                (.isArray (class coll))
                    (Reflector'prepRet (.getComponentType (class coll)), (Array/get coll, n))
                (instance? Matcher coll)
                    (.group coll, n)
                (instance? Map$Entry coll)
                    (let [#_"Map$Entry" e coll]
                        (case n 0 (key e) 1 (val e) (throw (IndexOutOfBoundsException.)))
                    )
                (instance? Sequential coll)
                    (loop-when [#_"int" i 0 #_"ISeq" s (seq coll)] (and (<= i n) (some? s)) => (throw (IndexOutOfBoundsException.))
                        (recur-if (< i n) [(inc i) (next s)] => (first s))
                    )
                :else
                    (throw! (str "nth not supported on this type: " (.getSimpleName (class coll))))
            )
        )
        ([#_"Object" coll, #_"int" n, #_"Object" notFound]
            (cond
                (instance? Indexed coll)
                    (.nth coll, n, notFound)
                (nil? coll)
                    notFound
                (neg? n)
                    notFound
                (instance? CharSequence coll)
                    (let [#_"CharSequence" s coll]
                        (if (< n (.length s)) (Character/valueOf (.charAt s, n)) notFound)
                    )
                (.isArray (class coll))
                    (when (< n (Array/getLength coll)) => notFound
                        (Reflector'prepRet (.getComponentType (class coll)), (Array/get coll, n))
                    )
                (instance? Matcher coll)
                    (let-when [#_"Matcher" m coll] (< n (.groupCount m)) => notFound
                        (.group m, n)
                    )
                (instance? Map$Entry coll)
                    (let [#_"Map$Entry" e coll]
                        (case n 0 (key e) 1 (val e) notFound)
                    )
                (instance? Sequential coll)
                    (loop-when [#_"int" i 0 #_"ISeq" s (seq coll)] (and (<= i n) (some? s)) => notFound
                        (recur-if (< i n) [(inc i) (next s)] => (first s))
                    )
                :else
                    (throw! (str "nth not supported on this type: " (.getSimpleName (class coll))))
            )
        )
    )

    (defn #_"Object" RT'assocN [#_"int" n, #_"Object" val, #_"Object" coll]
        (condp instance? coll
            IPersistentVector
                (.assocN coll, n, val)
            Compiler'OBJECTS_CLASS
                ;; hmm... this is not persistent
                (let [#_"Object[]" array coll]
                    (aset array n val)
                    array
                )
            nil
        )
    )

    (defn #_"Object"    RT'box-1o [#_"Object"  x] x)
    (defn #_"Character" RT'box-1c [#_"char"    x] (Character/valueOf x))
    (defn #_"Object"    RT'box-1z [#_"boolean" x] (if x true false))
    (defn #_"Object"    RT'box-1Z [#_"Boolean" x] x)
    (defn #_"Number"    RT'box-1b [#_"byte"    x] x)
    (defn #_"Number"    RT'box-1s [#_"short"   x] x)
    (defn #_"Number"    RT'box-1i [#_"int"     x] x)
    (defn #_"Number"    RT'box-1l [#_"long"    x] x)
    (defn #_"Number"    RT'box-1f [#_"float"   x] x)
    (defn #_"Number"    RT'box-1d [#_"double"  x] x)

    (defn #_"char" RT'charCast-1b [#_"byte" x]
        (let [#_"char" i (char x)]
            (when (= i x) => (throw! (str "value out of range for char: " x))
                i
            )
        )
    )

    (defn #_"char" RT'charCast-1s [#_"short" x]
        (let [#_"char" i (char x)]
            (when (= i x) => (throw! (str "value out of range for char: " x))
                i
            )
        )
    )

    (defn #_"char" RT'charCast-1c [#_"char" x]
        x
    )

    (defn #_"char" RT'charCast-1i [#_"int" x]
        (let [#_"char" i (char x)]
            (when (= i x) => (throw! (str "value out of range for char: " x))
                i
            )
        )
    )

    (defn #_"char" RT'charCast-1l [#_"long" x]
        (let [#_"char" i (char x)]
            (when (= i x) => (throw! (str "value out of range for char: " x))
                i
            )
        )
    )

    (defn #_"char" RT'charCast-1f [#_"float" x]
        (when (<= Character/MIN_VALUE x Character/MAX_VALUE) => (throw! (str "value out of range for char: " x))
            (char x)
        )
    )

    (defn #_"char" RT'charCast-1d [#_"double" x]
        (when (<= Character/MIN_VALUE x Character/MAX_VALUE) => (throw! (str "value out of range for char: " x))
            (char x)
        )
    )

    (defn #_"char" RT'charCast-1o [#_"Object" x]
        (if (instance? Character x)
            (.charValue x)
            (let [#_"long" n (.longValue (cast Number x))]
                (when (<= Character/MIN_VALUE n Character/MAX_VALUE) => (throw! (str "value out of range for char: " x))
                    (char n)
                )
            )
        )
    )

    (defn #_"boolean" RT'booleanCast-1b [#_"boolean" x]
        x
    )

    (defn #_"boolean" RT'booleanCast-1o [#_"Object" x]
        (if (instance? Boolean x) (.booleanValue x) (some? x))
    )

    (defn #_"byte" RT'byteCast-1b [#_"byte" x]
        x
    )

    (defn #_"byte" RT'byteCast-1s [#_"short" x]
        (let [#_"byte" i (byte x)]
            (when (= i x) => (throw! (str "value out of range for byte: " x))
                i
            )
        )
    )

    (defn #_"byte" RT'byteCast-1i [#_"int" x]
        (let [#_"byte" i (byte x)]
            (when (= i x) => (throw! (str "value out of range for byte: " x))
                i
            )
        )
    )

    (defn #_"byte" RT'byteCast-1l [#_"long" x]
        (let [#_"byte" i (byte x)]
            (when (= i x) => (throw! (str "value out of range for byte: " x))
                i
            )
        )
    )

    (defn #_"byte" RT'byteCast-1f [#_"float" x]
        (when (<= Byte/MIN_VALUE x Byte/MAX_VALUE) => (throw! (str "value out of range for byte: " x))
            (byte x)
        )
    )

    (defn #_"byte" RT'byteCast-1d [#_"double" x]
        (when (<= Byte/MIN_VALUE x Byte/MAX_VALUE) => (throw! (str "value out of range for byte: " x))
            (byte x)
        )
    )

    (defn #_"byte" RT'byteCast-1o [#_"Object" x]
        (if (instance? Byte x)
            (.byteValue x)
            (let [#_"long" n (long x)]
                (when (<= Byte/MIN_VALUE n Byte/MAX_VALUE) => (throw! (str "value out of range for byte: " x))
                    (byte n)
                )
            )
        )
    )

    (defn #_"short" RT'shortCast-1b [#_"byte"  x] x)
    (defn #_"short" RT'shortCast-1s [#_"short" x] x)

    (defn #_"short" RT'shortCast-1i [#_"int" x]
        (let [#_"short" i (short x)]
            (when (= i x) => (throw! (str "value out of range for short: " x))
                i
            )
        )
    )

    (defn #_"short" RT'shortCast-1l [#_"long" x]
        (let [#_"short" i (short x)]
            (when (= i x) => (throw! (str "value out of range for short: " x))
                i
            )
        )
    )

    (defn #_"short" RT'shortCast-1f [#_"float" x]
        (when (<= Short/MIN_VALUE x Short/MAX_VALUE) => (throw! (str "value out of range for short: " x))
            (short x)
        )
    )

    (defn #_"short" RT'shortCast-1d [#_"double" x]
        (when (<= Short/MIN_VALUE x Short/MAX_VALUE) => (throw! (str "value out of range for short: " x))
            (short x)
        )
    )

    (defn #_"short" RT'shortCast-1o [#_"Object" x]
        (if (instance? Short x)
            (.shortValue x)
            (let [#_"long" n (long x)]
                (when (<= Short/MIN_VALUE n Short/MAX_VALUE) => (throw! (str "value out of range for short: " x))
                    (short n)
                )
            )
        )
    )

    (defn #_"int" RT'intCast-1b [#_"byte"  x] x)
    (defn #_"int" RT'intCast-1s [#_"short" x] x)
    (defn #_"int" RT'intCast-1c [#_"char"  x] x)
    (defn #_"int" RT'intCast-1i [#_"int"   x] x)

    (defn #_"int" RT'intCast-1l [#_"long" x]
        (let [#_"int" i (int x)]
            (when (= i x) => (throw! (str "value out of range for int: " x))
                i
            )
        )
    )

    (defn #_"int" RT'intCast-1f [#_"float" x]
        (when (<= Integer/MIN_VALUE x Integer/MAX_VALUE) => (throw! (str "value out of range for int: " x))
            (int x)
        )
    )

    (defn #_"int" RT'intCast-1d [#_"double" x]
        (when (<= Integer/MIN_VALUE x Integer/MAX_VALUE) => (throw! (str "value out of range for int: " x))
            (int x)
        )
    )

    (defn #_"int" RT'intCast-1o [#_"Object" x]
        (cond
            (instance? Integer x) (.intValue x)
            (number? x)           (RT'intCast-1l (long x))
            :else                 (.charValue (cast Character x))
        )
    )

    (defn #_"long" RT'longCast-1b [#_"byte"  x] x)
    (defn #_"long" RT'longCast-1s [#_"short" x] x)
    (defn #_"long" RT'longCast-1i [#_"int"   x] x)
    (defn #_"long" RT'longCast-1l [#_"long"  x] x)

    (defn #_"long" RT'longCast-1f [#_"float" x]
        (when (<= Long/MIN_VALUE x Long/MAX_VALUE) => (throw! (str "value out of range for long: " x))
            (long x)
        )
    )

    (defn #_"long" RT'longCast-1d [#_"double" x]
        (when (<= Long/MIN_VALUE x Long/MAX_VALUE) => (throw! (str "value out of range for long: " x))
            (long x)
        )
    )

    (defn #_"long" RT'longCast-1o [#_"Object" x]
        (cond
            (or (instance? Integer x) (instance? Long x))
                (.longValue x)
            (instance? BigInt x)
                (when (nil? (:bipart x)) => (throw! (str "value out of range for long: " x))
                    (:lpart x)
                )
            (instance? BigInteger x)
                (when (< (.bitLength x) 64) => (throw! (str "value out of range for long: " x))
                    (.longValue x)
                )
            (or (instance? Byte x) (instance? Short x))
                (.longValue x)
            (instance? Ratio x)
                (long (Ratio''bigIntegerValue x))
            (instance? Character x)
                (RT'longCast-1l (.charValue x))
            :else
                (RT'longCast-1d (.doubleValue (cast Number x)))
        )
    )

    (defn #_"float" RT'floatCast-1b [#_"byte"  x] x)
    (defn #_"float" RT'floatCast-1s [#_"short" x] x)
    (defn #_"float" RT'floatCast-1i [#_"int"   x] x)
    (defn #_"float" RT'floatCast-1l [#_"long"  x] x)
    (defn #_"float" RT'floatCast-1f [#_"float" x] x)

    (defn #_"float" RT'floatCast-1d [#_"double" x]
        (when (<= (- Float/MAX_VALUE) x Float/MAX_VALUE) => (throw! (str "value out of range for float: " x))
            (float x)
        )
    )

    (defn #_"float" RT'floatCast-1o [#_"Object" x]
        (if (instance? Float x)
            (.floatValue x)
            (let [#_"double" n (.doubleValue (cast Number x))]
                (when (<= (- Float/MAX_VALUE) n Float/MAX_VALUE) => (throw! (str "value out of range for float: " x))
                    (float n)
                )
            )
        )
    )

    (defn #_"double" RT'doubleCast-1b [#_"byte"   x] x)
    (defn #_"double" RT'doubleCast-1s [#_"short"  x] x)
    (defn #_"double" RT'doubleCast-1i [#_"int"    x] x)
    (defn #_"double" RT'doubleCast-1l [#_"long"   x] x)
    (defn #_"double" RT'doubleCast-1f [#_"float"  x] x)
    (defn #_"double" RT'doubleCast-1d [#_"double" x] x)

    (defn #_"double" RT'doubleCast-1o [#_"Object" x]
        (.doubleValue (cast Number x))
    )

    (defn #_"byte" RT'uncheckedByteCast-1b [#_"byte"   x]       x )
    (defn #_"byte" RT'uncheckedByteCast-1s [#_"short"  x] (byte x))
    (defn #_"byte" RT'uncheckedByteCast-1i [#_"int"    x] (byte x))
    (defn #_"byte" RT'uncheckedByteCast-1l [#_"long"   x] (byte x))
    (defn #_"byte" RT'uncheckedByteCast-1f [#_"float"  x] (byte x))
    (defn #_"byte" RT'uncheckedByteCast-1d [#_"double" x] (byte x))

    (defn #_"byte" RT'uncheckedByteCast-1o [#_"Object" x]
        (.byteValue (cast Number x))
    )

    (defn #_"short" RT'uncheckedShortCast-1b [#_"byte"   x]        x )
    (defn #_"short" RT'uncheckedShortCast-1s [#_"short"  x]        x )
    (defn #_"short" RT'uncheckedShortCast-1i [#_"int"    x] (short x))
    (defn #_"short" RT'uncheckedShortCast-1l [#_"long"   x] (short x))
    (defn #_"short" RT'uncheckedShortCast-1f [#_"float"  x] (short x))
    (defn #_"short" RT'uncheckedShortCast-1d [#_"double" x] (short x))

    (defn #_"short" RT'uncheckedShortCast-1o [#_"Object" x]
        (.shortValue (cast Number x))
    )

    (defn #_"char" RT'uncheckedCharCast-1b [#_"byte"   x] (char x))
    (defn #_"char" RT'uncheckedCharCast-1s [#_"short"  x] (char x))
    (defn #_"char" RT'uncheckedCharCast-1c [#_"char"   x]       x )
    (defn #_"char" RT'uncheckedCharCast-1i [#_"int"    x] (char x))
    (defn #_"char" RT'uncheckedCharCast-1l [#_"long"   x] (char x))
    (defn #_"char" RT'uncheckedCharCast-1f [#_"float"  x] (char x))
    (defn #_"char" RT'uncheckedCharCast-1d [#_"double" x] (char x))

    (defn #_"char" RT'uncheckedCharCast-1o [#_"Object" x]
        (if (instance? Character x) (.charValue x) (char (.longValue (cast Number x))))
    )

    (defn #_"int" RT'uncheckedIntCast-1b [#_"byte"   x]      x )
    (defn #_"int" RT'uncheckedIntCast-1s [#_"short"  x]      x )
    (defn #_"int" RT'uncheckedIntCast-1c [#_"char"   x]      x )
    (defn #_"int" RT'uncheckedIntCast-1i [#_"int"    x]      x )
    (defn #_"int" RT'uncheckedIntCast-1l [#_"long"   x] (int x))
    (defn #_"int" RT'uncheckedIntCast-1f [#_"float"  x] (int x))
    (defn #_"int" RT'uncheckedIntCast-1d [#_"double" x] (int x))

    (defn #_"int" RT'uncheckedIntCast-1o [#_"Object" x]
        (if (number? x) (.intValue x) (.charValue (cast Character x)))
    )

    (defn #_"long" RT'uncheckedLongCast-1b [#_"byte"   x]       x )
    (defn #_"long" RT'uncheckedLongCast-1s [#_"short"  x]       x )
    (defn #_"long" RT'uncheckedLongCast-1i [#_"int"    x]       x )
    (defn #_"long" RT'uncheckedLongCast-1l [#_"long"   x]       x )
    (defn #_"long" RT'uncheckedLongCast-1f [#_"float"  x] (long x))
    (defn #_"long" RT'uncheckedLongCast-1d [#_"double" x] (long x))

    (defn #_"long" RT'uncheckedLongCast-1o [#_"Object" x]
        (.longValue (cast Number x))
    )

    (defn #_"float" RT'uncheckedFloatCast-1b [#_"byte"   x]        x )
    (defn #_"float" RT'uncheckedFloatCast-1s [#_"short"  x]        x )
    (defn #_"float" RT'uncheckedFloatCast-1i [#_"int"    x]        x )
    (defn #_"float" RT'uncheckedFloatCast-1l [#_"long"   x]        x )
    (defn #_"float" RT'uncheckedFloatCast-1f [#_"float"  x]        x )
    (defn #_"float" RT'uncheckedFloatCast-1d [#_"double" x] (float x))

    (defn #_"float" RT'uncheckedFloatCast-1o [#_"Object" x]
        (.floatValue (cast Number x))
    )

    (defn #_"double" RT'uncheckedDoubleCast-1b [#_"byte"   x] x)
    (defn #_"double" RT'uncheckedDoubleCast-1s [#_"short"  x] x)
    (defn #_"double" RT'uncheckedDoubleCast-1i [#_"int"    x] x)
    (defn #_"double" RT'uncheckedDoubleCast-1l [#_"long"   x] x)
    (defn #_"double" RT'uncheckedDoubleCast-1f [#_"float"  x] x)
    (defn #_"double" RT'uncheckedDoubleCast-1d [#_"double" x] x)

    (defn #_"double" RT'uncheckedDoubleCast-1o [#_"Object" x]
        (.doubleValue (cast Number x))
    )

    (defn #_"IPersistentMap" RT'map [& #_"Object..." init]
        (cond
            (nil? init)
                PersistentArrayMap'EMPTY
            (<= (alength init) PersistentArrayMap'HASHTABLE_THRESHOLD)
                (PersistentArrayMap'createWithCheck init)
            :else
                (PersistentHashMap'createWithCheck-1a init)
        )
    )

    (defn #_"IPersistentMap" RT'mapUniqueKeys [& #_"Object..." init]
        (cond
            (nil? init)
                PersistentArrayMap'EMPTY
            (<= (alength init) PersistentArrayMap'HASHTABLE_THRESHOLD)
                (PersistentArrayMap'new init)
            :else
                (PersistentHashMap'create-1a init)
        )
    )

    (defn #_"IPersistentSet" RT'set [& #_"Object..." init]
        (PersistentHashSet'createWithCheck-1a init)
    )

    (defn #_"IPersistentVector" RT'vector [& #_"Object..." init]
        (LazilyPersistentVector'createOwning init)
    )

    (defn #_"IPersistentVector" RT'subvec [#_"IPersistentVector" v, #_"int" from, #_"int" over]
        (when (<= 0 from over (count v)) => (throw (IndexOutOfBoundsException.))
            (if (< from over) (SubVector'new nil, v, from, over) [])
        )
    )

    (defn #_"ISeq" RT'list
        ([] nil)
        ([#_"Object" arg1] (PersistentList'new arg1))
        ([#_"Object" arg1, #_"Object" arg2] (list* arg1 arg2 nil))
        ([#_"Object" arg1, #_"Object" arg2, #_"Object" arg3] (list* arg1 arg2 arg3 nil))
        ([#_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4] (list* arg1 arg2 arg3 arg4 nil))
        ([#_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5] (list* arg1 arg2 arg3 arg4 arg5 nil))
    )

    (defn #_"ISeq" RT'list*
        ([#_"Object" arg1, #_"ISeq" args] (cons arg1 args))
        ([#_"Object" arg1, #_"Object" arg2, #_"ISeq" args] (cons arg1 (cons arg2 args)))
        ([#_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"ISeq" args] (cons arg1 (cons arg2 (cons arg3 args))))
        ([#_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"ISeq" args] (cons arg1 (cons arg2 (cons arg3 (cons arg4 args)))))
        ([#_"Object" arg1, #_"Object" arg2, #_"Object" arg3, #_"Object" arg4, #_"Object" arg5, #_"ISeq" args] (cons arg1 (cons arg2 (cons arg3 (cons arg4 (cons arg5 args))))))
    )

    (defn #_"ISeq" RT'arrayToSeq [#_"Object[]" a]
        (loop-when-recur [#_"ISeq" s nil #_"int" i (dec (alength a))] (<= 0 i) [(cons (aget a i) s) (dec i)] => s)
    )

    (defn #_"Object[]" RT'object_array [#_"Object" sizeOrSeq]
        (if (number? sizeOrSeq)
            (make-array Object (.intValue sizeOrSeq))
            (let [#_"ISeq" s (seq sizeOrSeq) #_"int" size (count s) #_"Object[]" a (make-array Object size)]
                (loop-when-recur [#_"int" i 0 s s] (and (< i size) (some? s)) [(inc i) (next s)]
                    (aset a i (first s))
                )
                a
            )
        )
    )

    (defn #_"Object[]" RT'toArray [#_"Object" coll]
        (cond
            (nil? coll)
                (make-array Object 0)
            (instance? Compiler'OBJECTS_CLASS coll)
                coll
            (instance? Collection coll)
                (.toArray coll)
            (instance? Iterable coll)
                (let [#_"List" l (ArrayList.)]
                    (doseq [#_"Object" o coll]
                        (.add l, o)
                    )
                    (.toArray l)
                )
            (instance? Map coll)
                (.toArray (.entrySet coll))
            (string? coll)
                (let [#_"char[]" chars (.toCharArray coll)
                      #_"Object[]" a (make-array Object (alength chars))]
                    (dotimes [#_"int" i (alength chars)]
                        (aset a i (aget chars i))
                    )
                    a
                )
            (.isArray (class coll))
                (let [#_"ISeq" s (seq coll)
                      #_"Object[]" a (make-array Object (count s))]
                    (loop-when-recur [#_"int" i 0 s s] (< i (alength a)) [(inc i) (next s)]
                        (aset a i (first s))
                    )
                    a
                )
            :else
                (throw! (str "unable to convert: " (class coll) " to Object[]"))
        )
    )

    (defn #_"Object[]" RT'seqToArray [#_"ISeq" s]
        (let [#_"Object[]" a (make-array Object (count s))]
            (loop-when-recur [#_"int" i 0 s s] (some? s) [(inc i) (next s)]
                (aset a i (first s))
            )
            a
        )
    )

    (defn #_"Object[]" RT'seqToPassedArray [#_"ISeq" s, #_"Object[]" passed]
        (let [#_"Object[]" a passed #_"int" n (count s)
              a (if (< (alength a) n) (cast Compiler'OBJECTS_CLASS (Array/newInstance (.getComponentType (class passed)), n)) a)]
            (loop-when-recur [#_"int" i 0 s s] (some? s) [(inc i) (next s)]
                (aset a i (first s))
            )
            (when (< n (alength passed))
                (aset a n nil)
            )
            a
        )
    )

    (defn #_"Object" RT'seqToTypedArray
        ([#_"ISeq" s]
            (let [#_"Class" type (if (and (some? s) (some? (first s))) (class (first s)) Object)]
                (RT'seqToTypedArray type, s)
            )
        )
        ([#_"Class" type, #_"ISeq" s]
            (let [#_"Object" a (Array/newInstance type, (count s))]
                (condp = type
                    Integer/TYPE
                        (loop-when-recur [#_"int" i 0 s s] (some? s) [(inc i) (next s)]
                            (Array/set a, i, (RT'intCast-1o (first s)))
                        )
                    Byte/TYPE
                        (loop-when-recur [#_"int" i 0 s s] (some? s) [(inc i) (next s)]
                            (Array/set a, i, (RT'byteCast-1o (first s)))
                        )
                    Float/TYPE
                        (loop-when-recur [#_"int" i 0 s s] (some? s) [(inc i) (next s)]
                            (Array/set a, i, (RT'floatCast-1o (first s)))
                        )
                    Short/TYPE
                        (loop-when-recur [#_"int" i 0 s s] (some? s) [(inc i) (next s)]
                            (Array/set a, i, (RT'shortCast-1o (first s)))
                        )
                    Character/TYPE
                        (loop-when-recur [#_"int" i 0 s s] (some? s) [(inc i) (next s)]
                            (Array/set a, i, (RT'charCast-1o (first s)))
                        )
                    #_else
                        (loop-when-recur [#_"int" i 0 s s] (some? s) [(inc i) (next s)]
                            (Array/set a, i, (first s))
                        )
                )
                a
            )
        )
    )

    (defn #_"int" RT'length [#_"ISeq" s]
        (loop-when-recur [#_"int" i 0 s s] (some? s) [(inc i) (next s)] => i)
    )

    (defn #_"int" RT'boundedLength [#_"ISeq" s, #_"int" limit]
        (loop-when-recur [#_"int" i 0 s s] (and (some? s) (<= i limit)) [(inc i) (next s)] => i)
    )

    (defn #_"boolean" RT'isReduced [#_"Object" r] (instance? Reduced r))

    (declare LispReader'read)

    (defn #_"Object" RT'readString [#_"String" s]
        (let [#_"PushbackReader" r (PushbackReader. (java.io.StringReader. s))]
            (LispReader'read r)
        )
    )

    (declare pr-on)

    (defn #_"void" RT'print [#_"Object" x, #_"Writer" w]
        (pr-on x w) ;; call multimethod
        nil
    )

    (defn #_"String" RT'printString [#_"Object" x]
        (let [#_"StringWriter" sw (StringWriter.)]
            (RT'print x, sw)
            (.toString sw)
        )
    )

    (defn #_"Class" RT'classForName
        ([#_"String" name] (RT'classForName name, true))
        ([#_"String" name, #_"boolean" load?]
            (let [#_"ClassLoader" loader (Compiler'baseLoader)
                  #_"Class" c
                    (when-not (instance? DynamicClassLoader loader)
                        (DynamicClassLoader'findInMemoryClass name)
                    )]
                (or c (Class/forName name, load?, loader))
            )
        )
    )

    (defn #_"Class" RT'classForNameNonLoading [#_"String" name]
        (RT'classForName name, false)
    )

    (defn #_"Class" RT'loadClassForName [#_"String" name]
        (try
            (RT'classForNameNonLoading name)
            (RT'classForName name)
            (catch ClassNotFoundException _
                nil
            )
        )
    )

    (defn #_"boolean" RT'aget_boolean [#_"boolean[]" a, #_"int" i] (aget a i))
    (defn #_"byte"    RT'aget_byte    [#_"byte[]"    a, #_"int" i] (aget a i))
    (defn #_"short"   RT'aget_short   [#_"short[]"   a, #_"int" i] (aget a i))
    (defn #_"char"    RT'aget_char    [#_"char[]"    a, #_"int" i] (aget a i))
    (defn #_"int"     RT'aget_int     [#_"int[]"     a, #_"int" i] (aget a i))
    (defn #_"long"    RT'aget_long    [#_"long[]"    a, #_"int" i] (aget a i))
    (defn #_"float"   RT'aget_float   [#_"float[]"   a, #_"int" i] (aget a i))
    (defn #_"double"  RT'aget_double  [#_"double[]"  a, #_"int" i] (aget a i))
    (defn #_"Object"  RT'aget_object  [#_"Object[]"  a, #_"int" i] (aget a i))

    (defn #_"boolean" RT'aset_boolean [#_"boolean[]" a, #_"int" i, #_"boolean" v] (aset a i v) v)
    (defn #_"byte"    RT'aset_byte    [#_"byte[]"    a, #_"int" i, #_"byte"    v] (aset a i v) v)
    (defn #_"short"   RT'aset_short   [#_"short[]"   a, #_"int" i, #_"short"   v] (aset a i v) v)
    (defn #_"char"    RT'aset_char    [#_"char[]"    a, #_"int" i, #_"char"    v] (aset a i v) v)
    (defn #_"int"     RT'aset_int     [#_"int[]"     a, #_"int" i, #_"int"     v] (aset a i v) v)
    (defn #_"long"    RT'aset_long    [#_"long[]"    a, #_"int" i, #_"long"    v] (aset a i v) v)
    (defn #_"float"   RT'aset_float   [#_"float[]"   a, #_"int" i, #_"float"   v] (aset a i v) v)
    (defn #_"double"  RT'aset_double  [#_"double[]"  a, #_"int" i, #_"double"  v] (aset a i v) v)
    (defn #_"Object"  RT'aset_object  [#_"Object[]"  a, #_"int" i, #_"Object"  v] (aset a i v) v)

    (defn #_"int" RT'alength_boolean [#_"boolean[]" a] (alength a))
    (defn #_"int" RT'alength_byte    [#_"byte[]"    a] (alength a))
    (defn #_"int" RT'alength_short   [#_"short[]"   a] (alength a))
    (defn #_"int" RT'alength_char    [#_"char[]"    a] (alength a))
    (defn #_"int" RT'alength_int     [#_"int[]"     a] (alength a))
    (defn #_"int" RT'alength_long    [#_"long[]"    a] (alength a))
    (defn #_"int" RT'alength_float   [#_"float[]"   a] (alength a))
    (defn #_"int" RT'alength_double  [#_"double[]"  a] (alength a))
    (defn #_"int" RT'alength_object  [#_"Object[]"  a] (alength a))

    (defn #_"boolean[]" RT'aclone_boolean [#_"boolean[]" a] (.clone a))
    (defn #_"byte[]"    RT'aclone_byte    [#_"byte[]"    a] (.clone a))
    (defn #_"short[]"   RT'aclone_short   [#_"short[]"   a] (.clone a))
    (defn #_"char[]"    RT'aclone_char    [#_"char[]"    a] (.clone a))
    (defn #_"int[]"     RT'aclone_int     [#_"int[]"     a] (.clone a))
    (defn #_"long[]"    RT'aclone_long    [#_"long[]"    a] (.clone a))
    (defn #_"float[]"   RT'aclone_float   [#_"float[]"   a] (.clone a))
    (defn #_"double[]"  RT'aclone_double  [#_"double[]"  a] (.clone a))
    (defn #_"Object[]"  RT'aclone_object  [#_"Object[]"  a] (.clone a))
)
)

#_(ns cloiure.core)

(§ def unquote)
(§ def unquote-splicing)

;;;
 ; Creates a new list containing the items.
 ;;
(§ def list (cloiure.lang.PersistentList/creator))

;;;
 ; Returns a new seq where x is the first element and seq is the rest.
 ;;
(§ def cons (fn* cons [x seq] (cloiure.lang.RT/cons x seq)))

;; during bootstrap we don't have destructuring let, loop or fn, will redefine later

(§ def ^:macro let  (fn* let  [&form &env & decl] (cons 'let* decl)))
(§ def ^:macro loop (fn* loop [&form &env & decl] (cons 'loop* decl)))
(§ def ^:macro fn   (fn* fn   [&form &env & decl] (.withMeta ^cloiure.lang.IObj (cons 'fn* decl) (.meta ^cloiure.lang.IMeta &form))))

;;;
 ; Returns the first item in the collection. Calls seq on its argument. If coll is nil, returns nil.
 ;;
(§ def first (fn first [coll] (cloiure.lang.RT/first coll)))

;;;
 ; Returns a seq of the items after the first. Calls seq on its argument. If there are no more items, returns nil.
 ;;
(§ def ^cloiure.lang.ISeq next (fn next [x] (cloiure.lang.RT/next x)))

;;;
 ; Returns a possibly empty seq of the items after the first. Calls seq on its argument.
 ;;
(§ def ^cloiure.lang.ISeq rest (fn rest [x] (cloiure.lang.RT/rest x)))

;;;
 ; conj[oin].
 ; Returns a new collection with the xs 'added'. (conj nil item) returns (item).
 ; The 'addition' may happen at different 'places' depending on the concrete type.
 ;;
(§ def conj
    (fn conj
        ([] [])
        ([coll] coll)
        ([coll x] (cloiure.lang.RT/conj coll x))
        ([coll x & xs]
            (if xs
                (recur (cloiure.lang.RT/conj coll x) (first xs) (next xs))
                (cloiure.lang.RT/conj coll x)
            )
        )
    )
)

(§ def second (fn second [x] (first (next x))))
(§ def ffirst (fn ffirst [x] (first (first x))))
(§ def nfirst (fn nfirst [x] (next  (first x))))
(§ def fnext  (fn fnext  [x] (first (next x))))
(§ def nnext  (fn nnext  [x] (next  (next x))))

;;;
 ; Returns a seq on the collection. If the collection is empty, returns nil.
 ; (seq nil) returns nil. seq also works on Strings, native Java arrays (of reference types)
 ; and any objects that implement Iterable. Note that seqs cache values, thus seq should not
 ; be used on any Iterable whose iterator repeatedly returns the same mutable object.
 ;;
(§ def ^cloiure.lang.ISeq seq (fn seq [coll] (cloiure.lang.RT/seq coll)))

;;;
 ; Evaluates x and tests if it is an instance of the class c. Returns true or false.
 ;;
(§ def instance? (fn instance? [^Class c x] (.isInstance c x)))

(§ def seq?    (fn seq?    [x] (instance? cloiure.lang.ISeq x)))
(§ def char?   (fn char?   [x] (instance? Character x)))
(§ def string? (fn string? [x] (instance? String x)))
(§ def map?    (fn map?    [x] (instance? cloiure.lang.IPersistentMap x)))
(§ def vector? (fn vector? [x] (instance? cloiure.lang.IPersistentVector x)))

;;;
 ; assoc[iate].
 ; When applied to a map, returns a new map of the same (hashed/sorted) type, that contains the mapping of key(s) to val(s).
 ; When applied to a vector, returns a new vector that contains val at index. Note - index must be <= (count vector).
 ;;
(§ def assoc
    (fn assoc
        ([map key val] (cloiure.lang.RT/assoc map key val))
        ([map key val & kvs]
            (let [ret (cloiure.lang.RT/assoc map key val)]
                (if kvs
                    (if (next kvs)
                        (recur ret (first kvs) (second kvs) (nnext kvs))
                        (throw! "assoc expects even number of arguments after map/vector, found odd number")
                    )
                    ret
                )
            )
        )
    )
)

;;;
 ; Returns the metadata of obj, returns nil if there is no metadata.
 ;;
(§ def meta (fn meta [x] (if (instance? cloiure.lang.IMeta x) (.meta ^cloiure.lang.IMeta x))))

;;;
 ; Returns an object of the same type and value as obj, with map m as its metadata.
 ;;
(§ def with-meta (fn with-meta [^cloiure.lang.IObj x m] (.withMeta x m)))

(§ def ^:private ^:dynamic assert-valid-fdecl (fn [fdecl]))

(§ def ^:private sigs
    (fn [fdecl]
        (assert-valid-fdecl fdecl)
        (let [asig
                (fn [fdecl]
                    (let [arglist (first fdecl)
                          ;; elide implicit macro args
                          arglist
                            (if (cloiure.lang.Util/equals '&form (first arglist))
                                (cloiure.lang.RT/subvec arglist 2 (cloiure.lang.RT/count arglist))
                                arglist
                            )
                          body (next fdecl)]
                        (if (map? (first body))
                            (if (next body)
                                (with-meta arglist (conj (if (meta arglist) (meta arglist) {}) (first body)))
                                arglist
                            )
                            arglist
                        )
                    )
                )
              resolve-tag
                (fn [argvec]
                    (let [m (meta argvec) ^cloiure.lang.Symbol tag (:tag m)]
                        (if (instance? cloiure.lang.Symbol tag)
                            (if (cloiure.lang.Util/equiv (.indexOf (.getName tag) ".") -1)
                                (if (cloiure.lang.Util/equals nil (cloiure.lang.Compiler$HostExpr/maybeSpecialTag tag))
                                    (let [c (cloiure.lang.Compiler$HostExpr/maybeClass tag false)]
                                        (if c
                                            (with-meta argvec (assoc m :tag (cloiure.lang.Symbol/intern (.getName c))))
                                            argvec
                                        )
                                    )
                                    argvec
                                )
                                argvec
                            )
                            argvec
                        )
                    )
                )]
            (if (seq? (first fdecl))
                (loop [ret [] fdecls fdecl]
                    (if fdecls
                        (recur (conj ret (resolve-tag (asig (first fdecls)))) (next fdecls))
                        (seq ret)
                    )
                )
                (list (resolve-tag (asig fdecl)))
            )
        )
    )
)

;;;
 ; Return the last item in coll, in linear time.
 ;;
(§ def last (fn last [s] (if (next s) (recur (next s)) (first s))))

;;;
 ; Return a seq of all but the last item in coll, in linear time.
 ;;
(§ def butlast (fn butlast [s] (loop [ret [] s s] (if (next s) (recur (conj ret (first s)) (next s)) (seq ret)))))

;;;
 ; Same as (def name (fn [params*] exprs*)) or (def name (fn ([params*] exprs*)+)) with any attrs added to the var metadata.
 ;;
(§ def defn
    (fn defn [&form &env name & fdecl]
        ;; note: cannot delegate this check to def because of the call to (with-meta name ..)
        (if (instance? cloiure.lang.Symbol name) nil (throw! "first argument to defn must be a symbol"))
        (let [m     (if (map?    (first fdecl)) (first fdecl)         {})
              fdecl (if (map?    (first fdecl)) (next fdecl)          fdecl)
              fdecl (if (vector? (first fdecl)) (list fdecl)          fdecl)
              m     (if (map?    (last fdecl))  (conj m (last fdecl)) m)
              fdecl (if (map?    (last fdecl))  (butlast fdecl)       fdecl)
              m     (conj {:arglists (list 'quote (sigs fdecl))} m)
              m     (let [inline (:inline m) ifn (first inline) iname (second inline)]
                        ;; same as: (if (and (= 'fn ifn) (not (symbol? iname))) ...)
                        (if (if (cloiure.lang.Util/equiv 'fn ifn) (if (instance? cloiure.lang.Symbol iname) false true))
                            ;; inserts the same fn name to the inline fn if it does not have one
                            (assoc m :inline
                                (cons ifn (cons (cloiure.lang.Symbol/intern (.concat (.getName ^cloiure.lang.Symbol name) "__inliner")) (next inline)))
                            )
                            m
                        )
                    )
              m     (conj (if (meta name) (meta name) {}) m)]
            (list 'def (with-meta name m)
                ;; todo - restore propagation of fn name
                ;; must figure out how to convey primitive hints to self calls first
                ;; (cons `fn fdecl)
                (with-meta (cons `fn fdecl) {:rettag (:tag m)})
            )
        )
    )
)

(§ .setMacro (var defn))

;;;
 ; Returns an array of Objects containing the contents of coll, which
 ; can be any Collection. Maps to java.util.Collection.toArray().
 ;;
(§ defn ^"[Ljava.lang.Object;" to-array [coll] (cloiure.lang.RT/toArray coll))

;;;
 ; Throws a ClassCastException if x is not a c, else returns x.
 ;;
(§ defn cast [^Class c x] (.cast c x))

;;;
 ; Creates a new vector containing the args.
 ;;
(§ defn vector
    ([] [])
    ([a] [a])
    ([a b] [a b])
    ([a b c] [a b c])
    ([a b c d] [a b c d])
    ([a b c d e] [a b c d e])
    ([a b c d e f] [a b c d e f])
    ([a b c d e f & args] (cloiure.lang.LazilyPersistentVector/create (cons a (cons b (cons c (cons d (cons e (cons f args))))))))
)

;;;
 ; Creates a new vector containing the contents of coll. Java arrays
 ; will be aliased and should not be modified.
 ;;
(§ defn vec [coll]
    (if (vector? coll)
        (if (instance? cloiure.lang.IObj coll)
            (with-meta coll nil)
            (cloiure.lang.LazilyPersistentVector/create coll)
        )
        (cloiure.lang.LazilyPersistentVector/create coll)
    )
)

;;;
 ; keyval => key val
 ; Returns a new hash map with supplied mappings. If any keys are
 ; equal, they are handled as if by repeated uses of assoc.
 ;;
(§ defn hash-map
    ([] {})
    ([& keyvals] (cloiure.lang.PersistentHashMap/create keyvals))
)

;;;
 ; Returns a new hash set with supplied keys. Any equal keys are
 ; handled as if by repeated uses of conj.
 ;;
(§ defn hash-set
    ([] #{})
    ([& keys] (cloiure.lang.PersistentHashSet/create keys))
)

;;;
 ; keyval => key val
 ; Returns a new sorted map with supplied mappings. If any keys are
 ; equal, they are handled as if by repeated uses of assoc.
 ;;
(§ defn sorted-map [& keyvals]
    (cloiure.lang.PersistentTreeMap/create keyvals)
)

;;;
 ; keyval => key val
 ; Returns a new sorted map with supplied mappings, using the supplied
 ; comparator. If any keys are equal, they are handled as if by
 ; repeated uses of assoc.
 ;;
(§ defn sorted-map-by [comparator & keyvals]
    (cloiure.lang.PersistentTreeMap/create comparator keyvals)
)

;;;
 ; Returns a new sorted set with supplied keys. Any equal keys are
 ; handled as if by repeated uses of conj.
 ;;
(§ defn sorted-set [& keys]
    (cloiure.lang.PersistentTreeSet/create keys)
)

;;;
 ; Returns a new sorted set with supplied keys, using the supplied
 ; comparator. Any equal keys are handled as if by repeated uses of
 ; conj.
 ;;
(§ defn sorted-set-by [comparator & keys]
    (cloiure.lang.PersistentTreeSet/create comparator keys)
)

;;;
 ; Returns true if x is nil, false otherwise.
 ;;
(§ defn ^Boolean nil?
    {:inline (fn [x] (list 'cloiure.lang.Util/identical x nil))}
    [x] (cloiure.lang.Util/identical x nil)
)

;;;
 ; Like defn, but the resulting function name is declared as a macro
 ; and will be used as a macro by the compiler when it is called.
 ;;
(§ def defmacro
    (fn [&form &env name & args]
        (let [prefix
                (loop [p (list name) args args]
                    (let [f (first args)]
                        (if (string? f)
                            (recur (cons f p) (next args))
                            (if (map? f)
                                (recur (cons f p) (next args))
                                p
                            )
                        )
                    )
                )
              fdecl
                (loop [fd args]
                    (if (string? (first fd))
                        (recur (next fd))
                        (if (map? (first fd))
                            (recur (next fd))
                            fd
                        )
                    )
                )
              fdecl (if (vector? (first fdecl)) (list fdecl) fdecl)
              add-implicit-args
                (fn [fd]
                    (let [args (first fd)]
                        (cons (vec (cons '&form (cons '&env args))) (next fd))
                    )
                )
              add-args
                (fn [acc ds]
                    (if (nil? ds)
                        acc
                        (let [d (first ds)]
                            (if (map? d)
                                (conj acc d)
                                (recur (conj acc (add-implicit-args d)) (next ds))
                            )
                        )
                    )
                )
              fdecl (seq (add-args [] fdecl))
              decl
                (loop [p prefix d fdecl]
                    (if p
                        (recur (next p) (cons (first p) d))
                        d
                    )
                )]
            (list 'do (cons `defn decl) (list '. (list 'var name) '(setMacro)) (list 'var name))
        )
    )
)

(§ .setMacro (var defmacro))

;;;
 ; Evaluates test. If logical true, evaluates body in an implicit do.
 ;;
(§ defmacro when [test & body] (list 'if test (cons 'do body)))

;;;
 ; Evaluates test. If logical false, evaluates body in an implicit do.
 ;;
(§ defmacro when-not [test & body] (list 'if test nil (cons 'do body)))

;;;
 ; Returns true if x is the value false, false otherwise.
 ;;
(§ defn ^Boolean false? [x] (cloiure.lang.Util/identical x false))

;;;
 ; Returns true if x is the value true, false otherwise.
 ;;
(§ defn ^Boolean true? [x] (cloiure.lang.Util/identical x true))

;;;
 ; Return true if x is a Boolean.
 ;;
(§ defn boolean? [x] (instance? Boolean x))

;;;
 ; Returns true if x is logical false, false otherwise.
 ;;
(§ defn ^Boolean not [x] (if x false true))

;;;
 ; Returns true if x is not nil, false otherwise.
 ;;
(§ defn ^Boolean some? [x] (not (nil? x)))

;;;
 ; Returns true given any argument.
 ;;
(§ defn ^Boolean any? [x] true)

;;;
 ; With no args, returns the empty string. With one arg x, returns x.toString().
 ; (str nil) returns the empty string.
 ; With more than one arg, returns the concatenation of the str values of the args.
 ;;
(§ defn ^String str
    ([] "")
    ([^Object x] (if (nil? x) "" (.toString x)))
    ([x & ys]
        ((fn [^StringBuilder sb more]
            (if more
                (recur (.append sb (str (first more))) (next more))
                (str sb)
            ))
            (StringBuilder. (str x)) ys
        )
    )
)

;;;
 ; Return true if x is a Symbol.
 ;;
(§ defn symbol? [x] (instance? cloiure.lang.Symbol x))

;;;
 ; Return true if x is a Keyword.
 ;;
(§ defn keyword? [x] (instance? cloiure.lang.Keyword x))

;;;
 ; Returns a Symbol with the given namespace and name.
 ;;
(§ defn ^cloiure.lang.Symbol symbol
    ([name] (if (symbol? name) name (cloiure.lang.Symbol/intern name)))
    ([ns name] (cloiure.lang.Symbol/intern ns name))
)

;;;
 ; Returns a new symbol with a unique name. If a prefix string is supplied,
 ; the name is prefix# where # is some unique number.
 ; If prefix is not supplied, the prefix is 'G__'.
 ;;
(§ defn gensym
    ([] (gensym "G__"))
    ([prefix] (cloiure.lang.Symbol/intern (str prefix (cloiure.lang.RT/nextID))))
)

;;;
 ; Takes a set of test/expr pairs. It evaluates each test one at a time.
 ; If a test returns logical true, cond evaluates and returns the value of the
 ; corresponding expr and doesn't evaluate any of the other tests or exprs.
 ; (cond) returns nil.
 ;;
(§ defmacro cond [& clauses]
    (when clauses
        (list 'if (first clauses)
            (if (next clauses)
                (second clauses)
                (throw! "cond requires an even number of forms")
            )
            (cons 'cloiure.core/cond (next (next clauses)))
        )
    )
)

;;;
 ; Returns a Keyword with the given namespace and name.
 ; Do not use ":" in the keyword strings, it will be added automatically.
 ;;
(§ defn ^cloiure.lang.Keyword keyword
    ([name]
        (cond
            (keyword? name) name
            (symbol? name) (cloiure.lang.Keyword/intern ^cloiure.lang.Symbol name)
            (string? name) (cloiure.lang.Keyword/intern (cloiure.lang.Symbol/intern ^String name))
        )
    )
    ([ns name] (cloiure.lang.Keyword/intern (cloiure.lang.Symbol/intern ns name)))
)

;;;
 ; Returns a Keyword with the given namespace and name if one already exists.
 ; This function will not intern a new keyword. If the keyword has not already
 ; been interned, it will return nil.
 ; Do not use ":" in the keyword strings, it will be added automatically.
 ;;
(§ defn ^cloiure.lang.Keyword find-keyword
    ([name]
        (cond
            (keyword? name) name
            (symbol? name) (cloiure.lang.Keyword/find ^cloiure.lang.Symbol name)
            (string? name) (cloiure.lang.Keyword/find ^String name)
        )
    )
    ([ns name] (cloiure.lang.Keyword/find ns name))
)

(§ defn ^:private spread [arglist]
    (cond
        (nil? arglist) nil
        (nil? (next arglist)) (seq (first arglist))
        :else (cons (first arglist) (spread (next arglist)))
    )
)

;;;
 ; Creates a new seq containing the items prepended to the rest,
 ; the last of which will be treated as a sequence.
 ;;
(§ defn list*
    ([args] (seq args))
    ([a args] (cons a args))
    ([a b args] (cons a (cons b args)))
    ([a b c args] (cons a (cons b (cons c args))))
    ([a b c d & more] (cons a (cons b (cons c (cons d (spread more))))))
)

;;;
 ; Applies fn f to the argument list formed by prepending intervening arguments to args.
 ;;
(§ defn apply
    ([^cloiure.lang.IFn f args] (.applyTo f (seq args)))
    ([^cloiure.lang.IFn f x args] (.applyTo f (list* x args)))
    ([^cloiure.lang.IFn f x y args] (.applyTo f (list* x y args)))
    ([^cloiure.lang.IFn f x y z args] (.applyTo f (list* x y z args)))
    ([^cloiure.lang.IFn f a b c d & more] (.applyTo f (cons a (cons b (cons c (cons d (spread more)))))))
)

;;;
 ; Returns an object of the same type and value as obj,
 ; with (apply f (meta obj) args) as its metadata.
 ;;
(§ defn vary-meta [obj f & args] (with-meta obj (apply f (meta obj) args)))

;;;
 ; Takes a body of expressions that returns an ISeq or nil, and yields
 ; a Seqable object that will invoke the body only the first time seq
 ; is called, and will cache the result and return it on all subsequent
 ; seq calls. See also - realized?
 ;;
(§ defmacro lazy-seq [& body]
    (list 'new 'cloiure.lang.LazySeq (list* '^{:once true} fn* [] body))
)

(§ defn ^cloiure.lang.ChunkBuffer chunk-buffer [capacity]
    (cloiure.lang.ChunkBuffer. capacity)
)

(§ defn chunk-append [^cloiure.lang.ChunkBuffer b x]
    (.add b x)
)

(§ defn ^cloiure.lang.IChunk chunk [^cloiure.lang.ChunkBuffer b]
    (.chunk b)
)

(§ defn ^cloiure.lang.IChunk chunk-first [^cloiure.lang.IChunkedSeq s]
    (.chunkedFirst s)
)

(§ defn ^cloiure.lang.ISeq chunk-rest [^cloiure.lang.IChunkedSeq s]
    (.chunkedMore s)
)

(§ defn ^cloiure.lang.ISeq chunk-next [^cloiure.lang.IChunkedSeq s]
    (.chunkedNext s)
)

(§ defn chunk-cons [chunk rest]
    (if (cloiure.lang.Numbers/isZero (cloiure.lang.RT/count chunk))
        rest
        (cloiure.lang.ChunkedCons. chunk rest)
    )
)

(§ defn chunked-seq? [s]
    (instance? cloiure.lang.IChunkedSeq s)
)

;;;
 ; Returns a lazy seq representing the concatenation of the elements in the supplied colls.
 ;;
(§ defn concat
    ([] (lazy-seq nil))
    ([x] (lazy-seq x))
    ([x y]
        (lazy-seq
            (let [s (seq x)]
                (if s
                    (if (chunked-seq? s)
                        (chunk-cons (chunk-first s) (concat (chunk-rest s) y))
                        (cons (first s) (concat (rest s) y))
                    )
                    y
                )
            )
        )
    )
    ([x y & zs]
        (let [cat
                (fn cat [xys zs]
                    (lazy-seq
                        (let [xys (seq xys)]
                            (if xys
                                (if (chunked-seq? xys)
                                    (chunk-cons (chunk-first xys) (cat (chunk-rest xys) zs))
                                    (cons (first xys) (cat (rest xys) zs))
                                )
                                (when zs
                                    (cat (first zs) (next zs))
                                )
                            )
                        )
                    )
                )]
            (cat (concat x y) zs)
        )
    )
)

;;;
 ; Takes a body of expressions and yields a Delay object that will invoke
 ; the body only the first time it is forced (with force or deref/@), and
 ; will cache the result and return it on all subsequent force calls.
 ; See also - realized?
 ;;
(§ defmacro delay [& body] (list 'new 'cloiure.lang.Delay (list* `^{:once true} fn* [] body)))

;;;
 ; Returns true if x is a Delay created with delay.
 ;;
(§ defn delay? [x] (instance? cloiure.lang.Delay x))

;;;
 ; If x is a Delay, returns the (possibly cached) value of its expression, else returns x.
 ;;
(§ defn force [x] (cloiure.lang.Delay/force x))

;;;
 ; Evaluates test. If logical false, evaluates and returns then expr,
 ; otherwise else expr, if supplied, else nil.
 ;;
(§ defmacro if-not
    ([test then] `(if-not ~test ~then nil))
    ([test then else] `(if (not ~test) ~then ~else))
)

;;;
 ; Tests if 2 arguments are the same object.
 ;;
(§ defn identical?
    {:inline (fn [x y] `(cloiure.lang.Util/identical ~x ~y)) :inline-arities #{2}}
    ([x y] (cloiure.lang.Util/identical x y))
)

;; equiv-based

;;;
 ; Equality. Returns true if x equals y, false if not. Same as Java x.equals(y) except it also
 ; works for nil, and compares numbers and collections in a type-independent manner. Cloiure's
 ; immutable data structures define equals() (and thus =) as a value, not an identity, comparison.
 ;;
(§ defn =
    {:inline (fn [x y] `(cloiure.lang.Util/equiv ~x ~y)) :inline-arities #{2}}
    ([x] true)
    ([x y] (cloiure.lang.Util/equiv x y))
    ([x y & more]
        (if (cloiure.lang.Util/equiv x y)
            (if (next more)
                (recur y (first more) (next more))
                (cloiure.lang.Util/equiv y (first more))
            )
            false
        )
    )
)

;; equals-based

;;;
 ; Equality. Returns true if x equals y, false if not. Same as Java x.equals(y) except it also
 ; works for nil. Boxed numbers must have same type. Cloiure's immutable data structures define
 ; equals() (and thus =) as a value, not an identity, comparison.
 ;;
#_(defn =
    {:inline (fn [x y] `(cloiure.lang.Util/equals ~x ~y)) :inline-arities #{2}}
    ([x] true)
    ([x y] (cloiure.lang.Util/equals x y))
    ([x y & more]
        (if (= x y)
            (if (next more)
                (recur y (first more) (next more))
                (= y (first more))
            )
            false
        )
    )
)

;;;
 ; Same as (not (= obj1 obj2)).
 ;;
(§ defn ^Boolean not=
    ([x] false)
    ([x y] (not (= x y)))
    ([x y & more] (not (apply = x y more)))
)

;;;
 ; Comparator. Returns a negative number, zero, or a positive number when x is logically
 ; 'less than', 'equal to', or 'greater than' y. Same as Java x.compareTo(y) except it also
 ; works for nil, and compares numbers and collections in a type-independent manner.
 ; x must implement Comparable.
 ;;
(§ defn compare
    {:inline (fn [x y] `(cloiure.lang.Util/compare ~x ~y))}
    [x y] (cloiure.lang.Util/compare x y)
)

;;;
 ; Evaluates exprs one at a time, from left to right. If a form returns logical false
 ; (nil or false), and returns that value and doesn't evaluate any of the other expressions,
 ; otherwise it returns the value of the last expr. (and) returns true.
 ;;
(§ defmacro and
    ([] true)
    ([x] x)
    ([x & next] `(let [and# ~x] (if and# (and ~@next) and#)))
)

;;;
 ; Evaluates exprs one at a time, from left to right. If a form returns a logical true value,
 ; or returns that value and doesn't evaluate any of the other expressions, otherwise it returns
 ; the value of the last expression. (or) returns nil.
 ;;
(§ defmacro or
    ([] nil)
    ([x] x)
    ([x & next] `(let [or# ~x] (if or# or# (or ~@next))))
)

;;;
 ; Returns true if num is zero, else false.
 ;;
(§ defn zero?
    {:inline (fn [num] `(cloiure.lang.Numbers/isZero ~num))}
    [num] (cloiure.lang.Numbers/isZero num)
)

;;;
 ; Returns the number of items in the collection. (count nil) returns 0.
 ; Also works on strings, arrays, and Java Collections and Maps.
 ;;
(§ defn count
    {:inline (fn [coll] `(cloiure.lang.RT/count ~coll))}
    [coll] (cloiure.lang.RT/count coll)
)

;;;
 ; Coerce to int.
 ;;
(§ defn int
    {:inline (fn [x] `(cloiure.lang.RT/intCast ~x))}
    [x] (cloiure.lang.RT/intCast x)
)

;;;
 ; Returns the value at the index.
 ; get returns nil if index out of bounds, nth throws an exception unless not-found is supplied.
 ; nth also works for strings, Java arrays, regex Matchers and Lists, and, in O(n) time, for sequences.
 ;;
(§ defn nth
    {:inline (fn [c i & nf] `(cloiure.lang.RT/nth ~c ~i ~@nf)) :inline-arities #{2 3}}
    ([coll index]           (cloiure.lang.RT/nth coll index          ))
    ([coll index not-found] (cloiure.lang.RT/nth coll index not-found))
)

;;;
 ; Returns non-nil if nums are in monotonically increasing order, otherwise false.
 ;;
(§ defn <
    {:inline (fn [x y] `(cloiure.lang.Numbers/lt ~x ~y)) :inline-arities #{2}}
    ([x] true)
    ([x y] (cloiure.lang.Numbers/lt x y))
    ([x y & more]
        (if (< x y)
            (if (next more)
                (recur y (first more) (next more))
                (< y (first more))
            )
            false
        )
    )
)

;;;
 ; Returns a number one greater than num. Supports arbitrary precision.
 ; See also: inc
 ;;
(§ defn inc'
    {:inline (fn [x] `(cloiure.lang.Numbers/incP ~x))}
    [x] (cloiure.lang.Numbers/incP x)
)

;;;
 ; Returns a number one greater than num. Does not auto-promote longs, will throw on overflow.
 ; See also: inc'
 ;;
(§ defn inc
    {:inline (fn [x] `(cloiure.lang.Numbers/inc ~x))}
    [x] (cloiure.lang.Numbers/inc x)
)

;; reduce is defined again later after InternalReduce loads

(§ defn ^:private reduce1
    ([f coll]
        (let [s (seq coll)]
            (if s
                (reduce1 f (first s) (next s))
                (f)
            )
        )
    )
    ([f val coll]
        (let [s (seq coll)]
            (if s
                (if (chunked-seq? s)
                    (recur f (.reduce (chunk-first s) f val) (chunk-next s))
                    (recur f (f val (first s)) (next s))
                )
                val
            )
        )
    )
)

;;;
 ; Returns a seq of the items in coll in reverse order. Not lazy.
 ;;
(§ defn reverse [coll] (reduce1 conj () coll))

(§ defn ^:private nary-inline [op]
    (fn
        ([x] `(. cloiure.lang.Numbers (~op ~x)))
        ([x y] `(. cloiure.lang.Numbers (~op ~x ~y)))
        ([x y & more] (reduce1 (fn [a b] `(. cloiure.lang.Numbers (~op ~a ~b))) `(. cloiure.lang.Numbers (~op ~x ~y)) more))
    )
)

(§ defn ^:private >1? [n] (cloiure.lang.Numbers/gt n 1))
(§ defn ^:private >0? [n] (cloiure.lang.Numbers/gt n 0))

;;;
 ; Returns the sum of nums. (+') returns 0. Supports arbitrary precision.
 ; See also: +
 ;;
(§ defn +'
    {:inline (nary-inline 'addP) :inline-arities >1?}
    ([] 0)
    ([x] (cast Number x))
    ([x y] (cloiure.lang.Numbers/addP x y))
    ([x y & more] (reduce1 +' (+' x y) more))
)

;;;
 ; Returns the sum of nums. (+) returns 0. Does not auto-promote longs, will throw on overflow.
 ; See also: +'
 ;;
(§ defn +
    {:inline (nary-inline 'add) :inline-arities >1?}
    ([] 0)
    ([x] (cast Number x))
    ([x y] (cloiure.lang.Numbers/add x y))
    ([x y & more] (reduce1 + (+ x y) more))
)

;;;
 ; Returns the product of nums. (*') returns 1. Supports arbitrary precision.
 ; See also: *
 ;;
(§ defn *'
    {:inline (nary-inline 'multiplyP) :inline-arities >1?}
    ([] 1)
    ([x] (cast Number x))
    ([x y] (cloiure.lang.Numbers/multiplyP x y))
    ([x y & more] (reduce1 *' (*' x y) more))
)

;;;
 ; Returns the product of nums. (*) returns 1. Does not auto-promote longs, will throw on overflow.
 ; See also: *'
 ;;
(§ defn *
    {:inline (nary-inline 'multiply) :inline-arities >1?}
    ([] 1)
    ([x] (cast Number x))
    ([x y] (cloiure.lang.Numbers/multiply x y))
    ([x y & more] (reduce1 * (* x y) more))
)

;;;
 ; If no denominators are supplied, returns 1/numerator,
 ; else returns numerator divided by all of the denominators.
 ;;
(§ defn /
    {:inline (nary-inline 'divide) :inline-arities >1?}
    ([x] (/ 1 x))
    ([x y] (cloiure.lang.Numbers/divide x y))
    ([x y & more] (reduce1 / (/ x y) more))
)

;;;
 ; If no ys are supplied, returns the negation of x, else subtracts
 ; the ys from x and returns the result. Supports arbitrary precision.
 ; See also: -
 ;;
(§ defn -'
    {:inline (nary-inline 'minusP) :inline-arities >0?}
    ([x] (cloiure.lang.Numbers/minusP x))
    ([x y] (cloiure.lang.Numbers/minusP x y))
    ([x y & more] (reduce1 -' (-' x y) more))
)

;;;
 ; If no ys are supplied, returns the negation of x, else subtracts
 ; the ys from x and returns the result. Does not auto-promote longs, will throw on overflow.
 ; See also: -'
 ;;
(§ defn -
    {:inline (nary-inline 'minus) :inline-arities >0?}
    ([x] (cloiure.lang.Numbers/minus x))
    ([x y] (cloiure.lang.Numbers/minus x y))
    ([x y & more] (reduce1 - (- x y) more))
)

;;;
 ; Returns non-nil if nums are in monotonically non-decreasing order, otherwise false.
 ;;
(§ defn <=
    {:inline (fn [x y] `(cloiure.lang.Numbers/lte ~x ~y)) :inline-arities #{2}}
    ([x] true)
    ([x y] (cloiure.lang.Numbers/lte x y))
    ([x y & more]
        (if (<= x y)
            (if (next more)
                (recur y (first more) (next more))
                (<= y (first more))
            )
            false
        )
    )
)

;;;
 ; Returns non-nil if nums are in monotonically decreasing order, otherwise false.
 ;;
(§ defn >
    {:inline (fn [x y] `(cloiure.lang.Numbers/gt ~x ~y)) :inline-arities #{2}}
    ([x] true)
    ([x y] (cloiure.lang.Numbers/gt x y))
    ([x y & more]
        (if (> x y)
            (if (next more)
                (recur y (first more) (next more))
                (> y (first more))
            )
            false
        )
    )
)

;;;
 ; Returns non-nil if nums are in monotonically non-increasing order, otherwise false.
 ;;
(§ defn >=
    {:inline (fn [x y] `(cloiure.lang.Numbers/gte ~x ~y)) :inline-arities #{2}}
    ([x] true)
    ([x y] (cloiure.lang.Numbers/gte x y))
    ([x y & more]
        (if (>= x y)
            (if (next more)
                (recur y (first more) (next more))
                (>= y (first more))
            )
            false
        )
    )
)

;;;
 ; Returns non-nil if nums all have the equivalent value (type-independent), otherwise false.
 ;;
(§ defn ==
    {:inline (fn [x y] `(cloiure.lang.Numbers/equiv ~x ~y)) :inline-arities #{2}}
    ([x] true)
    ([x y] (cloiure.lang.Numbers/equiv x y))
    ([x y & more]
        (if (== x y)
            (if (next more)
                (recur y (first more) (next more))
                (== y (first more))
            )
            false
        )
    )
)

;;;
 ; Returns the greatest of the nums.
 ;;
(§ defn max
    {:inline (nary-inline 'max) :inline-arities >1?}
    ([x] x)
    ([x y] (cloiure.lang.Numbers/max x y))
    ([x y & more] (reduce1 max (max x y) more))
)

;;;
 ; Returns the least of the nums.
 ;;
(§ defn min
    {:inline (nary-inline 'min) :inline-arities >1?}
    ([x] x)
    ([x y] (cloiure.lang.Numbers/min x y))
    ([x y & more] (reduce1 min (min x y) more))
)

;;;
 ; Returns a number one less than num. Supports arbitrary precision.
 ; See also: dec
 ;;
(§ defn dec'
    {:inline (fn [x] `(cloiure.lang.Numbers/decP ~x))}
    [x] (cloiure.lang.Numbers/decP x)
)

;;;
 ; Returns a number one less than num. Does not auto-promote longs, will throw on overflow.
 ; See also: dec'
 ;;
(§ defn dec
    {:inline (fn [x] `(cloiure.lang.Numbers/dec ~x))}
    [x] (cloiure.lang.Numbers/dec x)
)

;;;
 ; Returns a number one greater than x, an int.
 ; Note - uses a primitive operator subject to overflow.
 ;;
(§ defn unchecked-inc-int
    {:inline (fn [x] `(cloiure.lang.Numbers/unchecked_int_inc ~x))}
    [x] (cloiure.lang.Numbers/unchecked_int_inc x)
)

;;;
 ; Returns a number one greater than x, a long.
 ; Note - uses a primitive operator subject to overflow.
 ;;
(§ defn unchecked-inc
    {:inline (fn [x] `(cloiure.lang.Numbers/unchecked_inc ~x))}
    [x] (cloiure.lang.Numbers/unchecked_inc x)
)

;;;
 ; Returns a number one less than x, an int.
 ; Note - uses a primitive operator subject to overflow.
 ;;
(§ defn unchecked-dec-int
    {:inline (fn [x] `(cloiure.lang.Numbers/unchecked_int_dec ~x))}
    [x] (cloiure.lang.Numbers/unchecked_int_dec x)
)

;;;
 ; Returns a number one less than x, a long.
 ; Note - uses a primitive operator subject to overflow.
 ;;
(§ defn unchecked-dec
    {:inline (fn [x] `(cloiure.lang.Numbers/unchecked_dec ~x))}
    [x] (cloiure.lang.Numbers/unchecked_dec x)
)

;;;
 ; Returns the negation of x, an int.
 ; Note - uses a primitive operator subject to overflow.
 ;;
(§ defn unchecked-negate-int
    {:inline (fn [x] `(cloiure.lang.Numbers/unchecked_int_negate ~x))}
    [x] (cloiure.lang.Numbers/unchecked_int_negate x)
)

;;;
 ; Returns the negation of x, a long.
 ; Note - uses a primitive operator subject to overflow.
 ;;
(§ defn unchecked-negate
    {:inline (fn [x] `(cloiure.lang.Numbers/unchecked_minus ~x))}
    [x] (cloiure.lang.Numbers/unchecked_minus x)
)

;;;
 ; Returns the sum of x and y, both int.
 ; Note - uses a primitive operator subject to overflow.
 ;;
(§ defn unchecked-add-int
    {:inline (fn [x y] `(cloiure.lang.Numbers/unchecked_int_add ~x ~y))}
    [x y] (cloiure.lang.Numbers/unchecked_int_add x y)
)

;;;
 ; Returns the sum of x and y, both long.
 ; Note - uses a primitive operator subject to overflow.
 ;;
(§ defn unchecked-add
    {:inline (fn [x y] `(cloiure.lang.Numbers/unchecked_add ~x ~y))}
    [x y] (cloiure.lang.Numbers/unchecked_add x y)
)

;;;
 ; Returns the difference of x and y, both int.
 ; Note - uses a primitive operator subject to overflow.
 ;;
(§ defn unchecked-subtract-int
    {:inline (fn [x y] `(cloiure.lang.Numbers/unchecked_int_subtract ~x ~y))}
    [x y] (cloiure.lang.Numbers/unchecked_int_subtract x y)
)

;;;
 ; Returns the difference of x and y, both long.
 ; Note - uses a primitive operator subject to overflow.
 ;;
(§ defn unchecked-subtract
    {:inline (fn [x y] `(cloiure.lang.Numbers/unchecked_minus ~x ~y))}
    [x y] (cloiure.lang.Numbers/unchecked_minus x y)
)

;;;
 ; Returns the product of x and y, both int.
 ; Note - uses a primitive operator subject to overflow.
 ;;
(§ defn unchecked-multiply-int
    {:inline (fn [x y] `(cloiure.lang.Numbers/unchecked_int_multiply ~x ~y))}
    [x y] (cloiure.lang.Numbers/unchecked_int_multiply x y)
)

;;;
 ; Returns the product of x and y, both long.
 ; Note - uses a primitive operator subject to overflow.
 ;;
(§ defn unchecked-multiply
    {:inline (fn [x y] `(cloiure.lang.Numbers/unchecked_multiply ~x ~y))}
    [x y] (cloiure.lang.Numbers/unchecked_multiply x y)
)

;;;
 ; Returns the division of x by y, both int.
 ; Note - uses a primitive operator subject to truncation.
 ;;
(§ defn unchecked-divide-int
    {:inline (fn [x y] `(cloiure.lang.Numbers/unchecked_int_divide ~x ~y))}
    [x y] (cloiure.lang.Numbers/unchecked_int_divide x y)
)

;;;
 ; Returns the remainder of division of x by y, both int.
 ; Note - uses a primitive operator subject to truncation.
 ;;
(§ defn unchecked-remainder-int
    {:inline (fn [x y] `(cloiure.lang.Numbers/unchecked_int_remainder ~x ~y))}
    [x y] (cloiure.lang.Numbers/unchecked_int_remainder x y)
)

;;;
 ; Returns true if num is greater than zero, else false.
 ;;
(§ defn pos?
    {:inline (fn [num] `(cloiure.lang.Numbers/isPos ~num))}
    [num] (cloiure.lang.Numbers/isPos num)
)

;;;
 ; Returns true if num is less than zero, else false.
 ;;
(§ defn neg?
    {:inline (fn [num] `(cloiure.lang.Numbers/isNeg ~num))}
    [num] (cloiure.lang.Numbers/isNeg num)
)

;;;
 ; quot[ient] of dividing numerator by denominator.
 ;;
(§ defn quot
    {:inline (fn [x y] `(cloiure.lang.Numbers/quotient ~x ~y))}
    [num div] (cloiure.lang.Numbers/quotient num div)
)

;;;
 ; rem[ainder] of dividing numerator by denominator.
 ;;
(§ defn rem
    {:inline (fn [x y] `(cloiure.lang.Numbers/remainder ~x ~y))}
    [num div] (cloiure.lang.Numbers/remainder num div)
)

;;;
 ; Returns the rational value of num.
 ;;
(§ defn rationalize [num] (cloiure.lang.Numbers/rationalize num))

;;;
 ; Bitwise complement.
 ;;
(§ defn bit-not
    {:inline (fn [x] `(cloiure.lang.Numbers/not ~x))}
    [x] (cloiure.lang.Numbers/not x)
)

;;;
 ; Bitwise and.
 ;;
(§ defn bit-and
    {:inline (nary-inline 'and) :inline-arities >1?}
    ([x y] (cloiure.lang.Numbers/and x y))
    ([x y & more] (reduce1 bit-and (bit-and x y) more))
)

;;;
 ; Bitwise or.
 ;;
(§ defn bit-or
    {:inline (nary-inline 'or) :inline-arities >1?}
    ([x y] (cloiure.lang.Numbers/or x y))
    ([x y & more] (reduce1 bit-or (bit-or x y) more))
)

;;;
 ; Bitwise exclusive or.
 ;;
(§ defn bit-xor
    {:inline (nary-inline 'xor) :inline-arities >1?}
    ([x y] (cloiure.lang.Numbers/xor x y))
    ([x y & more] (reduce1 bit-xor (bit-xor x y) more))
)

;;;
 ; Bitwise and with complement.
 ;;
(§ defn bit-and-not
    {:inline (nary-inline 'andNot) :inline-arities >1?}
    ([x y] (cloiure.lang.Numbers/andNot x y))
    ([x y & more] (reduce1 bit-and-not (bit-and-not x y) more))
)

;;;
 ; Clear bit at index n.
 ;;
(§ defn bit-clear [x n] (cloiure.lang.Numbers/clearBit x n))

;;;
 ; Set bit at index n.
 ;;
(§ defn bit-set [x n] (cloiure.lang.Numbers/setBit x n))

;;;
 ; Flip bit at index n.
 ;;
(§ defn bit-flip [x n] (cloiure.lang.Numbers/flipBit x n))

;;;
 ; Test bit at index n.
 ;;
(§ defn bit-test [x n] (cloiure.lang.Numbers/testBit x n))

;;;
 ; Bitwise shift left.
 ;;
(§ defn bit-shift-left
    {:inline (fn [x n] `(cloiure.lang.Numbers/shiftLeft ~x ~n))}
    [x n] (cloiure.lang.Numbers/shiftLeft x n)
)

;;;
 ; Bitwise shift right.
 ;;
(§ defn bit-shift-right
    {:inline (fn [x n] `(cloiure.lang.Numbers/shiftRight ~x ~n))}
    [x n] (cloiure.lang.Numbers/shiftRight x n)
)

;;;
 ; Bitwise shift right, without sign-extension.
 ;;
(§ defn unsigned-bit-shift-right
    {:inline (fn [x n] `(cloiure.lang.Numbers/unsignedShiftRight ~x ~n))}
    [x n] (cloiure.lang.Numbers/unsignedShiftRight x n)
)

;;;
 ; Returns true if n is an integer.
 ;;
(§ defn integer? [n]
    (or (instance? Integer n)
        (instance? Long n)
        (instance? cloiure.lang.BigInt n)
        (instance? BigInteger n)
        (instance? Short n)
        (instance? Byte n)
    )
)

;;;
 ; Returns true if n is even, throws an exception if n is not an integer.
 ;;
(§ defn even? [n]
    (if (integer? n)
        (zero? (bit-and (cloiure.lang.RT/uncheckedLongCast n) 1))
        (throw! (str "argument must be an integer: " n))
    )
)

;;;
 ; Returns true if n is odd, throws an exception if n is not an integer.
 ;;
(§ defn odd? [n] (not (even? n)))

;;;
 ; Return true if x is a fixed precision integer.
 ;;
(§ defn int? [x]
    (or (instance? Long x)
        (instance? Integer x)
        (instance? Short x)
        (instance? Byte x)
    )
)

;;;
 ; Return true if x is a positive fixed precision integer.
 ;;
(§ defn pos-int? [x] (and (int? x) (pos? x)))

;;;
 ; Return true if x is a negative fixed precision integer.
 ;;
(§ defn neg-int? [x] (and (int? x) (neg? x)))

;;;
 ; Return true if x is a non-negative fixed precision integer.
 ;;
(§ defn nat-int? [x] (and (int? x) (not (neg? x))))

;;;
 ; Return true if x is a Double.
 ;;
(§ defn double? [x] (instance? Double x))

;;;
 ; Takes a fn f and returns a fn that takes the same arguments as f,
 ; has the same effects, if any, and returns the opposite truth value.
 ;;
(§ defn complement [f]
    (fn
        ([] (not (f)))
        ([x] (not (f x)))
        ([x y] (not (f x y)))
        ([x y & zs] (not (apply f x y zs)))
    )
)

;;;
 ; Returns a function that takes any number of arguments and returns x.
 ;;
(§ defn constantly [x] (fn [& args] x))

;;;
 ; Returns its argument.
 ;;
(§ defn identity [x] x)

;; list stuff

;;;
 ; For a list or queue, same as first, for a vector, same as, but much
 ; more efficient than, last. If the collection is empty, returns nil.
 ;;
(§ defn peek [coll] (cloiure.lang.RT/peek coll))

;;;
 ; For a list or queue, returns a new list/queue without the first item,
 ; for a vector, returns a new vector without the last item.
 ; If the collection is empty, throws an exception.
 ; Note - not the same as next/butlast.
 ;;
(§ defn pop [coll] (cloiure.lang.RT/pop coll))

;; map stuff

;;;
 ; Return true if x is a map entry
 ;;
(§ defn map-entry? [x] (instance? java.util.Map$Entry x))

;;;
 ; Returns true if key is present in the given collection, otherwise
 ; returns false. Note that for numerically indexed collections, like
 ; vectors and Java arrays, this tests if the numeric key is within the
 ; range of indexes. 'contains?' operates constant or logarithmic time;
 ; it will not perform a linear search for a value. See also 'some'.
 ;;
(§ defn contains? [coll key] (cloiure.lang.RT/contains coll key))

;;;
 ; Returns the value mapped to key, not-found or nil if key not present.
 ;;
(§ defn get
    {:inline (fn [m k & nf] `(cloiure.lang.RT/get ~m ~k ~@nf)) :inline-arities #{2 3}}
    ([map key] (cloiure.lang.RT/get map key))
    ([map key not-found] (cloiure.lang.RT/get map key not-found))
)

;;;
 ; dissoc[iate]. Returns a new map of the same (hashed/sorted) type,
 ; that does not contain a mapping for key(s).
 ;;
(§ defn dissoc
    ([map] map)
    ([map key] (cloiure.lang.RT/dissoc map key))
    ([map key & ks]
        (let [ret (dissoc map key)]
            (if ks
                (recur ret (first ks) (next ks))
                ret
            )
        )
    )
)

;;;
 ; disj[oin]. Returns a new set of the same (hashed/sorted) type,
 ; that does not contain key(s).
 ;;
(§ defn disj
    ([set] set)
    ([^cloiure.lang.IPersistentSet set key]
        (when set
            (.disj set key)
        )
    )
    ([set key & ks]
        (when set
            (let [ret (disj set key)]
                (if ks
                    (recur ret (first ks) (next ks))
                    ret
                )
            )
        )
    )
)

;;;
 ; Returns the map entry for key, or nil if key not present.
 ;;
(§ defn find [map key] (cloiure.lang.RT/find map key))

;;;
 ; Returns a map containing only those entries in map whose key is in keys.
 ;;
(§ defn select-keys [map keyseq]
    (loop [ret {} keys (seq keyseq)]
        (if keys
            (let [entry (cloiure.lang.RT/find map (first keys))]
                (recur (if entry (conj ret entry) ret) (next keys))
            )
            (with-meta ret (meta map))
        )
    )
)

;;;
 ; Returns a sequence of the map's keys, in the same order as (seq map).
 ;;
(§ defn keys [map] (cloiure.lang.RT/keys map))

;;;
 ; Returns a sequence of the map's values, in the same order as (seq map).
 ;;
(§ defn vals [map] (cloiure.lang.RT/vals map))

;;;
 ; Returns the key of the map entry.
 ;;
(§ defn key [^java.util.Map$Entry e] (.getKey e))

;;;
 ; Returns the value in the map entry.
 ;;
(§ defn val [^java.util.Map$Entry e] (.getValue e))

;;;
 ; Returns, in constant time, a seq of the items in rev (which can be a vector or sorted-map), in reverse order.
 ; If rev is empty, returns nil.
 ;;
(§ defn rseq [^cloiure.lang.Reversible rev] (.rseq rev))

;;;
 ; Returns the name String of a string, symbol or keyword.
 ;;
(§ defn ^String name [x] (if (string? x) x (.getName ^cloiure.lang.Named x)))

;;;
 ; Returns the namespace String of a symbol or keyword, or nil if not present.
 ;;
(§ defn ^String namespace [^cloiure.lang.Named x] (.getNamespace x))

;;;
 ; Coerce to boolean.
 ;;
(§ defn boolean
    {:inline (fn [x] `(cloiure.lang.RT/booleanCast ~x))}
    [x] (cloiure.lang.RT/booleanCast x)
)

;;;
 ; Return true if x is a symbol or keyword.
 ;;
(§ defn ident? [x] (or (keyword? x) (symbol? x)))

;;;
 ; Return true if x is a symbol or keyword without a namespace.
 ;;
(§ defn simple-ident? [x] (and (ident? x) (nil? (namespace x))))

;;;
 ; Return true if x is a symbol or keyword with a namespace.
 ;;
(§ defn qualified-ident? [x] (boolean (and (ident? x) (namespace x) true)))

;;;
 ; Return true if x is a symbol without a namespace.
 ;;
(§ defn simple-symbol? [x] (and (symbol? x) (nil? (namespace x))))

;;;
 ; Return true if x is a symbol with a namespace.
 ;;
(§ defn qualified-symbol? [x] (boolean (and (symbol? x) (namespace x) true)))

;;;
 ; Return true if x is a keyword without a namespace.
 ;;
(§ defn simple-keyword? [x] (and (keyword? x) (nil? (namespace x))))

;;;
 ; Return true if x is a keyword with a namespace.
 ;;
(§ defn qualified-keyword? [x] (boolean (and (keyword? x) (namespace x) true)))

;;;
 ; Executes exprs in an implicit do, while holding the monitor of x.
 ; Will release the monitor of x in all circumstances.
 ;;
(§ defmacro locking [x & body]
    `(let [lockee# ~x]
        (try
            (monitor-enter lockee#)
            ~@body
            (finally
                (monitor-exit lockee#)
            )
        )
    )
)

;;;
 ; form => fieldName-symbol or (instanceMethodName-symbol args*)
 ;
 ; Expands into a member access (.) of the first member on the first argument,
 ; followed by the next member on the result, etc. For instance:
 ;
 ; (.. System (getProperties) (get "os.name"))
 ;
 ; expands to:
 ;
 ; (. (. System (getProperties)) (get "os.name"))
 ;
 ; but is easier to write, read, and understand.
 ;;
(§ defmacro ..
    ([x form] `(. ~x ~form))
    ([x form & more] `(.. (. ~x ~form) ~@more))
)

;;;
 ; Threads the expr through the forms. Inserts x as the second item
 ; in the first form, making a list of it if it is not a list already.
 ; If there are more forms, inserts the first form as the second item
 ; in second form, etc.
 ;;
(§ defmacro -> [x & forms]
    (loop [x x forms forms]
        (if forms
            (let [form (first forms)
                  threaded
                    (if (seq? form)
                        (with-meta `(~(first form) ~x ~@(next form)) (meta form))
                        (list form x)
                    )]
                (recur threaded (next forms))
            )
            x
        )
    )
)

;;;
 ; Threads the expr through the forms. Inserts x as the last item
 ; in the first form, making a list of it if it is not a list already.
 ; If there are more forms, inserts the first form as the last item
 ; in second form, etc.
 ;;
(§ defmacro ->> [x & forms]
    (loop [x x forms forms]
        (if forms
            (let [form (first forms)
                  threaded
                    (if (seq? form)
                        (with-meta `(~(first form) ~@(next form) ~x) (meta form))
                        (list form x)
                    )]
                (recur threaded (next forms))
            )
            x
        )
    )
)

(§ def map)

;;;
 ; Throws an exception if the given option map contains keys not listed as valid, else returns nil.
 ;;
(§ defn ^:private check-valid-options [options & valid-keys]
    (when (seq (apply disj (apply hash-set (keys options)) valid-keys))
        (throw! (apply str "only these options are valid: " (first valid-keys) (map #(str ", " %) (rest valid-keys))))
    )
)

;; multimethods

(§ def global-hierarchy)

;;;
 ; Creates a new multimethod with the associated dispatch function.
 ; The attr-map is optional.
 ;
 ; Options are key-value pairs and may be one of:
 ;
 ; :default
 ;
 ; The default dispatch value, defaults to :default
 ;
 ; :hierarchy
 ;
 ; The value used for hierarchical dispatch (e.g. ::square is-a ::shape)
 ;
 ; Hierarchies are type-like relationships that do not depend upon type
 ; inheritance. By default Cloiure's multimethods dispatch off of a
 ; global hierarchy map. However, a hierarchy relationship can be
 ; created with the derive function used to augment the root ancestor
 ; created with make-hierarchy.
 ;
 ; Multimethods expect the value of the hierarchy option to be supplied as
 ; a reference type e.g. a var (i.e. via the Var-quote dispatch macro #'
 ; or the var special form).
 ;;
(§ defmacro defmulti [mm-name & options]
    (let [m           (if (map? (first options)) (first options) {})
          options     (if (map? (first options)) (next options) options)
          dispatch-fn (first options)
          options     (next options)
          m           (if (meta mm-name) (conj (meta mm-name) m) m)
          mm-name     (with-meta mm-name m)]
        (when (= (count options) 1)
            (throw! "the syntax for defmulti has changed: (defmulti name dispatch-fn :default dispatch-value)")
        )
        (let [options   (apply hash-map options)
              default   (get options :default :default)
              hierarchy (get options :hierarchy #'global-hierarchy)]
            (check-valid-options options :default :hierarchy)
            `(let [v# (def ~mm-name)]
                (when-not (and (.hasRoot v#) (instance? cloiure.lang.MultiFn (deref v#)))
                    (def ~mm-name (cloiure.lang.MultiFn. ~(name mm-name) ~dispatch-fn ~default ~hierarchy))
                )
            )
        )
    )
)

;;;
 ; Creates and installs a new method of multimethod associated with dispatch-value.
 ;;
(§ defmacro defmethod [multifn dispatch-val & fn-tail]
    `(.addMethod ~(with-meta multifn {:tag 'cloiure.lang.MultiFn}) ~dispatch-val (fn ~@fn-tail))
)

;;;
 ; Removes all of the methods of multimethod.
 ;;
(§ defn remove-all-methods [^cloiure.lang.MultiFn multifn]
    (.reset multifn)
)

;;;
 ; Removes the method of multimethod associated with dispatch-value.
 ;;
(§ defn remove-method [^cloiure.lang.MultiFn multifn dispatch-val]
    (.removeMethod multifn dispatch-val)
)

;;;
 ; Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y when there is a conflict.
 ;;
(§ defn prefer-method [^cloiure.lang.MultiFn multifn dispatch-val-x dispatch-val-y]
    (.preferMethod multifn dispatch-val-x dispatch-val-y)
)

;;;
 ; Given a multimethod, returns a map of dispatch values -> dispatch fns.
 ;;
(§ defn methods [^cloiure.lang.MultiFn multifn]
    (.getMethodTable multifn)
)

;;;
 ; Given a multimethod and a dispatch value, returns the dispatch fn
 ; that would apply to that value, or nil if none apply and no default.
 ;;
(§ defn get-method [^cloiure.lang.MultiFn multifn dispatch-val]
    (.getMethod multifn dispatch-val)
)

;;;
 ; Given a multimethod, returns a map of preferred value -> set of other values.
 ;;
(§ defn prefers [^cloiure.lang.MultiFn multifn]
    (.getPreferTable multifn)
)

;; var stuff

(§ defmacro ^:private assert-args [& pairs]
    `(do
        (when-not ~(first pairs)
            (throw! (str (first ~'&form) " requires " ~(second pairs) " in " ~'*ns* ":" (:line (meta ~'&form))))
        )
        ~(let [more (nnext pairs)]
            (when more
                (list* `assert-args more)
            )
        )
    )
)

;;;
 ; bindings => binding-form test
 ;
 ; If test is true, evaluates then with binding-form bound to the value of test, if not, yields else.
 ;;
(§ defmacro if-let
    ([bindings then] `(if-let ~bindings ~then nil))
    ([bindings then else & oldform]
        (assert-args
            (vector? bindings) "a vector for its binding"
            (nil? oldform) "1 or 2 forms after binding vector"
            (= 2 (count bindings)) "exactly 2 forms in binding vector"
        )
        (let [form (bindings 0) tst (bindings 1)]
            `(let [temp# ~tst]
                (if temp# (let [~form temp#] ~then) ~else)
            )
        )
    )
)

;;;
 ; bindings => binding-form test
 ;
 ; When test is true, evaluates body with binding-form bound to the value of test.
 ;;
(§ defmacro when-let [bindings & body]
    (assert-args
        (vector? bindings) "a vector for its binding"
        (= 2 (count bindings)) "exactly 2 forms in binding vector"
    )
    (let [form (bindings 0) tst (bindings 1)]
        `(let [temp# ~tst]
            (when temp# (let [~form temp#] ~@body))
        )
    )
)

;;;
 ; bindings => binding-form test
 ;
 ; If test is not nil, evaluates then with binding-form bound to the value of test, if not, yields else.
 ;;
(§ defmacro if-some
    ([bindings then] `(if-some ~bindings ~then nil))
    ([bindings then else & oldform]
        (assert-args
            (vector? bindings) "a vector for its binding"
            (nil? oldform) "1 or 2 forms after binding vector"
            (= 2 (count bindings)) "exactly 2 forms in binding vector"
        )
        (let [form (bindings 0) tst (bindings 1)]
            `(let [temp# ~tst]
                (if (nil? temp#) ~else (let [~form temp#] ~then))
            )
        )
    )
)

;;;
 ; bindings => binding-form test
 ;
 ; When test is not nil, evaluates body with binding-form bound to the value of test.
 ;;
(§ defmacro when-some [bindings & body]
    (assert-args
        (vector? bindings) "a vector for its binding"
        (= 2 (count bindings)) "exactly 2 forms in binding vector"
    )
    (let [form (bindings 0) tst (bindings 1)]
        `(let [temp# ~tst]
            (if (nil? temp#) nil (let [~form temp#] ~@body))
        )
    )
)

;;;
 ; WARNING: This is a low-level function.
 ; Prefer high-level macros like binding where ever possible.
 ;
 ; Takes a map of Var/value pairs. Binds each Var to the associated value for
 ; the current thread. Each call *MUST* be accompanied by a matching call to
 ; pop-thread-bindings wrapped in a try-finally!
 ;
 ; (push-thread-bindings bindings)
 ; (try
 ; ...
 ; (finally
 ; (pop-thread-bindings)))
 ;;
(§ defn push-thread-bindings [bindings] (cloiure.lang.Var/pushThreadBindings bindings))

;;;
 ; Pop one set of bindings pushed with push-binding before.
 ; It is an error to pop bindings without pushing before.
 ;;
(§ defn pop-thread-bindings [] (cloiure.lang.Var/popThreadBindings))

;;;
 ; Get a map with the Var/value pairs which is currently in effect for the current thread.
 ;;
(§ defn get-thread-bindings [] (cloiure.lang.Var/getThreadBindings))

;;;
 ; binding => var-symbol init-expr
 ;
 ; Creates new bindings for the (already-existing) vars, with the
 ; supplied initial values, executes the exprs in an implicit do, then
 ; re-establishes the bindings that existed before. The new bindings
 ; are made in parallel (unlike let); all init-exprs are evaluated
 ; before the vars are bound to their new values.
 ;;
(§ defmacro binding [bindings & body]
    (assert-args
        (vector? bindings) "a vector for its binding"
        (even? (count bindings)) "an even number of forms in binding vector"
    )
    (let [var-ize
            (fn [var-vals]
                (loop [ret [] vvs (seq var-vals)]
                    (if vvs
                        (recur (conj (conj ret `(var ~(first vvs))) (second vvs)) (next (next vvs)))
                        (seq ret)
                    )
                )
            )]
        `(let []
            (push-thread-bindings (hash-map ~@(var-ize bindings)))
            (try
                ~@body
                (finally
                    (pop-thread-bindings)
                )
            )
        )
    )
)

;;;
 ; Takes a map of Var/value pairs. Installs for the given Vars the associated
 ; values as thread-local bindings. Then calls f with the supplied arguments.
 ; Pops the installed bindings after f returned. Returns whatever f returns.
 ;;
(§ defn with-bindings* [binding-map f & args]
    (push-thread-bindings binding-map)
    (try
        (apply f args)
        (finally
            (pop-thread-bindings)
        )
    )
)

;;;
 ; Takes a map of Var/value pairs. Installs for the given Vars the associated
 ; values as thread-local bindings. Then executes body. Pops the installed
 ; bindings after body was evaluated. Returns the value of body.
 ;;
(§ defmacro with-bindings [binding-map & body]
    `(with-bindings* ~binding-map (fn [] ~@body))
)

;;;
 ; Returns a function, which will install the same bindings in effect as in
 ; the thread at the time bound-fn* was called and then call f with any given
 ; arguments. This may be used to define a helper function which runs on a
 ; different thread, but needs the same bindings in place.
 ;;
(§ defn bound-fn* [f]
    (let [bindings (get-thread-bindings)]
        (fn [& args] (apply with-bindings* bindings f args))
    )
)

;;;
 ; Returns a function defined by the given fntail, which will install the
 ; same bindings in effect as in the thread at the time bound-fn was called.
 ; This may be used to define a helper function which runs on a different
 ; thread, but needs the same bindings in place.
 ;;
(§ defmacro bound-fn [& fntail] `(bound-fn* (fn ~@fntail)))

;;;
 ; Returns the global var named by the namespace-qualified symbol,
 ; or nil if no var with that name.
 ;;
(§ defn find-var [sym] (cloiure.lang.Var/find sym))

(§ defn ^:private setup-reference [^cloiure.lang.IReference r options]
    (let [opts (apply hash-map options)]
        (when (:meta opts)
            (.resetMeta r (:meta opts))
        )
        r
    )
)

;;;
 ; Also reader macro: @ref/@var/@atom/@delay.
 ; Within a transaction, returns the in-transaction-value of ref, else
 ; returns the most-recently-committed value of ref. When applied to a var
 ; or atom, returns its current state. When applied to a delay, forces
 ; it if not already forced. See also - realized?.
 ;;
(§ defn deref [ref] (.deref ^cloiure.lang.IDeref ref))

;;;
 ; Creates and returns an Atom with an initial value of x and zero or more
 ; options (in any order):
 ;
 ; :meta      metadata-map
 ;
 ; If metadata-map is supplied, it will become the metadata on the atom.
 ;;
(§ defn atom
    ([x] (cloiure.lang.Atom. x))
    ([x & options] (setup-reference (atom x) options))
)

;;;
 ; Atomically swaps the value of atom to be: (apply f current-value-of-atom args).
 ; Note that f may be called multiple times, and thus should be free of side effects.
 ; Returns the value that was swapped in.
 ;;
(§ defn swap!
    ([^cloiure.lang.IAtom atom f] (.swap atom f))
    ([^cloiure.lang.IAtom atom f x] (.swap atom f x))
    ([^cloiure.lang.IAtom atom f x y] (.swap atom f x y))
    ([^cloiure.lang.IAtom atom f x y & args] (.swap atom f x y args))
)

;;;
 ; Atomically swaps the value of atom to be: (apply f current-value-of-atom args).
 ; Note that f may be called multiple times, and thus should be free of side effects.
 ; Returns [old new], the value of the atom before and after the swap.
 ;;
(§ defn ^cloiure.lang.IPersistentVector swap-vals!
    ([^cloiure.lang.IAtom2 atom f] (.swapVals atom f))
    ([^cloiure.lang.IAtom2 atom f x] (.swapVals atom f x))
    ([^cloiure.lang.IAtom2 atom f x y] (.swapVals atom f x y))
    ([^cloiure.lang.IAtom2 atom f x y & args] (.swapVals atom f x y args))
)

;;;
 ; Atomically sets the value of atom to newval if and only if the
 ; current value of the atom is identical to oldval. Returns true if
 ; set happened, else false
 ;;
(§ defn compare-and-set! [^cloiure.lang.IAtom atom oldval newval]
    (.compareAndSet atom oldval newval)
)

;;;
 ; Sets the value of atom to newval without regard for the current value.
 ; Returns newval.
 ;;
(§ defn reset! [^cloiure.lang.IAtom atom newval]
    (.reset atom newval)
)

;;;
 ; Sets the value of atom to newval. Returns [old new], the value of the
 ; atom before and after the reset.
 ;;
(§ defn ^cloiure.lang.IPersistentVector reset-vals! [^cloiure.lang.IAtom2 atom newval]
    (.resetVals atom newval)
)

;;;
 ; Atomically sets the metadata for a namespace/var/ref/atom to be:
 ;
 ; (apply f its-current-meta args)
 ;
 ; f must be free of side-effects.
 ;;
(§ defn alter-meta! [^cloiure.lang.IReference iref f & args]
    (.alterMeta iref f args)
)

;;;
 ; Atomically resets the metadata for a namespace/var/ref/atom.
 ;;
(§ defn reset-meta! [^cloiure.lang.IReference iref metadata-map]
    (.resetMeta iref metadata-map)
)

;;;
 ; Creates and returns a Volatile with an initial value of val.
 ;;
(§ defn ^cloiure.lang.Volatile volatile! [val]
    (cloiure.lang.Volatile. val)
)

;;;
 ; Sets the value of volatile to newval without regard for the
 ; current value. Returns newval.
 ;;
(§ defn vreset! [^cloiure.lang.Volatile vol newval]
    (.reset vol newval)
)

;;;
 ; Non-atomically swaps the value of the volatile as if:
 ; (apply f current-value-of-vol args).
 ; Returns the value that was swapped in.
 ;;
(§ defmacro vswap! [vol f & args]
    (let [v (with-meta vol {:tag 'cloiure.lang.Volatile})]
        `(.reset ~v (~f (.deref ~v) ~@args))
    )
)

;;;
 ; Returns true if x is a volatile.
 ;;
(§ defn volatile? [x] (instance? cloiure.lang.Volatile x))

;;;
 ; Takes a set of functions and returns a fn that is the composition
 ; of those fns. The returned fn takes a variable number of args,
 ; applies the rightmost of fns to the args, the next
 ; fn (right-to-left) to the result, etc.
 ;;
(§ defn comp
    ([] identity)
    ([f] f)
    ([f g]
        (fn
            ([] (f (g)))
            ([x] (f (g x)))
            ([x y] (f (g x y)))
            ([x y z] (f (g x y z)))
            ([x y z & args] (f (apply g x y z args)))
        )
    )
    ([f g & fs] (reduce1 comp (list* f g fs)))
)

;;;
 ; Takes a set of functions and returns a fn that is the juxtaposition
 ; of those fns. The returned fn takes a variable number of args, and
 ; returns a vector containing the result of applying each fn to the
 ; args (left-to-right).
 ; ((juxt a b c) x) => [(a x) (b x) (c x)]
 ;;
(§ defn juxt
    ([f]
        (fn
            ([] [(f)])
            ([x] [(f x)])
            ([x y] [(f x y)])
            ([x y z] [(f x y z)])
            ([x y z & args] [(apply f x y z args)])
        )
    )
    ([f g]
        (fn
            ([] [(f) (g)])
            ([x] [(f x) (g x)])
            ([x y] [(f x y) (g x y)])
            ([x y z] [(f x y z) (g x y z)])
            ([x y z & args] [(apply f x y z args) (apply g x y z args)])
        )
    )
    ([f g h]
        (fn
            ([] [(f) (g) (h)])
            ([x] [(f x) (g x) (h x)])
            ([x y] [(f x y) (g x y) (h x y)])
            ([x y z] [(f x y z) (g x y z) (h x y z)])
            ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)])
        )
    )
    ([f g h & fs]
        (let [fs (list* f g h fs)]
            (fn
                ([] (reduce1 #(conj %1 (%2)) [] fs))
                ([x] (reduce1 #(conj %1 (%2 x)) [] fs))
                ([x y] (reduce1 #(conj %1 (%2 x y)) [] fs))
                ([x y z] (reduce1 #(conj %1 (%2 x y z)) [] fs))
                ([x y z & args] (reduce1 #(conj %1 (apply %2 x y z args)) [] fs))
            )
        )
    )
)

;;;
 ; Takes a function f and fewer than the normal arguments to f, and
 ; returns a fn that takes a variable number of additional args. When
 ; called, the returned function calls f with args + additional args.
 ;;
(§ defn partial
    ([f] f)
    ([f arg1]
        (fn
            ([] (f arg1))
            ([x] (f arg1 x))
            ([x y] (f arg1 x y))
            ([x y z] (f arg1 x y z))
            ([x y z & args] (apply f arg1 x y z args))
        )
    )
    ([f arg1 arg2]
        (fn
            ([] (f arg1 arg2))
            ([x] (f arg1 arg2 x))
            ([x y] (f arg1 arg2 x y))
            ([x y z] (f arg1 arg2 x y z))
            ([x y z & args] (apply f arg1 arg2 x y z args))
        )
    )
    ([f arg1 arg2 arg3]
        (fn
            ([] (f arg1 arg2 arg3))
            ([x] (f arg1 arg2 arg3 x))
            ([x y] (f arg1 arg2 arg3 x y))
            ([x y z] (f arg1 arg2 arg3 x y z))
            ([x y z & args] (apply f arg1 arg2 arg3 x y z args))
        )
    )
    ([f arg1 arg2 arg3 & more]
        (fn [& args] (apply f arg1 arg2 arg3 (concat more args)))
    )
)

;;;
 ; Returns true if (pred x) is logical true for every x in coll, else false.
 ;;
(§ defn ^Boolean every? [pred coll]
    (cond
        (nil? (seq coll)) true
        (pred (first coll)) (recur pred (next coll))
        :else false
    )
)

;;;
 ; Returns false if (pred x) is logical true for every x in coll, else true.
 ;;
(§ def ^Boolean not-every? (comp not every?))

;;;
 ; Returns the first logical true value of (pred x) for any x in coll,
 ; else nil. One common idiom is to use a set as pred, for example
 ; this will return :fred if :fred is in the sequence, otherwise nil:
 ; (some #{:fred} coll).
 ;;
(§ defn some [pred coll]
    (when (seq coll)
        (or (pred (first coll)) (recur pred (next coll)))
    )
)

;;;
 ; Returns false if (pred x) is logical true for any x in coll, else true.
 ;;
(§ def ^Boolean not-any? (comp not some))

;; will be redefed later with arg checks

;;;
 ; bindings => name n
 ;
 ; Repeatedly executes body (presumably for side-effects) with name
 ; bound to integers from 0 through n-1.
 ;;
(§ defmacro dotimes [bindings & body]
    (let [i (first bindings) n (second bindings)]
        `(let [n# (cloiure.lang.RT/longCast ~n)]
            (loop [~i 0]
                (when (< ~i n#)
                    ~@body
                    (recur (unchecked-inc ~i))
                )
            )
        )
    )
)

;;;
 ; Returns a lazy sequence consisting of the result of applying f to
 ; the set of first items of each coll, followed by applying f to the
 ; set of second items in each coll, until any one of the colls is
 ; exhausted. Any remaining items in other colls are ignored. Function
 ; f should accept number-of-colls arguments. Returns a transducer when
 ; no collection is provided.
 ;;
(§ defn map
    ([f]
        (fn [rf]
            (fn
                ([] (rf))
                ([result] (rf result))
                ([result input] (rf result (f input)))
                ([result input & inputs] (rf result (apply f input inputs)))
            )
        )
    )
    ([f coll]
        (lazy-seq
            (when-let [s (seq coll)]
                (if (chunked-seq? s)
                    (let [c (chunk-first s) size (int (count c)) b (chunk-buffer size)]
                        (dotimes [i size]
                            (chunk-append b (f (nth c i)))
                        )
                        (chunk-cons (chunk b) (map f (chunk-rest s)))
                    )
                    (cons (f (first s)) (map f (rest s)))
                )
            )
        )
    )
    ([f c1 c2]
        (lazy-seq
            (let [s1 (seq c1) s2 (seq c2)]
                (when (and s1 s2)
                    (cons (f (first s1) (first s2)) (map f (rest s1) (rest s2)))
                )
            )
        )
    )
    ([f c1 c2 c3]
        (lazy-seq
            (let [s1 (seq c1) s2 (seq c2) s3 (seq c3)]
                (when (and s1 s2 s3)
                    (cons (f (first s1) (first s2) (first s3)) (map f (rest s1) (rest s2) (rest s3)))
                )
            )
        )
    )
    ([f c1 c2 c3 & colls]
        (let [step
                (fn step [cs]
                    (lazy-seq
                        (let [ss (map seq cs)]
                            (when (every? identity ss)
                                (cons (map first ss) (step (map rest ss)))
                            )
                        )
                    )
                )]
            (map #(apply f %) (step (conj colls c3 c2 c1)))
        )
    )
)

;;;
 ; defs the supplied var names with no bindings, useful for making forward declarations.
 ;;
(§ defmacro declare [& names]
    `(do
        ~@(map #(list 'def (vary-meta % assoc :declared true)) names)
    )
)

(§ declare cat)

;;;
 ; Returns the result of applying concat to the result of applying map to f and colls.
 ; Thus function f should return a collection.
 ; Returns a transducer when no collections are provided.
 ;;
(§ defn mapcat
    ([f] (comp (map f) cat))
    ([f & colls] (apply concat (apply map f colls)))
)

;;;
 ; Returns a lazy sequence of the items in coll for which (pred item) returns logical true.
 ; pred must be free of side-effects.
 ; Returns a transducer when no collection is provided.
 ;;
(§ defn filter
    ([pred]
        (fn [rf]
            (fn
                ([] (rf))
                ([result] (rf result))
                ([result input] (if (pred input) (rf result input) result))
            )
        )
    )
    ([pred coll]
        (lazy-seq
            (when-let [s (seq coll)]
                (if (chunked-seq? s)
                    (let [c (chunk-first s) size (count c) b (chunk-buffer size)]
                        (dotimes [i size]
                            (let [v (nth c i)]
                                (when (pred v)
                                    (chunk-append b v)
                                )
                            )
                        )
                        (chunk-cons (chunk b) (filter pred (chunk-rest s)))
                    )
                    (let [f (first s) r (rest s)]
                        (if (pred f)
                            (cons f (filter pred r))
                            (filter pred r)
                        )
                    )
                )
            )
        )
    )
)

;;;
 ; Returns a lazy sequence of the items in coll for which (pred item) returns logical false.
 ; pred must be free of side-effects.
 ; Returns a transducer when no collection is provided.
 ;;
(§ defn remove
    ([pred]      (filter (complement pred)     ))
    ([pred coll] (filter (complement pred) coll))
)

;;;
 ; Wraps x in a way such that a reduce will terminate with the value x.
 ;;
(§ defn reduced [x] (cloiure.lang.Reduced. x))

;;;
 ; Returns true if x is the result of a call to reduced.
 ;;
(§ defn reduced?
    {:inline (fn [x] `(cloiure.lang.RT/isReduced ~x)) :inline-arities #{1}}
    [x] (cloiure.lang.RT/isReduced x)
)

;;;
 ; If x is already reduced?, returns it, else returns (reduced x).
 ;;
(§ defn ensure-reduced [x] (if (reduced? x) x (reduced x)))

;;;
 ; If x is reduced?, returns (deref x), else returns x.
 ;;
(§ defn unreduced [x] (if (reduced? x) (deref x) x))

;;;
 ; Returns a lazy sequence of the first n items in coll, or all items if there are fewer than n.
 ; Returns a stateful transducer when no collection is provided.
 ;;
(§ defn take
    ([n]
        (fn [rf]
            (let [nv (volatile! n)]
                (fn
                    ([] (rf))
                    ([result] (rf result))
                    ([result input]
                        (let [n @nv nn (vswap! nv dec) result (if (pos? n) (rf result input) result)]
                            (if (not (pos? nn))
                                (ensure-reduced result)
                                result
                            )
                        )
                    )
                )
            )
        )
    )
    ([n coll]
        (lazy-seq
            (when (pos? n)
                (when-let [s (seq coll)]
                    (cons (first s) (take (dec n) (rest s)))
                )
            )
        )
    )
)

;;;
 ; Returns a lazy sequence of successive items from coll while (pred item) returns logical true.
 ; pred must be free of side-effects.
 ; Returns a transducer when no collection is provided.
 ;;
(§ defn take-while
    ([pred]
        (fn [rf]
            (fn
                ([] (rf))
                ([result] (rf result))
                ([result input] (if (pred input) (rf result input) (reduced result)))
            )
        )
    )
    ([pred coll]
        (lazy-seq
            (when-let [s (seq coll)]
                (when (pred (first s))
                    (cons (first s) (take-while pred (rest s)))
                )
            )
        )
    )
)

;;;
 ; Returns a lazy sequence of all but the first n items in coll.
 ; Returns a stateful transducer when no collection is provided.
 ;;
(§ defn drop
    ([n]
        (fn [rf]
            (let [nv (volatile! n)]
                (fn
                    ([] (rf))
                    ([result] (rf result))
                    ([result input]
                        (let [n @nv]
                            (vswap! nv dec)
                            (if (pos? n)
                                result
                                (rf result input)
                            )
                        )
                    )
                )
            )
        )
    )
    ([n coll]
        (let [step
                (fn [n coll]
                    (let [s (seq coll)]
                        (if (and (pos? n) s)
                            (recur (dec n) (rest s))
                            s
                        )
                    )
                )]
            (lazy-seq (step n coll))
        )
    )
)

;;;
 ; Return a lazy sequence of all but the last n (default 1) items in coll.
 ;;
(§ defn drop-last
    ([coll] (drop-last 1 coll))
    ([n coll] (map (fn [x _] x) coll (drop n coll)))
)

;;;
 ; Returns a seq of the last n items in coll. Depending on the type of coll
 ; may be no better than linear time. For vectors, see also subvec.
 ;;
(§ defn take-last [n coll]
    (loop [s (seq coll) lead (seq (drop n coll))]
        (if lead
            (recur (next s) (next lead))
            s
        )
    )
)

;;;
 ; Returns a lazy sequence of the items in coll starting from the
 ; first item for which (pred item) returns logical false.
 ; Returns a stateful transducer when no collection is provided.
 ;;
(§ defn drop-while
    ([pred]
        (fn [rf]
            (let [dv (volatile! true)]
                (fn
                    ([] (rf))
                    ([result] (rf result))
                    ([result input]
                        (let [drop? @dv]
                            (if (and drop? (pred input))
                                result
                                (do
                                    (vreset! dv nil)
                                    (rf result input)
                                )
                            )
                        )
                    )
                )
            )
        )
    )
    ([pred coll]
        (let [step
                (fn [pred coll]
                    (let [s (seq coll)]
                        (if (and s (pred (first s)))
                            (recur pred (rest s))
                            s
                        )
                    )
                )]
            (lazy-seq (step pred coll))
        )
    )
)

;;;
 ; Returns a lazy (infinite!) sequence of repetitions of the items in coll.
 ;;
(§ defn cycle [coll] (cloiure.lang.Cycle/create (seq coll)))

;;;
 ; Returns a vector of [(take n coll) (drop n coll)].
 ;;
(§ defn split-at [n coll]
    [(take n coll) (drop n coll)]
)

;;;
 ; Returns a vector of [(take-while pred coll) (drop-while pred coll)].
 ;;
(§ defn split-with [pred coll]
    [(take-while pred coll) (drop-while pred coll)]
)

;;;
 ; Returns a lazy (infinite!, or length n if supplied) sequence of xs.
 ;;
(§ defn repeat
    ([x]   (cloiure.lang.Repeat/create   x))
    ([n x] (cloiure.lang.Repeat/create n x))
)

;;;
 ; Returns a lazy sequence of x, (f x), (f (f x)), etc.
 ; f must be free of side-effects.
 ;;
(§ defn iterate [f x] (cloiure.lang.Iterate/create f x))

;;;
 ; Returns a lazy seq of nums from start (inclusive) to end (exclusive),
 ; by step, where start defaults to 0, step to 1, and end to infinity.
 ; When step is equal to 0, returns an infinite sequence of start.
 ; When start is equal to end, returns empty list.
 ;;
(§ defn range
    ([] (iterate inc' 0))
    ([end]
        (if (instance? Long end)
            (cloiure.lang.LongRange/create end)
            (cloiure.lang.Range/create end)
        )
    )
    ([start end]
        (if (and (instance? Long start) (instance? Long end))
            (cloiure.lang.LongRange/create start end)
            (cloiure.lang.Range/create start end)
        )
    )
    ([start end step]
        (if (and (instance? Long start) (instance? Long end) (instance? Long step))
            (cloiure.lang.LongRange/create start end step)
            (cloiure.lang.Range/create start end step)
        )
    )
)

;;;
 ; Returns a map that consists of the rest of the maps conj-ed onto
 ; the first. If a key occurs in more than one map, the mapping from
 ; the latter (left-to-right) will be the mapping in the result.
 ;;
(§ defn merge [& maps]
    (when (some identity maps)
        (reduce1 #(conj (or %1 {}) %2) maps)
    )
)

;;;
 ; Returns a map that consists of the rest of the maps conj-ed onto
 ; the first. If a key occurs in more than one map, the mapping(s)
 ; from the latter (left-to-right) will be combined with the mapping in
 ; the result by calling (f val-in-result val-in-latter).
 ;;
(§ defn merge-with [f & maps]
    (when (some identity maps)
        (let [merge-entry
                (fn [m e]
                    (let [k (key e) v (val e)]
                        (if (contains? m k)
                            (assoc m k (f (get m k) v))
                            (assoc m k v)
                        )
                    )
                )
              merge2
                (fn [m1 m2]
                    (reduce1 merge-entry (or m1 {}) (seq m2))
                )]
            (reduce1 merge2 maps)
        )
    )
)

;;;
 ; Returns a map with the keys mapped to the corresponding vals.
 ;;
(§ defn zipmap [keys vals]
    (loop [map {} ks (seq keys) vs (seq vals)]
        (if (and ks vs)
            (recur (assoc map (first ks) (first vs)) (next ks) (next vs))
            map
        )
    )
)

;;;
 ; Returns the lines of text from rdr as a lazy sequence of strings.
 ; rdr must implement java.io.BufferedReader.
 ;;
(§ defn line-seq [^java.io.BufferedReader rdr]
    (when-let [line (.readLine rdr)]
        (cons line (lazy-seq (line-seq rdr)))
    )
)

;;;
 ; Returns an implementation of java.util.Comparator based upon pred.
 ;;
(§ defn comparator [pred]
    (fn [x y]
        (cond (pred x y) -1 (pred y x) 1 :else 0)
    )
)

;;;
 ; Returns a sorted sequence of the items in coll.
 ; If no comparator is supplied, uses compare. comparator must implement java.util.Comparator.
 ; Guaranteed to be stable: equal elements will not be reordered.
 ; If coll is a Java array, it will be modified. To avoid this, sort a copy of the array.
 ;;
(§ defn sort
    ([coll] (sort compare coll))
    ([^java.util.Comparator comp coll]
        (if (seq coll)
            (let [a (to-array coll)]
                (java.util.Arrays/sort a comp)
                (seq a)
            )
            ()
        )
    )
)

;;;
 ; Returns a sorted sequence of the items in coll, where the sort order is determined by comparing (keyfn item).
 ; If no comparator is supplied, uses compare. comparator must implement java.util.Comparator.
 ; Guaranteed to be stable: equal elements will not be reordered.
 ; If coll is a Java array, it will be modified. To avoid this, sort a copy of the array.
 ;;
(§ defn sort-by
    ([keyfn coll]
        (sort-by keyfn compare coll)
    )
    ([keyfn ^java.util.Comparator comp coll]
        (sort (fn [x y] (.compare comp (keyfn x) (keyfn y))) coll)
    )
)

;;;
 ; When lazy sequences are produced via functions that have side
 ; effects, any effects other than those needed to produce the first
 ; element in the seq do not occur until the seq is consumed. dorun can
 ; be used to force any effects. Walks through the successive nexts of
 ; the seq, does not retain the head and returns nil.
 ;;
(§ defn dorun
    ([coll]
        (when-let [s (seq coll)]
            (recur (next s))
        )
    )
    ([n coll]
        (when (and (seq coll) (pos? n))
            (recur (dec n) (next coll))
        )
    )
)

;;;
 ; When lazy sequences are produced via functions that have side
 ; effects, any effects other than those needed to produce the first
 ; element in the seq do not occur until the seq is consumed. doall can
 ; be used to force any effects. Walks through the successive nexts of
 ; the seq, retains the head and returns it, thus causing the entire
 ; seq to reside in memory at one time.
 ;;
(§ defn doall
    ([coll]
        (dorun coll)
        coll
    )
    ([n coll]
        (dorun n coll)
        coll
    )
)

;;;
 ; Returns the nth next of coll, (seq coll) when n is 0.
 ;;
(§ defn nthnext [coll n]
    (loop [n n xs (seq coll)]
        (if (and xs (pos? n))
            (recur (dec n) (next xs))
            xs
        )
    )
)

;;;
 ; Returns the nth rest of coll, coll when n is 0.
 ;;
(§ defn nthrest [coll n]
    (loop [n n xs coll]
        (if-let [xs (and (pos? n) (seq xs))]
            (recur (dec n) (rest xs))
            xs
        )
    )
)

;;;
 ; Returns a lazy sequence of lists of n items each, at offsets step
 ; apart. If step is not supplied, defaults to n, i.e. the partitions
 ; do not overlap. If a pad collection is supplied, use its elements as
 ; necessary to complete last partition upto n items. In case there are
 ; not enough padding elements, return a partition with less than n items.
 ;;
(§ defn partition
    ([n coll] (partition n n coll))
    ([n step coll]
        (lazy-seq
            (when-let [s (seq coll)]
                (let [p (doall (take n s))]
                    (when (= n (count p))
                        (cons p (partition n step (nthrest s step)))
                    )
                )
            )
        )
    )
    ([n step pad coll]
        (lazy-seq
            (when-let [s (seq coll)]
                (let [p (doall (take n s))]
                    (if (= n (count p))
                        (cons p (partition n step pad (nthrest s step)))
                        (list (take n (concat p pad)))
                    )
                )
            )
        )
    )
)

;; evaluation

;;;
 ; Evaluates the form data structure (not text!) and returns the result.
 ;;
(§ defn eval [form] (cloiure.lang.Compiler/eval form))

;;;
 ; Repeatedly executes body (presumably for side-effects) with bindings and filtering as provided by "for".
 ; Does not retain the head of the sequence. Returns nil.
 ;;
(§ defmacro doseq [seq-exprs & body]
    (assert-args
        (vector? seq-exprs) "a vector for its binding"
        (even? (count seq-exprs)) "an even number of forms in binding vector"
    )
    (let [step
            (fn step [recform exprs]
                (if-not exprs
                    [true `(do ~@body)]
                    (let [k (first exprs) v (second exprs)]
                        (if (keyword? k)
                            (let [steppair (step recform (nnext exprs)) needrec (steppair 0) subform (steppair 1)]
                                (cond
                                    (= k :let)   [needrec `(let ~v ~subform)]
                                    (= k :while) [false `(when ~v ~subform ~@(when needrec [recform]))]
                                    (= k :when)  [false `(if ~v (do ~subform ~@(when needrec [recform])) ~recform)]
                                )
                            )
                            (let [seq- (gensym "seq_")
                                  chunk- (with-meta (gensym "chunk_") {:tag 'cloiure.lang.IChunk})
                                  count- (gensym "count_")
                                  i- (gensym "i_")
                                  recform `(recur (next ~seq-) nil 0 0)
                                  steppair (step recform (nnext exprs))
                                  needrec (steppair 0)
                                  subform (steppair 1)
                                  recform-chunk `(recur ~seq- ~chunk- ~count- (unchecked-inc ~i-))
                                  steppair-chunk (step recform-chunk (nnext exprs))
                                  subform-chunk (steppair-chunk 1)]
                                [true
                                    `(loop [~seq- (seq ~v), ~chunk- nil, ~count- 0, ~i- 0]
                                        (if (< ~i- ~count-)
                                            (let [~k (nth ~chunk- ~i-)]
                                                ~subform-chunk
                                                ~@(when needrec [recform-chunk])
                                            )
                                            (when-let [~seq- (seq ~seq-)]
                                                (if (chunked-seq? ~seq-)
                                                    (let [c# (chunk-first ~seq-)]
                                                        (recur (chunk-rest ~seq-) c# (int (count c#)) (int 0))
                                                    )
                                                    (let [~k (first ~seq-)]
                                                        ~subform
                                                        ~@(when needrec [recform])
                                                    )
                                                )
                                            )
                                        )
                                    )
                                ]
                            )
                        )
                    )
                )
            )]
        (nth (step nil (seq seq-exprs)) 1)
    )
)

;;;
 ; bindings => name n
 ;
 ; Repeatedly executes body (presumably for side-effects) with name
 ; bound to integers from 0 through n-1.
 ;;
(§ defmacro dotimes [bindings & body]
    (assert-args
        (vector? bindings) "a vector for its binding"
        (= 2 (count bindings)) "exactly 2 forms in binding vector"
    )
    (let [i (first bindings) n (second bindings)]
        `(let [n# (long ~n)]
            (loop [~i 0]
                (when (< ~i n#)
                    ~@body
                    (recur (unchecked-inc ~i))
                )
            )
        )
    )
)

;;;
 ; Returns a new coll consisting of to-coll with all of the items of
 ; from-coll conjoined.
 ;;
#_(defn into [to from]
    (let [ret to items (seq from)]
        (if items
            (recur (conj ret (first items)) (next items))
            ret
        )
    )
)

;;;
 ; Returns a new, transient version of the collection, in constant time.
 ;;
(§ defn transient [^cloiure.lang.IEditableCollection coll]
    (.asTransient coll)
)

;;;
 ; Returns a new, persistent version of the transient collection, in
 ; constant time. The transient collection cannot be used after this
 ; call, any such use will throw an exception.
 ;;
(§ defn persistent! [^cloiure.lang.ITransientCollection coll]
    (.persistent coll)
)

;;;
 ; Adds x to the transient collection, and return coll. The 'addition'
 ; may happen at different 'places' depending on the concrete type.
 ;;
(§ defn conj!
    ([] (transient []))
    ([coll] coll)
    ([^cloiure.lang.ITransientCollection coll x] (.conj coll x))
)

;;;
 ; When applied to a transient map, adds mapping of key(s) to val(s).
 ; When applied to a transient vector, sets the val at index.
 ; Note - index must be <= (count vector). Returns coll.
 ;;
(§ defn assoc!
    ([^cloiure.lang.ITransientAssociative coll key val] (.assoc coll key val))
    ([^cloiure.lang.ITransientAssociative coll key val & kvs]
        (let [ret (.assoc coll key val)]
            (if kvs
                (recur ret (first kvs) (second kvs) (nnext kvs))
                ret
            )
        )
    )
)

;;;
 ; Returns a transient map that doesn't contain a mapping for key(s).
 ;;
(§ defn dissoc!
    ([^cloiure.lang.ITransientMap map key] (.dissoc map key))
    ([^cloiure.lang.ITransientMap map key & ks]
        (let [ret (.dissoc map key)]
            (if ks
                (recur ret (first ks) (next ks))
                ret
            )
        )
    )
)

;;;
 ; Removes the last item from a transient vector.
 ; If the collection is empty, throws an exception. Returns coll.
 ;;
(§ defn pop! [^cloiure.lang.ITransientVector coll]
    (.pop coll)
)

;;;
 ; disj[oin].
 ; Returns a transient set of the same (hashed/sorted) type, that does not contain key(s).
 ;;
(§ defn disj!
    ([set] set)
    ([^cloiure.lang.ITransientSet set key] (.disj set key))
    ([^cloiure.lang.ITransientSet set key & ks]
        (let [ret (.disj set key)]
            (if ks
                (recur ret (first ks) (next ks))
                ret
            )
        )
    )
)

;; redef into with batch support

;;;
 ; Returns a new coll consisting of to-coll with all of the items of from-coll conjoined.
 ;;
(§ defn ^:private into1 [to from]
    (if (instance? cloiure.lang.IEditableCollection to)
        (persistent! (reduce1 conj! (transient to) from))
        (reduce1 conj to from)
    )
)

;;;
 ; import-list => (package-symbol class-name-symbols*)
 ;
 ; For each name in class-name-symbols, adds a mapping from name to the class named by package.name
 ; to the current namespace. Use :import in the ns macro in preference to calling this directly.
 ;;
(§ defmacro import [& import-symbols-or-lists]
    (let [specs (map #(if (and (seq? %) (= 'quote (first %))) (second %) %) import-symbols-or-lists)]
        `(do
            ~@(map #(list 'cloiure.core/import* %)
                (reduce1
                    (fn [v spec]
                        (if (symbol? spec)
                            (conj v (name spec))
                            (let [p (first spec) cs (rest spec)] (into1 v (map #(str p "." %) cs)))
                        )
                    )
                    [] specs
                )
            )
        )
    )
)

;;;
 ; Returns an array with components set to the values in aseq.
 ; The array's component type is type if provided, or the type of the first value in aseq if present, or Object.
 ; All values in aseq must be compatible with the component type.
 ; Class objects for the primitive types can be obtained using, e.g., Integer/TYPE.
 ;;
(§ defn into-array
    ([aseq]      (cloiure.lang.RT/seqToTypedArray      (seq aseq)))
    ([type aseq] (cloiure.lang.RT/seqToTypedArray type (seq aseq)))
)

(§ defn ^:private array [& items] (into-array items))

;;;
 ; Returns the Class of x.
 ;;
(§ defn ^Class class [^Object x] (when (some? x) (.getClass x)))

;;;
 ; Returns the :type metadata of x, or its Class if none.
 ;;
(§ defn type [x] (or (get (meta x) :type) (class x)))

;;;
 ; Coerce to Number.
 ;;
(§ defn ^Number num
    {:inline (fn [x] `(cloiure.lang.Numbers/num ~x))}
    [x] (cloiure.lang.Numbers/num x)
)

;;;
 ; Coerce to long.
 ;;
(§ defn long
    {:inline (fn [x] `(cloiure.lang.RT/longCast ~x))}
    [^Number x] (cloiure.lang.RT/longCast x)
)

;;;
 ; Coerce to float.
 ;;
(§ defn float
    {:inline (fn [x] `(cloiure.lang.RT/floatCast ~x))}
    [^Number x] (cloiure.lang.RT/floatCast x)
)

;;;
 ; Coerce to double.
 ;;
(§ defn double
    {:inline (fn [x] `(cloiure.lang.RT/doubleCast ~x))}
    [^Number x] (cloiure.lang.RT/doubleCast x)
)

;;;
 ; Coerce to short.
 ;;
(§ defn short
    {:inline (fn [x] `(cloiure.lang.RT/shortCast ~x))}
    [^Number x] (cloiure.lang.RT/shortCast x)
)

;;;
 ; Coerce to byte.
 ;;
(§ defn byte
    {:inline (fn [x] `(cloiure.lang.RT/byteCast ~x))}
    [^Number x] (cloiure.lang.RT/byteCast x)
)

;;;
 ; Coerce to char.
 ;;
(§ defn char
    {:inline (fn [x] `(cloiure.lang.RT/charCast ~x))}
    [x] (cloiure.lang.RT/charCast x)
)

;;;
 ; Coerce to byte. Subject to rounding or truncation.
 ;;
(§ defn unchecked-byte
    {:inline (fn [x] `(cloiure.lang.RT/uncheckedByteCast ~x))}
    [^Number x] (cloiure.lang.RT/uncheckedByteCast x)
)

;;;
 ; Coerce to short. Subject to rounding or truncation.
 ;;
(§ defn unchecked-short
    {:inline (fn [x] `(cloiure.lang.RT/uncheckedShortCast ~x))}
    [^Number x] (cloiure.lang.RT/uncheckedShortCast x)
)

;;;
 ; Coerce to char. Subject to rounding or truncation.
 ;;
(§ defn unchecked-char
    {:inline (fn [x] `(cloiure.lang.RT/uncheckedCharCast ~x))}
    [x] (cloiure.lang.RT/uncheckedCharCast x)
)

;;;
 ; Coerce to int. Subject to rounding or truncation.
 ;;
(§ defn unchecked-int
    {:inline (fn [x] `(cloiure.lang.RT/uncheckedIntCast ~x))}
    [^Number x] (cloiure.lang.RT/uncheckedIntCast x)
)

;;;
 ; Coerce to long. Subject to rounding or truncation.
 ;;
(§ defn unchecked-long
    {:inline (fn [x] `(cloiure.lang.RT/uncheckedLongCast ~x))}
    [^Number x] (cloiure.lang.RT/uncheckedLongCast x)
)

;;;
 ; Coerce to float. Subject to rounding.
 ;;
(§ defn unchecked-float
    {:inline (fn [x] `(cloiure.lang.RT/uncheckedFloatCast ~x))}
    [^Number x] (cloiure.lang.RT/uncheckedFloatCast x)
)

;;;
 ; Coerce to double. Subject to rounding.
 ;;
(§ defn unchecked-double
    {:inline (fn [x] `(cloiure.lang.RT/uncheckedDoubleCast ~x))}
    [^Number x] (cloiure.lang.RT/uncheckedDoubleCast x)
)

;;;
 ; Returns true if x is a Number.
 ;;
(§ defn number? [x] (instance? Number x))

;;;
 ; Modulus of num and div. Truncates toward negative infinity.
 ;;
(§ defn mod [num div]
    (let [m (rem num div)]
        (if (or (zero? m) (= (pos? num) (pos? div)))
            m
            (+ m div)
        )
    )
)

;;;
 ; Returns true if n is a Ratio.
 ;;
(§ defn ratio? [n] (instance? cloiure.lang.Ratio n))

;;;
 ; Returns the numerator part of a Ratio.
 ;;
(§ defn ^BigInteger numerator [r] (.numerator ^cloiure.lang.Ratio r))

;;;
 ; Returns the denominator part of a Ratio.
 ;;
(§ defn ^BigInteger denominator [r] (.denominator ^cloiure.lang.Ratio r))

;;;
 ; Returns true if n is a BigDecimal.
 ;;
(§ defn decimal? [n] (instance? BigDecimal n))

;;;
 ; Returns true if n is a floating point number.
 ;;
(§ defn float? [n] (or (instance? Double n) (instance? Float n)))

;;;
 ; Returns true if n is a rational number.
 ;;
(§ defn rational? [n] (or (integer? n) (ratio? n) (decimal? n)))

;;;
 ; Coerce to BigInt.
 ;;
(§ defn ^cloiure.lang.BigInt bigint [x]
    (cond
        (instance? cloiure.lang.BigInt x) x
        (instance? BigInteger x) (cloiure.lang.BigInt/fromBigInteger x)
        (decimal? x) (bigint (.toBigInteger ^BigDecimal x))
        (float? x) (bigint (BigDecimal/valueOf (double x)))
        (ratio? x) (bigint (.bigIntegerValue ^cloiure.lang.Ratio x))
        (number? x) (cloiure.lang.BigInt/valueOf (long x))
        :else (bigint (BigInteger. x))
    )
)

;;;
 ; Coerce to BigInteger.
 ;;
(§ defn ^BigInteger biginteger [x]
    (cond
        (instance? BigInteger x) x
        (instance? cloiure.lang.BigInt x) (.toBigInteger ^cloiure.lang.BigInt x)
        (decimal? x) (.toBigInteger ^BigDecimal x)
        (float? x) (.toBigInteger (BigDecimal/valueOf (double x)))
        (ratio? x) (.bigIntegerValue ^cloiure.lang.Ratio x)
        (number? x) (BigInteger/valueOf (long x))
        :else (BigInteger. x)
    )
)

;;;
 ; Coerce to BigDecimal.
 ;;
(§ defn ^BigDecimal bigdec [x]
    (cond
        (decimal? x) x
        (float? x) (BigDecimal/valueOf (double x))
        (ratio? x) (/ (BigDecimal. (.numerator ^cloiure.lang.Ratio x)) (.denominator ^cloiure.lang.Ratio x))
        (instance? cloiure.lang.BigInt x) (.toBigDecimal ^cloiure.lang.BigInt x)
        (instance? BigInteger x) (BigDecimal. ^BigInteger x)
        (number? x) (BigDecimal/valueOf (long x))
        :else (BigDecimal. x)
    )
)

(§ defmulti print-method (fn [x writer] (let [t (get (meta x) :type)] (if (keyword? t) t (class x)))))

(§ defn ^:private pr-on [x w]
    (print-method x w)
    nil
)

;;;
 ; Prints the object(s) to the output stream that is the current value of *out*.
 ; Prints the object(s), separated by spaces if there is more than one.
 ; By default, pr and prn print in a way that objects can be read by the reader.
 ;;
(§ defn ^:dynamic pr
    ([] nil)
    ([x] (pr-on x *out*))
    ([x & more]
        (pr x)
        (.append *out* \space)
        (if-let [nmore (next more)]
            (recur (first more) nmore)
            (apply pr more)
        )
    )
)

;;;
 ; Writes a newline to *out*.
 ;;
(§ defn newline []
    (.append *out* \newline)
    nil
)

;;;
 ; Flushes the output stream that is the current value of *out*.
 ;;
(§ defn flush []
    (.flush *out*)
    nil
)

;;;
 ; Same as pr followed by (newline). Observes *flush-on-newline*.
 ;;
(§ defn prn [& more]
    (apply pr more)
    (newline)
    (when *flush-on-newline*
        (flush)
    )
)

;;;
 ; Prints the object(s) to the output stream that is the current value of *out*.
 ; print and println produce output for human consumption.
 ;;
(§ defn print [& more]
    (binding [*print-readably* nil]
        (apply pr more)
    )
)

;;;
 ; Same as print followed by (newline).
 ;;
(§ defn println [& more]
    (binding [*print-readably* nil]
        (apply prn more)
    )
)

;;;
 ; Reads the next object from stream, which must be an instance of
 ; java.io.PushbackReader or some derivee. stream defaults to the
 ; current value of *in*.
 ;
 ; Opts is a persistent map with valid keys:
 ;
 ; :eof - on eof, return value unless :eofthrow, then throw.
 ;        if not specified, will throw.
 ;;
(§ defn read
    ([]
        (read *in*)
    )
    ([stream]
        (read stream true nil)
    )
    ([stream eof-error? eof-value]
        (cloiure.lang.LispReader/read stream (boolean eof-error?) eof-value)
    )
)

;;;
 ; Reads one object from the string s.
 ;;
(§ defn read-string [s] (cloiure.lang.RT/readString s))

;;;
 ; Returns a persistent vector of the items in vector from start (inclusive) to end (exclusive).
 ; If end is not supplied, defaults to (count vector). This operation is O(1) and very fast, as
 ; the resulting vector shares structure with the original and no trimming is done.
 ;;
(§ defn subvec
    ([v start] (subvec v start (count v)))
    ([v start end] (cloiure.lang.RT/subvec v start end))
)

;;;
 ; bindings => [name init ...]
 ;
 ; Evaluates body in a try expression with names bound to the values of the inits,
 ; and a finally clause that calls (.close name) on each name in reverse order.
 ;;
(§ defmacro with-open [bindings & body]
    (assert-args
        (vector? bindings) "a vector for its binding"
        (even? (count bindings)) "an even number of forms in binding vector"
    )
    (cond
        (= (count bindings) 0) `(do ~@body)
        (symbol? (bindings 0))
            `(let ~(subvec bindings 0 2)
                (try
                    (with-open ~(subvec bindings 2) ~@body)
                    (finally
                        (.close ~(bindings 0))
                    )
                )
            )
        :else (throw! "with-open only allows Symbols in bindings")
    )
)

;;;
 ; Evaluates x, then calls all of the methods and functions with the
 ; value of x supplied at the front of the given arguments. The forms
 ; are evaluated in order. Returns x.
 ;
 ; (doto (new java.util.HashMap) (.put "a" 1) (.put "b" 2))
 ;;
(§ defmacro doto [x & forms]
    (let [gx (gensym)]
        `(let [~gx ~x]
            ~@(map (fn [f] (with-meta (if (seq? f) `(~(first f) ~gx ~@(next f)) `(~f ~gx)) (meta f))) forms)
            ~gx
        )
    )
)

;;;
 ; Expands into code that creates a fn that expects to be passed an
 ; object and any args and calls the named instance method on the
 ; object passing the args. Use when you want to treat a Java method as
 ; a first-class fn. name may be type-hinted with the method receiver's
 ; type in order to avoid reflective calls.
 ;;
(§ defmacro memfn [name & args]
    (let [t (with-meta (gensym "target") (meta name))]
        `(fn [~t ~@args] (. ~t (~name ~@args)))
    )
)

;;;
 ; Evaluates expr and prints the time it took. Returns the value of expr.
 ;;
(§ defmacro time [expr]
    `(let [start# (System/nanoTime) ret# ~expr]
        (prn (str "Elapsed time: " (/ (double (- (System/nanoTime) start#)) 1000000.0) " msecs"))
        ret#
    )
)

(§ import [java.lang.reflect Array])

;;;
 ; Returns the length of the Java array. Works on arrays of all types.
 ;;
(§ defn alength
    {:inline (fn [a] `(cloiure.lang.RT/alength ~a))}
    [array] (cloiure.lang.RT/alength array)
)

;;;
 ; Returns a clone of the Java array. Works on arrays of known types.
 ;;
(§ defn aclone
    {:inline (fn [a] `(cloiure.lang.RT/aclone ~a))}
    [array] (cloiure.lang.RT/aclone array)
)

;;;
 ; Returns the value at the index/indices. Works on Java arrays of all types.
 ;;
(§ defn aget
    {:inline (fn [a i] `(cloiure.lang.RT/aget ~a (int ~i))) :inline-arities #{2}}
    ([array idx]
        (cloiure.lang.Reflector/prepRet (.getComponentType (class array)) (Array/get array idx))
    )
    ([array idx & idxs]
        (apply aget (aget array idx) idxs)
    )
)

;;;
 ; Sets the value at the index/indices.
 ; Works on Java arrays of reference types. Returns val.
 ;;
(§ defn aset
    {:inline (fn [a i v] `(cloiure.lang.RT/aset ~a (int ~i) ~v)) :inline-arities #{3}}
    ([array idx val]
        (Array/set array idx val)
        val
    )
    ([array idx idx2 & idxv]
        (apply aset (aget array idx) idx2 idxv)
    )
)

(§ defmacro ^:private def-aset [name method coerce]
    `(defn ~name
        ([array# idx# val#]
            (. Array (~method array# idx# (~coerce val#)))
            val#
        )
        ([array# idx# idx2# & idxv#]
            (apply ~name (aget array# idx#) idx2# idxv#)
        )
    )
)

;;;
 ; Sets the value at the index/indices. Works on arrays of int. Returns val.
 ;;
(§ def-aset aset-int setInt int)

;;;
 ; Sets the value at the index/indices. Works on arrays of long. Returns val.
 ;;
(§ def-aset aset-long setLong long)

;;;
 ; Sets the value at the index/indices. Works on arrays of boolean. Returns val.
 ;;
(§ def-aset aset-boolean setBoolean boolean)

;;;
 ; Sets the value at the index/indices. Works on arrays of float. Returns val.
 ;;
(§ def-aset aset-float setFloat float)

;;;
 ; Sets the value at the index/indices. Works on arrays of double. Returns val.
 ;;
(§ def-aset aset-double setDouble double)

;;;
 ; Sets the value at the index/indices. Works on arrays of short. Returns val.
 ;;
(§ def-aset aset-short setShort short)

;;;
 ; Sets the value at the index/indices. Works on arrays of byte. Returns val.
 ;;
(§ def-aset aset-byte setByte byte)

;;;
 ; Sets the value at the index/indices. Works on arrays of char. Returns val.
 ;;
(§ def-aset aset-char setChar char)

;;;
 ; Creates and returns an array of instances of the specified class of the specified dimension(s).
 ; Note that a class object is required.
 ; Class objects can be obtained by using their imported or fully-qualified name.
 ; Class objects for the primitive types can be obtained using, e.g., Integer/TYPE.
 ;;
(§ defn make-array
    ([^Class type len] (Array/newInstance type (int len)))
    ([^Class type dim & more-dims]
        (let [dims (cons dim more-dims) ^"[I" dimarray (make-array Integer/TYPE (count dims))]
            (dotimes [i (alength dimarray)]
                (aset-int dimarray i (nth dims i))
            )
            (Array/newInstance type dimarray)
        )
    )
)

;;;
 ; If form represents a macro form, returns its expansion, else returns form.
 ;;
(§ defn macroexpand-1 [form] (cloiure.lang.Compiler/macroexpand1 form))

;;;
 ; Repeatedly calls macroexpand-1 on form until it no longer
 ; represents a macro form, then returns it. Note neither
 ; macroexpand-1 nor macroexpand expand macros in subforms.
 ;;
(§ defn macroexpand [form]
    (let [ex (macroexpand-1 form)]
        (if (identical? ex form)
            form
            (macroexpand ex)
        )
    )
)

;;;
 ; Sequentially read and evaluate the set of forms contained in the stream.
 ;;
(§ defn load-reader [r] (cloiure.lang.Compiler/load r))

;;;
 ; Sequentially read and evaluate the set of forms contained in the string.
 ;;
(§ defn load-string [s] (load-reader (-> s (java.io.StringReader.) (java.io.PushbackReader.))))

;;;
 ; Returns true if x implements IPersistentSet.
 ;;
(§ defn set? [x] (instance? cloiure.lang.IPersistentSet x))

;;;
 ; Returns a set of the distinct elements of coll.
 ;;
(§ defn set [coll]
    (if (set? coll)
        (with-meta coll nil)
        (if (instance? cloiure.lang.IReduceInit coll)
            (persistent! (.reduce ^cloiure.lang.IReduceInit coll conj! (transient #{})))
            (persistent! (reduce1 conj! (transient #{}) coll))
        )
    )
)

(§ defn ^:private filter-key [keyfn pred amap]
    (loop [ret {} es (seq amap)]
        (if es
            (if (pred (keyfn (first es)))
                (recur (assoc ret (key (first es)) (val (first es))) (next es))
                (recur ret (next es))
            )
            ret
        )
    )
)

;;;
 ; Returns the namespace named by the symbol or nil if it doesn't exist.
 ;;
(§ defn find-ns [sym] (cloiure.lang.Namespace/find sym))

;;;
 ; Create a new namespace named by the symbol if one doesn't already exist,
 ; returns it or the already-existing namespace of the same name.
 ;;
(§ defn create-ns [sym] (cloiure.lang.Namespace/findOrCreate sym))

;;;
 ; Removes the namespace named by the symbol. Use with caution.
 ; Cannot be used to remove the cloiure namespace.
 ;;
(§ defn remove-ns [sym] (cloiure.lang.Namespace/remove sym))

;;;
 ; Returns a sequence of all namespaces.
 ;;
(§ defn all-ns [] (cloiure.lang.Namespace/all))

;;;
 ; If passed a namespace, returns it. Else, when passed a symbol,
 ; returns the namespace named by it, throwing an exception if not found.
 ;;
(§ defn ^cloiure.lang.Namespace the-ns [x]
    (if (instance? cloiure.lang.Namespace x)
        x
        (or (find-ns x) (throw! (str "no namespace: " x " found")))
    )
)

;;;
 ; Returns the name of the namespace, a symbol.
 ;;
(§ defn ns-name [ns]
    (.getName (the-ns ns))
)

;;;
 ; Returns a map of all the mappings for the namespace.
 ;;
(§ defn ns-map [ns]
    (.getMappings (the-ns ns))
)

;;;
 ; Removes the mappings for the symbol from the namespace.
 ;;
(§ defn ns-unmap [ns sym]
    (.unmap (the-ns ns) sym)
)

;;;
 ; Returns a map of the public intern mappings for the namespace.
 ;;
(§ defn ns-publics [ns]
    (let [ns (the-ns ns)]
        (filter-key val
            (fn [^cloiure.lang.Var v]
                (and (instance? cloiure.lang.Var v) (= ns (.ns v)) (.isPublic v))
            )
            (ns-map ns)
        )
    )
)

;;;
 ; Returns a map of the import mappings for the namespace.
 ;;
(§ defn ns-imports [ns]
    (filter-key val (partial instance? Class) (ns-map ns))
)

;;;
 ; Returns a map of the intern mappings for the namespace.
 ;;
(§ defn ns-interns [ns]
    (let [ns (the-ns ns)]
        (filter-key val
            (fn [^cloiure.lang.Var v]
                (and (instance? cloiure.lang.Var v) (= ns (.ns v)))
            )
            (ns-map ns)
        )
    )
)

;;;
 ; refers to all public vars of ns, subject to filters.
 ; filters can include at most one each of:
 ;
 ; :exclude list-of-symbols
 ; :only    list-of-symbols
 ; :rename  map-of-fromsymbol-tosymbol
 ;
 ; For each public interned var in the namespace named by the symbol, adds a mapping
 ; from the name of the var to the var to the current namespace. Throws an exception
 ; if name is already mapped to something else in the current namespace. Filters can
 ; be used to select a subset, via inclusion or exclusion, or to provide a mapping
 ; to a symbol different from the var's name, in order to prevent clashes.
 ;;
(§ defn refer [ns-sym & filters]
    (let [ns (or (find-ns ns-sym) (throw! (str "no namespace: " ns-sym)))
          fs (apply hash-map filters)
          nspublics (ns-publics ns)
          rename (or (:rename fs) {})
          exclude (set (:exclude fs))
          to-do
            (if (= :all (:refer fs))
                (keys nspublics)
                (or (:refer fs) (:only fs) (keys nspublics))
            )]
        (when (and to-do (not (instance? cloiure.lang.Sequential to-do)))
            (throw! "the value of :only/:refer must be a sequential collection of symbols")
        )
        (doseq [sym to-do]
            (when-not (exclude sym)
                (let [v (nspublics sym)]
                    (when-not v
                        (throw (java.lang.IllegalAccessError.
                            (if (get (ns-interns ns) sym)
                                (str sym " is not public")
                                (str sym " does not exist")
                            )
                        ))
                    )
                    (.refer *ns* (or (rename sym) sym) v)
                )
            )
        )
    )
)

;;;
 ; Returns a map of the refer mappings for the namespace.
 ;;
(§ defn ns-refers [ns]
    (let [ns (the-ns ns)]
        (filter-key val
            (fn [^cloiure.lang.Var v]
                (and (instance? cloiure.lang.Var v) (not= ns (.ns v)))
            )
            (ns-map ns)
        )
    )
)

;;;
 ; Add an alias in the current namespace to another namespace.
 ; Arguments are two symbols: the alias to be used, and the symbolic name of the target namespace.
 ; Use :as in the ns macro in preference to calling this directly.
 ;;
(§ defn alias [alias namespace-sym]
    (.addAlias *ns* alias (the-ns namespace-sym))
)

;;;
 ; Returns a map of the aliases for the namespace.
 ;;
(§ defn ns-aliases [ns]
    (.getAliases (the-ns ns))
)

;;;
 ; Removes the alias for the symbol from the namespace.
 ;;
(§ defn ns-unalias [ns sym]
    (.removeAlias (the-ns ns) sym)
)

;;;
 ; Returns a lazy seq of every nth item in coll.
 ; Returns a stateful transducer when no collection is provided.
 ;;
(§ defn take-nth
    ([n]
        (fn [rf]
            (let [iv (volatile! -1)]
                (fn
                    ([] (rf))
                    ([result] (rf result))
                    ([result input]
                        (let [i (vswap! iv inc)]
                            (if (zero? (rem i n))
                                (rf result input)
                                result
                            )
                        )
                    )
                )
            )
        )
    )
    ([n coll]
        (lazy-seq
            (when-let [s (seq coll)]
                (cons (first s) (take-nth n (drop n s)))
            )
        )
    )
)

;;;
 ; Returns a lazy seq of the first item in each coll, then the second, etc.
 ;;
(§ defn interleave
    ([] ())
    ([c1] (lazy-seq c1))
    ([c1 c2]
        (lazy-seq
            (let [s1 (seq c1) s2 (seq c2)]
                (when (and s1 s2)
                    (cons (first s1) (cons (first s2) (interleave (rest s1) (rest s2))))
                )
            )
        )
    )
    ([c1 c2 & colls]
        (lazy-seq
            (let [ss (map seq (conj colls c2 c1))]
                (when (every? identity ss)
                    (concat (map first ss) (apply interleave (map rest ss)))
                )
            )
        )
    )
)

;;;
 ; Gets the value in the var object.
 ;;
(§ defn var-get [^cloiure.lang.Var x] (.get x))

;;;
 ; Sets the value in the var object to val.
 ; The var must be thread-locally bound.
 ;;
(§ defn var-set [^cloiure.lang.Var x val] (.set x val))

;;;
 ; varbinding => symbol init-expr
 ;
 ; Executes the exprs in a context in which the symbols are bound to
 ; vars with per-thread bindings to the init-exprs. The symbols refer
 ; to the var objects themselves, and must be accessed with var-get and
 ; var-set.
 ;;
(§ defmacro with-local-vars [name-vals-vec & body]
    (assert-args
        (vector? name-vals-vec) "a vector for its binding"
        (even? (count name-vals-vec)) "an even number of forms in binding vector"
    )
    `(let [~@(interleave (take-nth 2 name-vals-vec) (repeat '(.setDynamic (cloiure.lang.Var/create))))]
        (push-thread-bindings (hash-map ~@name-vals-vec))
        (try
            ~@body
            (finally
                (pop-thread-bindings)
            )
        )
    )
)

;;;
 ; Returns the var or Class to which a symbol will be resolved in the namespace
 ; (unless found in the environment), else nil. Note that if the symbol is fully qualified,
 ; the var/Class to which it resolves need not be present in the namespace.
 ;;
(§ defn ns-resolve
    ([ns sym] (ns-resolve ns nil sym))
    ([ns env sym]
        (when-not (contains? env sym)
            (cloiure.lang.Compiler/maybeResolveIn (the-ns ns) sym)
        )
    )
)

(§ defn resolve
    ([    sym] (ns-resolve *ns*     sym))
    ([env sym] (ns-resolve *ns* env sym))
)

;;;
 ; Constructs an array-map.
 ; If any keys are equal, they are handled as if by repeated uses of assoc.
 ;;
(§ defn array-map
    ([] cloiure.lang.PersistentArrayMap/EMPTY)
    ([& keyvals] (cloiure.lang.PersistentArrayMap/createAsIfByAssoc (to-array keyvals)))
)

;; redefine let and loop with destructuring

(§ defn destructure [bindings]
    (let [bents (partition 2 bindings)
          pb (fn pb [bvec b v]
                (let [pvec
                        (fn [bvec b val]
                            (let [gvec (gensym "vec__") gseq (gensym "seq__") gfirst (gensym "first__") has-rest (some #{'&} b)]
                                (loop [ret (let [ret (conj bvec gvec val)] (if has-rest (conj ret gseq (list `seq gvec)) ret)) n 0 bs b seen-rest? false]
                                    (if (seq bs)
                                        (let [firstb (first bs)]
                                            (cond
                                                (= firstb '&)   (recur (pb ret (second bs) gseq) n (nnext bs) true)
                                                (= firstb :as)  (pb ret (second bs) gvec)
                                                :else           (if seen-rest?
                                                                    (throw! "unsupported binding form, only :as can follow & parameter")
                                                                    (recur
                                                                        (pb (if has-rest (conj ret gfirst `(first ~gseq) gseq `(next ~gseq)) ret)
                                                                            firstb
                                                                            (if has-rest gfirst (list `nth gvec n nil))
                                                                        )
                                                                        (inc n) (next bs) seen-rest?
                                                                    )
                                                                )
                                            )
                                        )
                                        ret
                                    )
                                )
                            )
                        )
                      pmap
                        (fn [bvec b v]
                            (let [gmap (gensym "map__") gmapseq (with-meta gmap {:tag 'cloiure.lang.ISeq}) defaults (:or b)]
                                (loop [ret (-> (conj bvec gmap v gmap)
                                            (conj `(if (seq? ~gmap) (cloiure.lang.PersistentHashMap/create (seq ~gmapseq)) ~gmap))
                                            ((fn [ret] (if (:as b) (conj ret (:as b) gmap) ret)))
                                        )
                                       bes (let [trafos (reduce1
                                                    (fn [trafos mk]
                                                        (if (keyword? mk)
                                                            (let [mkns (namespace mk) mkn (name mk)]
                                                                (cond
                                                                    (= mkn "keys") (assoc trafos mk #(keyword (or mkns (namespace %)) (name %)))
                                                                    (= mkn "syms") (assoc trafos mk #(list `quote (symbol (or mkns (namespace %)) (name %))))
                                                                    (= mkn "strs") (assoc trafos mk str)
                                                                    :else trafos
                                                                )
                                                            )
                                                            trafos
                                                        )
                                                    )
                                                    {} (keys b)
                                                )]
                                            (reduce1
                                                (fn [bes entry] (reduce1 #(assoc %1 %2 ((val entry) %2)) (dissoc bes (key entry)) ((key entry) bes)))
                                                (dissoc b :as :or) trafos
                                            )
                                        )]
                                    (if (seq bes)
                                        (let [bb (key (first bes)) bk (val (first bes))
                                              local (if (instance? cloiure.lang.Named bb) (with-meta (symbol nil (name bb)) (meta bb)) bb)
                                              bv (if (contains? defaults local)
                                                    (list `get gmap bk (defaults local))
                                                    (list `get gmap bk)
                                                )]
                                            (recur (if (ident? bb) (conj ret local bv) (pb ret bb bv)) (next bes))
                                        )
                                        ret
                                    )
                                )
                            )
                        )]
                    (cond
                        (symbol? b) (conj bvec b v)
                        (vector? b) (pvec bvec b v)
                        (map? b) (pmap bvec b v)
                        :else (throw! (str "unsupported binding form: " b))
                    )
                )
            )
          process-entry (fn [bvec b] (pb bvec (first b) (second b)))]
        (if (every? symbol? (map first bents))
            bindings
            (reduce1 process-entry [] bents)
        )
    )
)

;;;
 ; binding => binding-form init-expr
 ;
 ; Evaluates the exprs in a lexical context in which the symbols in the
 ; binding-forms are bound to their respective init-exprs or parts therein.
 ;;
(§ defmacro let {:special-form true, :forms '[(let [bindings*] exprs*)]} [bindings & body]
    (assert-args
        (vector? bindings) "a vector for its binding"
        (even? (count bindings)) "an even number of forms in binding vector"
    )
    `(let* ~(destructure bindings) ~@body)
)

(§ defn ^:private maybe-destructured [params body]
    (if (every? symbol? params)
        (cons params body)
        (loop [params params new-params (with-meta [] (meta params)) lets []]
            (if params
                (if (symbol? (first params))
                    (recur (next params) (conj new-params (first params)) lets)
                    (let [gparam (gensym "p__")]
                        (recur (next params) (conj new-params gparam) (conj lets (first params) gparam))
                    )
                )
                `(~new-params (let ~lets ~@body))
            )
        )
    )
)

;; redefine fn with destructuring

;;;
 ; params => positional-params*, or positional-params* & next-param
 ; positional-param => binding-form
 ; next-param => binding-form
 ; name => symbol
 ;
 ; Defines a function.
 ;;
(§ defmacro fn {:special-form true, :forms '[(fn name? [params* ] exprs*) (fn name? ([params* ] exprs*)+)]} [& sigs]
    (let [name (when (symbol? (first sigs)) (first sigs))
          sigs (if name (next sigs) sigs)
          sigs
            (if (vector? (first sigs))
                (list sigs)
                (if (seq? (first sigs))
                    sigs
                    ;; assume single arity syntax
                    (throw!
                        (if (seq sigs)
                            (str "parameter declaration " (first sigs) " should be a vector")
                            (str "parameter declaration missing")
                        )
                    )
                )
            )
          psig
            (fn* [sig]
                ;; ensure correct type before destructuring sig
                (when (not (seq? sig))
                    (throw! (str "invalid signature " sig " should be a list"))
                )
                (let [[params & body] sig
                      _ (when (not (vector? params))
                            (throw!
                                (if (seq? (first sigs))
                                    (str "parameter declaration " params " should be a vector")
                                    (str "invalid signature " sig " should be a list")
                                )
                            )
                        )
                      conds (when (and (next body) (map? (first body))) (first body))
                      body (if conds (next body) body)
                      conds (or conds (meta params))
                ]
                    (maybe-destructured params body)
                )
            )
          new-sigs (map psig sigs)]
        (with-meta (if name (list* 'fn* name new-sigs) (cons 'fn* new-sigs)) (meta &form))
    )
)

;;;
 ; Evaluates the exprs in a lexical context in which the symbols in
 ; the binding-forms are bound to their respective init-exprs or parts
 ; therein. Acts as a recur target.
 ;;
(§ defmacro loop {:special-form true, :forms '[(loop [bindings*] exprs*)]} [bindings & body]
    (assert-args
        (vector? bindings) "a vector for its binding"
        (even? (count bindings)) "an even number of forms in binding vector"
    )
    (let [db (destructure bindings)]
        (if (= db bindings)
            `(loop* ~bindings ~@body)
            (let [vs (take-nth 2 (drop 1 bindings))
                  bs (take-nth 2 bindings)
                  gs (map (fn [b] (if (symbol? b) b (gensym))) bs)
                  bfs (reduce1
                        (fn [ret [b v g]]
                            (if (symbol? b)
                                (conj ret g v)
                                (conj ret g v b g)
                            )
                        )
                        [] (map vector bs vs gs)
                    )]
                `(let ~bfs
                    (loop* ~(vec (interleave gs gs))
                        (let ~(vec (interleave bs gs))
                            ~@body
                        )
                    )
                )
            )
        )
    )
)

;;;
 ; bindings => x xs
 ;
 ; Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once.
 ;;
(§ defmacro when-first [bindings & body]
    (assert-args
        (vector? bindings) "a vector for its binding"
        (= 2 (count bindings)) "exactly 2 forms in binding vector"
    )
    (let [[x xs] bindings]
        `(when-let [xs# (seq ~xs)]
            (let [~x (first xs#)]
                ~@body
            )
        )
    )
)

;;;
 ; Expands to code which yields a lazy sequence of the concatenation
 ; of the supplied colls. Each coll expr is not evaluated until it is
 ; needed.
 ;
 ; (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))
 ;;
(§ defmacro lazy-cat [& colls]
    `(concat ~@(map #(list `lazy-seq %) colls))
)

;;;
 ; List comprehension.
 ; Takes a vector of one or more binding-form/collection-expr pairs, each followed
 ; by zero or more modifiers, and yields a lazy sequence of evaluations of expr.
 ; Collections are iterated in a nested fashion, rightmost fastest, and nested
 ; coll-exprs can refer to bindings created in prior binding-forms.
 ; Supported modifiers are: :let [binding-form expr ...], :while test, :when test.
 ;
 ; (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))
 ;;
(§ defmacro for [seq-exprs body-expr]
    (assert-args
        (vector? seq-exprs) "a vector for its binding"
        (even? (count seq-exprs)) "an even number of forms in binding vector"
    )
    (let [to-groups
            (fn [seq-exprs]
                (reduce1
                    (fn [groups [k v]]
                        (if (keyword? k)
                            (conj (pop groups) (conj (peek groups) [k v]))
                            (conj groups [k v])
                        )
                    )
                    [] (partition 2 seq-exprs)
                )
            )
          err (fn [& msg] (throw! ^String (apply str msg)))
          emit-bind
            (fn emit-bind [[[bind expr & mod-pairs] & [[_ next-expr] :as next-groups]]]
                (let [giter (gensym "iter__") gxs (gensym "s__")
                      do-mod
                        (fn do-mod [[[k v :as pair] & etc]]
                            (cond
                                (= k :let) `(let ~v ~(do-mod etc))
                                (= k :while) `(when ~v ~(do-mod etc))
                                (= k :when) `(if ~v ~(do-mod etc) (recur (rest ~gxs)))
                                (keyword? k) (err "Invalid 'for' keyword " k)
                                next-groups
                                    `(let [iterys# ~(emit-bind next-groups) fs# (seq (iterys# ~next-expr))]
                                        (if fs#
                                            (concat fs# (~giter (rest ~gxs)))
                                            (recur (rest ~gxs))
                                        )
                                    )
                                :else `(cons ~body-expr (~giter (rest ~gxs)))
                            )
                        )]
                    (if next-groups
                        #_"not the inner-most loop"
                        `(fn ~giter [~gxs]
                            (lazy-seq
                                (loop [~gxs ~gxs]
                                    (when-first [~bind ~gxs]
                                        ~(do-mod mod-pairs)
                                    )
                                )
                            )
                        )
                        #_"inner-most loop"
                        (let [gi (gensym "i__") gb (gensym "b__")
                              do-cmod
                                (fn do-cmod [[[k v :as pair] & etc]]
                                    (cond
                                        (= k :let) `(let ~v ~(do-cmod etc))
                                        (= k :while) `(when ~v ~(do-cmod etc))
                                        (= k :when) `(if ~v ~(do-cmod etc) (recur (unchecked-inc ~gi)))
                                        (keyword? k) (err "Invalid 'for' keyword " k)
                                        :else `(do (chunk-append ~gb ~body-expr) (recur (unchecked-inc ~gi)))
                                    )
                                )]
                            `(fn ~giter [~gxs]
                                (lazy-seq
                                    (loop [~gxs ~gxs]
                                        (when-let [~gxs (seq ~gxs)]
                                            (if (chunked-seq? ~gxs)
                                                (let [c# (chunk-first ~gxs) size# (int (count c#)) ~gb (chunk-buffer size#)]
                                                    (if (loop [~gi (int 0)]
                                                            (if (< ~gi size#)
                                                                (let [~bind (nth c# ~gi)]
                                                                    ~(do-cmod mod-pairs)
                                                                )
                                                                true
                                                            )
                                                        )
                                                        (chunk-cons (chunk ~gb) (~giter (chunk-rest ~gxs)))
                                                        (chunk-cons (chunk ~gb) nil)
                                                    )
                                                )
                                                (let [~bind (first ~gxs)]
                                                    ~(do-mod mod-pairs)
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )]
        `(let [iter# ~(emit-bind (to-groups seq-exprs))]
            (iter# ~(second seq-exprs))
        )
    )
)

;;;
 ; Ignores body, yields nil.
 ;;
(§ defmacro comment [& body])

;;;
 ; Evaluates exprs in a context in which *out* is bound to a fresh StringWriter.
 ; Returns the string created by any nested printing calls.
 ;;
(§ defmacro with-out-str [& body]
    `(let [s# (java.io.StringWriter.)]
        (binding [*out* s#]
            ~@body
            (str s#)
        )
    )
)

;;;
 ; Evaluates body in a context in which *in* is bound to a fresh StringReader
 ; initialized with the string s.
 ;;
(§ defmacro with-in-str [s & body]
    `(with-open [s# (-> ~s (java.io.StringReader.) (java.io.PushbackReader.))]
        (binding [*in* s#]
            ~@body
        )
    )
)

;;;
 ; pr/prn/print/println to a string, returning it.
 ;;
(§ defn ^String pr-str      [& xs] (with-out-str (apply pr      xs)))
(§ defn ^String prn-str     [& xs] (with-out-str (apply prn     xs)))
(§ defn ^String print-str   [& xs] (with-out-str (apply print   xs)))
(§ defn ^String println-str [& xs] (with-out-str (apply println xs)))

;;;
 ; Evaluates expr and throws an exception if it does not evaluate to logical true.
 ;;
(§ defmacro assert
    ([x]
        (when *assert*
            `(when-not ~x
                (throw (AssertionError. (str "Assert failed: " (pr-str '~x))))
            )
        )
    )
    ([x message]
        (when *assert*
            `(when-not ~x
                (throw (AssertionError. (str "Assert failed: " ~message "\n" (pr-str '~x))))
            )
        )
    )
)

;;;
 ; Returns an instance of java.util.regex.Pattern, for use, e.g. in re-matcher.
 ;;
(§ defn ^java.util.regex.Pattern re-pattern [s]
    (if (instance? java.util.regex.Pattern s)
        s
        (java.util.regex.Pattern/compile s)
    )
)

;;;
 ; Returns an instance of java.util.regex.Matcher, for use, e.g. in re-find.
 ;;
(§ defn ^java.util.regex.Matcher re-matcher [^java.util.regex.Pattern re s]
    (.matcher re s)
)

;;;
 ; Returns the groups from the most recent match/find. If there are no
 ; nested groups, returns a string of the entire match. If there are
 ; nested groups, returns a vector of the groups, the first element
 ; being the entire match.
 ;;
(§ defn re-groups [^java.util.regex.Matcher m]
    (let [gc (.groupCount m)]
        (if (zero? gc)
            (.group m)
            (loop [ret [] c 0]
                (if (<= c gc)
                    (recur (conj ret (.group m c)) (inc c))
                    ret
                )
            )
        )
    )
)

;;;
 ; Returns a lazy sequence of successive matches of pattern in string,
 ; using java.util.regex.Matcher.find(), each such match processed with
 ; re-groups.
 ;;
(§ defn re-seq [^java.util.regex.Pattern re s]
    (let [m (re-matcher re s)]
        ((fn step []
            (when (.find m)
                (cons (re-groups m) (lazy-seq (step)))
            )
        ))
    )
)

;;;
 ; Returns the match, if any, of string to pattern, using
 ; java.util.regex.Matcher.matches(). Uses re-groups to return
 ; the groups.
 ;;
(§ defn re-matches [^java.util.regex.Pattern re s]
    (let [m (re-matcher re s)]
        (when (.matches m)
            (re-groups m)
        )
    )
)

;;;
 ; Returns the next regex match, if any, of string to pattern, using
 ; java.util.regex.Matcher.find(). Uses re-groups to return
 ; the groups.
 ;;
(§ defn re-find
    ([^java.util.regex.Matcher m]
        (when (.find m)
            (re-groups m)
        )
    )
    ([^java.util.regex.Pattern re s]
        (let [m (re-matcher re s)]
            (re-find m)
        )
    )
)

;;;
 ; Returns a random floating point number between 0 (inclusive) and
 ; n (default 1) (exclusive).
 ;;
(§ defn rand
    ([] (Math/random))
    ([n] (* n (rand)))
)

;;;
 ; Returns a random integer between 0 (inclusive) and n (exclusive).
 ;;
(§ defn rand-int [n] (int (rand n)))

;;;
 ; Same as defn, yielding non-public def.
 ;;
(§ defmacro defn- [name & decls]
    (list* `defn (with-meta name (assoc (meta name) :private true)) decls)
)

;;;
 ; Returns a lazy sequence of the nodes in a tree, via a depth-first walk.
 ; branch? must be a fn of one arg that returns true if passed a node
 ; that can have children (but may not). children must be a fn of one
 ; arg that returns a sequence of the children. Will only be called on
 ; nodes for which branch? returns true. Root is the root node of the
 ; tree.
 ;;
(§ defn tree-seq [branch? children root]
    (let [walk
            (fn walk [node]
                (lazy-seq
                    (cons node (when (branch? node) (mapcat walk (children node))))
                )
            )]
        (walk root)
    )
)

;;;
 ; Returns true if s names a special form.
 ;;
(§ defn special-symbol? [s] (contains? cloiure.lang.Compiler/specials s))

;;;
 ; Returns true if v is of type cloiure.lang.Var.
 ;;
(§ defn var? [v] (instance? cloiure.lang.Var v))

;;;
 ; Returns the substring of s beginning at start inclusive,
 ; and ending at end (defaults to length of string), exclusive.
 ;;
(§ defn ^String subs
    ([^String s start    ] (.substring s start    ))
    ([^String s start end] (.substring s start end))
)

;;;
 ; Returns the x for which (k x), a number, is greatest.
 ; If there are multiple such xs, the last one is returned.
 ;;
(§ defn max-key
    ([k x] x)
    ([k x y] (if (> (k x) (k y)) x y))
    ([k x y & more]
        (let [kx (k x) ky (k y) [v kv] (if (> kx ky) [x kx] [y ky])]
            (loop [v v kv kv more more]
                (if more
                    (let [w (first more) kw (k w)]
                        (if (>= kw kv)
                            (recur w kw (next more))
                            (recur v kv (next more))
                        )
                    )
                    v
                )
            )
        )
    )
)

;;;
 ; Returns the x for which (k x), a number, is least.
 ; If there are multiple such xs, the last one is returned.
 ;;
(§ defn min-key
    ([k x] x)
    ([k x y] (if (< (k x) (k y)) x y))
    ([k x y & more]
        (let [kx (k x) ky (k y) [v kv] (if (< kx ky) [x kx] [y ky])]
            (loop [v v kv kv more more]
                (if more
                    (let [w (first more) kw (k w)]
                        (if (<= kw kv)
                            (recur w kw (next more))
                            (recur v kv (next more))
                        )
                    )
                    v
                )
            )
        )
    )
)

;;;
 ; Returns a lazy sequence of the elements of coll with duplicates removed.
 ; Returns a stateful transducer when no collection is provided.
 ;;
(§ defn distinct
    ([]
        (fn [rf]
            (let [seen (volatile! #{})]
                (fn
                    ([] (rf))
                    ([result] (rf result))
                    ([result input]
                        (if (contains? @seen input)
                            result
                            (do (vswap! seen conj input) (rf result input))
                        )
                    )
                )
            )
        )
    )
    ([coll]
        (let [step
                (fn step [xs seen]
                    (lazy-seq
                        ((fn [[f :as xs] seen]
                            (when-let [s (seq xs)]
                                (if (contains? seen f)
                                    (recur (rest s) seen)
                                    (cons f (step (rest s) (conj seen f)))
                                )
                            ))
                            xs seen
                        )
                    )
                )]
            (step coll #{})
        )
    )
)

;;;
 ; Given a map of replacement pairs and a vector/collection, returns
 ; a vector/seq with any elements = a key in smap replaced with the
 ; corresponding val in smap. Returns a transducer when no collection
 ; is provided.
 ;;
(§ defn replace
    ([smap]
        (map #(if-let [e (find smap %)] (val e) %))
    )
    ([smap coll]
        (if (vector? coll)
            (reduce1
                (fn [v i]
                    (if-let [e (find smap (nth v i))]
                        (assoc v i (val e))
                        v
                    )
                )
                coll (range (count coll))
            )
            (map #(if-let [e (find smap %)] (val e) %) coll)
        )
    )
)

;;;
 ; Sets the precision and rounding mode to be used for BigDecimal operations.
 ;
 ; Usage: (with-precision 10 (/ 1M 3))
 ; or:    (with-precision 10 :rounding HALF_DOWN (/ 1M 3))
 ;
 ; The rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN,
 ; HALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.
 ;;
(§ defmacro with-precision [precision & exprs]
    (let [[body rm]
            (if (= (first exprs) :rounding)
                [(next (next exprs)) `((. java.math.RoundingMode ~(second exprs)))]
                [exprs nil]
            )]
        `(binding [*math-context* (java.math.MathContext. ~precision ~@rm)]
            ~@body
        )
    )
)

(§ defn ^:private mk-bound-fn [^cloiure.lang.Sorted sc test key]
    (fn [e] (test (.compare (.comparator sc) (.entryKey sc e) key) 0))
)

;;;
 ; sc must be a sorted collection, test(s) one of <, <=, > or >=.
 ; Returns a seq of those entries with keys ek for which
 ; (test (.. sc comparator (compare ek key)) 0) is true.
 ;;
(§ defn subseq
    ([^cloiure.lang.Sorted sc test key]
        (let [include (mk-bound-fn sc test key)]
            (if (#{> >=} test)
                (when-let [[e :as s] (.seqFrom sc key true)]
                    (if (include e) s (next s))
                )
                (take-while include (.seq sc true))
            )
        )
    )
    ([^cloiure.lang.Sorted sc start-test start-key end-test end-key]
        (when-let [[e :as s] (.seqFrom sc start-key true)]
            (take-while (mk-bound-fn sc end-test end-key)
                (if ((mk-bound-fn sc start-test start-key) e) s (next s))
            )
        )
    )
)

;;;
 ; sc must be a sorted collection, test(s) one of <, <=, > or >=.
 ; Returns a reverse seq of those entries with keys ek for which
 ; (test (.. sc comparator (compare ek key)) 0) is true.
 ;;
(§ defn rsubseq
    ([^cloiure.lang.Sorted sc test key]
        (let [include (mk-bound-fn sc test key)]
            (if (#{< <=} test)
                (when-let [[e :as s] (.seqFrom sc key false)]
                    (if (include e) s (next s))
                )
                (take-while include (.seq sc false))
            )
        )
    )
    ([^cloiure.lang.Sorted sc start-test start-key end-test end-key]
        (when-let [[e :as s] (.seqFrom sc end-key false)]
            (take-while (mk-bound-fn sc start-test start-key)
                (if ((mk-bound-fn sc end-test end-key) e) s (next s))
            )
        )
    )
)

;;;
 ; Takes a function of no args, presumably with side effects, and returns
 ; an infinite (or length n if supplied) lazy sequence of calls to it.
 ;;
(§ defn repeatedly
    ([f] (lazy-seq (cons (f) (repeatedly f))))
    ([n f] (take n (repeatedly f)))
)

;;;
 ; Returns the hash code of its argument. Note this is the hash code
 ; consistent with =, and thus is different than .hashCode for Integer,
 ; Short, Byte and Cloiure collections.
 ;;
(§ defn hash [x] (cloiure.lang.Util/hasheq x))

;;;
 ; Mix final collection hash for ordered or unordered collections.
 ; hash-basis is the combined collection hash, count is the number
 ; of elements included in the basis. Note this is the hash code
 ; consistent with =, different from .hashCode.
 ; See http://clojure.org/data_structures#hash for full algorithms.
 ;;
(§ defn ^long mix-collection-hash [^long hash-basis ^long count] (cloiure.lang.Murmur3/mixCollHash hash-basis count))

;;;
 ; Returns the hash code, consistent with =, for an external ordered
 ; collection implementing Iterable.
 ; See http://clojure.org/data_structures#hash for full algorithms.
 ;;
(§ defn ^long hash-ordered-coll [coll] (cloiure.lang.Murmur3/hashOrdered coll))

;;;
 ; Returns the hash code, consistent with =, for an external unordered
 ; collection implementing Iterable. For maps, the iterator should return
 ; map entries whose hash is computed as (hash-ordered-coll [k v]).
 ; See http://clojure.org/data_structures#hash for full algorithms.
 ;;
(§ defn ^long hash-unordered-coll [coll] (cloiure.lang.Murmur3/hashUnordered coll))

;;;
 ; Returns a lazy seq of the elements of coll separated by sep.
 ; Returns a stateful transducer when no collection is provided.
 ;;
(§ defn interpose
    ([sep]
        (fn [rf]
            (let [started (volatile! false)]
                (fn
                    ([] (rf))
                    ([result] (rf result))
                    ([result input]
                        (if @started
                            (let [sepr (rf result sep)]
                                (if (reduced? sepr)
                                    sepr
                                    (rf sepr input)
                                )
                            )
                            (do (vreset! started true) (rf result input))
                        )
                    )
                )
            )
        )
    )
    ([sep coll]
        (drop 1 (interleave (repeat sep) coll)))
)

;;;
 ; Experimental - like defmacro, except defines a named function whose
 ; body is the expansion, calls to which may be expanded inline as if
 ; it were a macro. Cannot be used with variadic (&) args.
 ;;
(§ defmacro definline [name & decl]
    (let [[pre-args [args expr]] (split-with (comp not vector?) decl)]
        `(do
            (defn ~name ~@pre-args ~args ~(apply (eval (list `fn args expr)) args))
            (alter-meta! (var ~name) assoc :inline (fn ~name ~args ~expr))
            (var ~name)
        )
    )
)

;;;
 ; Returns an empty collection of the same category as coll, or nil.
 ;;
(§ defn empty [coll]
    (when (instance? cloiure.lang.IPersistentCollection coll)
        (.empty ^cloiure.lang.IPersistentCollection coll)
    )
)

;;;
 ; Maps an expression across an array a, using an index named idx, and
 ; return value named ret, initialized to a clone of a, then setting
 ; each element of ret to the evaluation of expr, returning the new
 ; array ret.
 ;;
(§ defmacro amap [a idx ret expr]
    `(let [a# ~a l# (alength a#) ~ret (aclone a#)]
        (loop [~idx 0]
            (if (< ~idx l#)
                (do (aset ~ret ~idx ~expr) (recur (unchecked-inc ~idx)))
                ~ret
            )
        )
    )
)

;;;
 ; Reduces an expression across an array a, using an index named idx,
 ; and return value named ret, initialized to init, setting ret to the
 ; evaluation of expr at each step, returning ret.
 ;;
(§ defmacro areduce [a idx ret init expr]
    `(let [a# ~a l# (alength a#)]
        (loop [~idx 0 ~ret ~init]
            (if (< ~idx l#)
                (recur (unchecked-inc-int ~idx) ~expr)
                ~ret
            )
        )
    )
)

;;;
 ; Creates an array of booleans.
 ;;
(§ defn boolean-array
    {:inline (fn [& args] `(cloiure.lang.Numbers/boolean_array ~@args)) :inline-arities #{1 2}}
    ([size-or-seq]          (cloiure.lang.Numbers/boolean_array size-or-seq))
    ([size init-val-or-seq] (cloiure.lang.Numbers/boolean_array size init-val-or-seq))
)

;;;
 ; Creates an array of bytes.
 ;;
(§ defn byte-array
    {:inline (fn [& args] `(cloiure.lang.Numbers/byte_array ~@args)) :inline-arities #{1 2}}
    ([size-or-seq]          (cloiure.lang.Numbers/byte_array size-or-seq))
    ([size init-val-or-seq] (cloiure.lang.Numbers/byte_array size init-val-or-seq))
)

;;;
 ; Creates an array of chars.
 ;;
(§ defn char-array
    {:inline (fn [& args] `(cloiure.lang.Numbers/char_array ~@args)) :inline-arities #{1 2}}
    ([size-or-seq]          (cloiure.lang.Numbers/char_array size-or-seq))
    ([size init-val-or-seq] (cloiure.lang.Numbers/char_array size init-val-or-seq))
)

;;;
 ; Creates an array of shorts.
 ;;
(§ defn short-array
    {:inline (fn [& args] `(cloiure.lang.Numbers/short_array ~@args)) :inline-arities #{1 2}}
    ([size-or-seq]          (cloiure.lang.Numbers/short_array size-or-seq))
    ([size init-val-or-seq] (cloiure.lang.Numbers/short_array size init-val-or-seq))
)

;;;
 ; Creates an array of ints.
 ;;
(§ defn int-array
    {:inline (fn [& args] `(cloiure.lang.Numbers/int_array ~@args)) :inline-arities #{1 2}}
    ([size-or-seq]          (cloiure.lang.Numbers/int_array size-or-seq))
    ([size init-val-or-seq] (cloiure.lang.Numbers/int_array size init-val-or-seq))
)

;;;
 ; Creates an array of longs.
 ;;
(§ defn long-array
    {:inline (fn [& args] `(cloiure.lang.Numbers/long_array ~@args)) :inline-arities #{1 2}}
    ([size-or-seq]          (cloiure.lang.Numbers/long_array size-or-seq))
    ([size init-val-or-seq] (cloiure.lang.Numbers/long_array size init-val-or-seq))
)

;;;
 ; Creates an array of floats.
 ;;
(§ defn float-array
    {:inline (fn [& args] `(cloiure.lang.Numbers/float_array ~@args)) :inline-arities #{1 2}}
    ([size-or-seq]          (cloiure.lang.Numbers/float_array size-or-seq))
    ([size init-val-or-seq] (cloiure.lang.Numbers/float_array size init-val-or-seq))
)

;;;
 ; Creates an array of doubles.
 ;;
(§ defn double-array
    {:inline (fn [& args] `(cloiure.lang.Numbers/double_array ~@args)) :inline-arities #{1 2}}
    ([size-or-seq]          (cloiure.lang.Numbers/double_array size-or-seq))
    ([size init-val-or-seq] (cloiure.lang.Numbers/double_array size init-val-or-seq))
)

;;;
 ; Creates an array of objects.
 ;;
(§ defn object-array
    {:inline (fn [arg] `(cloiure.lang.RT/object_array ~arg)) :inline-arities #{1}}
    ([size-or-seq] (cloiure.lang.RT/object_array size-or-seq))
)

(§ definline booleans [xs] `(cloiure.lang.Numbers/booleans ~xs))
(§ definline bytes    [xs] `(cloiure.lang.Numbers/bytes    ~xs))
(§ definline chars    [xs] `(cloiure.lang.Numbers/chars    ~xs))
(§ definline shorts   [xs] `(cloiure.lang.Numbers/shorts   ~xs))
(§ definline ints     [xs] `(cloiure.lang.Numbers/ints     ~xs))
(§ definline longs    [xs] `(cloiure.lang.Numbers/longs    ~xs))
(§ definline floats   [xs] `(cloiure.lang.Numbers/floats   ~xs))
(§ definline doubles  [xs] `(cloiure.lang.Numbers/doubles  ~xs))

;;;
 ; Return true if x is a byte array.
 ;;
(§ defn bytes? [x] (if (nil? x) false (= (.getComponentType (class x)) Byte/TYPE)))

;;;
 ; Returns true if x is an instance of Class.
 ;;
(§ defn class? [x] (instance? Class x))

;;;
 ; Atomically alters the root binding of var v by applying f to its current value plus any args.
 ;;
(§ defn alter-var-root [^cloiure.lang.Var v f & args] (.alterRoot v f args))

;;;
 ; Returns true if all of the vars provided as arguments have any bound value, root or thread-local.
 ; Implies that deref'ing the provided vars will succeed. Returns true if no vars are provided.
 ;;
(§ defn bound? [& vars] (every? #(.isBound ^cloiure.lang.Var %) vars))

;;;
 ; Returns true if all of the vars provided as arguments have thread-local bindings.
 ; Implies that set!'ing the provided vars will succeed. Returns true if no vars are provided.
 ;;
(§ defn thread-bound? [& vars] (every? #(.getThreadBinding ^cloiure.lang.Var %) vars))

;;;
 ; Creates a hierarchy object for use with derive, isa?, etc.
 ;;
(§ defn make-hierarchy [] {:parents {} :descendants {} :ancestors {}})

(§ def ^:private global-hierarchy (make-hierarchy))

;;;
 ; If coll is empty, returns nil, else coll.
 ;;
(§ defn not-empty [coll] (when (seq coll) coll))

;;;
 ; Returns the immediate superclass and direct interfaces of c, if any.
 ;;
(§ defn bases [^Class c]
    (when c
        (let [i (seq (.getInterfaces c)) s (.getSuperclass c)]
            (if s (cons s i) i)
        )
    )
)

;;;
 ; Returns the immediate and indirect superclasses and interfaces of c, if any.
 ;;
(§ defn supers [^Class class]
    (loop [ret (set (bases class)) cs ret]
        (if (seq cs)
            (let [c (first cs) bs (bases c)]
                (recur (into1 ret bs) (into1 (disj cs c) bs))
            )
            (not-empty ret)
        )
    )
)

;;;
 ; Returns true if (= child parent), or child is directly or indirectly derived
 ; from parent, either via a Java type inheritance relationship or a relationship
 ; established via derive. h must be a hierarchy obtained from make-hierarchy,
 ; if not supplied, defaults to the global hierarchy.
 ;;
(§ defn isa?
    ([child parent] (isa? global-hierarchy child parent))
    ([h child parent]
        (or (= child parent)
            (and (class? parent) (class? child) (.isAssignableFrom ^Class parent child))
            (contains? ((:ancestors h) child) parent)
            (and (class? child) (some #(contains? ((:ancestors h) %) parent) (supers child)))
            (and (vector? parent) (vector? child) (= (count parent) (count child))
                (loop [ret true i 0]
                    (if (or (not ret) (= i (count parent)))
                        ret
                        (recur (isa? h (child i) (parent i)) (inc i))
                    )
                )
            )
        )
    )
)

;;;
 ; Returns the immediate parents of tag, either via a Java type inheritance
 ; relationship or a relationship established via derive. h must be a hierarchy
 ; obtained from make-hierarchy, if not supplied, defaults to the global hierarchy.
 ;;
(§ defn parents
    ([tag] (parents global-hierarchy tag))
    ([h tag]
        (not-empty
            (let [tp (get (:parents h) tag)]
                (if (class? tag)
                    (into1 (set (bases tag)) tp)
                    tp
                )
            )
        )
    )
)

;;;
 ; Returns the immediate and indirect parents of tag, either via a Java type
 ; inheritance relationship or a relationship established via derive. h must
 ; be a hierarchy obtained from make-hierarchy, if not supplied, defaults to
 ; the global hierarchy.
 ;;
(§ defn ancestors
    ([tag] (ancestors global-hierarchy tag))
    ([h tag]
        (not-empty
            (let [ta (get (:ancestors h) tag)]
                (if (class? tag)
                    (let [superclasses (set (supers tag))]
                        (reduce1 into1 superclasses (cons ta (map #(get (:ancestors h) %) superclasses)))
                    )
                    ta
                )
            )
        )
    )
)

;;;
 ; Returns the immediate and indirect children of tag, through a relationship
 ; established via derive. h must be a hierarchy obtained from make-hierarchy,
 ; if not supplied, defaults to the global hierarchy.
 ; Note: does not work on Java type inheritance relationships.
 ;;
(§ defn descendants
    ([tag] (descendants global-hierarchy tag))
    ([h tag]
        (if (class? tag)
            (throw! "can't get descendants of classes")
            (not-empty (get (:descendants h) tag))
        )
    )
)

;;;
 ; Establishes a parent/child relationship between parent and tag.
 ; Parent must be a namespace-qualified symbol or keyword and child
 ; can be either a namespace-qualified symbol or keyword or a class.
 ; h must be a hierarchy obtained from make-hierarchy, if not
 ; supplied, defaults to, and modifies, the global hierarchy.
 ;;
(§ defn derive
    ([tag parent]
        (assert (namespace parent))
        (assert (or (class? tag) (and (instance? cloiure.lang.Named tag) (namespace tag))))

        (alter-var-root #'global-hierarchy derive tag parent)
        nil
    )
    ([h tag parent]
        (assert (not= tag parent))
        (assert (or (class? tag) (instance? cloiure.lang.Named tag)))
        (assert (instance? cloiure.lang.Named parent))

        (let [tp (:parents h) td (:descendants h) ta (:ancestors h)
              tf
                (fn [m source sources target targets]
                    (reduce1
                        (fn [ret k]
                            (assoc ret k (reduce1 conj (get targets k #{}) (cons target (targets target))))
                        )
                        m (cons source (sources source))
                    )
                )]
            (or
                (when-not (contains? (tp tag) parent)
                    (when (contains? (ta tag) parent)
                        (throw! (print-str tag "already has" parent "as ancestor"))
                    )
                    (when (contains? (ta parent) tag)
                        (throw! (print-str "cyclic derivation:" parent "has" tag "as ancestor"))
                    )
                    (hash-map
                        :parents (assoc (:parents h) tag (conj (get tp tag #{}) parent))
                        :ancestors (tf (:ancestors h) tag td parent ta)
                        :descendants (tf (:descendants h) parent ta tag td)
                    )
                )
                h
            )
        )
    )
)

(§ declare flatten)

;;;
 ; Removes a parent/child relationship between parent and tag.
 ; h must be a hierarchy obtained from make-hierarchy, if not
 ; supplied, defaults to, and modifies, the global hierarchy.
 ;;
(§ defn underive
    ([tag parent]
        (alter-var-root #'global-hierarchy underive tag parent)
        nil
    )
    ([h tag parent]
        (let [parentMap     (:parents h)
              childsParents (if (parentMap tag) (disj (parentMap tag) parent) #{})
              newParents    (if (not-empty childsParents) (assoc parentMap tag childsParents) (dissoc parentMap tag))
              deriv-seq     (flatten (map #(cons (key %) (interpose (key %) (val %))) (seq newParents)))]
            (if (contains? (parentMap tag) parent)
                (reduce1 #(apply derive %1 %2) (make-hierarchy) (partition 2 deriv-seq))
                h
            )
        )
    )
)

;;;
 ; Returns true if no two of the arguments are =.
 ;;
(§ defn ^Boolean distinct?
    ([x] true)
    ([x y] (not (= x y)))
    ([x y & more]
        (if (not= x y)
            (loop [s #{x y} [x & etc :as xs] more]
                (if xs
                    (if (contains? s x)
                        false
                        (recur (conj s x) etc)
                    )
                    true
                )
            )
            false
        )
    )
)

;;;
 ; Returns a seq on a java.util.Iterator. Note that most collections
 ; providing iterators implement Iterable and thus support seq directly.
 ; Seqs cache values, thus iterator-seq should not be used on any
 ; iterator that repeatedly returns the same mutable object.
 ;;
(§ defn iterator-seq [iter] (cloiure.lang.RT/chunkIteratorSeq iter))

;;;
 ; Formats a string using String/format.
 ; See java.util.Formatter for format string syntax.
 ;;
(§ defn ^String format [fmt & args] (String/format fmt (to-array args)))

;;;
 ; Prints formatted output, as per format.
 ;;
(§ defn printf [fmt & args] (print (apply format fmt args)))

(§ defmacro with-loading-context [& body]
    `((fn loading# []
        (binding [*class-loader* (.getClassLoader (.getClass ^Object loading#))]
            ~@body
        )
    ))
)

;;;
 ; Sets *ns* to the namespace named by name (unevaluated), creating it if needed.
 ;
 ; references can be zero or more of:
 ; (:refer-cloiure ...) (:import ...)
 ; with the syntax of refer-cloiure/import respectively,
 ; except the arguments are unevaluated and need not be quoted.
 ;
 ; If :refer-cloiure is not used, a default (refer 'cloiure.core) is used.
 ; Use of ns is preferred to individual calls to in-ns/import:
 ;
 ; (ns foo.bar
 ;   (:refer-cloiure :exclude [ancestors printf])
 ;   (:import (java.util Date Timer Random)
 ;            (java.sql Connection Statement)))
 ;;
(§ defmacro ns [name & references]
    (let [process-reference (fn [[kname & args]] `(~(symbol "cloiure.core" (cloiure.core/name kname)) ~@(map #(list 'quote %) args)))
          metadata          (when (map? (first references)) (first references))
          references        (if metadata (next references) references)
          name              (if metadata (vary-meta name merge metadata) name)
          ;; ns-effect (cloiure.core/in-ns name)
          name-metadata (meta name)]
        `(do
            (cloiure.core/in-ns '~name)
            ~@(when name-metadata
                `((.resetMeta (cloiure.lang.Namespace/find '~name) ~name-metadata))
            )
            (with-loading-context
                ~@(when (and (not= name 'cloiure.core) (not-any? #(= :refer-cloiure (first %)) references))
                    `((cloiure.core/refer '~'cloiure.core))
                )
                ~@(map process-reference references)
            )
            nil
        )
    )
)

;;;
 ; Same as (refer 'cloiure.core <filters>).
 ;;
(§ defmacro refer-cloiure [& filters]
    `(cloiure.core/refer '~'cloiure.core ~@filters)
)

;;;
 ; defs name to have the root value of the expr iff the named var has no root value,
 ; else expr is unevaluated.
 ;;
(§ defmacro defonce [name expr]
    `(let [v# (def ~name)]
        (when-not (.hasRoot v#)
            (def ~name ~expr)
        )
    )
)

;;;
 ; Returns the value in a nested associative structure,
 ; where ks is a sequence of keys. Returns nil if the key
 ; is not present, or the not-found value if supplied.
 ;;
(§ defn get-in
    ([m ks] (reduce1 get m ks))
    ([m ks not-found]
        (loop [sentinel (Object.) m m ks (seq ks)]
            (if ks
                (let [m (get m (first ks) sentinel)]
                    (if (identical? sentinel m)
                        not-found
                        (recur sentinel m (next ks))
                    )
                )
                m
            )
        )
    )
)

;;;
 ; Associates a value in a nested associative structure, where ks is
 ; a sequence of keys and v is the new value and returns a new nested
 ; structure. If any levels do not exist, hash-maps will be created.
 ;;
(§ defn assoc-in [m [k & ks] v]
    (if ks
        (assoc m k (assoc-in (get m k) ks v))
        (assoc m k v)
    )
)

;;;
 ; 'Updates' a value in a nested associative structure, where ks is
 ; a sequence of keys and f is a function that will take the old value
 ; and any supplied args and return the new value, and returns a new
 ; nested structure. If any levels do not exist, hash-maps will be
 ; created.
 ;;
(§ defn update-in [m ks f & args]
    (let [up
            (fn up [m ks f args]
                (let [[k & ks] ks]
                    (if ks
                        (assoc m k (up (get m k) ks f args))
                        (assoc m k (apply f (get m k) args))
                    )
                )
            )]
        (up m ks f args)
    )
)

;;;
 ; 'Updates' a value in an associative structure, where k is a key and f is a function
 ; that will take the old value and any supplied args and return the new value, and
 ; returns a new structure. If the key does not exist, nil is passed as the old value.
 ;;
(§ defn update
    ([m k f] (assoc m k (f (get m k))))
    ([m k f x] (assoc m k (f (get m k) x)))
    ([m k f x y] (assoc m k (f (get m k) x y)))
    ([m k f x y z] (assoc m k (f (get m k) x y z)))
    ([m k f x y z & more] (assoc m k (apply f (get m k) x y z more)))
)

;;;
 ; Returns true if coll has no items - same as (not (seq coll)).
 ; Please use the idiom (seq x) rather than (not (empty? x)).
 ;;
(§ defn empty? [coll] (not (seq coll)))

;;;
 ; Returns true if x implements IPersistentCollection.
 ;;
(§ defn coll? [x] (instance? cloiure.lang.IPersistentCollection x))

;;;
 ; Returns true if x implements IPersistentList.
 ;;
(§ defn list? [x] (instance? cloiure.lang.IPersistentList x))

;;;
 ; Return true if the seq function is supported for x.
 ;;
(§ defn seqable? [x] (cloiure.lang.RT/canSeq x))

;;;
 ; Returns true if x implements IFn.
 ; Note that many data structures (e.g. sets and maps) implement IFn.
 ;;
(§ defn ifn? [x] (instance? cloiure.lang.IFn x))

;;;
 ; Returns true if x implements Fn, i.e. is an object created via fn.
 ;;
(§ defn fn? [x] (instance? cloiure.lang.Fn x))

;;;
 ; Returns true if coll implements Associative.
 ;;
(§ defn associative? [coll] (instance? cloiure.lang.Associative coll))

;;;
 ; Returns true if coll implements Sequential.
 ;;
(§ defn sequential? [coll] (instance? cloiure.lang.Sequential coll))

;;;
 ; Returns true if coll implements Sorted.
 ;;
(§ defn sorted? [coll] (instance? cloiure.lang.Sorted coll))

;;;
 ; Returns true if coll implements count in constant time.
 ;;
(§ defn counted? [coll] (instance? cloiure.lang.Counted coll))

;;;
 ; Returns true if coll implements Reversible.
 ;;
(§ defn reversible? [coll] (instance? cloiure.lang.Reversible coll))

;;;
 ; Return true if coll implements Indexed, indicating efficient lookup by index.
 ;;
(§ defn indexed? [coll] (instance? cloiure.lang.Indexed coll))

;;;
 ; Bound in a repl thread to the most recent value printed.
 ;;
(§ def ^:dynamic *1)

;;;
 ; Bound in a repl thread to the second most recent value printed.
 ;;
(§ def ^:dynamic *2)

;;;
 ; Bound in a repl thread to the third most recent value printed.
 ;;
(§ def ^:dynamic *3)

;;;
 ; Bound in a repl thread to the most recent exception caught by the repl.
 ;;
(§ def ^:dynamic *e)

;;;
 ; trampoline can be used to convert algorithms requiring mutual recursion without
 ; stack consumption. Calls f with supplied args, if any. If f returns a fn, calls
 ; that fn with no arguments, and continues to repeat, until the return value is
 ; not a fn, then returns that non-fn value. Note that if you want to return a fn
 ; as a final value, you must wrap it in some data structure and unpack it after
 ; trampoline returns.
 ;;
(§ defn trampoline
    ([f]
        (let [ret (f)]
            (if (fn? ret)
                (recur ret)
                ret
            )
        )
    )
    ([f & args] (trampoline #(apply f args)))
)

;;;
 ; Finds or creates a var named by the symbol name in the namespace
 ; ns (which can be a symbol or a namespace), setting its root binding
 ; to val if supplied. The namespace must exist. The var will adopt
 ; any metadata from the name symbol. Returns the var.
 ;;
(§ defn intern
    ([ns ^cloiure.lang.Symbol name]
        (let [v (cloiure.lang.Var/intern (the-ns ns) name)]
            (when (meta name)
                (.setMeta v (meta name))
            )
            v
        )
    )
    ([ns name val]
        (let [v (cloiure.lang.Var/intern (the-ns ns) name val)]
            (when (meta name)
                (.setMeta v (meta name))
            )
            v
        )
    )
)

;;;
 ; Repeatedly executes body while test expression is true. Presumes
 ; some side-effect will cause test to become false/nil. Returns nil.
 ;;
(§ defmacro while [test & body]
    `(loop [] (when ~test ~@body (recur)))
)

;;;
 ; Returns a memoized version of a referentially transparent function.
 ; The memoized version of the function keeps a cache of the mapping from
 ; arguments to results and, when calls with the same arguments are repeated
 ; often, has higher performance at the expense of higher memory use.
 ;;
(§ defn memoize [f]
    (let [mem (atom {})]
        (fn [& args]
            (if-let [e (find @mem args)]
                (val e)
                (let [ret (apply f args)]
                    (swap! mem assoc args ret)
                    ret
                )
            )
        )
    )
)

;;;
 ; Takes a binary predicate, an expression, and a set of clauses.
 ; Each clause can take the form of either:
 ;
 ; test-expr result-expr
 ;
 ; test-expr :>> result-fn
 ;
 ; Note :>> is an ordinary keyword.
 ;
 ; For each clause, (pred test-expr expr) is evaluated. If it returns logical true,
 ; the clause is a match. If a binary clause matches, the result-expr is returned,
 ; if a ternary clause matches, its result-fn, which must be a unary function, is
 ; called with the result of the predicate as its argument, the result of that call
 ; being the return value of condp. A single default expression can follow the clauses,
 ; and its value will be returned if no clause matches. If no default expression
 ; is provided and no clause matches, an IllegalArgumentException is thrown.
 ;;
(§ defmacro condp [pred expr & clauses]
    (let [gpred (gensym "pred__") gexpr (gensym "expr__")
          emit
            (fn emit [pred expr args]
                (let [[[a b c :as clause] more] (split-at (if (= :>> (second args)) 3 2) args) n (count clause)]
                    (cond
                        (= 0 n) `(throw! (str "no matching clause: " ~expr))
                        (= 1 n) a
                        (= 2 n) `(if (~pred ~a ~expr)
                                    ~b
                                    ~(emit pred expr more)
                                )
                        :else   `(if-let [p# (~pred ~a ~expr)]
                                    (~c p#)
                                    ~(emit pred expr more)
                                )
                    )
                )
            )]
        `(let [~gpred ~pred ~gexpr ~expr]
            ~(emit gpred gexpr clauses)
        )
    )
)

;;;
 ; fnspec => (fname [params*] exprs) or (fname ([params*] exprs)+)
 ;
 ; Takes a vector of function specs and a body, and generates a set of
 ; bindings of functions to their names. All of the names are available
 ; in all of the definitions of the functions, as well as the body.
 ;;
(§ defmacro letfn {:special-form true, :forms '[(letfn [fnspecs*] exprs*)]} [fnspecs & body]
    `(letfn* ~(vec (interleave (map first fnspecs) (map #(cons `fn %) fnspecs))) ~@body)
)

;;;
 ; Takes a function f, and returns a function that calls f, replacing a nil first argument
 ; to f with the supplied value x. Higher arity versions can replace arguments in the second
 ; and third positions (y, z). Note that the function f can take any number of arguments,
 ; not just the one(s) being nil-patched.
 ;;
(§ defn fnil
    ([f x]
        (fn
            ([a] (f (if (nil? a) x a)))
            ([a b] (f (if (nil? a) x a) b))
            ([a b c] (f (if (nil? a) x a) b c))
            ([a b c & ds] (apply f (if (nil? a) x a) b c ds))
        )
    )
    ([f x y]
        (fn
            ([a b] (f (if (nil? a) x a) (if (nil? b) y b)))
            ([a b c] (f (if (nil? a) x a) (if (nil? b) y b) c))
            ([a b c & ds] (apply f (if (nil? a) x a) (if (nil? b) y b) c ds))
        )
    )
    ([f x y z]
        (fn
            ([a b] (f (if (nil? a) x a) (if (nil? b) y b)))
            ([a b c] (f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c)))
            ([a b c & ds] (apply f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c) ds))
        )
    )
)

(§ defn- shift-mask [shift mask x]
    (-> x (bit-shift-right shift) (bit-and mask))
)

(§ def ^:private max-mask-bits 13)
(§ def ^:private max-switch-table-size (bit-shift-left 1 max-mask-bits))

;;;
 ; Takes a collection of hashes and returns [shift mask] or nil if none found.
 ;;
(§ defn- maybe-min-hash [hashes]
    (first
        (filter (fn [[s m]] (apply distinct? (map #(shift-mask s m %) hashes)))
            (for [mask (map #(dec (bit-shift-left 1 %)) (range 1 (inc max-mask-bits))) shift (range 0 31)]
                [shift mask]
            )
        )
    )
)

;;;
 ; Transforms a sequence of test constants and a corresponding sequence of then
 ; expressions into a sorted map to be consumed by case*. The form of the map
 ; entries are {(case-f test) [(test-f test) then]}.
 ;;
(§ defn- case-map [case-f test-f tests thens]
    (into1 (sorted-map)
        (zipmap
            (map case-f tests)
            (map vector (map test-f tests) thens)
        )
    )
)

;;;
 ; Returns true if the collection of ints can fit within the max-table-switch-size,
 ; false otherwise.
 ;;
(§ defn- fits-table? [ints]
    (< (- (apply max (seq ints)) (apply min (seq ints))) max-switch-table-size)
)

;;;
 ; Takes a sequence of int-sized test constants and a corresponding sequence of
 ; then expressions. Returns a tuple of [shift mask case-map switch-type] where
 ; case-map is a map of int case values to [test then] tuples, and switch-type
 ; is either :sparse or :compact.
 ;;
(§ defn- prep-ints [tests thens]
    (if (fits-table? tests)
        ;; compact case ints, no shift-mask
        [0 0 (case-map int int tests thens) :compact]
        (let [[shift mask] (or (maybe-min-hash (map int tests)) [0 0])]
            (if (zero? mask)
                ;; sparse case ints, no shift-mask
                [0 0 (case-map int int tests thens) :sparse]
                ;; compact case ints, with shift-mask
                [shift mask (case-map #(shift-mask shift mask (int %)) int tests thens) :compact]
            )
        )
    )
)

;;;
 ; Takes a case expression, default expression, and a sequence of test constants
 ; and a corresponding sequence of then expressions. Returns a tuple of
 ; [tests thens skip-check-set] where no tests have the same hash. Each set of
 ; input test constants with the same hash is replaced with a single test
 ; constant (the case int), and their respective thens are combined into:
 ;
 ; (condp = expr test-1 then-1 ... test-n then-n default).
 ;
 ; The skip-check is a set of case ints for which post-switch equivalence
 ; checking must not be done (the cases holding the above condp thens).
 ;;
(§ defn- merge-hash-collisions [expr-sym default tests thens]
    (let [buckets
            (loop [m {} ks tests vs thens]
                (if (and ks vs)
                    (recur (update m (cloiure.lang.Util/hash (first ks)) (fnil conj []) [(first ks) (first vs)]) (next ks) (next vs))
                    m
                )
            )
          assoc-multi
            (fn [m h bucket]
                (let [testexprs (apply concat bucket) expr `(condp = ~expr-sym ~@testexprs ~default)]
                    (assoc m h expr)
                )
            )
          hmap
            (reduce1
                (fn [m [h bucket]]
                    (if (== 1 (count bucket))
                        (assoc m (ffirst bucket) (second (first bucket)))
                        (assoc-multi m h bucket)
                    )
                )
                {} buckets
            )
          skip-check
            (->> buckets
                (filter #(< 1 (count (second %))))
                (map first)
                (into1 #{})
            )]
        [(keys hmap) (vals hmap) skip-check]
    )
)

;;;
 ; Takes a sequence of test constants and a corresponding sequence of then
 ; expressions. Returns a tuple of [shift mask case-map switch-type skip-check]
 ; where case-map is a map of int case values to [test then] tuples, switch-type
 ; is either :sparse or :compact, and skip-check is a set of case ints for which
 ; post-switch equivalence checking must not be done (occurs with hash collisions).
 ;;
(§ defn- prep-hashes [expr-sym default tests thens]
    (let [hashcode #(cloiure.lang.Util/hash %) hashes (into1 #{} (map hashcode tests))]
        (if (== (count tests) (count hashes))
            (if (fits-table? hashes)
                ;; compact case ints, no shift-mask
                [0 0 (case-map hashcode identity tests thens) :compact]
                (let [[shift mask] (or (maybe-min-hash hashes) [0 0])]
                    (if (zero? mask)
                        ;; sparse case ints, no shift-mask
                        [0 0 (case-map hashcode identity tests thens) :sparse]
                        ;; compact case ints, with shift-mask
                        [shift mask (case-map #(shift-mask shift mask (hashcode %)) identity tests thens) :compact]
                    )
                )
            )
            ;; resolve hash collisions and try again
            (let [[tests thens skip-check] (merge-hash-collisions expr-sym default tests thens)
                  [shift mask case-map switch-type] (prep-hashes expr-sym default tests thens)
                  skip-check
                    (if (zero? mask)
                        skip-check
                        (into1 #{} (map #(shift-mask shift mask %) skip-check))
                    )]
                [shift mask case-map switch-type skip-check]
            )
        )
    )
)

;;;
 ; Takes an expression, and a set of clauses.
 ;
 ; Each clause can take the form of either:
 ;
 ; test-constant result-expr
 ;
 ; (test-constant1 ... test-constantN) result-expr
 ;
 ; The test-constants are not evaluated. They must be compile-time
 ; literals, and need not be quoted. If the expression is equal to a
 ; test-constant, the corresponding result-expr is returned. A single
 ; default expression can follow the clauses, and its value will be
 ; returned if no clause matches. If no default expression is provided
 ; and no clause matches, an IllegalArgumentException is thrown.
 ;
 ; Unlike cond and condp, case does a constant-time dispatch, the
 ; clauses are not considered sequentially. All manner of constant
 ; expressions are acceptable in case, including numbers, strings,
 ; symbols, keywords, and (Cloiure) composites thereof. Note that since
 ; lists are used to group multiple constants that map to the same
 ; expression, a vector can be used to match a list if needed. The
 ; test-constants need not be all of the same type.
 ;;
(§ defmacro case [e & clauses]
    (let [ge (with-meta (gensym) {:tag Object})
          default
            (if (odd? (count clauses))
                (last clauses)
                `(throw! (str "no matching clause: " ~ge))
            )]
        (if (> 2 (count clauses))
            `(let [~ge ~e] ~default)
            (let [pairs (partition 2 clauses)
                  assoc-test
                    (fn assoc-test [m test expr]
                        (if (contains? m test)
                            (throw! (str "duplicate case test constant: " test))
                            (assoc m test expr)
                        )
                    )
                  pairs
                    (reduce1
                        (fn [m [test expr]]
                            (if (seq? test)
                                (reduce1 #(assoc-test %1 %2 expr) m test)
                                (assoc-test m test expr)
                            )
                        )
                        {} pairs
                    )
                  tests (keys pairs)
                  thens (vals pairs)
                  mode
                    (cond
                        (every? #(and (integer? %) (<= Integer/MIN_VALUE % Integer/MAX_VALUE)) tests) :ints
                        (every? keyword? tests) :identity
                        :else :hashes
                    )]
                (condp = mode
                    :ints
                        (let [[shift mask imap switch-type] (prep-ints tests thens)]
                            `(let [~ge ~e] (case* ~ge ~shift ~mask ~default ~imap ~switch-type :int))
                        )
                    :hashes
                        (let [[shift mask imap switch-type skip-check] (prep-hashes ge default tests thens)]
                            `(let [~ge ~e] (case* ~ge ~shift ~mask ~default ~imap ~switch-type :hash-equiv ~skip-check))
                        )
                    :identity
                        (let [[shift mask imap switch-type skip-check] (prep-hashes ge default tests thens)]
                            `(let [~ge ~e] (case* ~ge ~shift ~mask ~default ~imap ~switch-type :hash-identity ~skip-check))
                        )
                )
            )
        )
    )
)

(§ in-ns 'cloiure.core)

(§ import
    [java.lang.reflect Constructor Modifier]
    [cloiure.asm ClassVisitor ClassWriter Opcodes Type]
    [cloiure.asm.commons GeneratorAdapter Method]
    [cloiure.lang DynamicClassLoader IPersistentMap IProxy PersistentHashMap Reflector RT]
)

(§ defn method-sig [^java.lang.reflect.Method meth]
    [(.getName meth) (seq (.getParameterTypes meth)) (.getReturnType meth)]
)

(§ defn- most-specific [rtypes]
    (or (some (fn [t] (when (every? #(isa? t %) rtypes) t)) rtypes) (throw! "incompatible return types"))
)

;;;
 ; Takes a collection of [msig meth] and returns a seq of maps from return-types to meths.
 ;;
(§ defn- group-by-sig [coll]
    (vals
        (reduce1
            (fn [m [msig meth]]
                (let [rtype (peek msig) argsig (pop msig)]
                    (assoc m argsig (assoc (m argsig {}) rtype meth))
                )
            )
            {} coll
        )
    )
)

(§ defn ^String proxy-name [^Class super interfaces]
    (let [inames (into1 (sorted-set) (map #(.getName ^Class %) interfaces))]
        (apply str (.replace (str *ns*) \- \_) ".proxy"
            (interleave (repeat "$")
                (concat
                    [(.getName super)]
                    (map #(subs % (inc (.lastIndexOf ^String % "."))) inames)
                    [(Integer/toHexString (hash inames))]
                )
            )
        )
    )
)

(§ defn- generate-proxy [^Class super interfaces]
    (let [cv         (ClassWriter. ClassWriter/COMPUTE_MAXS)
          pname      (proxy-name super interfaces)
          cname      (.replace pname \. \/) ;; (str "cloiure/lang/" (gensym "Proxy__"))
          ctype      (Type/getObjectType cname)
          iname      (fn [^Class c] (.getInternalName (Type/getType c)))
          fmap       "__cloiureFnMap"
          totype     (fn [^Class c] (Type/getType c))
          to-types   (fn [cs] (if (pos? (count cs)) (into-array (map totype cs)) (make-array Type 0)))
          super-type ^Type (totype super)
          imap-type  ^Type (totype IPersistentMap)
          ifn-type   (totype cloiure.lang.IFn)
          obj-type   (totype Object)
          sym-type   (totype cloiure.lang.Symbol)
          rt-type    (totype cloiure.lang.RT)
          ex-type    (totype java.lang.UnsupportedOperationException)
          gen-bridge
            (fn [^java.lang.reflect.Method meth ^java.lang.reflect.Method dest]
                (let [pclasses (.getParameterTypes meth)
                      ptypes   (to-types pclasses)
                      rtype    ^Type (totype (.getReturnType meth))
                      m        (Method. (.getName meth) rtype ptypes)
                      dtype    (totype (.getDeclaringClass dest))
                      dm       (Method. (.getName dest) (totype (.getReturnType dest)) (to-types (.getParameterTypes dest)))
                      gen      (GeneratorAdapter. (bit-or Opcodes/ACC_PUBLIC Opcodes/ACC_BRIDGE) m nil nil cv)]
                    (.visitCode gen)
                    (.loadThis gen)
                    (dotimes [i (count ptypes)]
                        (.loadArg gen i)
                    )
                    (if (-> dest .getDeclaringClass .isInterface)
                        (.invokeInterface gen dtype dm)
                        (.invokeVirtual gen dtype dm)
                    )
                    (.returnValue gen)
                    (.endMethod gen)
                )
            )
          gen-method
            (fn [^java.lang.reflect.Method meth else-gen]
                (let [pclasses   (.getParameterTypes meth)
                      ptypes     (to-types pclasses)
                      rtype      ^Type (totype (.getReturnType meth))
                      m          (Method. (.getName meth) rtype ptypes)
                      gen        (GeneratorAdapter. Opcodes/ACC_PUBLIC m nil nil cv)
                      else-label (.newLabel gen)
                      end-label  (.newLabel gen)
                      decl-type  (Type/getType (.getDeclaringClass meth))]
                    (.visitCode gen)
                    (if (> (count pclasses) 18)
                        (else-gen gen m)
                        (do
                            (.loadThis gen)
                            (.getField gen ctype fmap imap-type)
                            (.push gen (.getName meth))
                            ;; lookup fn in map
                            (.invokeStatic gen rt-type (Method/getMethod "Object get(Object, Object)"))
                            (.dup gen)
                            (.ifNull gen else-label)
                            ;; if found
                            (.checkCast gen ifn-type)
                            (.loadThis gen)
                            ;; box args
                            (dotimes [i (count ptypes)]
                                (.loadArg gen i)
                                (cloiure.lang.Compiler$HostExpr/emitBoxReturn nil gen (nth pclasses i))
                            )
                            ;; call fn
                            (.invokeInterface gen ifn-type (Method. "invoke" obj-type (into-array (cons obj-type (repeat (count ptypes) obj-type)))))
                            ;; unbox return
                            (.unbox gen rtype)
                            (when (= (.getSort rtype) Type/VOID)
                                (.pop gen)
                            )
                            (.goTo gen end-label)
                            ;; else call supplied alternative generator
                            (.mark gen else-label)
                            (.pop gen)
                            (else-gen gen m)
                            (.mark gen end-label)
                        )
                    )
                    (.returnValue gen)
                    (.endMethod gen)
                )
            )]
        ;; start class definition
        (.visit cv Opcodes/V1_5 (+ Opcodes/ACC_PUBLIC Opcodes/ACC_SUPER) cname nil (iname super) (into-array (map iname (cons IProxy interfaces))))
        ;; add field for fn mappings
        (.visitField cv (+ Opcodes/ACC_PRIVATE Opcodes/ACC_VOLATILE) fmap (.getDescriptor imap-type) nil nil)
        ;; add ctors matching/calling super's
        (doseq [^Constructor ctor (.getDeclaredConstructors super)]
            (when-not (Modifier/isPrivate (.getModifiers ctor))
                (let [ptypes (to-types (.getParameterTypes ctor))
                      m (Method. "<init>" Type/VOID_TYPE ptypes)
                      gen (GeneratorAdapter. Opcodes/ACC_PUBLIC m nil nil cv)]
                    (.visitCode gen)
                    ;; call super ctor
                    (.loadThis gen)
                    (.dup gen)
                    (.loadArgs gen)
                    (.invokeConstructor gen super-type m)
                    (.returnValue gen)
                    (.endMethod gen)
                )
            )
        )
        ;; add IProxy methods
        (let [m (Method/getMethod "void __initCloiureFnMappings(cloiure.lang.IPersistentMap)")
              gen (GeneratorAdapter. Opcodes/ACC_PUBLIC m nil nil cv)]
            (.visitCode gen)
            (.loadThis gen)
            (.loadArgs gen)
            (.putField gen ctype fmap imap-type)
            (.returnValue gen)
            (.endMethod gen)
        )
        (let [m (Method/getMethod "void __updateCloiureFnMappings(cloiure.lang.IPersistentMap)")
              gen (GeneratorAdapter. Opcodes/ACC_PUBLIC m nil nil cv)]
            (.visitCode gen)
            (.loadThis gen)
            (.dup gen)
            (.getField gen ctype fmap imap-type)
            (.checkCast gen (totype cloiure.lang.IPersistentCollection))
            (.loadArgs gen)
            (.invokeInterface gen (totype cloiure.lang.IPersistentCollection) (Method/getMethod "cloiure.lang.IPersistentCollection cons(Object)"))
            (.checkCast gen imap-type)
            (.putField gen ctype fmap imap-type)
            (.returnValue gen)
            (.endMethod gen)
        )
        (let [m (Method/getMethod "cloiure.lang.IPersistentMap __getCloiureFnMappings()")
              gen (GeneratorAdapter. Opcodes/ACC_PUBLIC m nil nil cv)]
            (.visitCode gen)
            (.loadThis gen)
            (.getField gen ctype fmap imap-type)
            (.returnValue gen)
            (.endMethod gen)
        )
        ;; calc set of supers' non-private instance methods
        (let [[mm considered]
                (loop [mm {} considered #{} c super]
                    (if c
                        (let [[mm considered]
                                (loop [mm mm considered considered meths (concat (seq (.getDeclaredMethods c)) (seq (.getMethods c)))]
                                    (if (seq meths)
                                        (let [^java.lang.reflect.Method meth (first meths) mods (.getModifiers meth) mk (method-sig meth)]
                                            (if (or (considered mk)
                                                    (not (or (Modifier/isPublic mods) (Modifier/isProtected mods)))
                                                 ;; (Modifier/isPrivate mods)
                                                    (Modifier/isStatic mods)
                                                    (Modifier/isFinal mods)
                                                    (= "finalize" (.getName meth))
                                                )
                                                (recur mm (conj considered mk) (next meths))
                                                (recur (assoc mm mk meth) (conj considered mk) (next meths))
                                            )
                                        )
                                        [mm considered]
                                    )
                                )]
                            (recur mm considered (.getSuperclass c))
                        )
                        [mm considered]
                    )
                )
              ifaces-meths
                (into1 {}
                    (for [^Class iface interfaces meth (.getMethods iface) :let [msig (method-sig meth)] :when (not (considered msig))]
                        {msig meth}
                    )
                )
              ;; Treat abstract methods as interface methods
              [mm ifaces-meths]
                (let [abstract? (fn [[_ ^Method meth]] (Modifier/isAbstract (.getModifiers meth)))
                      mm-no-abstract (remove abstract? mm)
                      abstract-meths (filter abstract? mm)]
                    [mm-no-abstract (concat ifaces-meths abstract-meths)]
                )
              mgroups      (group-by-sig (concat mm ifaces-meths))
              rtypes       (map #(most-specific (keys %)) mgroups)
              mb           (map #(vector (%1 %2) (vals (dissoc %1 %2))) mgroups rtypes)
              bridge?      (reduce1 into1 #{} (map second mb))
              ifaces-meths (remove bridge? (vals ifaces-meths))
              mm           (remove bridge? (vals mm))]
            ;; add methods matching supers', if no mapping -> call super
            (doseq [[^java.lang.reflect.Method dest bridges] mb ^java.lang.reflect.Method meth bridges]
                (gen-bridge meth dest)
            )
            (doseq [^java.lang.reflect.Method meth mm]
                (gen-method meth
                    (fn [^GeneratorAdapter gen ^Method m]
                        (.loadThis gen)
                        ;; push args
                        (.loadArgs gen)
                        ;; call super
                        (.visitMethodInsn gen Opcodes/INVOKESPECIAL (.getInternalName super-type) (.getName m) (.getDescriptor m))
                    )
                )
            )
            ;; add methods matching interfaces', if no mapping -> throw
            (doseq [^java.lang.reflect.Method meth ifaces-meths]
                (gen-method meth (fn [^GeneratorAdapter gen ^Method m] (.throwException gen ex-type (.getName m))))
            )
        )
        ;; finish class def
        (.visitEnd cv)
        [cname (.toByteArray cv)]
    )
)

(§ defn- get-super-and-interfaces [bases]
    (if (.isInterface ^Class (first bases))
        [Object bases]
        [(first bases) (next bases)]
    )
)

;;;
 ; Takes an optional single class followed by zero or more interfaces.
 ; If not supplied, class defaults to Object. Creates and returns
 ; an instance of a proxy class derived from the supplied classes.
 ; The resulting value is cached and used for any subsequent
 ; requests for the same class set. Returns a Class object.
 ;;
(§ defn get-proxy-class [& bases]
    (let [[super interfaces] (get-super-and-interfaces bases) pname (proxy-name super interfaces)]
        (or (RT/loadClassForName pname)
            (let [[cname bytecode] (generate-proxy super interfaces)]
                (.defineClass ^DynamicClassLoader *class-loader* pname bytecode)
            )
        )
    )
)

;;;
 ; Takes a proxy class and any arguments for its superclass ctor and
 ; creates and returns an instance of the proxy.
 ;;
(§ defn construct-proxy [c & ctor-args]
    (Reflector/invokeConstructor c (to-array ctor-args))
)

;;;
 ; Takes a proxy instance and a map of strings (which must correspond to
 ; methods of the proxy superclass/superinterfaces) to fns (which must take
 ; arguments matching the corresponding method, plus an additional (explicit)
 ; first arg corresponding to this, and sets the proxy's fn map.
 ; Returns the proxy.
 ;;
(§ defn init-proxy [^IProxy proxy mappings]
    (.__initCloiureFnMappings proxy mappings)
    proxy
)

;;;
 ; Takes a proxy instance and a map of strings (which must correspond to
 ; methods of the proxy superclass/superinterfaces) to fns (which must take
 ; arguments matching the corresponding method, plus an additional (explicit)
 ; first arg corresponding to this, and updates (via assoc) the proxy's fn map.
 ; nil can be passed instead of a fn, in which case the corresponding method
 ; will revert to the default behavior. Note that this function can be used
 ; to update the behavior of an existing instance without changing its identity.
 ; Returns the proxy.
 ;;
(§ defn update-proxy [^IProxy proxy mappings]
    (.__updateCloiureFnMappings proxy mappings)
    proxy
)

;;;
 ; Takes a proxy instance and returns the proxy's fn map.
 ;;
(§ defn proxy-mappings [^IProxy proxy] (.__getCloiureFnMappings proxy))

;;;
 ; class-and-interfaces - a vector of class names.
 ; args - a (possibly empty) vector of arguments to the superclass constructor.
 ;
 ; f => (name [params*] body) or (name ([params*] body) ([params+] body) ...)
 ;
 ; Expands to code which creates a instance of a proxy class that implements
 ; the named class/interface(s) by calling the supplied fns. A single class,
 ; if provided, must be first. If not provided, it defaults to Object.
 ;
 ; The interfaces names must be valid interface types. If a method fn is not
 ; provided for a class method, the superclass methd will be called. If a method
 ; fn is not provided for an interface method, an UnsupportedOperationException
 ; will be thrown should it be called. Method fns are closures and can capture
 ; the environment in which proxy is called. Each method fn takes an additional
 ; implicit first arg, which is bound to 'this. Note that while method fns can
 ; be provided to override protected methods, they have no other access to
 ; protected members, nor to super, as these capabilities cannot be proxied.
 ;;
(§ defmacro proxy [class-and-interfaces args & fs]
    (let [bases (map #(or (resolve %) (throw! (str "can't resolve: " %))) class-and-interfaces)
          [super interfaces] (get-super-and-interfaces bases)
          pc-effect (apply get-proxy-class bases)
          pname (proxy-name super interfaces)]
        ;; remember the class to prevent it from disappearing before use
        (intern *ns* (symbol pname) pc-effect)
        `(let [ ;; pc# (get-proxy-class ~@class-and-interfaces)
               p# (new ~(symbol pname) ~@args)] ;; (construct-proxy pc# ~@args)]
            (init-proxy p#
                ~(loop [fmap {} fs fs]
                    (if fs
                        (let [[sym & meths] (first fs)
                              meths (if (vector? (first meths)) (list meths) meths)
                              meths (map (fn [[params & body]] (cons (apply vector 'this params) body)) meths)]
                            (if-not (contains? fmap (name sym))
                                (recur (assoc fmap (name sym) (cons `fn meths)) (next fs))
                                (throw! (str "method '" (name sym) "' redefined"))
                            )
                        )
                        fmap
                    )
                )
            )
            p#
        )
    )
)

(§ defn proxy-call-with-super [call this meth]
    (let [m (proxy-mappings this)]
        (update-proxy this (assoc m meth nil))
        (try
            (call)
            (finally
                (update-proxy this m)
            )
        )
    )
)

;;;
 ; Use to call a superclass method in the body of a proxy method.
 ; Note, expansion captures 'this.
 ;;
(§ defmacro proxy-super [meth & args]
    `(proxy-call-with-super (fn [] (. ~'this ~meth ~@args)) ~'this ~(name meth))
)

(§ in-ns 'cloiure.core)

(§ import [java.io Writer])

;;;
 ; *print-length* controls how many items of each collection the printer will print.
 ; If it is bound to logical false, there is no limit. Otherwise, it must be bound
 ; to an integer indicating the maximum number of items of each collection to print.
 ; If a collection contains more items, the printer will print items up to the limit
 ; followed by '...' to represent the remaining items. The root binding is nil
 ; indicating no limit.
 ;;
(§ def ^:dynamic *print-length* nil)

;;;
 ; *print-level* controls how many levels deep the printer will print nested objects.
 ; If it is bound to logical false, there is no limit. Otherwise, it must be bound
 ; to an integer indicating the maximum level to print. Each argument to print is at
 ; level 0; if an argument is a collection, its items are at level 1; and so on.
 ; If an object is a collection and is at a level greater than or equal to the value
 ; bound to *print-level*, the printer prints '#' to represent it. The root binding
 ; is nil indicating no limit.
 ;;
(§ def ^:dynamic *print-level* nil)

;;;
 ; *print-namespace-maps* controls whether the printer will print namespace map literal
 ; syntax. It defaults to false, but the REPL binds to true.
 ;;
(§ def ^:dynamic *print-namespace-maps* false)

(§ defn- print-sequential [^String begin, print-one, ^String sep, ^String end, sequence, ^Writer w]
    (binding [*print-level* (and *print-level* (dec *print-level*))]
        (if (and *print-level* (neg? *print-level*))
            (.write w "#")
            (do
                (.write w begin)
                (when-let [xs (seq sequence)]
                    (if *print-length*
                        (loop [[x & xs] xs print-length *print-length*]
                            (if (zero? print-length)
                                (.write w "...")
                                (do
                                    (print-one x w)
                                    (when xs
                                        (.write w sep)
                                        (recur xs (dec print-length))
                                    )
                                )
                            )
                        )
                        (loop [[x & xs] xs]
                            (print-one x w)
                            (when xs
                                (.write w sep)
                                (recur xs)
                            )
                        )
                    )
                )
                (.write w end)
            )
        )
    )
)

(§ defn print-simple [o, ^Writer w]
    (.write w (str o))
)

(§ defmethod print-method :default [o, ^Writer w]
    (if (instance? cloiure.lang.IObj o)
        (print-method (vary-meta o #(dissoc % :type)) w)
        (print-simple o w)
    )
)

(§ defmethod print-method nil [o, ^Writer w]
    (.write w "nil")
)

(§ defn print-ctor [o print-args ^Writer w]
    (.write w "#=(")
    (.write w (.getName ^Class (class o)))
    (.write w ". ")
    (print-args o w)
    (.write w ")")
)

(§ defn- print-tagged-object [o rep ^Writer w]
    (.write w "#object[")
    (let [c (class o)]
        (if (.isArray c)
            (print-method (.getName c) w)
            (.write w (.getName c))
        )
    )
    (.write w " ")
    (.write w (format "0x%x " (System/identityHashCode o)))
    (print-method rep w)
    (.write w "]")
)

(§ defn- print-object [o, ^Writer w]
    (print-tagged-object o (str o) w)
)

(§ defmethod print-method Object [o, ^Writer w]
    (print-object o w)
)

(§ defmethod print-method cloiure.lang.Keyword [o, ^Writer w]
    (.write w (str o))
)

(§ defmethod print-method Number [o, ^Writer w]
    (.write w (str o))
)

(§ defmethod print-method Double [o, ^Writer w]
    (cond
        (= Double/POSITIVE_INFINITY o) (.write w "##Inf")
        (= Double/NEGATIVE_INFINITY o) (.write w "##-Inf")
        (.isNaN ^Double o) (.write w "##NaN")
        :else (.write w (str o))
    )
)

(§ defmethod print-method Float [o, ^Writer w]
    (cond
        (= Float/POSITIVE_INFINITY o) (.write w "##Inf")
        (= Float/NEGATIVE_INFINITY o) (.write w "##-Inf")
        (.isNaN ^Float o) (.write w "##NaN")
        :else (.write w (str o))
    )
)

(§ defmethod print-method Boolean [o, ^Writer w]
    (.write w (str o))
)

(§ defmethod print-method cloiure.lang.Symbol [o, ^Writer w]
    (print-simple o w)
)

(§ defmethod print-method cloiure.lang.Var [o, ^Writer w]
    (print-simple o w)
)

(§ defmethod print-method cloiure.lang.ISeq [o, ^Writer w]
    (print-sequential "(" pr-on " " ")" o w)
)

(§ prefer-method print-method cloiure.lang.ISeq cloiure.lang.IPersistentCollection)
(§ prefer-method print-method cloiure.lang.ISeq java.util.Collection)

;;;
 ; Returns escape string for char or nil if none.
 ;;
(§ def ^String char-escape-string
    (hash-map
        \newline   "\\n"
        \tab       "\\t"
        \return    "\\r"
        \"         "\\\""
        \\         "\\\\"
        \formfeed  "\\f"
        \backspace "\\b"
    )
)

(§ defmethod print-method String [^String s, ^Writer w]
    (if *print-readably*
        (do
            (.append w \") ;; oops! "
            (dotimes [n (count s)]
                (let [c (.charAt s n) e (char-escape-string c)]
                    (if e (.write w e) (.append w c))
                )
            )
            (.append w \") ;; oops! "
        )
        (.write w s)
    )
    nil
)

(§ defmethod print-method cloiure.lang.IPersistentVector [v, ^Writer w]
    (print-sequential "[" pr-on " " "]" v w)
)

(§ defn- print-prefix-map [prefix m print-one w]
    (print-sequential
        (str prefix "{")
        (fn [e ^Writer w] (do (print-one (key e) w) (.append w \space) (print-one (val e) w)))
        ", "
        "}"
        (seq m) w
    )
)

(§ defn- print-map [m print-one w]
    (print-prefix-map nil m print-one w)
)

(§ defn- strip-ns [named]
    (if (symbol? named)
        (symbol nil (name named))
        (keyword nil (name named))
    )
)

;;;
 ; Returns [lifted-ns lifted-map] or nil if m can't be lifted.
 ;;
(§ defn- lift-ns [m]
    (when *print-namespace-maps*
        (loop [ns nil [[k v :as entry] & entries] (seq m) lm {}]
            (if entry
                (when (or (keyword? k) (symbol? k))
                    (if ns
                        (when (= ns (namespace k))
                            (recur ns entries (assoc lm (strip-ns k) v))
                        )
                        (when-let [new-ns (namespace k)]
                            (recur new-ns entries (assoc lm (strip-ns k) v))
                        )
                    )
                )
                [ns (apply conj (empty m) lm)]
            )
        )
    )
)

(§ defmethod print-method cloiure.lang.IPersistentMap [m, ^Writer w]
    (let [[ns lift-map] (lift-ns m)]
        (if ns
            (print-prefix-map (str "#:" ns) lift-map pr-on w)
            (print-map m pr-on w)
        )
    )
)

(§ prefer-method print-method cloiure.lang.IPersistentCollection java.util.Collection)
(§ prefer-method print-method cloiure.lang.IPersistentCollection java.util.Map)

(§ defmethod print-method java.util.List [c, ^Writer w]
    (if *print-readably*
        (print-sequential "(" pr-on " " ")" c w)
        (print-object c w)
    )
)

(§ defmethod print-method java.util.Map [m, ^Writer w]
    (if *print-readably*
        (print-map m pr-on w)
        (print-object m w)
    )
)

(§ defmethod print-method java.util.Set [s, ^Writer w]
    (if *print-readably*
        (print-sequential "#{" pr-on " " "}" (seq s) w)
        (print-object s w)
    )
)

(§ defmethod print-method cloiure.lang.IPersistentSet [s, ^Writer w]
    (print-sequential "#{" pr-on " " "}" (seq s) w)
)

;;;
 ; Returns name string for char or nil if none
 ;;
(§ def ^String char-name-string
    (hash-map
        \newline   "newline"
        \tab       "tab"
        \space     "space"
        \backspace "backspace"
        \formfeed  "formfeed"
        \return    "return"
    )
)

(§ defmethod print-method java.lang.Character [^Character c, ^Writer w]
    (if *print-readably*
        (do
            (.append w \\)
            (let [n (char-name-string c)]
                (if n (.write w n) (.append w c))
            )
        )
        (.append w c)
    )
    nil
)

(§ def primitives-classnames
    (hash-map
        Float/TYPE     "Float/TYPE"
        Integer/TYPE   "Integer/TYPE"
        Long/TYPE      "Long/TYPE"
        Boolean/TYPE   "Boolean/TYPE"
        Character/TYPE "Character/TYPE"
        Double/TYPE    "Double/TYPE"
        Byte/TYPE      "Byte/TYPE"
        Short/TYPE     "Short/TYPE"
    )
)

(§ defmethod print-method Class [^Class c, ^Writer w]
    (.write w (.getName c))
)

(§ defmethod print-method java.math.BigDecimal [b, ^Writer w]
    (.write w (str b))
    (.write w "M")
)

(§ defmethod print-method cloiure.lang.BigInt [b, ^Writer w]
    (.write w (str b))
    (.write w "N")
)

(§ defmethod print-method java.util.regex.Pattern [p ^Writer w]
    (.write w "#\"")
    (loop [[^Character c & r :as s] (seq (.pattern ^java.util.regex.Pattern p)) qmode false]
        (when s
            (condp = c
                \\
                    (let [[^Character c2 & r2] r]
                        (.append w \\)
                        (.append w c2)
                        (if qmode
                            (recur r2 (not= c2 \E))
                            (recur r2 (= c2 \Q))
                        )
                    )
                \" ;; oops! "
                    (do
                        (if qmode
                            (.write w "\\E\\\"\\Q")
                            (.write w "\\\"")
                        )
                        (recur r qmode)
                    )
                (do
                    (.append w c)
                    (recur r qmode)
                )
            )
        )
    )
    (.append w \") ;; oops! "
)

(§ defn- deref-as-map [^cloiure.lang.IDeref o]
    (let [pending (and (instance? cloiure.lang.IPending o) (not (.isRealized ^cloiure.lang.IPending o)))
          [ex val]
            (when-not pending
                (try
                    [false (deref o)]
                    (catch Throwable e
                        [true e]
                    )
                )
            )]
        (hash-map
            :status
                (cond
                    ex :failed
                    pending :pending
                    :else :ready
                )
            :val val
        )
    )
)

(§ defmethod print-method cloiure.lang.IDeref [o ^Writer w]
    (print-tagged-object o (deref-as-map o) w)
)

(§ defmethod print-method StackTraceElement [^StackTraceElement o ^Writer w]
    (print-method [(symbol (.getClassName o)) (symbol (.getMethodName o)) (.getFileName o) (.getLineNumber o)] w)
)

;;;
 ; Constructs a data representation for a StackTraceElement.
 ;;
(§ defn StackTraceElement->vec [^StackTraceElement o]
    [(symbol (.getClassName o)) (symbol (.getMethodName o)) (.getFileName o) (.getLineNumber o)]
)

;;;
 ; Constructs a data representation for a Throwable.
 ;;
(§ defn Throwable->map [^Throwable o]
    (let [base
            (fn [^Throwable t]
                (merge {:type (symbol (.getName (class t))) :message (.getLocalizedMessage t)}
                    (let-when [st (.getStackTrace t)] (pos? (alength st))
                        {:at (StackTraceElement->vec (aget st 0))}
                    )
                )
            )
          via
            (loop [via [] ^Throwable t o]
                (if t (recur (conj via t) (.getCause t)) via)
            )
          ^Throwable root (peek via)]
        (hash-map
            :cause (.getLocalizedMessage root)
            :via (vec (map base via))
            :trace (vec (map StackTraceElement->vec (.getStackTrace ^Throwable (or root o))))
        )
    )
)

(§ defn- print-throwable [^Throwable o ^Writer w]
    (.write w "#error {\n :cause ")
    (let [{:keys [cause via trace]} (Throwable->map o)
          print-via
            #(do
                (.write w "{:type ")
                (print-method (:type %) w)
                (.write w "\n   :message ")
                (print-method (:message %) w)
                (when-let [at (:at %)]
                    (.write w "\n   :at ")
                    (print-method (:at %) w)
                )
                (.write w "}")
            )]
        (print-method cause w)
        (when via
            (.write w "\n :via\n [")
            (when-let [fv (first via)]
                (print-via fv)
                (doseq [v (rest via)]
                    (.write w "\n  ")
                    (print-via v)
                )
            )
            (.write w "]")
        )
        (when trace
            (.write w "\n :trace\n [")
            (when-let [ft (first trace)]
                (print-method ft w)
                (doseq [t (rest trace)]
                    (.write w "\n  ")
                    (print-method t w)
                )
            )
            (.write w "]")
        )
    )
    (.write w "}")
)

(§ defmethod print-method Throwable [^Throwable o ^Writer w]
    (print-throwable o w)
)

(§ in-ns 'cloiure.core)

(§ import
    [java.lang.reflect Constructor Modifier]
    [cloiure.asm ClassVisitor ClassWriter Opcodes Type]
    [cloiure.asm.commons GeneratorAdapter Method]
    [cloiure.lang IPersistentMap]
)

(§ def ^:private prim->class
     (hash-map
        'int      Integer/TYPE   'ints     (Class/forName "[I")
        'long     Long/TYPE      'longs    (Class/forName "[J")
        'float    Float/TYPE     'floats   (Class/forName "[F")
        'double   Double/TYPE    'doubles  (Class/forName "[D")
        'void     Void/TYPE
        'short    Short/TYPE     'shorts   (Class/forName "[S")
        'boolean  Boolean/TYPE   'booleans (Class/forName "[Z")
        'byte     Byte/TYPE      'bytes    (Class/forName "[B")
        'char     Character/TYPE 'chars    (Class/forName "[C")
    )
)

(§ defn- ^Class the-class [x]
    (cond
        (class? x) x
        (contains? prim->class x) (prim->class x)
        :else (let [s (str x)] (cloiure.lang.RT/classForName (if (some #{\. \[} s) s (str "java.lang." s))))
    )
)

;;;
 ; Returns an asm Type object for c, which may be a primitive class (such as Integer/TYPE),
 ; any other class (such as Double), or a fully-qualified class name given as a string or symbol
 ; (such as 'java.lang.String).
 ;;
(§ defn- ^Type asm-type [c]
    (if (or (class? c) (prim->class c))
        (Type/getType (the-class c))
        (let [s (str c)]
            (Type/getObjectType (.replace (if (some #{\. \[} s) s (str "java.lang." s)) "." "/"))
        )
    )
)

(§ defn- generate-interface [{:keys [name extends methods]}]
    (when (some #(-> % first cloiure.core/name (.contains "-")) methods)
        (throw! "interface methods must not contain '-'")
    )
    (let [iname (.replace (str name) "." "/") cv (ClassWriter. ClassWriter/COMPUTE_MAXS)]
        (.visit cv Opcodes/V1_5 (+ Opcodes/ACC_PUBLIC Opcodes/ACC_ABSTRACT Opcodes/ACC_INTERFACE) iname nil "java/lang/Object"
            (when (seq extends)
                (into-array (map #(.getInternalName (asm-type %)) extends))
            )
        )
        (doseq [[mname pclasses rclass pmetas] methods]
            (let [md (Type/getMethodDescriptor (asm-type rclass) (if pclasses (into-array Type (map asm-type pclasses)) (make-array Type 0)))
                  mv (.visitMethod cv (+ Opcodes/ACC_PUBLIC Opcodes/ACC_ABSTRACT) (str mname) md nil nil)]
                (.visitEnd mv)
            )
        )
        (.visitEnd cv)
        [iname (.toByteArray cv)]
    )
)

;;;
 ; In all subsequent sections taking types, the primitive types can be
 ; referred to by their Java names (int, float etc), and classes in the
 ; java.lang package can be used without a package qualifier. All other
 ; classes must be fully qualified.
 ;
 ; Options should be a set of key/value pairs, all except for :name are
 ; optional:
 ;
 ; :name aname
 ;
 ; The package-qualified name of the class to be generated.
 ;
 ; :extends [interface ...]
 ;
 ; One or more interfaces, which will be extended by this interface.
 ;
 ; :methods [ [name [param-types] return-type], ...]
 ;
 ; This parameter is used to specify the signatures of the methods of the
 ; generated interface. Do not repeat superinterface signatures here.
 ;;
(§ defmacro gen-interface [& options]
    (let [options-map (apply hash-map options) [cname bytecode] (generate-interface options-map)]
        (.defineClass ^DynamicClassLoader *class-loader* (str (:name options-map)) bytecode)
    )
)

(§ in-ns 'cloiure.core)

;;;
 ; Convert a Cloiure namespace name to a legal Java package name.
 ;;
(§ defn namespace-munge [ns] (.replace (str ns) \- \_))

;; for now, built on gen-interface

;;;
 ; Creates a new Java interface with the given name and method sigs.
 ; The method return types and parameter types may be specified with
 ; type hints, defaulting to Object if omitted.
 ;
 ; (definterface MyInterface
 ;  (^int method1 [x])
 ;  (^Bar method2 [^Baz b ^Quux q]))
 ;;
(§ defmacro definterface [name & sigs]
    (let [tag (fn [x] (or (:tag (meta x)) Object))
          psig (fn [[name [& args]]] (vector name (vec (map tag args)) (tag name) (map meta args)))
          cname (with-meta (symbol (str (namespace-munge *ns*) "." name)) (meta name))]
        `(let []
            (gen-interface :name ~cname :methods ~(vec (map psig sigs)))
            (import ~cname)
        )
    )
)

(§ defn- parse-opts [s]
    (loop [opts {} [k v & rs :as s] s]
        (if (keyword? k)
            (recur (assoc opts k v) rs)
            [opts s]
        )
    )
)

(§ defn- parse-impls [specs]
    (loop [ret {} s specs]
        (if (seq s)
            (recur (assoc ret (first s) (take-while seq? (next s))) (drop-while seq? (next s)))
            ret
        )
    )
)

(§ defn- parse-opts+specs [opts+specs]
    (let [[opts specs] (parse-opts opts+specs)
          impls (parse-impls specs)
          interfaces
            (-> (map #(if (var? (resolve %)) (:on (deref (resolve %))) %) (keys impls))
                set (disj 'Object 'java.lang.Object) vec
            )
          methods
            (map (fn [[name params & body]] (cons name (maybe-destructured params body))) (apply concat (vals impls)))]
        (when-let [bad-opts (seq (keys opts))]
            (throw! (apply print-str "unsupported option(s) -" bad-opts))
        )
        [interfaces methods opts]
    )
)

;;;
 ; reify is a macro with the following structure:
 ;
 ; (reify options* specs*)
 ;
 ; Currently there are no options.
 ;
 ; Each spec consists of the protocol or interface name followed by
 ; zero or more method bodies:
 ;
 ; protocol-or-interface-or-Object
 ;  (methodName [args+] body)*
 ;
 ; Methods should be supplied for all methods of the desired protocol(s)
 ; and interface(s). You can also define overrides for methods of Object.
 ; Note that the first parameter must be supplied to correspond to the
 ; target object ('this' in Java parlance). Thus methods for interfaces
 ; will take one more argument than do the interface declarations. Note
 ; also that recur calls to the method head should *not* pass the target
 ; object, it will be supplied automatically and can not be substituted.
 ;
 ; The return type can be indicated by a type hint on the method name, and
 ; arg types can be indicated by a type hint on arg names. If you leave out
 ; all hints, reify will try to match on same name/arity method in the
 ; protocol(s)/interface(s) - this is preferred. If you supply any hints at
 ; all, no inference is done, so all hints (or default of Object) must be
 ; correct, for both arguments and return type. If a method is overloaded
 ; in a protocol/interface, multiple independent method definitions must be
 ; supplied. If overloaded with same arity in an interface you must specify
 ; complete hints to disambiguate - a missing hint implies Object.
 ;
 ; recur works to method heads. The method bodies of reify are lexical
 ; closures, and can refer to the surrounding local scope:
 ;
 ; (str (let [f "foo"]
 ;  (reify Object
 ;   (toString [this] f))))
 ; == "foo"
 ;
 ; (seq (let [f "foo"]
 ;  (reify cloiure.lang.Seqable
 ;   (seq [this] (seq f)))))
 ; == (\f \o \o)
 ;
 ; reify always implements cloiure.lang.IObj and transfers meta
 ; data of the form to the created object.
 ;
 ; (meta ^{:k :v} (reify Object (toString [this] "foo")))
 ; == {:k :v}
 ;;
(§ defmacro reify [& opts+specs]
    (let [[interfaces methods] (parse-opts+specs opts+specs)]
        (with-meta `(reify* ~interfaces ~@methods) (meta &form))
    )
)

(§ defn hash-combine [x y]
    (cloiure.lang.Util/hashCombine x (cloiure.lang.Util/hash y))
)

(§ defn munge [s]
    ((if (symbol? s) symbol str) (cloiure.lang.Compiler/munge (str s)))
)

(§ defn- validate-fields [fields name]
    (when-not (vector? fields)
        (throw (AssertionError. "No fields vector given."))
    )
    (let [specials '#{__meta __hash __hasheq __extmap}]
        (when (some specials fields)
            (throw (AssertionError. (str "The names in " specials " cannot be used as field names for types.")))
        )
    )
    (let [non-syms (remove symbol? fields)]
        (when (seq non-syms)
            (throw (AssertionError. (apply str "deftype fields must be symbols, " *ns* "." name " had: " (interpose ", " non-syms))))
        )
    )
)

;;;
 ; Do not use this directly - use deftype.
 ;;
(§ defn- emit-deftype* [tagname cname fields interfaces methods opts]
    (let [classname (with-meta (symbol (str (namespace-munge *ns*) "." cname)) (meta cname)) interfaces (conj interfaces 'cloiure.lang.IType)]
        `(deftype* ~(symbol (name (ns-name *ns*)) (name tagname))
            ~classname
            ~fields
            :implements ~interfaces
            ~@(mapcat identity opts)
            ~@methods
        )
    )
)

;;;
 ; (deftype name [fields*] options* specs*)
 ;
 ; Options are expressed as sequential keywords and arguments (in any order).
 ;
 ; Each spec consists of a protocol or interface name followed by zero
 ; or more method bodies:
 ;
 ; protocol-or-interface-or-Object
 ; (methodName [args*] body)*
 ;
 ; Dynamically generates compiled bytecode for class with the given name,
 ; in a package with the same name as the current namespace, the given fields,
 ; and, optionally, methods for protocols and/or interfaces.
 ;
 ; The class will have the (by default, immutable) fields named by fields, which
 ; can have type hints. Protocols/interfaces and methods are optional. The only
 ; methods that can be supplied are those declared in the protocols/interfaces.
 ; Note that method bodies are not closures, the local environment includes only
 ; the named fields, and those fields can be accessed directly. Fields can be
 ; qualified with the metadata :volatile-mutable true or :unsynchronized-mutable true,
 ; at which point (set! afield aval) will be supported in method bodies. Note well
 ; that mutable fields are extremely difficult to use correctly, and are present only
 ; to facilitate the building of higher level constructs, such as Cloiure's reference
 ; types, in Cloiure itself. They are for experts only - if the semantics and
 ; implications of :volatile-mutable or :unsynchronized-mutable are not immediately
 ; apparent to you, you should not be using them.
 ;
 ; Method definitions take the form:
 ;
 ; (methodname [args*] body)
 ;
 ; The argument and return types can be hinted on the arg and methodname
 ; symbols. If not supplied, they will be inferred, so type hints should be
 ; reserved for disambiguation.
 ;
 ; Methods should be supplied for all methods of the desired protocol(s)
 ; and interface(s). You can also define overrides for methods of Object.
 ; Note that a parameter must be supplied to correspond to the target object
 ; ('this' in Java parlance). Thus methods for interfaces will take one more
 ; argument than do the interface declarations. Note also that recur calls
 ; to the method head should *not* pass the target object, it will be
 ; supplied automatically and can not be substituted.
 ;
 ; In the method bodies, the (unqualified) name can be used to name the
 ; class (for calls to new, instance?, etc).
 ;
 ; One constructor will be defined, taking the designated fields. Note
 ; that the field names __meta, __extmap, __hash and __hasheq are currently
 ; reserved and should not be used when defining your own types.
 ;;
(§ defmacro deftype [name fields & opts+specs]
    (validate-fields fields name)
    (let [gname                     name
          [interfaces methods opts] (parse-opts+specs opts+specs)
          ns-part                   (namespace-munge *ns*)
          classname                 (symbol (str ns-part "." gname))]
        `(let []
            ~(emit-deftype* name gname (vec fields) (vec interfaces) methods opts)
            (import ~classname)
        )
    )
)

(§ defn- expand-method-impl-cache [^cloiure.lang.MethodImplCache cache c f]
    (if (.map cache)
        (let [cs (assoc (.map cache) c (cloiure.lang.MethodImplCache$Entry. c f))]
            (cloiure.lang.MethodImplCache. (.protocol cache) (.methodk cache) cs)
        )
        (let [cs (into1 {} (remove (fn [[c e]] (nil? e)) (map vec (partition 2 (.table cache)))))
              cs (assoc cs c (cloiure.lang.MethodImplCache$Entry. c f))]
            (if-let [[shift mask] (maybe-min-hash (map hash (keys cs)))]
                (let [table (make-array Object (* 2 (inc mask)))
                      table
                        (reduce1
                            (fn [^objects t [c e]]
                                (let [i (* 2 (int (shift-mask shift mask (hash c))))]
                                    (aset t i c)
                                    (aset t (inc i) e)
                                    t
                                )
                            )
                            table cs
                        )]
                    (cloiure.lang.MethodImplCache. (.protocol cache) (.methodk cache) shift mask table)
                )
                (cloiure.lang.MethodImplCache. (.protocol cache) (.methodk cache) cs)
            )
        )
    )
)

(§ defn- super-chain [^Class c]
    (when c
        (cons c (super-chain (.getSuperclass c)))
    )
)

(§ defn- pref
    ([] nil)
    ([a] a)
    ([^Class a ^Class b] (if (.isAssignableFrom a b) b a))
)

(§ defn find-protocol-impl [protocol x]
    (if (instance? (:on-interface protocol) x)
        x
        (let [c (class x) impl #(get (:impls protocol) %)]
            (or (impl c)
                (and c
                    (or (first (remove nil? (map impl (butlast (super-chain c)))))
                        (when-let [t (reduce1 pref (filter impl (disj (supers c) Object)))]
                            (impl t)
                        )
                        (impl Object)
                    )
                )
            )
        )
    )
)

(§ defn find-protocol-method [protocol methodk x]
    (get (find-protocol-impl protocol x) methodk)
)

(§ defn- protocol? [maybe-p]
    (boolean (:on-interface maybe-p))
)

(§ defn- implements? [protocol atype]
    (and atype (.isAssignableFrom ^Class (:on-interface protocol) atype))
)

;;;
 ; Returns true if atype extends protocol.
 ;;
(§ defn extends? [protocol atype]
    (boolean (or (implements? protocol atype) (get (:impls protocol) atype)))
)

;;;
 ; Returns a collection of the types explicitly extending protocol.
 ;;
(§ defn extenders [protocol] (keys (:impls protocol)))

;;;
 ; Returns true if x satisfies the protocol.
 ;;
(§ defn satisfies? [protocol x]
    (boolean (find-protocol-impl protocol x))
)

(§ defn -cache-protocol-fn [^cloiure.lang.AFunction pf x ^Class c ^cloiure.lang.IFn interf]
    (let [cache (.__methodImplCache pf)
          f (if (.isInstance c x) interf (find-protocol-method (.protocol cache) (.methodk cache) x))]
        (when-not f
            (throw!
                (str "no implementation of method: " (.methodk cache)
                     " of protocol: " (:var (.protocol cache))
                     " found for class: " (if (some? x) (.getName (class x)) "nil"))
            )
        )
        (set! (.__methodImplCache pf) (expand-method-impl-cache cache (class x) f))
        f
    )
)

(§ defn- emit-method-builder [on-interface method on-method arglists]
    (let [methodk (keyword method) gthis (with-meta (gensym) {:tag 'cloiure.lang.AFunction}) ginterf (gensym)]
        `(fn [cache#]
            (let [~ginterf
                    (fn ~@(map
                        (fn [args]
                            (let [gargs (map #(gensym (str "gf__" % "__")) args) target (first gargs)]
                                `([~@gargs] (. ~(with-meta target {:tag on-interface}) (~(or on-method method) ~@(rest gargs))))
                            )
                        )
                        arglists
                    ))
                  ^cloiure.lang.AFunction f#
                    (fn ~gthis ~@(map
                        (fn [args]
                            (let [gargs (map #(gensym (str "gf__" % "__")) args) target (first gargs)]
                                `([~@gargs]
                                    (let [cache# (.__methodImplCache ~gthis)
                                          f# (.fnFor cache# (cloiure.lang.Reflector/classOf ~target))]
                                        (if f#
                                            (f# ~@gargs)
                                            ((-cache-protocol-fn ~gthis ~target ~on-interface ~ginterf) ~@gargs)
                                        )
                                    )
                                )
                            )
                        )
                        arglists
                    ))]
                (set! (.__methodImplCache f#) cache#)
                f#
            )
        )
    )
)

(§ defn -reset-methods [protocol]
    (doseq [[^cloiure.lang.Var v build] (:method-builders protocol)]
        (let [cache (cloiure.lang.MethodImplCache. protocol (keyword (.sym v)))]
            (.bindRoot v (build cache))
        )
    )
)

(§ defn- assert-same-protocol [protocol-var method-syms]
    (doseq [m method-syms]
        (let [v (resolve m) p (:protocol (meta v))]
            (when (and v (bound? v) (not= protocol-var p))
                (binding [*out* *err*]
                    (println "Warning: protocol" protocol-var "is overwriting"
                        (if p
                            (str "method " (.sym v) " of protocol " (.sym p))
                            (str "function " (.sym v))
                        )
                    )
                )
            )
        )
    )
)

(§ defn- emit-protocol [name opts+sigs]
    (let [iname (symbol (str (munge (namespace-munge *ns*)) "." (munge name)))
          [opts sigs]
            (loop [opts {:on (list 'quote iname) :on-interface iname} sigs opts+sigs]
                (condp #(%1 %2) (first sigs)
                    keyword? (recur (assoc opts (first sigs) (second sigs)) (nnext sigs))
                    [opts sigs]
                )
            )
          sigs
            (when sigs
                (reduce1
                    (fn [m s]
                        (let [name-meta (meta (first s))
                              mname (with-meta (first s) nil)
                              arglists
                                (loop [as [] rs (rest s)]
                                    (if (vector? (first rs))
                                        (recur (conj as (first rs)) (next rs))
                                        (seq as)
                                    )
                                )]
                            (when (some #{0} (map count arglists))
                                (throw! (str "definition of function " mname " in protocol " name " must take at least one arg."))
                            )
                            (when (m (keyword mname))
                                (throw! (str "function " mname " in protocol " name " was redefined: specify all arities in single definition"))
                            )
                            (assoc m (keyword mname)
                                (merge name-meta {:name (vary-meta mname assoc :arglists arglists) :arglists arglists})
                            )
                        )
                    )
                    {} sigs
                )
            )
          meths
            (mapcat
                (fn [sig]
                    (let [m (munge (:name sig))]
                        (map #(vector m (vec (repeat (dec (count %))'Object)) 'Object) (:arglists sig))
                    )
                )
                (vals sigs)
            )]
        `(do
            (defonce ~name {})
            (gen-interface :name ~iname :methods ~meths)
            ~(when sigs
                `(#'assert-same-protocol (var ~name) '~(map :name (vals sigs)))
            )
            (alter-var-root (var ~name) merge
                (assoc ~opts
                    :sigs '~sigs
                    :var (var ~name)
                    :method-map
                        ~(and (:on opts)
                            (apply hash-map
                                (mapcat
                                    (fn [s] [(keyword (:name s)) (keyword (or (:on s) (:name s)))])
                                    (vals sigs)
                                )
                            )
                        )
                    :method-builders
                        ~(apply hash-map
                            (mapcat
                                (fn [s] [
                                    `(intern *ns* (with-meta '~(:name s) (merge '~s {:protocol (var ~name)})))
                                    (emit-method-builder (:on-interface opts) (:name s) (:on s) (:arglists s))
                                ])
                                (vals sigs)
                            )
                        )
                )
            )
            (-reset-methods ~name)
            '~name
        )
    )
)

;;;
 ; A protocol is a named set of named methods and their signatures:
 ;
 ; (defprotocol AProtocolName
 ;
 ;  ;; method signatures
 ;  (bar [this a b])
 ;  (baz [this a] [this a b] [this a b c]))
 ;
 ; No implementations are provided. The above yields a set of polymorphic
 ; functions and a protocol object. All are namespace-qualified by the ns
 ; enclosing the definition The resulting functions dispatch on the type of
 ; their first argument, which is required and corresponds to the implicit
 ; target object ('this' in Java parlance). defprotocol is dynamic, has no
 ; special compile-time effect, and defines no new types or classes.
 ; Implementations of the protocol methods can be provided using extend.
 ;
 ; defprotocol will automatically generate a corresponding interface, with
 ; the same name as the protocol, i.e. given a protocol: my.ns/Protocol, an
 ; interface: my.ns.Protocol. The interface will have methods corresponding
 ; to the protocol functions, and the protocol will automatically work with
 ; instances of the interface.
 ;
 ; Note that you should not use this interface with deftype or reify, as
 ; they support the protocol directly:
 ;
 ; (defprotocol P
 ;  (foo [this])
 ;  (bar-me [this] [this y]))
 ;
 ; (deftype Foo [a b c]
 ;  P
 ;  (foo [this] a)
 ;  (bar-me [this] b)
 ;  (bar-me [this y] (+ c y)))
 ;
 ; (bar-me (Foo. 1 2 3) 42)
 ; => 45
 ;
 ; (foo
 ;  (let [x 42]
 ;   (reify P
 ;    (foo [this] 17)
 ;    (bar-me [this] x)
 ;    (bar-me [this y] x))))
 ; => 17
 ;;
(§ defmacro defprotocol [name & opts+sigs]
    (emit-protocol name opts+sigs)
)

;;;
 ; Implementations of protocol methods can be provided using the extend
 ; construct:
 ;
 ; (extend AType
 ;  AProtocol
 ;  {:foo an-existing-fn
 ;   :bar (fn [a b] ...)
 ;   :baz (fn ([a]...) ([a b] ...)...)}
 ;  BProtocol
 ;   {...}
 ;  ...)
 ;
 ; extend takes a type/class (or interface, see below), and one or more
 ; protocol + method map pairs. It will extend the polymorphism of the
 ; protocol's methods to call the supplied methods when an AType is
 ; provided as the first argument.
 ;
 ; Method maps are maps of the keyword-ized method names to ordinary
 ; fns. This facilitates easy reuse of existing fns and fn maps, for
 ; code reuse/mixins without derivation or composition. You can extend
 ; an interface to a protocol. This is primarily to facilitate interop
 ; with the host (e.g. Java) but opens the door to incidental multiple
 ; inheritance of implementation since a class can inherit from more
 ; than one interface, both of which extend the protocol. It is TBD how
 ; to specify which impl to use. You can extend a protocol on nil.
 ;
 ; If you are supplying the definitions explicitly (i.e. not reusing
 ; exsting functions or mixin maps), you may find it more convenient to
 ; use the extend-type or extend-protocol macros.
 ;
 ; Note that multiple independent extend clauses can exist for the same
 ; type, not all protocols need be defined in a single extend call.
 ;
 ; See also: extends?, satisfies?, extenders.
 ;;
(§ defn extend [atype & proto+mmaps]
    (doseq [[proto mmap] (partition 2 proto+mmaps)]
        (when-not (protocol? proto)
            (throw! (str proto " is not a protocol"))
        )
        (when (implements? proto atype)
            (throw! (str atype " already directly implements " (:on-interface proto) " for protocol:" (:var proto)))
        )
        (-reset-methods (alter-var-root (:var proto) assoc-in [:impls atype] mmap))
    )
)

(§ defn- emit-impl [[p fs]]
    [p (zipmap (map #(-> % first keyword) fs) (map #(cons `fn (drop 1 %)) fs))]
)

(§ defn- emit-hinted-impl [c [p fs]]
    (let [hint
            (fn [specs]
                (let [specs (if (vector? (first specs)) (list specs) specs)]
                    (map
                        (fn [[[target & args] & body]]
                            (cons (apply vector (vary-meta target assoc :tag c) args) body)
                        )
                        specs
                    )
                )
            )]
        [p (zipmap (map #(-> % first name keyword) fs) (map #(cons `fn (hint (drop 1 %))) fs))]
    )
)

(§ defn- emit-extend-type [c specs]
    (let [impls (parse-impls specs)]
        `(extend ~c ~@(mapcat (partial emit-hinted-impl c) impls))
    )
)

;;;
 ; A macro that expands into an extend call. Useful when you are supplying
 ; the definitions explicitly inline, extend-type automatically creates
 ; the maps required by extend. Propagates the class as a type hint on the
 ; first argument of all fns.
 ;
 ; (extend-type MyType
 ;  Countable
 ;  (cnt [c] ...)
 ;  Foo
 ;  (bar [x y] ...)
 ;  (baz ([x] ...) ([x y & zs] ...)))
 ;
 ; expands into:
 ;
 ; (extend MyType
 ;  Countable
 ;  {:cnt (fn [c] ...)}
 ;  Foo
 ;  {:baz (fn ([x] ...) ([x y & zs] ...))
 ;   :bar (fn [x y] ...)})
 ;;
(§ defmacro extend-type [t & specs]
    (emit-extend-type t specs)
)

(§ defn- emit-extend-protocol [p specs]
    (let [impls (parse-impls specs)]
        `(do
            ~@(map (fn [[t fs]] `(extend-type ~t ~p ~@fs)) impls)
        )
    )
)

;;;
 ; Useful when you want to provide several implementations of the same
 ; protocol all at once. Takes a single protocol and the implementation
 ; of that protocol for one or more types. Expands into calls to
 ; extend-type:
 ;
 ; (extend-protocol Protocol
 ;  AType
 ;  (foo [x] ...)
 ;  (bar [x y] ...)
 ;  BType
 ;  (foo [x] ...)
 ;  (bar [x y] ...)
 ;  AClass
 ;  (foo [x] ...)
 ;  (bar [x y] ...)
 ;  nil
 ;  (foo [x] ...)
 ;  (bar [x y] ...))
 ;
 ; expands into:
 ;
 ; (do
 ;  (cloiure.core/extend-type AType Protocol
 ;   (foo [x] ...)
 ;   (bar [x y] ...))
 ;  (cloiure.core/extend-type BType Protocol
 ;   (foo [x] ...)
 ;   (bar [x y] ...))
 ;  (cloiure.core/extend-type AClass Protocol
 ;   (foo [x] ...)
 ;   (bar [x y] ...))
 ;  (cloiure.core/extend-type nil Protocol
 ;   (foo [x] ...)
 ;   (bar [x y] ...)))
 ;;
(§ defmacro extend-protocol [p & specs]
    (emit-extend-protocol p specs)
)

#_(ns cloiure.core.protocols)

;;;
 ; Protocol for collection types that can implement reduce faster
 ; than first/next recursion. Called by cloiure.core/reduce.
 ; Baseline implementation defined in terms of Iterable.
 ;;
(§ defprotocol CollReduce
    (coll-reduce [coll f] [coll f val])
)

;;;
 ; Protocol for concrete seq types that can reduce themselves faster
 ; than first/next recursion. Called by cloiure.core/reduce.
 ;;
(§ defprotocol InternalReduce
    (internal-reduce [seq f start])
)

(§ defn- seq-reduce
    ([coll f]
        (if-let [s (seq coll)]
            (internal-reduce (next s) f (first s))
            (f)
        )
    )
    ([coll f val]
        (let [s (seq coll)]
            (internal-reduce s f val)
        )
    )
)

(§ defn- iter-reduce
    ([^java.lang.Iterable coll f]
        (let [iter (.iterator coll)]
            (if (.hasNext iter)
                (loop [ret (.next iter)]
                    (if (.hasNext iter)
                        (let [ret (f ret (.next iter))]
                            (if (reduced? ret)
                                @ret
                                (recur ret)
                            )
                        )
                        ret
                    )
                )
                (f)
            )
        )
    )
    ([^java.lang.Iterable coll f val]
        (let [iter (.iterator coll)]
            (loop [ret val]
                (if (.hasNext iter)
                    (let [ret (f ret (.next iter))]
                        (if (reduced? ret)
                            @ret
                            (recur ret)
                        )
                    )
                    ret
                )
            )
        )
    )
)

;;;
 ; Reduces a seq, ignoring any opportunities to switch to
 ; a more specialized implementation.
 ;;
(§ defn- naive-seq-reduce [s f val]
    (loop [s (seq s) val val]
        (if s
            (let [ret (f val (first s))]
                (if (reduced? ret)
                    @ret
                    (recur (next s) ret)
                )
            )
            val
        )
    )
)

;;;
 ; Reduces via IReduceInit if possible, else naively.
 ;;
(§ defn- interface-or-naive-reduce [coll f val]
    (if (instance? cloiure.lang.IReduceInit coll)
        (.reduce ^cloiure.lang.IReduceInit coll f val)
        (naive-seq-reduce coll f val)
    )
)

(§ extend-protocol CollReduce
    nil
    (coll-reduce
        ([coll f] (f))
        ([coll f val] val)
    )

    Object
    (coll-reduce
        ([coll f] (seq-reduce coll f))
        ([coll f val] (seq-reduce coll f val))
    )

    cloiure.lang.IReduceInit
    (coll-reduce
        ([coll f] (.reduce ^cloiure.lang.IReduce coll f))
        ([coll f val] (.reduce coll f val))
    )

    ;; aseqs are iterable, masking internal-reducers
    cloiure.lang.ASeq
    (coll-reduce
        ([coll f] (seq-reduce coll f))
        ([coll f val] (seq-reduce coll f val))
    )

    ;; for range
    cloiure.lang.LazySeq
    (coll-reduce
        ([coll f] (seq-reduce coll f))
        ([coll f val] (seq-reduce coll f val))
    )

    ;; vector's chunked seq is faster than its iter
    cloiure.lang.PersistentVector
    (coll-reduce
        ([coll f] (seq-reduce coll f))
        ([coll f val] (seq-reduce coll f val))
    )

    Iterable
    (coll-reduce
        ([coll f] (iter-reduce coll f))
        ([coll f val] (iter-reduce coll f val))
    )

    cloiure.lang.APersistentMap$KeySeq
    (coll-reduce
        ([coll f] (iter-reduce coll f))
        ([coll f val] (iter-reduce coll f val))
    )

    cloiure.lang.APersistentMap$ValSeq
    (coll-reduce
        ([coll f] (iter-reduce coll f))
        ([coll f val] (iter-reduce coll f val))
    )
)

(§ extend-protocol InternalReduce
    nil
    (internal-reduce [s f val] val)

    ;; handles vectors and ranges
    cloiure.lang.IChunkedSeq
    (internal-reduce [s f val]
        (if-let [s (seq s)]
            (if (chunked-seq? s)
                (let [ret (.reduce (chunk-first s) f val)]
                    (if (reduced? ret)
                        @ret
                        (recur (chunk-next s) f ret)
                    )
                )
                (interface-or-naive-reduce s f val)
            )
            val
        )
    )

    cloiure.lang.StringSeq
    (internal-reduce [str-seq f val]
        (let [s (.s str-seq) len (.length s)]
            (loop [i (.i str-seq) val val]
                (if (< i len)
                    (let [ret (f val (.charAt s i))]
                        (if (reduced? ret)
                            @ret
                            (recur (inc i) ret)
                        )
                    )
                    val
                )
            )
        )
    )

    java.lang.Object
    (internal-reduce [s f val]
        (loop [cls (class s) s s f f val val]
            (if-let [s (seq s)]
                (if (identical? (class s) cls)
                    (let [ret (f val (first s))]
                        (if (reduced? ret)
                            @ret
                            (recur cls (next s) f ret)
                        )
                    )
                    (interface-or-naive-reduce s f val)
                )
                val
            )
        )
    )
)

;;;
 ; Protocol for concrete associative types that can reduce themselves
 ; via a function of key and val faster than first/next recursion over
 ; map entries. Called by cloiure.core/reduce-kv, and has same
 ; semantics (just different arg order).
 ;;
(§ defprotocol IKVReduce
    (kv-reduce [amap f init])
)

(§ in-ns 'cloiure.core)

(§ import [cloiure.lang Murmur3])

(§ deftype VecNode [edit arr])

(§ def EMPTY-NODE (VecNode. nil (object-array 32)))

(§ definterface IVecImpl
    (^int tailoff [])
    (arrayFor [^int i])
    (pushTail [^int level ^cloiure.core.VecNode parent ^cloiure.core.VecNode tailnode])
    (popTail [^int level node])
    (newPath [edit ^int level node])
    (doAssoc [^int level node ^int i val])
)

(§ definterface ArrayManager
    (array [^int size])
    (^int alength [arr])
    (aclone [arr])
    (aget [arr ^int i])
    (aset [arr ^int i val])
)

(§ deftype ArrayChunk [^cloiure.core.ArrayManager am arr ^int off ^int end]
    cloiure.lang.Indexed
    (nth [_ i] (.aget am arr (+ off i)))
    (count [_] (- end off))

    cloiure.lang.IChunk
    (dropFirst [_]
        (if (= off end)
            (throw! "dropFirst of empty chunk")
            (ArrayChunk. am arr (inc off) end)
        )
    )
    (reduce [_ f init]
        (loop [ret init i off]
            (if (< i end)
                (let [ret (f ret (.aget am arr i))]
                    (if (reduced? ret)
                        ret
                        (recur ret (inc i))
                    )
                )
                ret
            )
        )
    )
)

(§ deftype VecSeq [^cloiure.core.ArrayManager am ^cloiure.core.IVecImpl vec anode ^int i ^int offset]
    cloiure.core.protocols.InternalReduce
    (internal-reduce [_ f val]
        (loop [result val aidx (+ i offset)]
            (if (< aidx (count vec))
                (let [node (.arrayFor vec aidx)
                      result
                        (loop [result result node-idx (bit-and 0x1f aidx)]
                            (if (< node-idx (.alength am node))
                                (let [result (f result (.aget am node node-idx))]
                                    (if (reduced? result)
                                        result
                                        (recur result (inc node-idx))
                                    )
                                )
                                result
                            )
                        )]
                    (if (reduced? result)
                        @result
                        (recur result (bit-and 0xffe0 (+ aidx 32)))
                    )
                )
                result
            )
        )
    )

    cloiure.lang.ISeq
    (first [_] (.aget am anode offset))
    (next [this]
        (if (< (inc offset) (.alength am anode))
            (VecSeq. am vec anode i (inc offset))
            (.chunkedNext this)
        )
    )
    (rest [this] (or (next this) ()))
    (cons [this o] (cloiure.lang.Cons. o this))
    (count [this]
        (loop [i 1 s (next this)]
            (if s
                (if (instance? cloiure.lang.Counted s)
                    (+ i (count s))
                    (recur (inc i) (next s))
                )
                i
            )
        )
    )
    (equiv [this o]
        (cond
            (identical? this o)
                true
            (or (instance? cloiure.lang.Sequential o) (instance? java.util.List o))
                (loop [me this you (seq o)]
                    (if (nil? me)
                        (nil? you)
                        (and (cloiure.lang.Util/equiv (first me) (first you))
                            (recur (next me) (next you))
                        )
                    )
                )
            :else
                false
        )
    )
    (empty [_] cloiure.lang.PersistentList/EMPTY)

    cloiure.lang.Seqable
    (seq [this] this)

    cloiure.lang.IChunkedSeq
    (chunkedFirst [_]
        (ArrayChunk. am anode offset (.alength am anode))
    )
    (chunkedNext [_]
        (let [nexti (+ i (.alength am anode))]
            (when (< nexti (count vec))
                (VecSeq. am vec (.arrayFor vec nexti) nexti 0)
            )
        )
    )
    (chunkedMore [this]
        (let [s (.chunkedNext this)]
            (or s cloiure.lang.PersistentList/EMPTY)
        )
    )
)

(§ defmethod print-method ::VecSeq [v w]
    ((get (methods print-method) cloiure.lang.ISeq) v w)
)

(§ deftype Vec [^cloiure.core.ArrayManager am ^int cnt ^int shift ^cloiure.core.VecNode root tail _meta]
    Object
    (equals [this o]
        (cond
            (identical? this o)
                true
            (instance? cloiure.lang.IPersistentVector o)
                (and (= cnt (count o))
                    (loop [i (int 0)]
                        (cond
                            (= i cnt) true
                            (.equals (nth this i) (nth o i)) (recur (inc i))
                            :else false
                        )
                    )
                )
            (or (instance? cloiure.lang.Sequential o) (instance? java.util.List o))
                (if-let [st (seq this)]
                    (.equals st (seq o))
                    (nil? (seq o))
                )
            :else
                false
        )
    )

    ;; todo - cache
    (hashCode [this]
        (loop [hash (int 1) i (int 0)]
            (if (= i cnt)
                hash
                (let [val (nth this i)]
                    (recur (unchecked-add-int (unchecked-multiply-int 31 hash) (cloiure.lang.Util/hash val)) (inc i))
                )
            )
        )
    )

    ;; todo - cache
    cloiure.lang.IHashEq
    (hasheq [this] (Murmur3/hashOrdered this))

    cloiure.lang.Counted
    (count [_] cnt)

    cloiure.lang.IMeta
    (meta [_] _meta)

    cloiure.lang.IObj
    (withMeta [_ m] (Vec. am cnt shift root tail m))

    cloiure.lang.Indexed
    (nth [this i]
        (let [a (.arrayFor this i)]
            (.aget am a (bit-and i (int 0x1f)))
        )
    )
    (nth [this i not-found]
        (let [z (int 0)]
            (if (and (>= i z) (< i (count this)))
                (nth this i)
                not-found
            )
        )
    )

    cloiure.lang.IPersistentCollection
    (cons [this val]
        (if (< (- cnt (.tailoff this)) (int 32))
            (let [new-tail (.array am (inc (.alength am tail)))]
                (System/arraycopy tail 0 new-tail 0 (.alength am tail))
                (.aset am new-tail (.alength am tail) val)
                (Vec. am (inc cnt) shift root new-tail (meta this))
            )
            (let [tail-node (VecNode. (.edit root) tail)]
                (if (> (bit-shift-right cnt (int 5)) (bit-shift-left (int 1) shift)) ;; overflow root?
                    (let [new-root (VecNode. (.edit root) (object-array 32))]
                        (-> ^objects (.arr new-root)
                            (aset 0 root)
                            (aset 1 (.newPath this (.edit root) shift tail-node))
                        )
                        (Vec. am (inc cnt) (+ shift (int 5)) new-root (let [tl (.array am 1)] (.aset am tl 0 val) tl) (meta this))
                    )
                    (Vec. am (inc cnt) shift (.pushTail this shift root tail-node) (let [tl (.array am 1)] (.aset am tl 0 val) tl) (meta this))
                )
            )
        )
    )
    (empty [_] (Vec. am 0 5 EMPTY-NODE (.array am 0) nil))
    (equiv [this o]
        (cond
            (instance? cloiure.lang.IPersistentVector o)
                (and
                    (= cnt (count o))
                    (loop [i (int 0)]
                        (cond
                            (= i cnt) true
                            (= (nth this i) (nth o i)) (recur (inc i))
                            :else false
                        )
                    )
                )
            (or (instance? cloiure.lang.Sequential o) (instance? java.util.List o))
                (cloiure.lang.Util/equiv (seq this) (seq o))
            :else
                false
        )
    )

    cloiure.lang.IPersistentStack
    (peek [this]
        (when (pos? cnt)
            (nth this (dec cnt))
        )
    )
    (pop [this]
        (cond
            (zero? cnt)
                (throw! "can't pop empty vector")
            (= 1 cnt)
                (Vec. am 0 5 EMPTY-NODE (.array am 0) (meta this))
            (> (- cnt (.tailoff this)) 1)
                (let [new-tail (.array am (dec (.alength am tail)))]
                    (System/arraycopy tail 0 new-tail 0 (.alength am new-tail))
                    (Vec. am (dec cnt) shift root new-tail (meta this))
                )
            :else
                (let [new-tail (.arrayFor this (- cnt 2)) new-root ^cloiure.core.VecNode (.popTail this shift root)]
                    (cond
                        (nil? new-root)
                            (Vec. am (dec cnt) shift EMPTY-NODE new-tail (meta this))
                        (and (> shift 5) (nil? (aget ^objects (.arr new-root) 1)))
                            (Vec. am (dec cnt) (- shift 5) (aget ^objects (.arr new-root) 0) new-tail (meta this))
                        :else
                            (Vec. am (dec cnt) shift new-root new-tail (meta this))
                    )
                )
        )
    )

    cloiure.lang.IPersistentVector
    (assocN [this i val]
        (cond
            (and (<= (int 0) i) (< i cnt))
                (if (>= i (.tailoff this))
                    (let [new-tail (.array am (.alength am tail))]
                        (System/arraycopy tail 0 new-tail 0 (.alength am tail))
                        (.aset am new-tail (bit-and i (int 0x1f)) val)
                        (Vec. am cnt shift root new-tail (meta this))
                    )
                    (Vec. am cnt shift (.doAssoc this shift root i val) tail (meta this))
                )
            (= i cnt)
                (.conj this val)
            :else
                (throw (IndexOutOfBoundsException.))
        )
    )
    (length [_] cnt)

    cloiure.lang.Reversible
    (rseq [this]
        (if (pos? (count this))
            (cloiure.lang.APersistentVector$RSeq. this (dec (count this)))
            nil
        )
    )

    cloiure.lang.Associative
    (assoc [this k v]
        (if (cloiure.lang.Numbers/isInteger k)
            (.assocN this k v)
            (throw! "key must be integer")
        )
    )
    (containsKey [this k]
        (and (cloiure.lang.Numbers/isInteger k)
            (<= 0 (int k))
            (< (int k) cnt)
        )
    )
    (entryAt [this k]
        (if (.containsKey this k)
            (cloiure.lang.MapEntry/create k (nth this (int k)))
            nil
        )
    )

    cloiure.lang.ILookup
    (valAt [this k not-found]
        (when (cloiure.lang.Numbers/isInteger k) => not-found
            (let-when [i (int k)] (< -1 i cnt) => not-found
                (nth this i)
            )
        )
    )
    (valAt [this k] (.valAt this k nil))

    cloiure.lang.IFn
    (invoke [this k]
        (when (cloiure.lang.Numbers/isInteger k) => (throw! "key must be integer")
            (let-when [i (int k)] (< -1 i cnt) => (throw (IndexOutOfBoundsException.))
                (nth this i)
            )
        )
    )

    cloiure.lang.Seqable
    (seq [this]
        (if (zero? cnt)
            nil
            (VecSeq. am this (.arrayFor this 0) 0 0)
        )
    )

    cloiure.lang.Sequential ;; marker, no methods

    cloiure.core.IVecImpl
    (tailoff [_] (- cnt (.alength am tail)))
    (arrayFor [this i]
        (if (and (<= (int 0) i) (< i cnt))
            (if (>= i (.tailoff this))
                tail
                (loop [node root level shift]
                    (if (zero? level)
                        (.arr node)
                        (recur (aget ^objects (.arr node) (bit-and (bit-shift-right i level) (int 0x1f))) (- level (int 5)))
                    )
                )
            )
            (throw (IndexOutOfBoundsException.))
        )
    )
    (pushTail [this level parent tailnode]
        (let [subidx (bit-and (bit-shift-right (dec cnt) level) (int 0x1f))
              parent ^cloiure.core.VecNode parent
              ret (VecNode. (.edit parent) (aclone ^objects (.arr parent)))
              node-to-insert
                (if (= level (int 5))
                    tailnode
                    (let [child (aget ^objects (.arr parent) subidx)]
                        (if child
                            (.pushTail this (- level (int 5)) child tailnode)
                            (.newPath this (.edit root) (- level (int 5)) tailnode)
                        )
                    )
                )]
            (aset ^objects (.arr ret) subidx node-to-insert)
            ret
        )
    )
    (popTail [this level node]
        (let [node ^cloiure.core.VecNode node
              subidx (bit-and (bit-shift-right (- cnt (int 2)) level) (int 0x1f))]
            (cond
                (> level 5)
                    (let [new-child (.popTail this (- level 5) (aget ^objects (.arr node) subidx))]
                        (if (and (nil? new-child) (zero? subidx))
                            nil
                            (let [arr (aclone ^objects (.arr node))]
                                (aset arr subidx new-child)
                                (VecNode. (.edit root) arr)
                            )
                        )
                    )
                (zero? subidx)
                    nil
                :else
                    (let [arr (aclone ^objects (.arr node))]
                        (aset arr subidx nil)
                        (VecNode. (.edit root) arr)
                    )
            )
        )
    )
    (newPath [this edit ^int level node]
        (if (zero? level)
            node
            (let [ret (VecNode. edit (object-array 32))]
                (aset ^objects (.arr ret) 0 (.newPath this edit (- level (int 5)) node))
                ret
            )
        )
    )
    (doAssoc [this level node i val]
        (let [node ^cloiure.core.VecNode node]
            (if (zero? level)
                ;; on this branch, array will need val type
                (let [arr (.aclone am (.arr node))]
                    (.aset am arr (bit-and i (int 0x1f)) val)
                    (VecNode. (.edit node) arr)
                )
                (let [arr (aclone ^objects (.arr node))
                      subidx (bit-and (bit-shift-right i level) (int 0x1f))]
                    (aset arr subidx (.doAssoc this (- level (int 5)) (aget arr subidx) i val))
                    (VecNode. (.edit node) arr)
                )
            )
        )
    )

    java.lang.Comparable
    (compareTo [this o]
        (if (identical? this o)
            0
            (let [^cloiure.lang.IPersistentVector v (cast cloiure.lang.IPersistentVector o) vcnt (count v)]
                (cond
                    (< cnt vcnt)
                        -1
                    (> cnt vcnt)
                        1
                    :else
                        (loop [i (int 0)]
                            (if (= i cnt)
                                0
                                (let [comp (cloiure.lang.Util/compare (nth this i) (nth v i))]
                                    (if (= 0 comp)
                                        (recur (inc i))
                                        comp
                                    )
                                )
                            )
                        )
                )
            )
        )
    )

    java.lang.Iterable
    (iterator [this]
        (let [i (java.util.concurrent.atomic.AtomicInteger. 0)]
            (reify java.util.Iterator
                (hasNext [_] (< (.get i) cnt))
                (next [_]
                    (try
                        (nth this (dec (.incrementAndGet i)))
                        (catch IndexOutOfBoundsException _
                            (throw (java.util.NoSuchElementException.))
                        )
                    )
                )
            )
        )
    )

    java.util.Collection
    (contains [this o] (boolean (some #(= % o) this)))
    (toArray [this] (into-array Object this))
    (toArray [this arr]
        (when (<= cnt (count arr)) => (into-array Object this)
            (dotimes [i cnt]
                (aset arr i (nth this i))
            )
            arr
        )
    )
    (size [_] cnt)

    java.util.List
    (get [this i] (nth this i))
)

(§ defmethod print-method ::Vec [v w]
    ((get (methods print-method) cloiure.lang.IPersistentVector) v w)
)

(§ defmacro ^:private mk-am [t]
    (let [garr (gensym) tgarr (with-meta garr {:tag (symbol (str t "s"))})]
        `(reify cloiure.core.ArrayManager
            (array [_ size#] (~(symbol (str t "-array")) size#))
            (alength [_ ~garr] (alength ~tgarr))
            (aclone [_ ~garr] (aclone ~tgarr))
            (aget [_ ~garr i#] (aget ~tgarr i#))
            (aset [_ ~garr i# val#] (aset ~tgarr i# (~t val#)))
        )
    )
)

(§ def ^:private ams
    (hash-map
        :int     (mk-am int)
        :long    (mk-am long)
        :float   (mk-am float)
        :double  (mk-am double)
        :byte    (mk-am byte)
        :short   (mk-am short)
        :char    (mk-am char)
        :boolean (mk-am boolean)
    )
)

(§ defmacro ^:private ams-check [t]
    `(let [am# (ams ~t)]
        (if am#
            am#
            (throw! (str "unrecognized type " ~t))
        )
    )
)

;;;
 ; Creates a new vector of a single primitive type t, where t is one
 ; of :int :long :float :double :byte :short :char or :boolean. The
 ; resulting vector complies with the interface of vectors in general,
 ; but stores the values unboxed internally.
 ;
 ; Optionally takes one or more elements to populate the vector.
 ;;
(§ defn vector-of
    ([t]
        (let [^cloiure.core.ArrayManager am (ams-check t)]
            (Vec. am 0 5 EMPTY-NODE (.array am 0) nil)
        )
    )
    ([t x1]
        (let [^cloiure.core.ArrayManager am (ams-check t) arr (.array am 1)]
            (.aset am arr 0 x1)
            (Vec. am 1 5 EMPTY-NODE arr nil)
        )
    )
    ([t x1 x2]
        (let [^cloiure.core.ArrayManager am (ams-check t) arr (.array am 2)]
            (.aset am arr 0 x1)
            (.aset am arr 1 x2)
            (Vec. am 2 5 EMPTY-NODE arr nil)
        )
    )
    ([t x1 x2 x3]
        (let [^cloiure.core.ArrayManager am (ams-check t) arr (.array am 3)]
            (.aset am arr 0 x1)
            (.aset am arr 1 x2)
            (.aset am arr 2 x3)
            (Vec. am 3 5 EMPTY-NODE arr nil)
        )
    )
    ([t x1 x2 x3 x4]
        (let [^cloiure.core.ArrayManager am (ams-check t) arr (.array am 4)]
            (.aset am arr 0 x1)
            (.aset am arr 1 x2)
            (.aset am arr 2 x3)
            (.aset am arr 3 x4)
            (Vec. am 4 5 EMPTY-NODE arr nil)
        )
    )
    ([t x1 x2 x3 x4 & xn]
        (loop [v (vector-of t x1 x2 x3 x4) xn xn]
            (if xn
                (recur (conj v (first xn)) (next xn))
                v
            )
        )
    )
)

(§ in-ns 'cloiure.core)

;; redefine reduce with internal-reduce

;;;
 ; f should be a function of 2 arguments. If val is not supplied, returns
 ; the result of applying f to the first 2 items in coll, then applying f
 ; to that result and the 3rd item, etc. If coll contains no items, f must
 ; accept no arguments as well, and reduce returns the result of calling f
 ; with no arguments. If coll has only 1 item, it is returned and f is not
 ; called. If val is supplied, returns the result of applying f to val and
 ; the first item in coll, then applying f to that result and the 2nd item,
 ; etc. If coll contains no items, returns val and f is not called.
 ;;
(§ defn reduce
    ([f coll]
        (if (instance? cloiure.lang.IReduce coll)
            (.reduce ^cloiure.lang.IReduce coll f)
            (cloiure.core.protocols/coll-reduce coll f)
        )
    )
    ([f val coll]
        (if (instance? cloiure.lang.IReduceInit coll)
            (.reduce ^cloiure.lang.IReduceInit coll f val)
            (cloiure.core.protocols/coll-reduce coll f val)
        )
    )
)

(§ extend-protocol cloiure.core.protocols/IKVReduce
    nil
    (kv-reduce [_ f init] init)

    ;; slow path default
    cloiure.lang.IPersistentMap
    (kv-reduce [amap f init] (reduce (fn [ret [k v]] (f ret k v)) init amap))

    cloiure.lang.IKVReduce
    (kv-reduce [amap f init] (.kvreduce amap f init))
)

;;;
 ; Reduces an associative collection. f should be a function of 3 arguments.
 ; Returns the result of applying f to init, the first key and the first value
 ; in coll, then applying f to that result and the 2nd key and value, etc.
 ; If coll contains no entries, returns init and f is not called. Note that
 ; reduce-kv is supported on vectors, where the keys will be the ordinals.
 ;;
(§ defn reduce-kv [f init coll]
    (cloiure.core.protocols/kv-reduce coll f init)
)

;;;
 ; Takes a reducing function f of 2 args and returns a fn suitable for
 ; transduce by adding an arity-1 signature that calls cf (default -
 ; identity) on the result argument.
 ;;
(§ defn completing
    ([f] (completing f identity))
    ([f cf]
        (fn
            ([] (f))
            ([x] (cf x))
            ([x y] (f x y))
        )
    )
)

;;;
 ; reduce with a transformation of f (xf). If init is not supplied, (f) will
 ; be called to produce it. f should be a reducing step function that accepts
 ; both 1 and 2 arguments, if it accepts only 2 you can add the arity-1 with
 ; 'completing'. Returns the result of applying (the transformed) xf to init
 ; and the first item in coll, then applying xf to that result and the 2nd
 ; item, etc. If coll contains no items, returns init and f is not called.
 ; Note that certain transforms may inject or skip items.
 ;;
(§ defn transduce
    ([xform f coll] (transduce xform f (f) coll))
    ([xform f init coll]
        (let [f (xform f)
              ret
                (if (instance? cloiure.lang.IReduceInit coll)
                    (.reduce ^cloiure.lang.IReduceInit coll f init)
                    (cloiure.core.protocols/coll-reduce coll f init)
                )]
            (f ret)
        )
    )
)

;;;
 ; Returns a new coll consisting of to-coll with all of the items of from-coll
 ; conjoined. A transducer may be supplied.
 ;;
(§ defn into
    ([] [])
    ([to] to)
    ([to from]
        (if (instance? cloiure.lang.IEditableCollection to)
            (with-meta (persistent! (reduce conj! (transient to) from)) (meta to))
            (reduce conj to from)
        )
    )
    ([to xform from]
        (if (instance? cloiure.lang.IEditableCollection to)
            (with-meta (persistent! (transduce xform conj! (transient to) from)) (meta to))
            (transduce xform conj to from)
        )
    )
)

;;;
 ; Returns a vector consisting of the result of applying f to the set of first
 ; items of each coll, followed by applying f to the set of second items in each
 ; coll, until any one of the colls is exhausted. Any remaining items in other
 ; colls are ignored. Function f should accept number-of-colls arguments.
 ;;
(§ defn mapv
    ([f coll]
        (-> (reduce (fn [v o] (conj! v (f o))) (transient []) coll) persistent!)
    )
    ([f c1 c2]
        (into [] (map f c1 c2))
    )
    ([f c1 c2 c3]
        (into [] (map f c1 c2 c3))
    )
    ([f c1 c2 c3 & colls]
        (into [] (apply map f c1 c2 c3 colls))
    )
)

;;;
 ; Returns a vector of the items in coll for which (pred item)
 ; returns logical true. pred must be free of side-effects.
 ;;
(§ defn filterv [pred coll]
    (-> (reduce (fn [v o] (if (pred o) (conj! v o) v)) (transient []) coll) persistent!)
)

;;;
 ; Takes any nested combination of sequential things (lists, vectors, etc.)
 ; and returns their contents as a single, flat sequence.
 ; (flatten nil) returns an empty sequence.
 ;;
(§ defn flatten [x]
    (filter (complement sequential?) (rest (tree-seq sequential? seq x)))
)

;;;
 ; Returns a map of the elements of coll keyed by the result of
 ; f on each element. The value at each key will be a vector of the
 ; corresponding elements, in the order they appeared in coll.
 ;;
(§ defn group-by [f coll]
    (persistent!
        (reduce
            (fn [ret x]
                (let [k (f x)]
                    (assoc! ret k (conj (get ret k []) x))
                )
            )
            (transient {}) coll
        )
    )
)

;;;
 ; Applies f to each value in coll, splitting it each time f returns
 ; a new value. Returns a lazy seq of partitions. Returns a stateful
 ; transducer when no collection is provided.
 ;;
(§ defn partition-by
    ([f]
        (fn [rf]
            (let [l (java.util.ArrayList.) pv (volatile! ::none)]
                (fn
                    ([] (rf))
                    ([result]
                        (let [result
                                (if (.isEmpty l)
                                    result
                                    (let [v (vec (.toArray l))]
                                        (.clear l) ;; clear first!
                                        (unreduced (rf result v))
                                    )
                                )]
                            (rf result)
                        )
                    )
                    ([result input]
                        (let [pval @pv val (f input)]
                            (vreset! pv val)
                            (if (or (identical? pval ::none) (= val pval))
                                (do
                                    (.add l input)
                                    result
                                )
                                (let [v (vec (.toArray l))]
                                    (.clear l)
                                    (let [ret (rf result v)]
                                        (when-not (reduced? ret)
                                            (.add l input)
                                        )
                                        ret
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
    ([f coll]
        (lazy-seq
            (when-let [s (seq coll)]
                (let [fst (first s)
                      fv (f fst)
                      run (cons fst (take-while #(= fv (f %)) (next s)))]
                    (cons run (partition-by f (seq (drop (count run) s))))
                )
            )
        )
    )
)

;;;
 ; Returns a map from distinct items in coll to the number of times they appear.
 ;;
(§ defn frequencies [coll]
    (persistent!
        (reduce
            (fn [counts x]
                (assoc! counts x (inc (get counts x 0)))
            )
            (transient {}) coll
        )
    )
)

;;;
 ; Returns a lazy seq of the intermediate values of the reduction (as per reduce)
 ; of coll by f, starting with init.
 ;;
(§ defn reductions
    ([f coll]
        (lazy-seq
            (if-let [s (seq coll)]
                (reductions f (first s) (rest s))
                (list (f))
            )
        )
    )
    ([f init coll]
        (if (reduced? init)
            (list @init)
            (cons init
                (lazy-seq
                    (when-let [s (seq coll)]
                        (reductions f (f init (first s)) (rest s))
                    )
                )
            )
        )
    )
)

;;;
 ; Return a random element of the (sequential) collection. Will have
 ; the same performance characteristics as nth for the given collection.
 ;;
(§ defn rand-nth [coll]
    (nth coll (rand-int (count coll)))
)

;;;
 ; Returns a lazy sequence of lists like partition, but may include
 ; partitions with fewer than n items at the end. Returns a stateful
 ; transducer when no collection is provided.
 ;;
(§ defn partition-all
    ([^long n]
        (fn [rf]
            (let [l (java.util.ArrayList. n)]
                (fn
                    ([] (rf))
                    ([result]
                        (let [result
                                (if (.isEmpty l)
                                    result
                                    (let [v (vec (.toArray l))]
                                        (.clear l) ;; clear first!
                                        (unreduced (rf result v))
                                    )
                                )]
                            (rf result)
                        )
                    )
                    ([result input]
                        (.add l input)
                        (if (= n (.size l))
                            (let [v (vec (.toArray l))]
                                (.clear l)
                                (rf result v)
                            )
                            result
                        )
                    )
                )
            )
        )
    )
    ([n coll]
        (partition-all n n coll)
    )
    ([n step coll]
        (lazy-seq
            (when-let [s (seq coll)]
                (let [seg (doall (take n s))]
                    (cons seg (partition-all n step (nthrest s step)))
                )
            )
        )
    )
)

;;;
 ; Return a random permutation of coll.
 ;;
(§ defn shuffle [^java.util.Collection coll]
    (let [al (java.util.ArrayList. coll)]
        (java.util.Collections/shuffle al)
        (cloiure.lang.RT/vector (.toArray al))
    )
)

;;;
 ; Returns a lazy sequence consisting of the result of applying f to 0
 ; and the first item of coll, followed by applying f to 1 and the second
 ; item in coll, etc, until coll is exhausted. Thus function f should
 ; accept 2 arguments, index and item. Returns a stateful transducer when
 ; no collection is provided.
 ;;
(§ defn map-indexed
    ([f]
        (fn [rf]
            (let [i (volatile! -1)]
                (fn
                    ([] (rf))
                    ([result] (rf result))
                    ([result input] (rf result (f (vswap! i inc) input)))
                )
            )
        )
    )
    ([f coll]
        (letfn [(mapi [idx coll]
                    (lazy-seq
                        (when-let [s (seq coll)]
                            (if (chunked-seq? s)
                                (let [c (chunk-first s) size (int (count c)) b (chunk-buffer size)]
                                    (dotimes [i size]
                                        (chunk-append b (f (+ idx i) (nth c i)))
                                    )
                                    (chunk-cons (chunk b) (mapi (+ idx size) (chunk-rest s)))
                                )
                                (cons (f idx (first s)) (mapi (inc idx) (rest s)))
                            )
                        )
                    )
                )]
            (mapi 0 coll)
        )
    )
)

;;;
 ; Returns a lazy sequence of the non-nil results of (f item). Note,
 ; this means false return values will be included. f must be free of
 ; side-effects. Returns a transducer when no collection is provided.
 ;;
(§ defn keep
    ([f]
        (fn [rf]
            (fn
                ([] (rf))
                ([result] (rf result))
                ([result input]
                    (let [v (f input)]
                        (if (nil? v)
                            result
                            (rf result v)
                        )
                    )
                )
            )
        )
    )
    ([f coll]
        (lazy-seq
            (when-let [s (seq coll)]
                (if (chunked-seq? s)
                    (let [c (chunk-first s) size (count c) b (chunk-buffer size)]
                        (dotimes [i size]
                            (let [x (f (nth c i))]
                                (when-not (nil? x)
                                    (chunk-append b x)
                                )
                            )
                        )
                        (chunk-cons (chunk b) (keep f (chunk-rest s)))
                    )
                    (let [x (f (first s))]
                        (if (nil? x)
                            (keep f (rest s))
                            (cons x (keep f (rest s)))
                        )
                    )
                )
            )
        )
    )
)

;;;
 ; Returns a lazy sequence of the non-nil results of (f index item).
 ; Note, this means false return values will be included. f must be free
 ; of side-effects. Returns a stateful transducer when no collection is
 ; provided.
 ;;
(§ defn keep-indexed
    ([f]
        (fn [rf]
            (let [iv (volatile! -1)]
                (fn
                    ([] (rf))
                    ([result] (rf result))
                    ([result input]
                        (let [i (vswap! iv inc) v (f i input)]
                            (if (nil? v)
                                result
                                (rf result v)
                            )
                        )
                    )
                )
            )
        )
    )
    ([f coll]
        (letfn [(keepi [idx coll]
                    (lazy-seq
                        (when-let [s (seq coll)]
                            (if (chunked-seq? s)
                                (let [c (chunk-first s) size (count c) b (chunk-buffer size)]
                                    (dotimes [i size]
                                        (let [x (f (+ idx i) (nth c i))]
                                            (when-not (nil? x)
                                                (chunk-append b x)
                                            )
                                        )
                                    )
                                    (chunk-cons (chunk b) (keepi (+ idx size) (chunk-rest s)))
                                )
                                (let [x (f idx (first s))]
                                    (if (nil? x)
                                        (keepi (inc idx) (rest s))
                                        (cons x (keepi (inc idx) (rest s)))
                                    )
                                )
                            )
                        )
                    )
                )]
            (keepi 0 coll)
        )
    )
)

;;;
 ; If coll is counted? returns its count, else will count at most the first n
 ; elements of coll using its seq.
 ;;
(§ defn bounded-count [n coll]
    (if (counted? coll)
        (count coll)
        (loop [i 0 s (seq coll)]
            (if (and s (< i n))
                (recur (inc i) (next s))
                i
            )
        )
    )
)

;;;
 ; Takes a set of predicates and returns a function f that returns true if all
 ; of its composing predicates return a logical true value against all of its
 ; arguments, else it returns false. Note that f is short-circuiting in that
 ; it will stop execution on the first argument that triggers a logical false
 ; result against the original predicates.
 ;;
(§ defn every-pred
    ([p]
        (fn ep1
            ([] true)
            ([x] (boolean (p x)))
            ([x y] (boolean (and (p x) (p y))))
            ([x y z] (boolean (and (p x) (p y) (p z))))
            ([x y z & args] (boolean (and (ep1 x y z) (every? p args))))
        )
    )
    ([p1 p2]
        (fn ep2
            ([] true)
            ([x] (boolean (and (p1 x) (p2 x))))
            ([x y] (boolean (and (p1 x) (p1 y) (p2 x) (p2 y))))
            ([x y z] (boolean (and (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z))))
            ([x y z & args] (boolean (and (ep2 x y z) (every? #(and (p1 %) (p2 %)) args))))
        )
    )
    ([p1 p2 p3]
        (fn ep3
            ([] true)
            ([x] (boolean (and (p1 x) (p2 x) (p3 x))))
            ([x y] (boolean (and (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y))))
            ([x y z] (boolean (and (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y) (p1 z) (p2 z) (p3 z))))
            ([x y z & args] (boolean (and (ep3 x y z) (every? #(and (p1 %) (p2 %) (p3 %)) args))))
        )
    )
    ([p1 p2 p3 & ps]
        (let [ps (list* p1 p2 p3 ps)]
            (fn epn
                ([] true)
                ([x] (every? #(% x) ps))
                ([x y] (every? #(and (% x) (% y)) ps))
                ([x y z] (every? #(and (% x) (% y) (% z)) ps))
                ([x y z & args] (boolean (and (epn x y z) (every? #(every? % args) ps))))
            )
        )
    )
)

;;;
 ; Takes a set of predicates and returns a function f that returns the first
 ; logical true value returned by one of its composing predicates against any of
 ; its arguments, else it returns logical false. Note that f is short-circuiting
 ; in that it will stop execution on the first argument that triggers a logical
 ; true result against the original predicates.
 ;;
(§ defn some-fn
    ([p]
        (fn sp1
            ([] nil)
            ([x] (p x))
            ([x y] (or (p x) (p y)))
            ([x y z] (or (p x) (p y) (p z)))
            ([x y z & args] (or (sp1 x y z) (some p args)))
        )
    )
    ([p1 p2]
        (fn sp2
            ([] nil)
            ([x] (or (p1 x) (p2 x)))
            ([x y] (or (p1 x) (p1 y) (p2 x) (p2 y)))
            ([x y z] (or (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z)))
            ([x y z & args] (or (sp2 x y z) (some #(or (p1 %) (p2 %)) args)))
        )
    )
    ([p1 p2 p3]
        (fn sp3
            ([] nil)
            ([x] (or (p1 x) (p2 x) (p3 x)))
            ([x y] (or (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y)))
            ([x y z] (or (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y) (p1 z) (p2 z) (p3 z)))
            ([x y z & args] (or (sp3 x y z) (some #(or (p1 %) (p2 %) (p3 %)) args)))
        )
    )
    ([p1 p2 p3 & ps]
        (let [ps (list* p1 p2 p3 ps)]
            (fn spn
                ([] nil)
                ([x] (some #(% x) ps))
                ([x y] (some #(or (% x) (% y)) ps))
                ([x y z] (some #(or (% x) (% y) (% z)) ps))
                ([x y z & args] (or (spn x y z) (some #(some % args) ps)))
            )
        )
    )
)

;;;
 ; A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn.
 ;;
(§ defn- ^:dynamic assert-valid-fdecl [fdecl]
    (when (empty? fdecl)
        (throw! "parameter declaration missing")
    )
    (let [argdecls
            (map
                #(if (seq? %)
                    (first %)
                    (throw!
                        (if (seq? (first fdecl))
                            (str "invalid signature \"" % "\" should be a list")
                            (str "parameter declaration \"" % "\" should be a vector")
                        )
                    )
                )
                fdecl
            )
          bad-args (seq (remove #(vector? %) argdecls))]
        (when bad-args
            (throw! (str "parameter declaration \"" (first bad-args) "\" should be a vector"))
        )
    )
)

;;;
 ; Temporarily redefines Vars during a call to func. Each val of binding-map
 ; will replace the root value of its key which must be a Var. After func is
 ; called with no args, the root values of all the Vars will be set back to
 ; their old values. These temporary changes will be visible in all threads.
 ; Useful for mocking out functions during testing.
 ;;
(§ defn with-redefs-fn [binding-map func]
    (let [root-bind
            (fn [m]
                (doseq [[a-var a-val] m]
                    (.bindRoot ^cloiure.lang.Var a-var a-val)
                )
            )
          old-vals
            (zipmap
                (keys binding-map)
                (map #(.getRawRoot ^cloiure.lang.Var %) (keys binding-map))
            )]
        (try
            (root-bind binding-map)
            (func)
            (finally
                (root-bind old-vals)
            )
        )
    )
)

;;;
 ; binding => var-symbol temp-value-expr
 ;
 ; Temporarily redefines Vars while executing the body. The temp-value-exprs
 ; will be evaluated and each resulting value will replace in parallel the root
 ; value of its Var. After the body is executed, the root values of all the
 ; Vars will be set back to their old values. These temporary changes will be
 ; visible in all threads. Useful for mocking out functions during testing.
 ;;
(§ defmacro with-redefs [bindings & body]
    `(with-redefs-fn
        ~(zipmap (map #(list `var %) (take-nth 2 bindings)) (take-nth 2 (next bindings)))
        (fn [] ~@body)
    )
)

;;;
 ; Returns true if a value has been produced for a delay or lazy sequence.
 ;;
(§ defn realized? [^cloiure.lang.IPending x] (.isRealized x))

;;;
 ; Takes an expression and a set of test/form pairs. Threads expr (via ->)
 ; through each form for which the corresponding test expression is true.
 ; Note that, unlike cond branching, cond-> threading does not short circuit
 ; after the first true test expression.
 ;;
(§ defmacro cond-> [expr & clauses]
    (assert (even? (count clauses)))
    (let [g (gensym)
          steps (map (fn [[test step]] `(if ~test (-> ~g ~step) ~g)) (partition 2 clauses))]
        `(let [~g ~expr ~@(interleave (repeat g) (butlast steps))]
            ~(if (empty? steps)
                g
                (last steps)
            )
        )
    )
)

;;;
 ; Takes an expression and a set of test/form pairs. Threads expr (via ->>)
 ; through each form for which the corresponding test expression is true.
 ; Note that, unlike cond branching, cond->> threading does not short circuit
 ; after the first true test expression.
 ;;
(§ defmacro cond->> [expr & clauses]
    (assert (even? (count clauses)))
    (let [g (gensym)
          steps (map (fn [[test step]] `(if ~test (->> ~g ~step) ~g)) (partition 2 clauses))]
        `(let [~g ~expr ~@(interleave (repeat g) (butlast steps))]
            ~(if (empty? steps)
                g
                (last steps)
            )
        )
    )
)

;;;
 ; Binds name to expr, evaluates the first form in the lexical context
 ; of that binding, then binds name to that result, repeating for each
 ; successive form, returning the result of the last form.
 ;;
(§ defmacro as-> [expr name & forms]
    `(let [~name ~expr ~@(interleave (repeat name) (butlast forms))]
        ~(if (empty? forms)
            name
            (last forms)
        )
    )
)

;;;
 ; When expr is not nil, threads it into the first form (via ->),
 ; and when that result is not nil, through the next, etc.
 ;;
(§ defmacro some-> [expr & forms]
    (let [g (gensym)
          steps (map (fn [step] `(if (nil? ~g) nil (-> ~g ~step))) forms)]
        `(let [~g ~expr ~@(interleave (repeat g) (butlast steps))]
            ~(if (empty? steps)
                g
                (last steps)
            )
        )
    )
)

;;;
 ; When expr is not nil, threads it into the first form (via ->>),
 ; and when that result is not nil, through the next, etc.
 ;;
(§ defmacro some->> [expr & forms]
    (let [g (gensym)
          steps (map (fn [step] `(if (nil? ~g) nil (->> ~g ~step))) forms)]
        `(let [~g ~expr ~@(interleave (repeat g) (butlast steps))]
            ~(if (empty? steps)
                g
                (last steps)
            )
        )
    )
)

(§ defn ^:private preserving-reduced [rf]
    #(let [ret (rf %1 %2)]
        (if (reduced? ret) (reduced ret) ret)
    )
)

;;;
 ; A transducer which concatenates the contents of each input, which must
 ; be a collection, into the reduction.
 ;;
(§ defn cat [rf]
    (let [rrf (preserving-reduced rf)]
        (fn
            ([] (rf))
            ([result] (rf result))
            ([result input] (reduce rrf result input))
        )
    )
)

;;;
 ; Returns a transducer that ends transduction when pred returns true for an input.
 ; When retf is supplied it must be a fn of 2 arguments - it will be passed the
 ; (completed) result so far and the input that triggered the predicate, and its
 ; return value (if it does not throw an exception) will be the return value of the
 ; transducer. If retf is not supplied, the input that triggered the predicate will
 ; be returned. If the predicate never returns true the transduction is unaffected.
 ;;
(§ defn halt-when
    ([pred] (halt-when pred nil))
    ([pred retf]
        (fn [rf]
            (fn
                ([] (rf))
                ([result]
                    (if (and (map? result) (contains? result ::halt))
                        (::halt result)
                        (rf result)
                    )
                )
                ([result input]
                    (if (pred input)
                        (reduced {::halt (if retf (retf (rf result) input) input)})
                        (rf result input)
                    )
                )
            )
        )
    )
)

;;;
 ; Returns items from coll with random probability of prob (0.0 - 1.0).
 ; Returns a transducer when no collection is provided.
 ;;
(§ defn random-sample
    ([prob     ] (filter (fn [_] (< (rand) prob))     ))
    ([prob coll] (filter (fn [_] (< (rand) prob)) coll))
)

;;;
 ; Runs the supplied procedure (via reduce), for purposes of side effects,
 ; on successive items in the collection. Returns nil.
 ;;
(§ defn run! [proc coll]
    (reduce #(proc %2) nil coll)
    nil
)

#_(ns cloiure.set)

;;;
 ; Move a maximal element of coll according to fn k (which returns a number) to the front of coll.
 ;;
(§ defn- bubble-max-key [k coll]
    (let [max (apply max-key k coll)]
        (cons max (remove #(identical? max %) coll))
    )
)

;;;
 ; Return a set that is the union of the input sets.
 ;;
(§ defn union
    ([] #{})
    ([s1] s1)
    ([s1 s2]
        (if (< (count s1) (count s2))
            (reduce conj s2 s1)
            (reduce conj s1 s2)
        )
    )
    ([s1 s2 & sets]
        (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]
            (reduce into (first bubbled-sets) (rest bubbled-sets))
        )
    )
)

;;;
 ; Return a set that is the intersection of the input sets.
 ;;
(§ defn intersection
    ([s1] s1)
    ([s1 s2]
        (if (< (count s2) (count s1))
            (recur s2 s1)
            (reduce
                (fn [result item]
                    (if (contains? s2 item)
                        result
                        (disj result item)
                    )
                )
                s1 s1
            )
        )
    )
    ([s1 s2 & sets]
        (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]
            (reduce intersection (first bubbled-sets) (rest bubbled-sets))
        )
    )
)

;;;
 ; Return a set that is the first set without elements of the remaining sets.
 ;;
(§ defn difference
    ([s1] s1)
    ([s1 s2]
        (if (< (count s1) (count s2))
            (reduce
                (fn [result item]
                    (if (contains? s2 item)
                        (disj result item)
                        result
                    )
                )
                s1 s1
            )
            (reduce disj s1 s2)
        )
    )
    ([s1 s2 & sets] (reduce difference s1 (conj sets s2)))
)

;;;
 ; Returns a set of the elements for which pred is true.
 ;;
(§ defn select [pred xset]
    (reduce (fn [s k] (if (pred k) s (disj s k))) xset xset)
)

;;;
 ; Returns a rel of the elements of xrel with only the keys in ks.
 ;;
(§ defn project [xrel ks]
    (with-meta (set (map #(select-keys % ks) xrel)) (meta xrel))
)

;;;
 ; Returns the map with the keys in kmap renamed to the vals in kmap.
 ;;
(§ defn rename-keys [map kmap]
    (reduce
        (fn [m [old new]]
            (if (contains? map old)
                (assoc m new (get map old))
                m
            )
        )
        (apply dissoc map (keys kmap)) kmap
    )
)

;;;
 ; Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap.
 ;;
(§ defn rename [xrel kmap]
    (with-meta (set (map #(rename-keys % kmap) xrel)) (meta xrel))
)

;;;
 ; Returns a map of the distinct values of ks in the xrel mapped to
 ; a set of the maps in xrel with the corresponding values of ks.
 ;;
(§ defn index [xrel ks]
    (reduce
        (fn [m x]
            (let [ik (select-keys x ks)]
                (assoc m ik (conj (get m ik #{}) x))
            )
        )
        {} xrel
    )
)

;;;
 ; Returns the map with the vals mapped to the keys.
 ;;
(§ defn map-invert [m] (reduce (fn [m [k v]] (assoc m v k)) {} m))

;;;
 ; When passed 2 rels, returns the rel corresponding to the natural join.
 ; When passed an additional keymap, joins on the corresponding keys.
 ;;
(§ defn join
    ([xrel yrel] ;; natural join
        (if (and (seq xrel) (seq yrel))
            (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))
                  [r s] (if (<= (count xrel) (count yrel)) [xrel yrel] [yrel xrel])
                  idx (index r ks)]
                (reduce
                    (fn [ret x]
                        (let [found (idx (select-keys x ks))]
                            (if found
                                (reduce #(conj %1 (merge %2 x)) ret found)
                                ret
                            )
                        )
                    )
                    #{} s
                )
            )
            #{}
        )
    )
    ([xrel yrel km] ;; arbitrary key mapping
        (let [[r s k] (if (<= (count xrel) (count yrel)) [xrel yrel (map-invert km)] [yrel xrel km])
              idx (index r (vals k))]
            (reduce
                (fn [ret x]
                    (let [found (idx (rename-keys (select-keys x (keys k)) k))]
                        (if found
                            (reduce #(conj %1 (merge %2 x)) ret found)
                            ret
                        )
                    )
                )
                #{} s
            )
        )
    )
)

;;;
 ; Is set1 a subset of set2?
 ;;
(§ defn ^Boolean subset? [set1 set2]
    (and (<= (count set1) (count set2)) (every? #(contains? set2 %) set1))
)

;;;
 ; Is set1 a superset of set2?
 ;;
(§ defn ^Boolean superset? [set1 set2]
    (and (>= (count set1) (count set2)) (every? #(contains? set1 %) set2))
)

#_(ns cloiure.data
    (:require [cloiure.set :as set]))

(§ declare diff)

;;;
 ; Internal helper for diff.
 ;;
(§ defn- atom-diff [a b] (if (= a b) [nil nil a] [a b nil]))

;; for big things a sparse vector class would be better

;;;
 ; Convert an associative-by-numeric-index collection into
 ; an equivalent vector, with nil for any missing keys.
 ;;
(§ defn- vectorize [m]
    (when (seq m)
        (reduce
            (fn [result [k v]] (assoc result k v))
            (vec (repeat (apply max (keys m)) nil))
            m
        )
    )
)

;;;
 ; Diff associative things a and b, comparing only the key k.
 ;;
(§ defn- diff-associative-key [a b k]
    (let [va (get a k) vb (get b k) [a* b* ab] (diff va vb) in-a (contains? a k) in-b (contains? b k)
          same (and in-a in-b (or (not (nil? ab)) (and (nil? va) (nil? vb))))]
        [
            (when (and in-a (or (not (nil? a*)) (not same))) {k a*})
            (when (and in-b (or (not (nil? b*)) (not same))) {k b*})
            (when same {k ab})
        ]
    )
)

;;;
 ; Diff associative things a and b, comparing only keys in ks.
 ;;
(§ defn- diff-associative [a b ks]
    (reduce
        (fn [diff1 diff2] (doall (map merge diff1 diff2)))
        [nil nil nil]
        (map (partial diff-associative-key a b) ks)
    )
)

(§ defn- diff-sequential [a b]
    (vec (map vectorize
        (diff-associative
            (if (vector? a) a (vec a))
            (if (vector? b) b (vec b))
            (range (max (count a) (count b)))
        )
    ))
)

;;;
 ; Implementation detail. Subject to change.
 ;;
(§ defprotocol EqualityPartition
    (equality-partition [x] "Implementation detail. Subject to change.")
)

;;;
 ; Implementation detail. Subject to change.
 ;;
(§ defprotocol Diff
    (diff-similar [a b] "Implementation detail. Subject to change.")
)

(§ extend nil
    Diff
    {:diff-similar atom-diff}
)

(§ extend Object
    Diff
    {:diff-similar (fn [a b] ((if (.. a getClass isArray) diff-sequential atom-diff) a b))}

    EqualityPartition
    {:equality-partition (fn [x] (if (.. x getClass isArray) :sequential :atom))}
)

(§ extend-protocol EqualityPartition
    nil
    (equality-partition [x] :atom)

    java.util.Set
    (equality-partition [x] :set)

    java.util.List
    (equality-partition [x] :sequential)

    java.util.Map
    (equality-partition [x] :map)
)

(§ defn- as-set-value [s] (if (set? s) s (into #{} s)))

(§ extend-protocol Diff
    java.util.Set
    (diff-similar [a b]
        (let [aval (as-set-value a) bval (as-set-value b)]
            [
                (not-empty (set/difference aval bval))
                (not-empty (set/difference bval aval))
                (not-empty (set/intersection aval bval))
            ]
        )
    )

    java.util.List
    (diff-similar [a b] (diff-sequential a b))

    java.util.Map
    (diff-similar [a b] (diff-associative a b (set/union (keys a) (keys b))))
)

;;;
 ; Recursively compares a and b, returning a tuple of
 ; [things-only-in-a things-only-in-b things-in-both].
 ; Comparison rules:
 ;
 ; * For equal a and b, return [nil nil a].
 ; * Maps are subdiffed where keys match and values differ.
 ; * Sets are never subdiffed.
 ; * All sequential things are treated as associative collections by their indexes, with results returned as vectors.
 ; * Everything else (including strings!) is treated as an atom and compared for equality.
 ;;
(§ defn diff [a b]
    (if (= a b)
        [nil nil a]
        (if (= (equality-partition a) (equality-partition b))
            (diff-similar a b)
            (atom-diff a b)
        )
    )
)

;;;
 ; This namespace defines a generic tree walker for Cloiure data structures.
 ; It takes any data structure (list, vector, map, set, seq), calls a function
 ; on every element, and uses the return value of the function in place of the
 ; original. This makes it fairly easy to write recursive search-and-replace
 ; functions, as shown in the examples.
 ;
 ; Note: "walk" supports all Cloiure data structures EXCEPT maps created with
 ; sorted-map-by. There is no (obvious) way to retrieve the sorting function.
 ;;
#_(ns cloiure.walk)

;;;
 ; Traverses form, an arbitrary data structure. inner and outer are functions.
 ; Applies inner to each element of form, building up a data structure of the
 ; same type, then applies outer to the result. Recognizes all Cloiure data
 ; structures. Consumes seqs as with doall.
 ;;
(§ defn walk [inner outer form]
    (cond
        (list? form)                            (outer (apply list (map inner form)))
        (instance? cloiure.lang.IMapEntry form) (outer (vec (map inner form)))
        (seq? form)                             (outer (doall (map inner form)))
        (coll? form)                            (outer (into (empty form) (map inner form)))
        :else                                   (outer form)
    )
)

;;;
 ; Performs a depth-first, post-order traversal of form. Calls f on
 ; each sub-form, uses f's return value in place of the original.
 ; Recognizes all Cloiure data structures. Consumes seqs as with doall.
 ;;
(§ defn postwalk [f form] (walk (partial postwalk f) f form))

;;;
 ; Like postwalk, but does pre-order traversal.
 ;;
(§ defn prewalk [f form] (walk (partial prewalk f) identity (f form)))

;; Note: I wanted to write:
;;
;; (defn walk [f form]
;;  (let [pf (partial walk f)]
;;   (if (coll? form)
;;    (f (into (empty form) (map pf form)))
;;    (f form))))
;;
;; but this throws a ClassCastException when applied to a map.

;;;
 ; Recursively transforms all map keys from strings to keywords.
 ;;
(§ defn keywordize-keys [m]
    (let [f (fn [[k v]] (if (string? k) [(keyword k) v] [k v]))]
        ;; only apply to maps
        (postwalk (fn [x] (if (map? x) (into {} (map f x)) x)) m)
    )
)

;;;
 ; Recursively transforms all map keys from keywords to strings.
 ;;
(§ defn stringify-keys [m]
    (let [f (fn [[k v]] (if (keyword? k) [(name k) v] [k v]))]
        ;; only apply to maps
        (postwalk (fn [x] (if (map? x) (into {} (map f x)) x)) m)
    )
)

;;;
 ; Recursively transforms form by replacing keys in smap with their
 ; values. Like cloiure/replace but works on any data structure. Does
 ; replacement at the root of the tree first.
 ;;
(§ defn prewalk-replace [smap form]
    (prewalk (fn [x] (if (contains? smap x) (smap x) x)) form)
)

;;;
 ; Recursively transforms form by replacing keys in smap with their
 ; values. Like cloiure/replace but works on any data structure. Does
 ; replacement at the leaves of the tree first.
 ;;
(§ defn postwalk-replace [smap form]
    (postwalk (fn [x] (if (contains? smap x) (smap x) x)) form)
)

;;;
 ; Recursively performs all possible macroexpansions in form.
 ;;
(§ defn macroexpand-all [form]
    (prewalk (fn [x] (if (seq? x) (macroexpand x) x)) form)
)

#_(ns cloiure.core.reducers
    (:refer-cloiure :exclude [reduce map mapcat filter remove take take-while drop flatten cat])
    (:require [cloiure.walk :as walk]))

(§ alias 'core 'cloiure.core)

(§ def pool (delay (java.util.concurrent.ForkJoinPool.)))

(§ defn fjtask [^Callable f]
    (java.util.concurrent.ForkJoinTask/adapt f)
)

(§ defn- fjinvoke [f]
    (if (java.util.concurrent.ForkJoinTask/inForkJoinPool)
        (f)
        (.invoke ^java.util.concurrent.ForkJoinPool @pool ^java.util.concurrent.ForkJoinTask (fjtask f))
    )
)

(§ defn- fjfork [task] (.fork ^java.util.concurrent.ForkJoinTask task))

(§ defn- fjjoin [task] (.join ^java.util.concurrent.ForkJoinTask task))

;;;
 ; Like core/reduce except:
 ; - when init is not provided, (f) is used;
 ; - maps are reduced with reduce-kv.
 ;;
(§ defn reduce
    ([f coll] (reduce f (f) coll))
    ([f init coll]
        (if (instance? java.util.Map coll)
            (cloiure.core.protocols/kv-reduce coll f init)
            (cloiure.core.protocols/coll-reduce coll f init)
        )
    )
)

(§ defprotocol CollFold
    (coll-fold [coll n combinef reducef])
)

;;;
 ; Reduces a collection using a (potentially parallel) reduce-combine
 ; strategy. The collection is partitioned into groups of approximately
 ; n (default 512), each of which is reduced with reducef (with a seed
 ; value obtained by calling (combinef) with no arguments). The results
 ; of these reductions are then reduced with combinef (default reducef).
 ; combinef must be associative, and, when called with no arguments,
 ; (combinef) must produce its identity element. These operations may
 ; be performed in parallel, but the results will preserve order.
 ;;
(§ defn fold
    ([reducef coll] (fold reducef reducef coll))
    ([combinef reducef coll] (fold 512 combinef reducef coll))
    ([n combinef reducef coll] (coll-fold coll n combinef reducef))
)

;;;
 ; Given a reducible collection, and a transformation function xf,
 ; returns a reducible collection, where any supplied reducing fn will
 ; be transformed by xf. xf is a function of reducing fn to reducing fn.
 ;;
(§ defn reducer
    ([coll xf]
        (reify
            cloiure.core.protocols/CollReduce
            (coll-reduce [this f1] (cloiure.core.protocols/coll-reduce this f1 (f1)))
            (coll-reduce [_ f1 init] (cloiure.core.protocols/coll-reduce coll (xf f1) init))
        )
    )
)

;;;
 ; Given a foldable collection, and a transformation function xf,
 ; returns a foldable collection, where any supplied reducing fn will
 ; be transformed by xf. xf is a function of reducing fn to reducing fn.
 ;;
(§ defn folder
    ([coll xf]
        (reify
            cloiure.core.protocols/CollReduce
            (coll-reduce [_ f1] (cloiure.core.protocols/coll-reduce coll (xf f1) (f1)))
            (coll-reduce [_ f1 init] (cloiure.core.protocols/coll-reduce coll (xf f1) init))

            CollFold
            (coll-fold [_ n combinef reducef] (coll-fold coll n combinef (xf reducef)))
        )
    )
)

(§ defn- do-curried [name meta args body]
    (let [cargs (vec (butlast args))]
        `(defn ~name ~meta
            (~cargs (fn [x#] (~name ~@cargs x#)))
            (~args ~@body)
        )
    )
)

;;;
 ; Builds another arity of the fn that returns a fn awaiting the last param.
 ;;
(§ defmacro ^:private defcurried [name meta args & body]
    (do-curried name meta args body)
)

(§ defn- do-rfn [f1 k fkv]
    `(fn
        ([] (~f1))
        ~(cloiure.walk/postwalk
            #(if (sequential? %)
                ((if (vector? %) vec identity) (core/remove #{k} %))
                %
            )
            fkv
        )
        ~fkv
    )
)

;;;
 ; Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl.
 ;;
(§ defmacro ^:private rfn [[f1 k] fkv]
    (do-rfn f1 k fkv)
)

;;;
 ; Applies f to every value in the reduction of coll. Foldable.
 ;;
(§ defcurried map [f coll]
    (folder coll
        (fn [f1]
            (rfn [f1 k]
                ([ret k v]
                    (f1 ret (f k v))
                )
            )
        )
    )
)

;;;
 ; Applies f to every value in the reduction of coll, concatenating
 ; the result colls of (f val). Foldable.
 ;;
(§ defcurried mapcat [f coll]
    (folder coll
        (fn [f1]
            (let [f1
                    (fn
                        ([ret   v] (let [x (f1 ret   v)] (if (reduced? x) (reduced x) x)))
                        ([ret k v] (let [x (f1 ret k v)] (if (reduced? x) (reduced x) x)))
                    )]
                (rfn [f1 k]
                    ([ret k v]
                        (reduce f1 ret (f k v))
                    )
                )
            )
        )
    )
)

;;;
 ; Retains values in the reduction of coll for which (pred val)
 ; returns logical true. Foldable.
 ;;
(§ defcurried filter [pred coll]
    (folder coll
        (fn [f1]
            (rfn [f1 k]
                ([ret k v]
                    (if (pred k v)
                        (f1 ret k v)
                        ret
                    )
                )
            )
        )
    )
)

;;;
 ; Removes values in the reduction of coll for which (pred val)
 ; returns logical true. Foldable.
 ;;
(§ defcurried remove [pred coll]
    (filter (complement pred) coll)
)

;;;
 ; Takes any nested combination of sequential things (lists, vectors, etc.)
 ; and returns their contents as a single, flat foldable collection.
 ;;
(§ defcurried flatten [coll]
    (folder coll
        (fn [f1]
            (fn
                ([] (f1))
                ([ret v]
                    (if (sequential? v)
                        (cloiure.core.protocols/coll-reduce (flatten v) f1 ret)
                        (f1 ret v)
                    )
                )
            )
        )
    )
)

;;;
 ; Ends the reduction of coll when (pred val) returns logical false.
 ;;
(§ defcurried take-while [pred coll]
    (reducer coll
        (fn [f1]
            (rfn [f1 k]
                ([ret k v]
                    (if (pred k v)
                        (f1 ret k v)
                        (reduced ret)
                    )
                )
            )
        )
    )
)

;;;
 ; Ends the reduction of coll after consuming n values.
 ;;
(§ defcurried take [n coll]
    (reducer coll
        (fn [f1]
            (let [cnt (atom n)]
                (rfn [f1 k]
                    ([ret k v]
                        (swap! cnt dec)
                        (if (neg? @cnt)
                            (reduced ret)
                            (f1 ret k v)
                        )
                    )
                )
            )
        )
    )
)

;;;
 ; Elides the first n values from the reduction of coll.
 ;;
(§ defcurried drop [n coll]
    (reducer coll
        (fn [f1]
            (let [cnt (atom n)]
                (rfn [f1 k]
                    ([ret k v]
                        (swap! cnt dec)
                        (if (neg? @cnt)
                            (f1 ret k v)
                            ret
                        )
                    )
                )
            )
        )
    )
)

;; do not construct this directly, use cat

(§ deftype Cat [cnt left right]
    cloiure.lang.Counted
    (count [_] cnt)

    cloiure.lang.Seqable
    (seq [_] (concat (seq left) (seq right)))

    cloiure.core.protocols/CollReduce
    (coll-reduce [this f1]
        (cloiure.core.protocols/coll-reduce this f1 (f1))
    )
    (coll-reduce [_ f1 init]
        (cloiure.core.protocols/coll-reduce right f1 (cloiure.core.protocols/coll-reduce left f1 init))
    )

    CollFold
    (coll-fold [_ n combinef reducef]
        (fjinvoke
            (fn []
                (let [rt (fjfork (fjtask #(coll-fold right n combinef reducef)))]
                    (combinef
                        (coll-fold left n combinef reducef)
                        (fjjoin rt)
                    )
                )
            )
        )
    )
)

;;;
 ; A high-performance combining fn that yields the catenation of the reduced values.
 ; The result is reducible, foldable, seqable and counted, providing the identity
 ; collections are reducible, seqable and counted. The single argument version will
 ; build a combining fn with the supplied identity constructor. Tests for identity
 ; with (zero? (count x)). See also foldcat.
 ;;
(§ defn cat
    ([] (java.util.ArrayList.))
    ([ctor]
        (fn
            ([] (ctor))
            ([left right] (cat left right))
        )
    )
    ([left right]
        (cond
            (zero? (count left)) right
            (zero? (count right)) left
            :else (Cat. (+ (count left) (count right)) left right)
        )
    )
)

;;;
 ; .adds x to acc and returns acc.
 ;;
(§ defn append! [^java.util.Collection acc x] (doto acc (.add x)))

;;;
 ; Equivalent to (fold cat append! coll).
 ;;
(§ defn foldcat [coll] (fold cat append! coll))

;;;
 ; Builds a combining fn out of the supplied operator and identity
 ; constructor. op must be associative and ctor called with no args
 ; must return an identity value for it.
 ;;
(§ defn monoid [op ctor] (fn m ([] (ctor)) ([a b] (op a b))))

(§ defn- foldvec [v n combinef reducef]
    (cond
        (empty? v)
            (combinef)
        (<= (count v) n)
            (reduce reducef (combinef) v)
        :else
            (let [split (quot (count v) 2) v1 (subvec v 0 split) v2 (subvec v split (count v))
                  fc (fn [child] #(foldvec child n combinef reducef))]
                (fjinvoke
                    #(let [f1 (fc v1) t2 (fjtask (fc v2))]
                        (fjfork t2)
                        (combinef (f1) (fjjoin t2))
                    )
                )
            )
    )
)

(§ extend-protocol CollFold
    nil
    (coll-fold [coll n combinef reducef] (combinef))

    Object
    (coll-fold [coll n combinef reducef] (reduce reducef (combinef) coll)) ;; can't fold, single reduce

    cloiure.lang.IPersistentVector
    (coll-fold [v n combinef reducef] (foldvec v n combinef reducef))

    cloiure.lang.PersistentHashMap
    (coll-fold [m n combinef reducef] (.fold m n combinef reducef fjinvoke fjtask fjfork fjjoin))
)

#_(ns cloiure.core
    (:refer-clojure :exclude [when when-not])
    (:use [cloiure slang]))

(defn -main [& args]
    )
