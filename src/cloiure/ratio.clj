(ns cloiure.ratio
    (:refer-clojure :only [*ns* = assoc cond cons declare defmacro defn first if-not import let letfn loop next second some? symbol? vary-meta vec vector?])
)

(defmacro § [& _])
(defmacro ß [& _])

(defmacro java-ns  [_ & s] (cons 'do s))
(defmacro class-ns [_ & s] (cons 'do s))

(clojure.core/doseq [% (clojure.core/keys (clojure.core/ns-imports *ns*))] (clojure.core/ns-unmap *ns* %))

(import
    [java.lang RuntimeException String]
)

(import
    [java.util Arrays Random]
    [java.util.concurrent ThreadLocalRandom]
)

(defmacro throw! [^String s] `(throw (RuntimeException. ~s)))

(defmacro def-      [x & s] `(def      ~(vary-meta x assoc :private true) ~@s))
(defmacro defn-     [x & s] `(defn     ~(vary-meta x assoc :private true) ~@s))
(defmacro defmacro- [x & s] `(defmacro ~(vary-meta x assoc :private true) ~@s))

(letfn [(=> [s] (if (= '=> (first s)) (next s) (cons nil s)))]
    (defmacro     when       [? & s] (let [[e & s] (=> s)]               `(if     ~? (do ~@s) ~e)))
    (defmacro     when-not   [? & s] (let [[e & s] (=> s)]               `(if-not ~? (do ~@s) ~e)))
    (defmacro let-when     [v ? & s] (let [[e & s] (=> s)] `(let ~(vec v) (if     ~? (do ~@s) ~e))))
    (defmacro let-when-not [v ? & s] (let [[e & s] (=> s)] `(let ~(vec v) (if-not ~? (do ~@s) ~e))))
)

(letfn [(v' [v] (cond (vector? v) v (symbol? v) [v v] :else [`_# v]))
        (r' [r] (cond (vector? r) `((recur ~@r)) (some? r) `((recur ~r))))
        (=> [s] (if (= '=> (first s)) (next s) (cons nil s)))
        (l' [v ? r s] (let [r (r' r) [e & s] (=> s)] `(loop ~(v' v) (if ~? (do ~@s ~@r) ~e))))]
    (defmacro loop-when [v ? & s] (l' v ? nil s))
    (defmacro loop-when-recur [v ? r & s] (l' v ? r s))
)

(letfn [(r' [r] (cond (vector? r) `(recur ~@r) (some? r) `(recur ~r)))
        (=> [s] (if (= '=> (first s)) (second s)))]
    (defmacro recur-if [? r & s] `(if ~? ~(r' r) ~(=> s)))
)

(java-ns cloiure.math.BigInteger

(declare BigInteger'LONG_MASK)

;;;
 ; A simple bit sieve used for finding prime number candidates. Allows setting
 ; and clearing of bits in a storage array. The size of the sieve is assumed to
 ; be constant to reduce overhead. All the bits of a new bitSieve are zero, and
 ; bits are removed from it by setting them.
 ;
 ; To reduce storage space and increase efficiency, no even numbers are
 ; represented in the sieve (each bit in the sieve represents an odd number).
 ; The relationship between the index of a bit and the number it represents is
 ; given by
 ; N = offset + (2*index + 1);
 ; Where N is the integer represented by a bit in the sieve, offset is some
 ; even integer offset indicating where the sieve begins, and index is the
 ; index of a bit in the sieve array.
 ;;

(class-ns BitSieve
    ;;;
     ; Stores the bits in this bitSieve.
     ;;
    (§ field- #_"long[]" bits)

    ;;;
     ; Length is how many bits this sieve holds.
     ;;
    (§ field- #_"int" length)

    ;;;
     ; A small sieve used to filter out multiples of small primes in a search sieve.
     ;;
    (def- #_"BitSieve" BitSieve'smallSieve (ß BitSieve'new()))

    ;;;
     ; Construct a "small sieve" with a base of 0. This constructor is
     ; used internally to generate the set of "small primes" whose multiples
     ; are excluded from sieves generated by the main (package private)
     ; constructor, BitSieve(BigInteger base, int searchLen). The length
     ; of the sieve generated by this constructor was chosen for performance;
     ; it controls a tradeoff between how much time is spent constructing
     ; other sieves, and how much time is wasted testing composite candidates
     ; for primality. The length was chosen experimentally to yield good
     ; performance.
     ;;
    (defn- #_"BitSieve" BitSieve'new []
        (§
            (ß length = 150 * 64)
            (ß bits = new long[(BitSieve'unitIndex(length - 1) + 1)])

            ;; mark 1 as composite
            (ß BitSieve''set(this, 0))
            (ß #_"int" nextIndex = 1)
            (ß #_"int" nextPrime = 3)

            ;; find primes and remove their multiples from sieve
            (§ do
                (ß BitSieve''sieveSingle(this, length, nextIndex + nextPrime, nextPrime))
                (ß nextIndex = BitSieve''sieveSearch(this, length, nextIndex + 1))
                (ß nextPrime = 2 * nextIndex + 1)
            ) (§ while! (ß (nextIndex > 0) && (nextPrime < length)))
        )
    )

    ;;;
     ; Construct a bit sieve of searchLen bits used for finding prime number candidates.
     ; The new sieve begins at the specified base, which must be even.
     ;;
    (defn #_"BitSieve" BitSieve'new [#_"BigInteger" base, #_"int" searchLen]
        (§
            ;;
             ; Candidates are indicated by clear bits in the sieve. As a candidates
             ; nonprimality is calculated, a bit is set in the sieve to eliminate
             ; it. To reduce storage space and increase efficiency, no even numbers
             ; are represented in the sieve (each bit in the sieve represents an
             ; odd number).
             ;;
            (ß bits = new long[(BitSieve'unitIndex(searchLen - 1) + 1)])
            (ß length = searchLen)
            (ß #_"int" start = 0)

            (ß #_"int" step = BitSieve''sieveSearch(BitSieve'smallSieve, BitSieve'smallSieve.length, start))
            (ß #_"int" convertedStep = (step * 2) + 1)

            ;; construct the large sieve at an even offset specified by base
            (ß #_"MutableBigInteger" b = MutableBigInteger'new(base))
            (ß #_"MutableBigInteger" q = MutableBigInteger'new())
            (§ do
                ;; calculate base mod convertedStep
                (ß start = MutableBigInteger''divideOneWord(b, convertedStep, q))

                ;; take each multiple of step out of sieve
                (ß start = convertedStep - start)
                (§ when (ß start % 2 == 0)
                    (ß start += convertedStep)
                )
                (ß BitSieve''sieveSingle(this, searchLen, (start - 1) / 2, convertedStep))

                ;; find next prime from small sieve
                (ß step = BitSieve''sieveSearch(BitSieve'smallSieve, BitSieve'smallSieve.length, step + 1))
                (ß convertedStep = (step * 2) + 1)
            ) (§ while! (ß step > 0))
        )
    )

    ;;;
     ; Given a bit index return unit index containing it.
     ;;
    (defn- #_"int" BitSieve'unitIndex [#_"int" bitIndex]
        (§
            (§ return bitIndex >>> 6)
        )
    )

    ;;;
     ; Return a unit that masks the specified bit in its unit.
     ;;
    (defn- #_"long" BitSieve'bit [#_"int" bitIndex]
        (§
            (§ return 1 << (bitIndex & ((1 << 6) - 1)))
        )
    )

    ;;;
     ; Get the value of the bit at the specified index.
     ;;
    #_method
    (defn- #_"boolean" BitSieve''get [#_"BitSieve" this, #_"int" bitIndex]
        (§
            (ß #_"int" unitIndex = BitSieve'unitIndex(bitIndex))
            (§ return ((bits[unitIndex] & BitSieve'bit(bitIndex)) != 0))
        )
    )

    ;;;
     ; Set the bit at the specified index.
     ;;
    #_method
    (defn- #_"void" BitSieve''set [#_"BitSieve" this, #_"int" bitIndex]
        (§
            (ß #_"int" unitIndex = BitSieve'unitIndex(bitIndex))
            (ß bits[unitIndex] |= BitSieve'bit(bitIndex))
        )
        nil
    )

    ;;;
     ; This method returns the index of the first clear bit in the search
     ; array that occurs at or after start. It will not search past the
     ; specified limit. It returns -1 if there is no such clear bit.
     ;;
    #_method
    (defn- #_"int" BitSieve''sieveSearch [#_"BitSieve" this, #_"int" limit, #_"int" start]
        (§
            (§ when (ß start >= limit)
                (§ return -1)
            )

            (ß #_"int" index = start)
            (§ do
                (§ when (ß !BitSieve''get(this, index))
                    (§ return index)
                )
                (ß index++)
            ) (§ while! (ß index < limit - 1))
            (§ return -1)
        )
    )

    ;;;
     ; Sieve a single set of multiples out of the sieve. Begin to remove
     ; multiples of the specified step starting at the specified start index,
     ; up to the specified limit.
     ;;
    #_method
    (defn- #_"void" BitSieve''sieveSingle [#_"BitSieve" this, #_"int" limit, #_"int" start, #_"int" step]
        (§
            (§ while (ß start < limit)
                (ß BitSieve''set(this, start))
                (ß start += step)
            )
        )
        nil
    )

    ;;;
     ; Test probable primes in the sieve and return successful candidates.
     ;;
    #_method
    (defn #_"BigInteger" BitSieve''retrieve [#_"BitSieve" this, #_"BigInteger" initValue, #_"int" certainty, #_"Random" random]
        (§
            ;; examine the sieve one long at a time to find possible primes
            (ß #_"int" offset = 1)
            (§ for [(ß #_"int" i = 0)] (ß i < bits.length) [(ß i++)]
                (ß #_"long" nextLong = (§ bit-not)bits[i])
                (§ for [(ß #_"int" j = 0)] (ß j < 64) [(ß j++)]
                    (§ when (ß (nextLong & 1) == 1)
                        (ß #_"BigInteger" candidate = BigInteger''add(initValue, BigInteger'valueOf-l(offset)))
                        (§ when (ß BigInteger''primeToCertainty(candidate, certainty, random))
                            (§ return candidate)
                        )
                    )
                    (ß nextLong >>>= 1)
                    (ß offset += 2)
                )
            )
            (§ return nil)
        )
    )
)

;;;
 ; A class used to represent multiprecision integers that makes efficient
 ; use of allocated space by allowing a number to occupy only part of
 ; an array so that the arrays do not have to be reallocated as often.
 ; When performing an operation with many iterations the array used to
 ; hold a number is only reallocated when necessary and does not have to
 ; be the same size as the number it represents. A mutable number allows
 ; calculations to occur on the same number without having to create
 ; a new number for every step of the calculation as occurs with
 ; BigIntegers.
 ;;

(class-ns MutableBigInteger
    ;;;
     ; Holds the magnitude of this MutableBigInteger in big endian order.
     ; The magnitude may start at an offset into the value array, and it may
     ; end before the length of the value array.
     ;;
    (§ field #_"int[]" value)

    ;;;
     ; The number of ints of the value array that are currently used
     ; to hold the magnitude of this MutableBigInteger. The magnitude starts
     ; at an offset and offset + intLen may be less than value.length.
     ;;
    (§ field #_"int" intLen)

    ;;;
     ; The offset into the value array where the magnitude of this
     ; MutableBigInteger begins.
     ;;
    (§ field #_"int" offset = 0)

    ;; constants

    ;;;
     ; MutableBigInteger with one element value array with the value 1. Use
     ; this constant only when the method is not going to modify this object.
     ;;
    (def #_"MutableBigInteger" MutableBigInteger'ONE (ß MutableBigInteger'new(1)))

    ;;;
     ; The minimum {@code intLen} for cancelling powers of two before dividing.
     ; If the number of ints is less than this threshold,
     ; {@code divideKnuth} does not eliminate common powers of two from
     ; the dividend and divisor.
     ;;
    (def #_"int" MutableBigInteger'KNUTH_POW2_THRESH_LEN 6)

    ;;;
     ; The minimum number of trailing zero ints for cancelling powers of two before dividing.
     ; If the dividend and divisor don't share at least this many zero ints at the end,
     ; {@code divideKnuth} does not eliminate common powers of two from the dividend and divisor.
     ;;
    (def #_"int" MutableBigInteger'KNUTH_POW2_THRESH_ZEROS 3)

    ;; constructors

    ;;;
     ; The default constructor. An empty MutableBigInteger is created with a one word capacity.
     ;;
    (defn #_"MutableBigInteger" MutableBigInteger'new []
        (§
            (ß value = new int[1])
            (ß intLen = 0)
        )
    )

    ;;;
     ; Construct a new MutableBigInteger with a magnitude specified by the int val.
     ;;
    (defn #_"MutableBigInteger" MutableBigInteger'new [#_"int" val]
        (§
            (ß value = new int[1])
            (ß intLen = 1)
            (ß value[0] = val)
        )
    )

    ;;;
     ; Construct a new MutableBigInteger with the specified value array
     ; up to the length of the array supplied.
     ;;
    (defn #_"MutableBigInteger" MutableBigInteger'new [#_"int[]" val]
        (§
            (ß value = val)
            (ß intLen = val.length)
        )
    )

    ;;;
     ; Construct a new MutableBigInteger with a magnitude equal to the
     ; specified BigInteger.
     ;;
    (defn #_"MutableBigInteger" MutableBigInteger'new [#_"BigInteger" b]
        (§
            (ß intLen = b.mag.length)
            (ß value = Arrays.copyOf(b.mag, intLen))
        )
    )

    ;;;
     ; Construct a new MutableBigInteger with a magnitude equal to the
     ; specified MutableBigInteger.
     ;;
    (defn #_"MutableBigInteger" MutableBigInteger'new [#_"MutableBigInteger" val]
        (§
            (ß intLen = val.intLen)
            (ß value = Arrays.copyOfRange(val.value, val.offset, val.offset + intLen))
        )
    )

    ;;;
     ; Internal helper method to return the magnitude array. The caller is not
     ; supposed to modify the returned array.
     ;;
    #_method
    (defn- #_"int[]" MutableBigInteger''getMagnitudeArray [#_"MutableBigInteger" this]
        (§
            (§ when (ß offset > 0 || value.length != intLen)
                (§ return Arrays.copyOfRange(value, offset, offset + intLen))
            )
            (§ return value)
        )
    )

    ;;;
     ; Convert this MutableBigInteger to a long value. The caller has to make
     ; sure this MutableBigInteger can be fit into long.
     ;;
    #_method
    (defn- #_"long" MutableBigInteger''toLong [#_"MutableBigInteger" this]
        (§
            (ß assert (intLen <= 2) #_":" "this MutableBigInteger exceeds the range of long")
            (§ when (ß intLen == 0)
                (§ return 0)
            )
            (ß #_"long" d = value[offset] & BigInteger'LONG_MASK)
            (§ return (intLen == 2) ? d << 32 | (value[offset + 1] & BigInteger'LONG_MASK) #_":" d)
        )
    )

    ;;;
     ; Convert this MutableBigInteger to a BigInteger object.
     ;;
    #_method
    (defn #_"BigInteger" MutableBigInteger''toBigInteger-2 [#_"MutableBigInteger" this, #_"int" sign]
        (§
            (§ when (ß intLen == 0 || sign == 0)
                (§ return BigInteger'ZERO)
            )
            (§ return BigInteger'new(MutableBigInteger''getMagnitudeArray(this), sign))
        )
    )

    ;;;
     ; Converts this number to a nonnegative {@code BigInteger}.
     ;;
    #_method
    (defn #_"BigInteger" MutableBigInteger''toBigInteger-1 [#_"MutableBigInteger" this]
        (§
            (ß MutableBigInteger''normalize(this))
            (§ return MutableBigInteger''toBigInteger-2(this, MutableBigInteger''isZero(this) ? 0 #_":" 1))
        )
    )

    ;;;
     ; Clear out a MutableBigInteger for reuse.
     ;;
    #_method
    (defn #_"void" MutableBigInteger''clear [#_"MutableBigInteger" this]
        (§
            (ß offset = intLen = 0)
            (§ for [(ß #_"int" index = 0, n = value.length)] (ß index < n) [(ß index++)]
                (ß value[index] = 0)
            )
        )
        nil
    )

    ;;;
     ; Set a MutableBigInteger to zero, removing its offset.
     ;;
    #_method
    (defn #_"void" MutableBigInteger''reset [#_"MutableBigInteger" this]
        (§
            (ß offset = intLen = 0)
        )
        nil
    )

    ;;;
     ; Compare the magnitude of two MutableBigIntegers. Returns -1, 0 or 1
     ; as this MutableBigInteger is numerically less than, equal to, or
     ; greater than <tt>b</tt>.
     ;;
    #_method
    (defn #_"int" MutableBigInteger''compare [#_"MutableBigInteger" this, #_"MutableBigInteger" b]
        (§
            (ß #_"int" blen = b.intLen)
            (§ when (ß intLen < blen)
                (§ return -1)
            )
            (§ when (ß intLen > blen)
                (§ return 1)
            )

            ;; Add Integer.MIN_VALUE to make the comparison act as unsigned integer comparison.
            (ß #_"int[]" bval = b.value)
            (§ for [(ß #_"int" i = offset, j = b.offset)] (ß i < intLen + offset) [(ß i++, j++)]
                (ß #_"int" b1 = value[i] + 0x80000000)
                (ß #_"int" b2 = bval[j] + 0x80000000)
                (§ when (ß b1 < b2)
                    (§ return -1)
                )
                (§ when (ß b1 > b2)
                    (§ return 1)
                )
            )
            (§ return 0)
        )
    )

    ;;;
     ; Return the index of the lowest set bit in this MutableBigInteger.
     ; If the magnitude of this MutableBigInteger is zero, -1 is returned.
     ;;
    #_method
    (defn- #_"int" MutableBigInteger''getLowestSetBit [#_"MutableBigInteger" this]
        (§
            (§ when (ß intLen == 0)
                (§ return -1)
            )
            (ß #_"int" j, b)
            (§ for [(ß j = intLen - 1)] (ß (j > 0) && (value[j + offset] == 0)) [(ß j--)]
            )
            (ß b = value[j + offset])
            (§ when (ß b == 0)
                (§ return -1)
            )
            (§ return ((intLen - 1 - j) << 5) + Integer.numberOfTrailingZeros(b))
        )
    )

    ;;;
     ; Return the int in use in this MutableBigInteger at the specified index.
     ; This method is not used because it is not inlined on all platforms.
     ;;
    #_method
    (defn- #_"int" MutableBigInteger''getInt [#_"MutableBigInteger" this, #_"int" index]
        (§
            (§ return value[offset + index])
        )
    )

    ;;;
     ; Return a long which is equal to the unsigned value of the int in
     ; use in this MutableBigInteger at the specified index. This method is
     ; not used because it is not inlined on all platforms.
     ;;
    #_method
    (defn- #_"long" MutableBigInteger''getLong [#_"MutableBigInteger" this, #_"int" index]
        (§
            (§ return value[offset + index] & BigInteger'LONG_MASK)
        )
    )

    ;;;
     ; Ensure that the MutableBigInteger is in normal form, specifically
     ; making sure that there are no leading zeros, and that if the
     ; magnitude is zero, then intLen is zero.
     ;;
    #_method
    (defn #_"void" MutableBigInteger''normalize [#_"MutableBigInteger" this]
        (§
            (§ when (ß intLen == 0)
                (ß offset = 0)
                (§ return nil)
            )

            (ß #_"int" index = offset)
            (§ when (ß value[index] != 0)
                (§ return nil)
            )

            (ß #_"int" indexBound = index + intLen)
            (§ do
                (ß index++)
            ) (§ while! (ß index < indexBound && value[index] == 0))

            (ß #_"int" numZeros = index - offset)
            (ß intLen -= numZeros)
            (ß offset = (intLen == 0) ? 0 #_":" offset + numZeros)
        )
        nil
    )

    ;;;
     ; If this MutableBigInteger cannot hold len words, increase the size
     ; of the value array to len words.
     ;;
    #_method
    (defn- #_"void" MutableBigInteger''ensureCapacity [#_"MutableBigInteger" this, #_"int" len]
        (§
            (§ when (ß value.length < len)
                (ß value = new int[len])
                (ß offset = 0)
                (ß intLen = len)
            )
        )
        nil
    )

    ;;;
     ; Convert this MutableBigInteger into an int array with no leading
     ; zeros, of a length that is equal to this MutableBigInteger's intLen.
     ;;
    #_method
    (defn #_"int[]" MutableBigInteger''toIntArray [#_"MutableBigInteger" this]
        (§
            (ß #_"int[]" result = new int[intLen])
            (§ for [(ß #_"int" i = 0)] (ß i < intLen) [(ß i++)]
                (ß result[i] = value[offset + i])
            )
            (§ return result)
        )
    )

    ;;;
     ; Sets the int at index+offset in this MutableBigInteger to val.
     ; This does not get inlined on all platforms so it is not used
     ; as often as originally intended.
     ;;
    #_method
    (defn #_"void" MutableBigInteger''setInt [#_"MutableBigInteger" this, #_"int" index, #_"int" val]
        (§
            (ß value[offset + index] = val)
        )
        nil
    )

    ;;;
     ; Sets this MutableBigInteger's value array to the specified array.
     ; The intLen is set to the specified length.
     ;;
    #_method
    (defn #_"void" MutableBigInteger''setValue [#_"MutableBigInteger" this, #_"int[]" val, #_"int" length]
        (§
            (ß value = val)
            (ß intLen = length)
            (ß offset = 0)
        )
        nil
    )

    ;;;
     ; Sets this MutableBigInteger's value array to a copy of the specified array.
     ; The intLen is set to the length of the new array.
     ;;
    #_method
    (defn #_"void" MutableBigInteger''copyValue-m [#_"MutableBigInteger" this, #_"MutableBigInteger" src]
        (§
            (ß #_"int" len = src.intLen)
            (§ when (ß value.length < len)
                (ß value = new int[len])
            )
            (ß System.arraycopy(src.value, src.offset, value, 0, len))
            (ß intLen = len)
            (ß offset = 0)
        )
        nil
    )

    ;;;
     ; Sets this MutableBigInteger's value array to a copy of the specified array.
     ; The intLen is set to the length of the specified array.
     ;;
    #_method
    (defn #_"void" MutableBigInteger''copyValue-a [#_"MutableBigInteger" this, #_"int[]" val]
        (§
            (ß #_"int" len = val.length)
            (§ when (ß value.length < len)
                (ß value = new int[len])
            )
            (ß System.arraycopy(val, 0, value, 0, len))
            (ß intLen = len)
            (ß offset = 0)
        )
        nil
    )

    ;;;
     ; Returns true iff this MutableBigInteger has a value of one.
     ;;
    #_method
    (defn #_"boolean" MutableBigInteger''isOne [#_"MutableBigInteger" this]
        (§
            (§ return (intLen == 1) && (value[offset] == 1))
        )
    )

    ;;;
     ; Returns true iff this MutableBigInteger has a value of zero.
     ;;
    #_method
    (defn #_"boolean" MutableBigInteger''isZero [#_"MutableBigInteger" this]
        (§
            (§ return (intLen == 0))
        )
    )

    ;;;
     ; Returns true iff this MutableBigInteger is even.
     ;;
    #_method
    (defn #_"boolean" MutableBigInteger''isEven [#_"MutableBigInteger" this]
        (§
            (§ return (intLen == 0) || ((value[offset + intLen - 1] & 1) == 0))
        )
    )

    ;;;
     ; Returns true iff this MutableBigInteger is odd.
     ;;
    #_method
    (defn #_"boolean" MutableBigInteger''isOdd [#_"MutableBigInteger" this]
        (§
            (§ return MutableBigInteger''isZero(this) ? false #_":" ((value[offset + intLen - 1] & 1) == 1))
        )
    )

    ;;;
     ; Returns true iff this MutableBigInteger is in normal form.
     ; A MutableBigInteger is in normal form if it has no leading zeros
     ; after the offset, and intLen + offset <= value.length.
     ;;
    #_method
    (defn #_"boolean" MutableBigInteger''isNormal [#_"MutableBigInteger" this]
        (§
            (§ when (ß intLen + offset > value.length)
                (§ return false)
            )
            (§ when (ß intLen == 0)
                (§ return true)
            )
            (§ return (value[offset] != 0))
        )
    )

    ;;;
     ; Returns a String representation of this MutableBigInteger in radix 10.
     ;;
    #_foreign
    (defn #_"String" toString---MutableBigInteger [#_"MutableBigInteger" this]
        (§
            (ß #_"BigInteger" b = MutableBigInteger''toBigInteger-2(this, 1))
            (§ return b.toString())
        )
    )

    ;;;
     ; Right shift this MutableBigInteger n bits.
     ; The MutableBigInteger is left in normal form.
     ;;
    #_method
    (defn #_"void" MutableBigInteger''rightShift [#_"MutableBigInteger" this, #_"int" n]
        (§
            (§ when (ß intLen == 0)
                (§ return nil)
            )
            (ß #_"int" nInts = n >>> 5)
            (ß #_"int" nBits = n & 0x1f)
            (ß this.intLen -= nInts)
            (§ when (ß nBits == 0)
                (§ return nil)
            )
            (ß #_"int" bitsInHighWord = BigInteger'bitLengthForInt(value[offset]))
            (§ cond (ß nBits >= bitsInHighWord)
                (§
                    (ß MutableBigInteger''primitiveLeftShift(this, 32 - nBits))
                    (ß this.intLen--)
                )
                :else
                (§
                    (ß MutableBigInteger''primitiveRightShift(this, nBits))
                )
            )
        )
        nil
    )

    ;;;
     ; Left shift this MutableBigInteger n bits.
     ;;
    #_method
    (defn #_"void" MutableBigInteger''leftShift [#_"MutableBigInteger" this, #_"int" n]
        (§
            ;;
             ; If there is enough storage space in this MutableBigInteger already
             ; the available space will be used. Space to the right of the used
             ; ints in the value array is faster to utilize, so the extra space
             ; will be taken from the right if possible.
             ;;
            (§ when (ß intLen == 0)
                (§ return nil)
            )
            (ß #_"int" nInts = n >>> 5)
            (ß #_"int" nBits = n & 0x1f)
            (ß #_"int" bitsInHighWord = BigInteger'bitLengthForInt(value[offset]))

            ;; if shift can be done without moving words, do so
            (§ when (ß n <= (32 - bitsInHighWord))
                (ß MutableBigInteger''primitiveLeftShift(this, nBits))
                (§ return nil)
            )

            (ß #_"int" newLen = intLen + nInts +1)
            (§ when (ß nBits <= (32 - bitsInHighWord))
                (ß newLen--)
            )
            (§ cond (ß value.length < newLen)
                (§
                    ;; the array must grow
                    (ß #_"int[]" result = new int[newLen])
                    (§ for [(ß #_"int" i = 0)] (ß i < intLen) [(ß i++)]
                        (ß result[i] = value[offset + i])
                    )
                    (ß MutableBigInteger''setValue(this, result, newLen))
                )
                (value.length - offset >= newLen)
                (§
                    ;; use space on right
                    (§ for [(ß #_"int" i = 0)] (ß i < newLen - intLen) [(ß i++)]
                        (ß value[offset + intLen + i] = 0)
                    )
                )
                :else
                (§
                    ;; must use space on left
                    (§ for [(ß #_"int" i = 0)] (ß i < intLen) [(ß i++)]
                        (ß value[i] = value[offset + i])
                    )
                    (§ for [(ß #_"int" i = intLen)] (ß i < newLen) [(ß i++)]
                        (ß value[i] = 0)
                    )
                    (ß offset = 0)
                )
            )
            (ß intLen = newLen)
            (§ when (ß nBits == 0)
                (§ return nil)
            )
            (§ cond (ß nBits <= (32 - bitsInHighWord))
                (§
                    (ß MutableBigInteger''primitiveLeftShift(this, nBits))
                )
                :else
                (§
                    (ß MutableBigInteger''primitiveRightShift(this, 32 - nBits))
                )
            )
        )
        nil
    )

    ;;;
     ; A primitive used for division. This method adds in one multiple of the
     ; divisor a back to the dividend result at a specified offset. It is used
     ; when qhat was estimated too large, and must be adjusted.
     ;;
    #_method
    (defn- #_"int" MutableBigInteger''divadd [#_"MutableBigInteger" this, #_"int[]" a, #_"int[]" result, #_"int" offset]
        (§
            (ß #_"long" carry = 0)

            (§ for [(ß #_"int" j = a.length - 1)] (ß j >= 0) [(ß j--)]
                (ß #_"long" sum = (a[j] & BigInteger'LONG_MASK) + (result[j + offset] & BigInteger'LONG_MASK) + carry)
                (ß result[j + offset] = (int)sum)
                (ß carry = sum >>> 32)
            )
            (§ return (int)carry)
        )
    )

    ;;;
     ; This method is used for division. It multiplies an n word input a by one
     ; word input x, and subtracts the n word product from q. This is needed
     ; when subtracting qhat*divisor from dividend.
     ;;
    #_method
    (defn- #_"int" MutableBigInteger''mulsub [#_"MutableBigInteger" this, #_"int[]" q, #_"int[]" a, #_"int" x, #_"int" len, #_"int" offset]
        (§
            (ß #_"long" xLong = x & BigInteger'LONG_MASK)
            (ß #_"long" carry = 0)
            (ß offset += len)

            (§ for [(ß #_"int" j = len - 1)] (ß j >= 0) [(ß j--)]
                (ß #_"long" product = (a[j] & BigInteger'LONG_MASK) * xLong + carry)
                (ß #_"long" difference = q[offset] - product)
                (ß q[offset--] = (int)difference)
                (ß carry = (product >>> 32) + (((difference & BigInteger'LONG_MASK) > ((((§ bit-not)(int)product) & BigInteger'LONG_MASK))) ? 1 #_":" 0))
            )
            (§ return (int)carry)
        )
    )

    ;;;
     ; The method is the same as mulsun, except the fact that q array is not
     ; updated, the only result of the method is borrow flag.
     ;;
    #_method
    (defn- #_"int" MutableBigInteger''mulsubBorrow [#_"MutableBigInteger" this, #_"int[]" q, #_"int[]" a, #_"int" x, #_"int" len, #_"int" offset]
        (§
            (ß #_"long" xLong = x & BigInteger'LONG_MASK)
            (ß #_"long" carry = 0)
            (ß offset += len)
            (§ for [(ß #_"int" j = len - 1)] (ß j >= 0) [(ß j--)]
                (ß #_"long" product = (a[j] & BigInteger'LONG_MASK) * xLong + carry)
                (ß #_"long" difference = q[offset--] - product)
                (ß carry = (product >>> 32) + (((difference & BigInteger'LONG_MASK) > ((((§ bit-not)(int)product) & BigInteger'LONG_MASK))) ? 1 #_":" 0))
            )
            (§ return (int)carry)
        )
    )

    ;;;
     ; Right shift this MutableBigInteger n bits, where n is less than 32.
     ; Assumes that intLen > 0, n > 0 for speed
     ;;
    #_method
    (defn- #_"void" MutableBigInteger''primitiveRightShift [#_"MutableBigInteger" this, #_"int" n]
        (§
            (ß #_"int[]" val = value)
            (ß #_"int" n2 = 32 - n)
            (§ for [(ß #_"int" i = offset + intLen - 1, c = val[i])] (ß i > offset) [(ß i--)]
                (ß #_"int" b = c)
                (ß c = val[i - 1])
                (ß val[i] = (c << n2) | (b >>> n))
            )
            (ß val[offset] >>>= n)
        )
        nil
    )

    ;;;
     ; Left shift this MutableBigInteger n bits, where n is less than 32.
     ; Assumes that intLen > 0, n > 0 for speed
     ;;
    #_method
    (defn- #_"void" MutableBigInteger''primitiveLeftShift [#_"MutableBigInteger" this, #_"int" n]
        (§
            (ß #_"int[]" val = value)
            (ß #_"int" n2 = 32 - n)
            (§ for [(ß #_"int" i = offset, c = val[i], m = i + intLen - 1)] (ß i < m) [(ß i++)]
                (ß #_"int" b = c)
                (ß c = val[i + 1])
                (ß val[i] = (b << n) | (c >>> n2))
            )
            (ß val[offset + intLen - 1] <<= n)
        )
        nil
    )

    ;;;
     ; Adds the contents of two MutableBigInteger objects.
     ; The result is placed within this MutableBigInteger.
     ; The contents of the addend are not changed.
     ;;
    #_method
    (defn #_"void" MutableBigInteger''add [#_"MutableBigInteger" this, #_"MutableBigInteger" addend]
        (§
            (ß #_"int" x = intLen)
            (ß #_"int" y = addend.intLen)
            (ß #_"int" resultLen = (intLen > addend.intLen ? intLen #_":" addend.intLen))
            (ß #_"int[]" result = (value.length < resultLen) ? new int[resultLen] #_":" value)

            (ß #_"int" rstart = result.length - 1)
            (ß #_"long" sum)
            (ß #_"long" carry = 0)

            ;; add common parts of both numbers
            (§ while (ß x > 0 && y > 0)
                (ß x--)
                (ß y--)
                (ß sum = (value[x + offset] & BigInteger'LONG_MASK) + (addend.value[y + addend.offset] & BigInteger'LONG_MASK) + carry)
                (ß result[rstart--] = (int)sum)
                (ß carry = sum >>> 32)
            )

            ;; add remainder of the longer number
            (§ while (ß x > 0)
                (ß x--)
                (§ when (ß carry == 0 && result == value && rstart == (x + offset))
                    (§ return nil)
                )
                (ß sum = (value[x + offset] & BigInteger'LONG_MASK) + carry)
                (ß result[rstart--] = (int)sum)
                (ß carry = sum >>> 32)
            )
            (§ while (ß y > 0)
                (ß y--)
                (ß sum = (addend.value[y + addend.offset] & BigInteger'LONG_MASK) + carry)
                (ß result[rstart--] = (int)sum)
                (ß carry = sum >>> 32)
            )

            (§ when (ß carry > 0) ;; result must grow in length
                (ß resultLen++)
                (§ cond (ß result.length < resultLen)
                    (§
                        (ß #_"int[]" temp = new int[resultLen])
                        ;; result one word longer from carry-out,
                        ;; copy low-order bits into new result
                        (ß System.arraycopy(result, 0, temp, 1, result.length))
                        (ß temp[0] = 1)
                        (ß result = temp)
                    )
                    :else
                    (§
                        (ß result[rstart--] = 1)
                    )
                )
            )

            (ß value = result)
            (ß intLen = resultLen)
            (ß offset = result.length - resultLen)
        )
        nil
    )

    ;;;
     ; Subtracts the smaller of this and b from the larger and places the
     ; result into this MutableBigInteger.
     ;;
    #_method
    (defn #_"int" MutableBigInteger''subtract [#_"MutableBigInteger" this, #_"MutableBigInteger" b]
        (§
            (ß #_"MutableBigInteger" a = this)

            (ß #_"int[]" result = value)
            (ß #_"int" sign = MutableBigInteger''compare(a, b))

            (§ when (ß sign == 0)
                (ß MutableBigInteger''reset(this))
                (§ return 0)
            )
            (§ when (ß sign < 0)
                (ß #_"MutableBigInteger" tmp = a)
                (ß a = b)
                (ß b = tmp)
            )

            (ß #_"int" resultLen = a.intLen)
            (§ when (ß result.length < resultLen)
                (ß result = new int[resultLen])
            )

            (ß #_"long" diff = 0)
            (ß #_"int" x = a.intLen)
            (ß #_"int" y = b.intLen)
            (ß #_"int" rstart = result.length - 1)

            ;; subtract common parts of both numbers
            (§ while (ß y > 0)
                (ß x--)
                (ß y--)
                (ß diff = (a.value[x + a.offset] & BigInteger'LONG_MASK) - (b.value[y + b.offset] & BigInteger'LONG_MASK) - ((int)-(diff >> 32)))
                (ß result[rstart--] = (int)diff)
            )
            ;; subtract remainder of longer number
            (§ while (ß x > 0)
                (ß x--)
                (ß diff = (a.value[x + a.offset] & BigInteger'LONG_MASK) - ((int)-(diff >> 32)))
                (ß result[rstart--] = (int)diff)
            )

            (ß value = result)
            (ß intLen = resultLen)
            (ß offset = value.length - resultLen)
            (ß MutableBigInteger''normalize(this))
            (§ return sign)
        )
    )

    ;;;
     ; Subtracts the smaller of a and b from the larger and places the result into the larger.
     ; Returns 1 if the answer is in a, -1 if in b, 0 if no operation was performed.
     ;;
    #_method
    (defn- #_"int" MutableBigInteger''difference [#_"MutableBigInteger" this, #_"MutableBigInteger" b]
        (§
            (ß #_"MutableBigInteger" a = this)
            (ß #_"int" sign = MutableBigInteger''compare(a, b))
            (§ when (ß sign == 0)
                (§ return 0)
            )
            (§ when (ß sign < 0)
                (ß #_"MutableBigInteger" tmp = a)
                (ß a = b)
                (ß b = tmp)
            )

            (ß #_"long" diff = 0)
            (ß #_"int" x = a.intLen)
            (ß #_"int" y = b.intLen)

            ;; subtract common parts of both numbers
            (§ while (ß y > 0)
                (ß x--)
                (ß y--)
                (ß diff = (a.value[a.offset + x] & BigInteger'LONG_MASK) - (b.value[b.offset + y] & BigInteger'LONG_MASK) - ((int)-(diff >> 32)))
                (ß a.value[a.offset + x] = (int)diff)
            )
            ;; subtract remainder of longer number
            (§ while (ß x > 0)
                (ß x--)
                (ß diff = (a.value[a.offset + x] & BigInteger'LONG_MASK) - ((int)-(diff >> 32)))
                (ß a.value[a.offset + x] = (int)diff)
            )

            (ß MutableBigInteger''normalize(a))
            (§ return sign)
        )
    )

    ;;;
     ; Multiply the contents of two MutableBigInteger objects. The result is
     ; placed into MutableBigInteger z. The contents of y are not changed.
     ;;
    #_method
    (defn #_"void" MutableBigInteger''multiply [#_"MutableBigInteger" this, #_"MutableBigInteger" y, #_"MutableBigInteger" z]
        (§
            (ß #_"int" xLen = intLen)
            (ß #_"int" yLen = y.intLen)
            (ß #_"int" newLen = xLen + yLen)

            ;; put z into an appropriate state to receive product
            (§ when (ß z.value.length < newLen)
                (ß z.value = new int[newLen])
            )
            (ß z.offset = 0)
            (ß z.intLen = newLen)

            ;; the first iteration is hoisted out of the loop to avoid extra add
            (ß #_"long" carry = 0)
            (§ for [(ß #_"int" j = yLen - 1, k = yLen + xLen - 1)] (ß j >= 0) [(ß j--, k--)]
                (ß #_"long" product = (y.value[j + y.offset] & BigInteger'LONG_MASK) * (value[xLen - 1 + offset] & BigInteger'LONG_MASK) + carry)
                (ß z.value[k] = (int)product)
                (ß carry = product >>> 32)
            )
            (ß z.value[xLen - 1] = (int)carry)

            ;; perform the multiplication word by word
            (§ for [(ß #_"int" i = xLen - 2)] (ß i >= 0) [(ß i--)]
                (ß carry = 0)
                (§ for [(ß #_"int" j = yLen - 1, k = yLen + i)] (ß j >= 0) [(ß j--, k--)]
                    (ß #_"long" product = (y.value[j + y.offset] & BigInteger'LONG_MASK) * (value[i + offset] & BigInteger'LONG_MASK) + (z.value[k] & BigInteger'LONG_MASK) + carry)
                    (ß z.value[k] = (int)product)
                    (ß carry = product >>> 32)
                )
                (ß z.value[i] = (int)carry)
            )

            ;; remove leading zeros from product
            (ß MutableBigInteger''normalize(z))
        )
        nil
    )

    ;;;
     ; Multiply the contents of this MutableBigInteger by the word y.
     ; The result is placed into z.
     ;;
    #_method
    (defn #_"void" MutableBigInteger''mul [#_"MutableBigInteger" this, #_"int" y, #_"MutableBigInteger" z]
        (§
            (§ when (ß y == 1)
                (ß MutableBigInteger''copyValue-m(z, this))
                (§ return nil)
            )

            (§ when (ß y == 0)
                (ß MutableBigInteger''clear(z))
                (§ return nil)
            )

            ;; perform the multiplication word by word
            (ß #_"long" ylong = y & BigInteger'LONG_MASK)
            (ß #_"int[]" zval = (z.value.length < intLen + 1) ? new int[intLen + 1] #_":" z.value)
            (ß #_"long" carry = 0)
            (§ for [(ß #_"int" i = intLen - 1)] (ß i >= 0) [(ß i--)]
                (ß #_"long" product = ylong * (value[i + offset] & BigInteger'LONG_MASK) + carry)
                (ß zval[i + 1] = (int)product)
                (ß carry = product >>> 32)
            )

            (§ cond (ß carry == 0)
                (§
                    (ß z.offset = 1)
                    (ß z.intLen = intLen)
                )
                :else
                (§
                    (ß z.offset = 0)
                    (ß z.intLen = intLen + 1)
                    (ß zval[0] = (int)carry)
                )
            )
            (ß z.value = zval)
        )
        nil
    )

    ;;;
     ; This method is used for division of an n word dividend by a one word divisor.
     ; The quotient is placed into quotient. The one word divisor is specified by divisor.
     ;
     ; @return the remainder of the division is returned.
     ;;
    #_method
    (defn #_"int" MutableBigInteger''divideOneWord [#_"MutableBigInteger" this, #_"int" divisor, #_"MutableBigInteger" quotient]
        (§
            (ß #_"long" divisorLong = divisor & BigInteger'LONG_MASK)

            ;; special case of one word dividend
            (§ when (ß intLen == 1)
                (ß #_"long" dividendValue = value[offset] & BigInteger'LONG_MASK)
                (ß #_"int" q = (int) (dividendValue / divisorLong))
                (ß #_"int" r = (int) (dividendValue - q * divisorLong))
                (ß quotient.value[0] = q)
                (ß quotient.intLen = (q == 0) ? 0 #_":" 1)
                (ß quotient.offset = 0)
                (§ return r)
            )

            (§ when (ß quotient.value.length < intLen)
                (ß quotient.value = new int[intLen])
            )
            (ß quotient.offset = 0)
            (ß quotient.intLen = intLen)

            ;; normalize the divisor
            (ß #_"int" shift = Integer.numberOfLeadingZeros(divisor))

            (ß #_"int" rem = value[offset])
            (ß #_"long" remLong = rem & BigInteger'LONG_MASK)
            (§ cond (ß remLong < divisorLong)
                (§
                    (ß quotient.value[0] = 0)
                )
                :else
                (§
                    (ß quotient.value[0] = (int)(remLong / divisorLong))
                    (ß rem = (int) (remLong - (quotient.value[0] * divisorLong)))
                    (ß remLong = rem & BigInteger'LONG_MASK)
                )
            )
            (ß #_"int" xlen = intLen)
            (§ while (ß --xlen > 0)
                (ß #_"long" dividendEstimate = (remLong << 32) | (value[offset + intLen - xlen] & BigInteger'LONG_MASK))
                (ß #_"int" q)
                (§ cond (ß dividendEstimate >= 0)
                    (§
                        (ß q = (int) (dividendEstimate / divisorLong))
                        (ß rem = (int) (dividendEstimate - q * divisorLong))
                    )
                    :else
                    (§
                        (ß #_"long" tmp = MutableBigInteger'divWord(dividendEstimate, divisor))
                        (ß q = (int) (tmp & BigInteger'LONG_MASK))
                        (ß rem = (int) (tmp >>> 32))
                    )
                )
                (ß quotient.value[intLen - xlen] = q)
                (ß remLong = rem & BigInteger'LONG_MASK)
            )

            (ß MutableBigInteger''normalize(quotient))
            ;; unnormalize
            (§ cond (ß shift > 0)
                (§
                    (§ return rem % divisor)
                )
                :else
                (§
                    (§ return rem)
                )
            )
        )
    )

    ;;;
     ; Calculates the quotient of this div b and places the quotient in the
     ; provided MutableBigInteger objects and the remainder object is returned.
     ;;
    #_method
    (defn #_"MutableBigInteger" MutableBigInteger''divide-3 [#_"MutableBigInteger" this, #_"MutableBigInteger" b, #_"MutableBigInteger" quotient]
        (§
            (§ return MutableBigInteger''divide-4(this, b, quotient, true))
        )
    )

    #_method
    (defn #_"MutableBigInteger" MutableBigInteger''divide-4 [#_"MutableBigInteger" this, #_"MutableBigInteger" b, #_"MutableBigInteger" quotient, #_"boolean" needRemainder]
        (§
            (§ return MutableBigInteger''divideKnuth-4(this, b, quotient, needRemainder))
        )
    )

    #_method
    (defn #_"MutableBigInteger" MutableBigInteger''divideKnuth [#_"MutableBigInteger" this, #_"MutableBigInteger" b, #_"MutableBigInteger" quotient]
        (§
            (§ return MutableBigInteger''divideKnuth-4(this, b, quotient, true))
        )
    )

    ;;;
     ; Calculates the quotient of this div b and places the quotient in the
     ; provided MutableBigInteger objects and the remainder object is returned.
     ;
     ; Uses Algorithm D in Knuth section 4.3.1.
     ; Many optimizations to that algorithm have been adapted from the Colin Plumb C library.
     ; It special cases one word divisors for speed. The content of b is not changed.
     ;;
    #_method
    (defn #_"MutableBigInteger" MutableBigInteger''divideKnuth [#_"MutableBigInteger" this, #_"MutableBigInteger" b, #_"MutableBigInteger" quotient, #_"boolean" needRemainder]
        (§
            (§ when (ß b.intLen == 0)
                (ß throw new ArithmeticException("BigInteger divide by zero"))
            )

            ;; dividend is zero
            (§ when (ß intLen == 0)
                (ß quotient.intLen = quotient.offset = 0)
                (§ return needRemainder ? MutableBigInteger'new() #_":" nil)
            )

            (ß #_"int" cmp = MutableBigInteger''compare(this, b))
            ;; dividend less than divisor
            (§ when (ß cmp < 0)
                (ß quotient.intLen = quotient.offset = 0)
                (§ return needRemainder ? MutableBigInteger'new(this) #_":" nil)
            )
            ;; dividend equal to divisor
            (§ when (ß cmp == 0)
                (ß quotient.value[0] = quotient.intLen = 1)
                (ß quotient.offset = 0)
                (§ return needRemainder ? MutableBigInteger'new() #_":" nil)
            )

            (ß MutableBigInteger''clear(quotient))
            ;; special case one word divisor
            (§ when (ß b.intLen == 1)
                (ß #_"int" r = MutableBigInteger''divideOneWord(this, b.value[b.offset], quotient))
                (§ cond (ß needRemainder)
                    (§
                        (§ when (ß r == 0)
                            (§ return MutableBigInteger'new())
                        )
                        (§ return MutableBigInteger'new(r))
                    )
                    :else
                    (§
                        (§ return nil)
                    )
                )
            )

            ;; cancel common powers of two if we're above the KNUTH_POW2_* thresholds
            (§ when (ß intLen >= MutableBigInteger'KNUTH_POW2_THRESH_LEN)
                (ß #_"int" trailingZeroBits = Math.min(MutableBigInteger''getLowestSetBit(this), MutableBigInteger''getLowestSetBit(b)))
                (§ when (ß trailingZeroBits >= MutableBigInteger'KNUTH_POW2_THRESH_ZEROS * 32)
                    (ß #_"MutableBigInteger" a = MutableBigInteger'new(this))
                    (ß b = MutableBigInteger'new(b))
                    (ß MutableBigInteger''rightShift(a, trailingZeroBits))
                    (ß MutableBigInteger''rightShift(b, trailingZeroBits))
                    (ß #_"MutableBigInteger" r = MutableBigInteger''divideKnuth-3(a, b, quotient))
                    (ß MutableBigInteger''leftShift(r, trailingZeroBits))
                    (§ return r)
                )
            )

            (§ return MutableBigInteger''divideMagnitude(this, b, quotient, needRemainder))
        )
    )

    #_method
    (defn #_"long" MutableBigInteger''bitLength [#_"MutableBigInteger" this]
        (§
            (§ when (ß intLen == 0)
                (§ return 0)
            )
            (§ return intLen * 32 - Integer.numberOfLeadingZeros(value[offset]))
        )
    )

    (defn- #_"void" MutableBigInteger'copyAndShift [#_"int[]" src, #_"int" srcFrom, #_"int" srcLen, #_"int[]" dst, #_"int" dstFrom, #_"int" shift]
        (§
            (ß #_"int" n2 = 32 - shift)
            (ß #_"int" c = src[srcFrom])
            (§ for [(ß #_"int" i = 0)] (ß i < srcLen - 1) [(ß i++)]
                (ß #_"int" b = c)
                (ß c = src[++srcFrom])
                (ß dst[dstFrom + i] = (b << shift) | (c >>> n2))
            )
            (ß dst[dstFrom + srcLen - 1] = c << shift)
        )
        nil
    )

    ;;;
     ; Divide this MutableBigInteger by the divisor.
     ; The quotient will be placed into the provided quotient object &
     ; the remainder object is returned.
     ;;
    #_method
    (defn- #_"MutableBigInteger" MutableBigInteger''divideMagnitude [#_"MutableBigInteger" this, #_"MutableBigInteger" div, #_"MutableBigInteger" quotient, #_"boolean" needRemainder]
        (§
            ;; assert div.intLen > 1
            ;; D1 normalize the divisor
            (ß #_"int" shift = Integer.numberOfLeadingZeros(div.value[div.offset]))
            ;; copy divisor value to protect divisor
            (ß #_"int" dlen = div.intLen)
            (ß #_"int[]" divisor)
            ;; remainder starts as dividend with space for a leading zero
            (ß #_"MutableBigInteger" rem)
            (§ cond (ß shift > 0)
                (§
                    (ß divisor = new int[dlen])
                    (ß MutableBigInteger'copyAndShift(div.value, div.offset, dlen, divisor, 0, shift))
                    (§ cond (ß Integer.numberOfLeadingZeros(value[offset]) >= shift)
                        (§
                            (ß #_"int[]" remarr = new int[intLen + 1])
                            (ß rem = MutableBigInteger'new(remarr))
                            (ß rem.intLen = intLen)
                            (ß rem.offset = 1)
                            (ß MutableBigInteger'copyAndShift(value, offset, intLen, remarr, 1, shift))
                        )
                        :else
                        (§
                            (ß #_"int[]" remarr = new int[intLen + 2])
                            (ß rem = MutableBigInteger'new(remarr))
                            (ß rem.intLen = intLen + 1)
                            (ß rem.offset = 1)
                            (ß #_"int" rFrom = offset)
                            (ß #_"int" c = 0)
                            (ß #_"int" n2 = 32 - shift)
                            (§ for [(ß #_"int" i = 1)] (ß i < intLen + 1) [(ß i++, rFrom++)]
                                (ß #_"int" b = c)
                                (ß c = value[rFrom])
                                (ß remarr[i] = (b << shift) | (c >>> n2))
                            )
                            (ß remarr[intLen + 1] = c << shift)
                        )
                    )
                )
                :else
                (§
                    (ß divisor = Arrays.copyOfRange(div.value, div.offset, div.offset + div.intLen))
                    (ß rem = MutableBigInteger'new(new int[intLen + 1]))
                    (ß System.arraycopy(value, offset, rem.value, 1, intLen))
                    (ß rem.intLen = intLen)
                    (ß rem.offset = 1)
                )
            )

            (ß #_"int" nlen = rem.intLen)

            ;; set the quotient size
            (ß #_"int" limit = nlen - dlen + 1)
            (§ when (ß quotient.value.length < limit)
                (ß quotient.value = new int[limit])
                (ß quotient.offset = 0)
            )
            (ß quotient.intLen = limit)
            (ß #_"int[]" q = quotient.value)

            ;; must insert leading 0 in rem if its length did not change
            (§ when (ß rem.intLen == nlen)
                (ß rem.offset = 0)
                (ß rem.value[0] = 0)
                (ß rem.intLen++)
            )

            (ß #_"int" dh = divisor[0])
            (ß #_"long" dhLong = dh & BigInteger'LONG_MASK)
            (ß #_"int" dl = divisor[1])

            ;; D2 Initialize j
            (§ for [(ß #_"int" j = 0)] (ß j < limit - 1) [(ß j++)]
                ;; D3 Calculate qhat
                ;; estimate qhat
                (ß #_"int" qhat = 0)
                (ß #_"int" qrem = 0)
                (ß #_"boolean" skipCorrection = false)
                (ß #_"int" nh = rem.value[j + rem.offset])
                (ß #_"int" nh2 = nh + 0x80000000)
                (ß #_"int" nm = rem.value[j + 1 + rem.offset])

                (§ cond (ß nh == dh)
                    (§
                        (ß qhat = (§ bit-not)0)
                        (ß qrem = nh + nm)
                        (ß skipCorrection = qrem + 0x80000000 < nh2)
                    )
                    :else
                    (§
                        (ß #_"long" nChunk = (((long)nh) << 32) | (nm & BigInteger'LONG_MASK))
                        (§ cond (ß nChunk >= 0)
                            (§
                                (ß qhat = (int) (nChunk / dhLong))
                                (ß qrem = (int) (nChunk - (qhat * dhLong)))
                            )
                            :else
                            (§
                                (ß #_"long" tmp = MutableBigInteger'divWord(nChunk, dh))
                                (ß qhat = (int) (tmp & BigInteger'LONG_MASK))
                                (ß qrem = (int) (tmp >>> 32))
                            )
                        )
                    )
                )

                (§ when (ß qhat == 0)
                    (ß continue)
                )

                (§ when (ß !skipCorrection) ;; correct qhat
                    (ß #_"long" nl = rem.value[j + 2 + rem.offset] & BigInteger'LONG_MASK)
                    (ß #_"long" rs = ((qrem & BigInteger'LONG_MASK) << 32) | nl)
                    (ß #_"long" estProduct = (dl & BigInteger'LONG_MASK) * (qhat & BigInteger'LONG_MASK))

                    (§ when (ß MutableBigInteger''unsignedLongCompare(this, estProduct, rs))
                        (ß qhat--)
                        (ß qrem = (int)((qrem & BigInteger'LONG_MASK) + dhLong))
                        (§ when (ß (qrem & BigInteger'LONG_MASK) >= dhLong)
                            (ß estProduct -= (dl & BigInteger'LONG_MASK))
                            (ß rs = ((qrem & BigInteger'LONG_MASK) << 32) | nl)
                            (§ when (ß MutableBigInteger''unsignedLongCompare(this, estProduct, rs))
                                (ß qhat--)
                            )
                        )
                    )
                )

                ;; D4 Multiply and subtract
                (ß rem.value[j + rem.offset] = 0)
                (ß #_"int" borrow = MutableBigInteger''mulsub(this, rem.value, divisor, qhat, dlen, j + rem.offset))

                ;; D5 Test remainder
                (§ when (ß borrow + 0x80000000 > nh2)
                    ;; D6 Add back
                    (ß MutableBigInteger''divadd(this, divisor, rem.value, j + 1 + rem.offset))
                    (ß qhat--)
                )

                ;; store the quotient digit
                (ß q[j] = qhat)
            ) ;; D7 loop on j
            ;; D3 Calculate qhat
            ;; estimate qhat
            (ß #_"int" qhat = 0)
            (ß #_"int" qrem = 0)
            (ß #_"boolean" skipCorrection = false)
            (ß #_"int" nh = rem.value[limit - 1 + rem.offset])
            (ß #_"int" nh2 = nh + 0x80000000)
            (ß #_"int" nm = rem.value[limit + rem.offset])

            (§ cond (ß nh == dh)
                (§
                    (ß qhat = (§ bit-not)0)
                    (ß qrem = nh + nm)
                    (ß skipCorrection = qrem + 0x80000000 < nh2)
                )
                :else
                (§
                    (ß #_"long" nChunk = (((long) nh) << 32) | (nm & BigInteger'LONG_MASK))
                    (§ cond (ß nChunk >= 0)
                        (§
                            (ß qhat = (int) (nChunk / dhLong))
                            (ß qrem = (int) (nChunk - (qhat * dhLong)))
                        )
                        :else
                        (§
                            (ß #_"long" tmp = MutableBigInteger'divWord(nChunk, dh))
                            (ß qhat = (int) (tmp & BigInteger'LONG_MASK))
                            (ß qrem = (int) (tmp >>> 32))
                        )
                    )
                )
            )
            (§ when (ß qhat != 0)
                (§ when (ß !skipCorrection) ;; correct qhat
                    (ß #_"long" nl = rem.value[limit + 1 + rem.offset] & BigInteger'LONG_MASK)
                    (ß #_"long" rs = ((qrem & BigInteger'LONG_MASK) << 32) | nl)
                    (ß #_"long" estProduct = (dl & BigInteger'LONG_MASK) * (qhat & BigInteger'LONG_MASK))

                    (§ when (ß MutableBigInteger''unsignedLongCompare(this, estProduct, rs))
                        (ß qhat--)
                        (ß qrem = (int) ((qrem & BigInteger'LONG_MASK) + dhLong))
                        (§ when (ß (qrem & BigInteger'LONG_MASK) >= dhLong)
                            (ß estProduct -= (dl & BigInteger'LONG_MASK))
                            (ß rs = ((qrem & BigInteger'LONG_MASK) << 32) | nl)
                            (§ when (ß MutableBigInteger''unsignedLongCompare(this, estProduct, rs))
                                (ß qhat--)
                            )
                        )
                    )
                )

                ;; D4 Multiply and subtract
                (ß #_"int" borrow)
                (ß rem.value[limit - 1 + rem.offset] = 0)
                (§ cond (ß needRemainder)
                    (§
                        (ß borrow = MutableBigInteger''mulsub(this, rem.value, divisor, qhat, dlen, limit - 1 + rem.offset))
                    )
                    :else
                    (§
                        (ß borrow = MutableBigInteger''mulsubBorrow(this, rem.value, divisor, qhat, dlen, limit - 1 + rem.offset))
                    )
                )

                ;; D5 Test remainder
                (§ when (ß borrow + 0x80000000 > nh2)
                    ;; D6 Add back
                    (§ when (ß needRemainder)
                        (ß MutableBigInteger''divadd(this, divisor, rem.value, limit - 1 + 1 + rem.offset))
                    )
                    (ß qhat--)
                )

                ;; store the quotient digit
                (ß q[limit - 1] = qhat)
            )

            (§ when (ß needRemainder)
                ;; D8 Unnormalize
                (§ when (ß shift > 0)
                    (ß MutableBigInteger''rightShift(rem, shift))
                )
                (ß MutableBigInteger''normalize(rem))
            )
            (ß MutableBigInteger''normalize(quotient))
            (§ return needRemainder ? rem #_":" nil)
        )
    )

    ;;;
     ; A primitive used for division by long.
     ; Specialized version of the method divadd.
     ; dh is a high part of the divisor, dl is a low part
     ;;
    #_method
    (defn- #_"int" MutableBigInteger''divaddLong [#_"MutableBigInteger" this, #_"int" dh, #_"int" dl, #_"int[]" result, #_"int" offset]
        (§
            (ß #_"long" carry = 0)

            (ß #_"long" sum = (dl & BigInteger'LONG_MASK) + (result[1 + offset] & BigInteger'LONG_MASK))
            (ß result[1 + offset] = (int)sum)

            (ß sum = (dh & BigInteger'LONG_MASK) + (result[offset] & BigInteger'LONG_MASK) + carry)
            (ß result[offset] = (int)sum)
            (ß carry = sum >>> 32)
            (§ return (int)carry)
        )
    )

    ;;;
     ; This method is used for division by long.
     ; Specialized version of the method sulsub.
     ; dh is a high part of the divisor, dl is a low part
     ;;
    #_method
    (defn- #_"int" MutableBigInteger''mulsubLong [#_"MutableBigInteger" this, #_"int[]" q, #_"int" dh, #_"int" dl, #_"int" x, #_"int" offset]
        (§
            (ß #_"long" xLong = x & BigInteger'LONG_MASK)
            (ß offset += 2)
            (ß #_"long" product = (dl & BigInteger'LONG_MASK) * xLong)
            (ß #_"long" difference = q[offset] - product)
            (ß q[offset--] = (int)difference)
            (ß #_"long" carry = (product >>> 32) + (((difference & BigInteger'LONG_MASK) > ((((§ bit-not)(int)product) & BigInteger'LONG_MASK))) ? 1 #_":" 0))
            (ß product = (dh & BigInteger'LONG_MASK) * xLong + carry)
            (ß difference = q[offset] - product)
            (ß q[offset--] = (int)difference)
            (ß carry = (product >>> 32) + (((difference & BigInteger'LONG_MASK) > ((((§ bit-not)(int)product) & BigInteger'LONG_MASK))) ? 1 #_":" 0))
            (§ return (int)carry)
        )
    )

    ;;;
     ; Compare two longs as if they were unsigned.
     ; Returns true iff one is bigger than two.
     ;;
    #_method
    (defn- #_"boolean" MutableBigInteger''unsignedLongCompare [#_"MutableBigInteger" this, #_"long" one, #_"long" two]
        (§
            (§ return (one + Long.MIN_VALUE) > (two + Long.MIN_VALUE))
        )
    )

    ;;;
     ; This method divides a long quantity by an int to estimate
     ; qhat for two multi precision numbers.
     ; It is used when the signed value of n is less than zero.
     ; Returns long value where high 32 bits contain remainder
     ; value and low 32 bits contain quotient value.
     ;;
    (defn #_"long" MutableBigInteger'divWord [#_"long" n, #_"int" d]
        (§
            (ß #_"long" dLong = d & BigInteger'LONG_MASK)
            (ß #_"long" r)
            (ß #_"long" q)
            (§ when (ß dLong == 1)
                (ß q = (int)n)
                (ß r = 0)
                (§ return (r << 32) | (q & BigInteger'LONG_MASK))
            )

            ;; approximate the quotient and remainder
            (ß q = (n >>> 1) / (dLong >>> 1))
            (ß r = n - q * dLong)

            ;; correct the approximation
            (§ while (ß r < 0)
                (ß r += dLong)
                (ß q--)
            )
            (§ while (ß r >= dLong)
                (ß r -= dLong)
                (ß q++)
            )
            ;; n - q*dlong == r && 0 <= r < dLong, hence we're done.
            (§ return (r << 32) | (q & BigInteger'LONG_MASK))
        )
    )

    ;;;
     ; Calculate GCD of this and b. This and b are changed by the computation.
     ;;
    #_method
    (defn #_"MutableBigInteger" MutableBigInteger''hybridGCD [#_"MutableBigInteger" this, #_"MutableBigInteger" b]
        (§
            ;; Use Euclid's algorithm until the numbers are approximately the
            ;; same length, then use the binary GCD algorithm to find the GCD.
            (ß #_"MutableBigInteger" a = this)
            (ß #_"MutableBigInteger" q = MutableBigInteger'new())

            (§ while (ß b.intLen != 0)
                (§ when (ß Math.abs(a.intLen - b.intLen) < 2)
                    (§ return MutableBigInteger''binaryGCD(a, b))
                )

                (ß #_"MutableBigInteger" r = MutableBigInteger''divide-3(a, b, q))
                (ß a = b)
                (ß b = r)
            )
            (§ return a)
        )
    )

    ;;;
     ; Calculate GCD of this and v.
     ; Assumes that this and v are not zero.
     ;;
    #_method
    (defn- #_"MutableBigInteger" MutableBigInteger''binaryGCD [#_"MutableBigInteger" this, #_"MutableBigInteger" v]
        (§
            ;; algorithm B from Knuth section 4.5.2
            (ß #_"MutableBigInteger" u = this)
            (ß #_"MutableBigInteger" r = MutableBigInteger'new())

            ;; step B1
            (ß #_"int" s1 = MutableBigInteger''getLowestSetBit(u))
            (ß #_"int" s2 = MutableBigInteger''getLowestSetBit(v))
            (ß #_"int" k = (s1 < s2) ? s1 #_":" s2)
            (§ when (ß k != 0)
                (ß MutableBigInteger''rightShift(u, k))
                (ß MutableBigInteger''rightShift(v, k))
            )

            ;; step B2
            (ß #_"boolean" uOdd = (k == s1))
            (ß #_"MutableBigInteger" t = uOdd ? v #_":" u)
            (ß #_"int" tsign = uOdd ? -1 #_":" 1)

            (ß #_"int" lb)
            (§ while (ß (lb = MutableBigInteger''getLowestSetBit(t)) >= 0)
                ;; steps B3 and B4
                (ß MutableBigInteger''rightShift(t, lb))
                ;; step B5
                (§ cond (ß tsign > 0)
                    (§
                        (ß u = t)
                    )
                    :else
                    (§
                        (ß v = t)
                    )
                )

                ;; special case one word numbers
                (§ when (ß u.intLen < 2 && v.intLen < 2)
                    (ß #_"int" x = u.value[u.offset])
                    (ß #_"int" y = v.value[v.offset])
                    (ß x = MutableBigInteger'binaryGcd(x, y))
                    (ß r.value[0] = x)
                    (ß r.intLen = 1)
                    (ß r.offset = 0)
                    (§ when (ß k > 0)
                        (ß MutableBigInteger''leftShift(r, k))
                    )
                    (§ return r)
                )

                ;; step B6
                (§ when (ß (tsign = MutableBigInteger''difference(u, v)) == 0)
                    (ß break)
                )
                (ß t = (tsign >= 0) ? u #_":" v)
            )

            (§ when (ß k > 0)
                (ß MutableBigInteger''leftShift(u, k))
            )
            (§ return u)
        )
    )

    ;;;
     ; Calculate GCD of a and b interpreted as unsigned integers.
     ;;
    (defn #_"int" MutableBigInteger'binaryGcd [#_"int" a, #_"int" b]
        (§
            (§ when (ß b == 0)
                (§ return a)
            )
            (§ when (ß a == 0)
                (§ return b)
            )

            ;; right shift a & b till their last bits equal to 1
            (ß #_"int" aZeros = Integer.numberOfTrailingZeros(a))
            (ß #_"int" bZeros = Integer.numberOfTrailingZeros(b))
            (ß a >>>= aZeros)
            (ß b >>>= bZeros)

            (ß #_"int" t = (aZeros < bZeros) ? aZeros #_":" bZeros)

            (§ while (ß a != b)
                (§ cond (ß (a + 0x80000000) > (b + 0x80000000)) ;; a > b as unsigned
                    (§
                        (ß a -= b)
                        (ß a >>>= Integer.numberOfTrailingZeros(a))
                    )
                    :else
                    (§
                        (ß b -= a)
                        (ß b >>>= Integer.numberOfTrailingZeros(b))
                    )
                )
            )
            (§ return a << t)
        )
    )

    ;;;
     ; Returns the modInverse of this mod p.
     ; This and p are not affected by the operation.
     ;;
    #_method
    (defn #_"MutableBigInteger" MutableBigInteger''mutableModInverse [#_"MutableBigInteger" this, #_"MutableBigInteger" p]
        (§
            ;; modulus is odd, use Schroeppel's algorithm
            (§ when (ß MutableBigInteger''isOdd(p))
                (§ return MutableBigInteger''modInverse(this, p))
            )

            ;; base and modulus are even, throw exception
            (§ when (ß MutableBigInteger''isEven(this))
                (ß throw new ArithmeticException("BigInteger not invertible."))
            )

            ;; get even part of modulus expressed as a power of 2
            (ß #_"int" powersOf2 = MutableBigInteger''getLowestSetBit(p))

            ;; construct odd part of modulus
            (ß #_"MutableBigInteger" oddMod = MutableBigInteger'new(p))
            (ß MutableBigInteger''rightShift(oddMod, powersOf2))

            (§ when (ß MutableBigInteger''isOne(oddMod))
                (§ return MutableBigInteger''modInverseMP2(this, powersOf2))
            )

            ;; calculate 1/a mod oddMod
            (ß #_"MutableBigInteger" oddPart = MutableBigInteger''modInverse(this, oddMod))

            ;; calculate 1/a mod evenMod
            (ß #_"MutableBigInteger" evenPart = MutableBigInteger''modInverseMP2(this, powersOf2))

            ;; combine the results using Chinese Remainder Theorem
            (ß #_"MutableBigInteger" y1 = MutableBigInteger'modInverseBP2(oddMod, powersOf2))
            (ß #_"MutableBigInteger" y2 = MutableBigInteger''modInverseMP2(oddMod, powersOf2))

            (ß #_"MutableBigInteger" temp1 = MutableBigInteger'new())
            (ß #_"MutableBigInteger" temp2 = MutableBigInteger'new())
            (ß #_"MutableBigInteger" result = MutableBigInteger'new())

            (ß MutableBigInteger''leftShift(oddPart, powersOf2))
            (ß MutableBigInteger''multiply(oddPart, y1, result))

            (ß MutableBigInteger''multiply(evenPart, oddMod, temp1))
            (ß MutableBigInteger''multiply(temp1, y2, temp2))

            (ß MutableBigInteger''add(result, temp2))
            (§ return MutableBigInteger''divide-3(result, p, temp1))
        )
    )

    ;;
     ; Calculate the multiplicative inverse of this mod 2^k.
     ;;
    #_method
    (defn #_"MutableBigInteger" MutableBigInteger''modInverseMP2 [#_"MutableBigInteger" this, #_"int" k]
        (§
            (§ when (ß MutableBigInteger''isEven(this))
                (ß throw new ArithmeticException("Non-invertible. (GCD != 1)"))
            )

            (§ when (ß k > 64)
                (§ return MutableBigInteger''euclidModInverse(this, k))
            )

            (ß #_"int" t = MutableBigInteger'inverseMod32(value[offset + intLen - 1]))

            (§ when (ß k < 33)
                (ß t = (k == 32) ? t #_":" t & ((1 << k) - 1))
                (§ return MutableBigInteger'new(t))
            )

            (ß #_"long" pLong = (value[offset + intLen - 1] & BigInteger'LONG_MASK))
            (§ when (ß intLen > 1)
                (ß pLong |= ((long)value[offset + intLen - 2] << 32))
            )
            (ß #_"long" tLong = t & BigInteger'LONG_MASK)
            (ß tLong = tLong * (2 - pLong * tLong)) ;; 1 more Newton iter step
            (ß tLong = (k == 64) ? tLong #_":" tLong & ((1 << k) - 1))

            (ß #_"MutableBigInteger" result = MutableBigInteger'new(new int[2]))
            (ß result.value[0] = (int)(tLong >>> 32))
            (ß result.value[1] = (int)tLong)
            (ß result.intLen = 2)
            (ß MutableBigInteger''normalize(result))
            (§ return result)
        )
    )

    ;;;
     ; Returns the multiplicative inverse of val mod 2^32. Assumes val is odd.
     ;;
    (defn #_"int" MutableBigInteger'inverseMod32 [#_"int" val]
        (§
            ;; Newton's iteration!
            (ß #_"int" t = val)
            (ß t *= 2 - val * t)
            (ß t *= 2 - val * t)
            (ß t *= 2 - val * t)
            (ß t *= 2 - val * t)
            (§ return t)
        )
    )

    ;;;
     ; Calculate the multiplicative inverse of 2^k mod mod, where mod is odd.
     ;;
    (defn #_"MutableBigInteger" MutableBigInteger'modInverseBP2 [#_"MutableBigInteger" mod, #_"int" k]
        (§
            ;; copy the mod to protect original
            (§ return MutableBigInteger'fixup(MutableBigInteger'new(1), MutableBigInteger'new(mod), k))
        )
    )

    ;;;
     ; Calculate the multiplicative inverse of this mod mod, where mod is odd.
     ; This and mod are not changed by the calculation.
     ;
     ; This method implements an algorithm due to Richard Schroeppel, that
     ; uses the same intermediate representation as Montgomery Reduction
     ; ("Montgomery Form"). The algorithm is described in an unpublished
     ; manuscript entitled "Fast Modular Reciprocals."
     ;;
    #_method
    (defn- #_"MutableBigInteger" MutableBigInteger''modInverse [#_"MutableBigInteger" this, #_"MutableBigInteger" mod]
        (§
            (ß #_"MutableBigInteger" p = MutableBigInteger'new(mod))
            (ß #_"MutableBigInteger" f = MutableBigInteger'new(this))
            (ß #_"MutableBigInteger" g = MutableBigInteger'new(p))
            (ß #_"SignedMutableBigInteger" c = SignedMutableBigInteger'new(1))
            (ß #_"SignedMutableBigInteger" d = SignedMutableBigInteger'new())
            (ß #_"MutableBigInteger" temp = nil)
            (ß #_"SignedMutableBigInteger" sTemp = nil)

            (ß #_"int" k = 0)
            ;; right shift f k times until odd, left shift d k times
            (§ when (ß MutableBigInteger''isEven(f))
                (ß #_"int" trailingZeros = MutableBigInteger''getLowestSetBit(f))
                (ß MutableBigInteger''rightShift(f, trailingZeros))
                (ß MutableBigInteger''leftShift(d, trailingZeros))
                (ß k = trailingZeros)
            )

            ;; the Almost Inverse Algorithm
            (§ while (ß !MutableBigInteger''isOne(f))
                ;; if gcd(f, g) != 1, number is not invertible modulo mod
                (§ when (ß MutableBigInteger''isZero(f))
                    (ß throw new ArithmeticException("BigInteger not invertible."))
                )

                ;; if f < g exchange f, g and c, d
                (§ when (ß MutableBigInteger''compare(f, g) < 0)
                    (ß temp = f)
                    (ß f = g)
                    (ß g = temp)
                    (ß sTemp = d)
                    (ß d = c)
                    (ß c = sTemp)
                )

                ;; if f == g (mod 4)
                (§ cond (ß ((f.value[f.offset + f.intLen - 1] (§ bit-xor) g.value[g.offset + g.intLen - 1]) & 3) == 0)
                    (§
                        (ß MutableBigInteger''subtract(f, g))
                        (ß SignedMutableBigInteger''signedSubtract-s(c, d))
                    )
                    :else ;; if f != g (mod 4)
                    (§
                        (ß MutableBigInteger''add(f, g))
                        (ß SignedMutableBigInteger''signedAdd-s(c, d))
                    )
                )

                ;; right shift f k times until odd, left shift d k times
                (ß #_"int" trailingZeros = MutableBigInteger''getLowestSetBit(f))
                (ß MutableBigInteger''rightShift(f, trailingZeros))
                (ß MutableBigInteger''leftShift(d, trailingZeros))
                (ß k += trailingZeros)
            )

            (§ while (ß c.sign < 0)
                (ß SignedMutableBigInteger''signedAdd-m(c, p))
            )

            (§ return MutableBigInteger'fixup(c, p, k))
        )
    )

    ;;;
     ; The Fixup Algorithm
     ; Calculates X such that X = C * 2^(-k) (mod P)
     ; Assumes C<P and P is odd.
     ;;
    (defn #_"MutableBigInteger" MutableBigInteger'fixup [#_"MutableBigInteger" c, #_"MutableBigInteger" p, #_"int" k]
        (§
            (ß #_"MutableBigInteger" temp = MutableBigInteger'new())
            ;; set r to the multiplicative inverse of p mod 2^32
            (ß #_"int" r = -MutableBigInteger'inverseMod32(p.value[p.offset + p.intLen - 1]))

            (§ for [(ß #_"int" i = 0, numWords = k >> 5)] (ß i < numWords) [(ß i++)]
                ;; V = R * c (mod 2^j)
                (ß #_"int" v = r * c.value[c.offset + c.intLen - 1])
                ;; c = c + (v * p)
                (ß MutableBigInteger''mul(p, v, temp))
                (ß MutableBigInteger''add(c, temp))
                ;; c = c / 2^j
                (ß c.intLen--)
            )
            (ß #_"int" numBits = k & 0x1f)
            (§ when (ß numBits != 0)
                ;; V = R * c (mod 2^j)
                (ß #_"int" v = r * c.value[c.offset + c.intLen - 1])
                (ß v &= ((1 << numBits) - 1))
                ;; c = c + (v * p)
                (ß MutableBigInteger''mul(p, v, temp))
                (ß MutableBigInteger''add(c, temp))
                ;; c = c / 2^j
                (ß MutableBigInteger''rightShift(c, numBits))
            )

            ;; In theory, c may be greater than p at this point (Very rare!)
            (§ while (ß MutableBigInteger''compare(c, p) >= 0)
                (ß MutableBigInteger''subtract(c, p))
            )

            (§ return c)
        )
    )

    ;;;
     ; Uses the extended Euclidean algorithm to compute the modInverse of base
     ; mod a modulus that is a power of 2. The modulus is 2^k.
     ;;
    #_method
    (defn #_"MutableBigInteger" MutableBigInteger''euclidModInverse [#_"MutableBigInteger" this, #_"int" k]
        (§
            (ß #_"MutableBigInteger" b = MutableBigInteger'new(1))
            (ß MutableBigInteger''leftShift(b, k))
            (ß #_"MutableBigInteger" mod = MutableBigInteger'new(b))

            (ß #_"MutableBigInteger" a = MutableBigInteger'new(this))
            (ß #_"MutableBigInteger" q = MutableBigInteger'new())
            (ß #_"MutableBigInteger" r = MutableBigInteger''divide-3(b, a, q))

            (ß #_"MutableBigInteger" swapper = b)
            ;; swap b & r
            (ß b = r)
            (ß r = swapper)

            (ß #_"MutableBigInteger" t1 = MutableBigInteger'new(q))
            (ß #_"MutableBigInteger" t0 = MutableBigInteger'new(1))
            (ß #_"MutableBigInteger" temp = MutableBigInteger'new())

            (§ while (ß !MutableBigInteger''isOne(b))
                (ß r = MutableBigInteger''divide-3(a, b, q))

                (§ when (ß r.intLen == 0)
                    (ß throw new ArithmeticException("BigInteger not invertible."))
                )

                (ß swapper = r)
                (ß a = swapper)

                (§ cond (ß q.intLen == 1)
                    (§
                        (ß MutableBigInteger''mul(t1, q.value[q.offset], temp))
                    )
                    :else
                    (§
                        (ß MutableBigInteger''multiply(q, t1, temp))
                    )
                )
                (ß swapper = q)
                (ß q = temp)
                (ß temp = swapper)
                (ß MutableBigInteger''add(t0, q))

                (§ when (ß MutableBigInteger''isOne(a))
                    (§ return t0)
                )

                (ß r = MutableBigInteger''divide-3(b, a, q))

                (§ when (ß r.intLen == 0)
                    (ß throw new ArithmeticException("BigInteger not invertible."))
                )

                (ß swapper = b)
                (ß b = r)

                (§ cond (ß q.intLen == 1)
                    (§
                        (ß MutableBigInteger''mul(t0, q.value[q.offset], temp))
                    )
                    :else
                    (§
                        (ß MutableBigInteger''multiply(q, t0, temp))
                    )
                )
                (ß swapper = q)
                (ß q = temp)
                (ß temp = swapper)

                (ß MutableBigInteger''add(t1, q))
            )
            (ß MutableBigInteger''subtract(mod, t1))
            (§ return mod)
        )
    )
)

;;;
 ; A class used to represent multiprecision integers that makes efficient
 ; use of allocated space by allowing a number to occupy only part of
 ; an array so that the arrays do not have to be reallocated as often.
 ;
 ; When performing an operation with many iterations the array used to
 ; hold a number is only increased when necessary and does not have to
 ; be the same size as the number it represents. A mutable number allows
 ; calculations to occur on the same number without having to create
 ; a new number for every step of the calculation as occurs with
 ; BigIntegers.
 ;
 ; Note that SignedMutableBigIntegers only support signed addition and
 ; subtraction. All other operations occur as with MutableBigIntegers.
 ;;

(class-ns SignedMutableBigInteger (§ extends #_"MutableBigInteger")
    ;;;
     ; The sign of this MutableBigInteger.
     ;;
    (§ field #_"int" sign = 1)

    ;; constructors

    ;;;
     ; The default constructor. An empty MutableBigInteger is created with
     ; a one word capacity.
     ;;
    (defn #_"SignedMutableBigInteger" SignedMutableBigInteger'new []
        (§
            (ß super())
        )
    )

    ;;;
     ; Construct a new MutableBigInteger with a magnitude specified by
     ; the int val.
     ;;
    (defn #_"SignedMutableBigInteger" SignedMutableBigInteger'new [#_"int" val]
        (§
            (ß super(val))
        )
    )

    ;;;
     ; Construct a new MutableBigInteger with a magnitude equal to the
     ; specified MutableBigInteger.
     ;;
    (defn #_"SignedMutableBigInteger" SignedMutableBigInteger'new [#_"MutableBigInteger" val]
        (§
            (ß super(val))
        )
    )

    ;; arithmetic operations

    ;;;
     ; Signed addition built upon unsigned add and subtract.
     ;;
    #_method
    (defn #_"void" SignedMutableBigInteger''signedAdd-s [#_"SignedMutableBigInteger" this, #_"SignedMutableBigInteger" addend]
        (§
            (§ cond (ß sign == addend.sign)
                (§
                    (ß MutableBigInteger''add(this, addend))
                )
                :else
                (§
                    (ß sign = sign * MutableBigInteger''subtract(this, addend))
                )
            )
        )
        nil
    )

    ;;;
     ; Signed addition built upon unsigned add and subtract.
     ;;
    #_method
    (defn #_"void" SignedMutableBigInteger''signedAdd-m [#_"SignedMutableBigInteger" this, #_"MutableBigInteger" addend]
        (§
            (§ cond (ß sign == 1)
                (§
                    (ß MutableBigInteger''add(this, addend))
                )
                :else
                (§
                    (ß sign = sign * MutableBigInteger''subtract(this, addend))
                )
            )
        )
        nil
    )

    ;;;
     ; Signed subtraction built upon unsigned add and subtract.
     ;;
    #_method
    (defn #_"void" SignedMutableBigInteger''signedSubtract-s [#_"SignedMutableBigInteger" this, #_"SignedMutableBigInteger" addend]
        (§
            (§ cond (ß sign == addend.sign)
                (§
                    (ß sign = sign * MutableBigInteger''subtract(this, addend))
                )
                :else
                (§
                    (ß MutableBigInteger''add(this, addend))
                )
            )
        )
        nil
    )

    ;;;
     ; Signed subtraction built upon unsigned add and subtract.
     ;;
    #_method
    (defn #_"void" SignedMutableBigInteger''signedSubtract-m [#_"SignedMutableBigInteger" this, #_"MutableBigInteger" addend]
        (§
            (§ cond (ß sign == 1)
                (§
                    (ß sign = sign * MutableBigInteger''subtract(this, addend))
                )
                :else
                (§
                    (ß MutableBigInteger''add(this, addend))
                )
            )
            (§ when (ß intLen == 0)
                (ß sign = 1)
            )
        )
        nil
    )

    ;;;
     ; Print out the first intLen ints of this MutableBigInteger's value
     ; array starting at offset.
     ;;
    #_foreign
    (defn #_"String" toString---SignedMutableBigInteger [#_"SignedMutableBigInteger" this]
        (§
            (§ return MutableBigInteger''toBigInteger-2(this, sign).toString())
        )
    )
)

;;;
 ; Immutable arbitrary-precision integers. All operations behave as if
 ; BigIntegers were represented in two's-complement notation (like Java's
 ; primitive integer types). BigInteger provides analogues to all of Java's
 ; primitive integer operators, and all relevant methods from java.lang.Math.
 ; Additionally, BigInteger provides operations for modular arithmetic, GCD
 ; calculation, primality testing, prime generation, bit manipulation,
 ; and a few other miscellaneous operations.
 ;
 ; Semantics of arithmetic operations exactly mimic those of Java's integer
 ; arithmetic operators, as defined in <i>The Java Language Specification</i>.
 ; For example, division by zero throws an {@code ArithmeticException}, and
 ; division of a negative by a positive yields a negative (or zero) remainder.
 ; All of the details in the Spec concerning overflow are ignored, as
 ; BigIntegers are made as large as necessary to accommodate the results of an
 ; operation.
 ;
 ; Semantics of shift operations extend those of Java's shift operators
 ; to allow for negative shift distances. A right-shift with a negative
 ; shift distance results in a left shift, and vice-versa. The unsigned
 ; right shift operator ({@code >>>}) is omitted, as this operation makes
 ; little sense in combination with the "infinite word size" abstraction
 ; provided by this class.
 ;
 ; Semantics of bitwise logical operations exactly mimic those of Java's
 ; bitwise integer operators. The binary operators ({@code and},
 ; {@code or}, {@code xor}) implicitly perform sign extension on the shorter
 ; of the two operands prior to performing the operation.
 ;
 ; Comparison operations perform signed integer comparisons, analogous to
 ; those performed by Java's relational and equality operators.
 ;
 ; Modular arithmetic operations are provided to compute residues, perform
 ; exponentiation, and compute multiplicative inverses. These methods always
 ; return a non-negative result, between {@code 0} and {@code (modulus - 1)},
 ; inclusive.
 ;
 ; Bit operations operate on a single bit of the two's-complement
 ; representation of their operand. If necessary, the operand is sign-
 ; extended so that it contains the designated bit. None of the single-bit
 ; operations can produce a BigInteger with a different sign from the
 ; BigInteger being operated on, as they affect only a single bit, and the
 ; "infinite word size" abstraction provided by this class ensures that there
 ; are infinitely many "virtual sign bits" preceding each BigInteger.
 ;
 ; For the sake of brevity and clarity, pseudo-code is used throughout the
 ; descriptions of BigInteger methods. The pseudo-code expression
 ; {@code (i + j)} is shorthand for "a BigInteger whose value is
 ; that of the BigInteger {@code i} plus that of the BigInteger {@code j}."
 ; The pseudo-code expression {@code (i == j)} is shorthand for
 ; "{@code true} if and only if the BigInteger {@code i} represents the same
 ; value as the BigInteger {@code j}." Other pseudo-code expressions are
 ; interpreted similarly.
 ;
 ; All methods and constructors in this class throw
 ; {@code NullPointerException} when passed
 ; a null object reference for any input parameter.
 ;
 ; BigInteger must support values in the range
 ; -2<sup>{@code Integer.MAX_VALUE}</sup> (exclusive) to
 ; +2<sup>{@code Integer.MAX_VALUE}</sup> (exclusive)
 ; and may support values outside of that range.
 ;
 ; The range of probable prime values is limited and may be less than
 ; the full supported positive range of {@code BigInteger}.
 ; The range must be at least 1 to 2<sup>500000000</sup>.
 ;
 ; @implNote
 ; BigInteger constructors and operations throw {@code ArithmeticException} when
 ; the result is out of the supported range of
 ; -2<sup>{@code Integer.MAX_VALUE}</sup> (exclusive) to
 ; +2<sup>{@code Integer.MAX_VALUE}</sup> (exclusive).
 ;;

(class-ns BigInteger (§ extends #_"Number") (§ implements #_"Comparable<BigInteger>")
    ;;;
     ; The signum of this BigInteger: -1 for negative, 0 for zero, or
     ; 1 for positive. Note that the BigInteger zero <i>must</i> have
     ; a signum of 0. This is necessary to ensures that there is exactly one
     ; representation for each BigInteger value.
     ;;
    #_final
    (§ field #_"int" signum)

    ;;;
     ; The magnitude of this BigInteger, in <i>big-endian</i> order: the
     ; zeroth element of this array is the most-significant int of the
     ; magnitude. The magnitude must be "minimal" in that the most-significant
     ; int ({@code mag[0]}) must be non-zero. This is necessary to
     ; ensure that there is exactly one representation for each BigInteger
     ; value. Note that this implies that the BigInteger zero has a
     ; zero-length mag array.
     ;;
    #_final
    (§ field #_"int[]" mag)

    ;; These "redundant fields" are initialized with recognizable nonsense
    ;; values, and cached the first time they are needed (or never, if they
    ;; aren't needed).

    ;;;
     ; One plus the bitCount of this BigInteger. Zeros means unitialized.
     ;
     ; @deprecated Deprecated since logical value is offset from stored
     ; value and correction factor is applied in accessor method.
     ;;
    #_deprecated
    (§ field- #_"int" bitCount)

    ;;;
     ; One plus the bitLength of this BigInteger. Zeros means unitialized.
     ; (either value is acceptable).
     ;
     ; @deprecated Deprecated since logical value is offset from stored
     ; value and correction factor is applied in accessor method.
     ;;
    #_deprecated
    (§ field- #_"int" bitLength)

    ;;;
     ; Two plus the lowest set bit of this BigInteger, as returned by
     ; getLowestSetBit().
     ;
     ; @deprecated Deprecated since logical value is offset from stored
     ; value and correction factor is applied in accessor method.
     ;;
    #_deprecated
    (§ field- #_"int" lowestSetBit)

    ;;;
     ; Two plus the index of the lowest-order int in the magnitude of this
     ; BigInteger that contains a nonzero int, or -2 (either value is acceptable).
     ; The least significant int has int-number 0, the next int in order of
     ; increasing significance has int-number 1, and so forth.
     ; @deprecated Deprecated since logical value is offset from stored
     ; value and correction factor is applied in accessor method.
     ;;
    #_deprecated
    (§ field- #_"int" firstNonzeroIntNum)

    ;;;
     ; This mask is used to obtain the value of an int as if it were unsigned.
     ;;
    (def #_"long" BigInteger'LONG_MASK (ß 0xffffffff))

    ;;;
     ; This constant limits {@code mag.length} of BigIntegers to the supported
     ; range.
     ;;
    (def- #_"int" BigInteger'MAX_MAG_LENGTH 64)

    ;;;
     ; Bit lengths larger than this constant can cause overflow in searchLen
     ; calculation and in BitSieve.singleSearch method.
     ;;
    (def- #_"int" BigInteger'PRIME_SEARCH_BIT_LENGTH_LIMIT 500000000)

    ;;;
     ; The threshold value for using Schoenhage recursive base conversion.
     ; If the number of ints in the number are larger than this value,
     ; the Schoenhage algorithm will be used. In practice, it appears that the
     ; Schoenhage routine is faster for any threshold down to 2, and is
     ; relatively flat for thresholds between 2-25, so this choice may be
     ; varied within this range for very small effect.
     ;;
    (def- #_"int" BigInteger'SCHOENHAGE_BASE_CONVERSION_THRESHOLD 20)

    ;; constructors

    ;;;
     ; Translates a byte array containing the two's-complement binary representation
     ; of a BigInteger into a BigInteger. The input array is assumed to be in
     ; <i>big-endian</i> byte-order: the most significant byte is in the zeroth element.
     ;
     ; @param  val big-endian two's-complement binary representation of BigInteger.
     ; @throws NumberFormatException {@code val} is zero bytes long.
     ;;
    (defn #_"BigInteger" BigInteger'new [#_"byte[]" val]
        (§
            (§ when (ß val.length == 0)
                (ß throw new NumberFormatException("Zero length BigInteger"))
            )

            (§ cond (ß val[0] < 0)
                (§
                    (ß mag = BigInteger'makePositive-b(val))
                    (ß signum = -1)
                )
                :else
                (§
                    (ß mag = BigInteger'stripLeadingZeroBytes(val))
                    (ß signum = (mag.length == 0) ? 0 #_":" 1)
                )
            )
            (§ when (ß mag.length >= BigInteger'MAX_MAG_LENGTH)
                (ß BigInteger''checkRange(this))
            )
        )
    )

    ;;;
     ; This private constructor translates an int array containing the
     ; two's-complement binary representation of a BigInteger into a
     ; BigInteger. The input array is assumed to be in <i>big-endian</i>
     ; int-order: the most significant int is in the zeroth element.
     ;;
    (defn- #_"BigInteger" BigInteger'new [#_"int[]" val]
        (§
            (§ when (ß val.length == 0)
                (ß throw new NumberFormatException("Zero length BigInteger"))
            )

            (§ cond (ß val[0] < 0)
                (§
                    (ß mag = BigInteger'makePositive-i(val))
                    (ß signum = -1)
                )
                :else
                (§
                    (ß mag = BigInteger'trustedStripLeadingZeroInts(val))
                    (ß signum = (mag.length == 0) ? 0 #_":" 1)
                )
            )
            (§ when (ß mag.length >= BigInteger'MAX_MAG_LENGTH)
                (ß BigInteger''checkRange(this))
            )
        )
    )

    ;;;
     ; Translates the sign-magnitude representation of a BigInteger into a
     ; BigInteger. The sign is represented as an integer signum value: -1 for
     ; negative, 0 for zero, or 1 for positive. The magnitude is a byte array
     ; in <i>big-endian</i> byte-order: the most significant byte is in the
     ; zeroth element. A zero-length magnitude array is permissible, and will
     ; result in a BigInteger value of 0, whether signum is -1, 0 or 1.
     ;
     ; @param  signum signum of the number (-1 for negative, 0 for zero, 1 for positive).
     ; @param  magnitude big-endian binary representation of the magnitude of the number.
     ; @throws NumberFormatException {@code signum} is not one of the three
     ;         legal values (-1, 0, and 1), or {@code signum} is 0 and
     ;         {@code magnitude} contains one or more non-zero bytes.
     ;;
    (defn #_"BigInteger" BigInteger'new [#_"int" signum, #_"byte[]" magnitude]
        (§
            (ß this.mag = BigInteger'stripLeadingZeroBytes(magnitude))

            (§ when (ß signum < -1 || signum > 1)
                (ß throw(new NumberFormatException("Invalid signum value")))
            )

            (§ cond (ß this.mag.length == 0)
                (§
                    (ß this.signum = 0)
                )
                :else
                (§
                    (§ when (ß signum == 0)
                        (ß throw(new NumberFormatException("signum-magnitude mismatch")))
                    )
                    (ß this.signum = signum)
                )
            )
            (§ when (ß mag.length >= BigInteger'MAX_MAG_LENGTH)
                (ß BigInteger''checkRange(this))
            )
        )
    )

    ;;;
     ; A constructor for internal use that translates the sign-magnitude
     ; representation of a BigInteger into a BigInteger. It checks the
     ; arguments and copies the magnitude so this constructor would be
     ; safe for external use.
     ;;
    (defn- #_"BigInteger" BigInteger'new [#_"int" signum, #_"int[]" magnitude]
        (§
            (ß this.mag = BigInteger'stripLeadingZeroInts(magnitude))

            (§ when (ß signum < -1 || signum > 1)
                (ß throw new NumberFormatException("Invalid signum value"))
            )

            (§ cond (ß this.mag.length == 0)
                (§
                    (ß this.signum = 0)
                )
                :else
                (§
                    (§ when (ß signum == 0)
                        (ß throw new NumberFormatException("signum-magnitude mismatch"))
                    )
                    (ß this.signum = signum)
                )
            )
            (§ when (ß mag.length >= BigInteger'MAX_MAG_LENGTH)
                (ß BigInteger''checkRange(this))
            )
        )
    )

    ;;;
     ; Translates the String representation of a BigInteger in the
     ; specified radix into a BigInteger. The String representation
     ; consists of an optional minus or plus sign followed by a sequence
     ; of one or more digits in the specified radix. The character-to-digit
     ; mapping is provided by {@code Character.digit}. The String may
     ; not contain any extraneous characters (whitespace, for example).
     ;
     ; @param val String representation of BigInteger.
     ; @param radix radix to be used in interpreting {@code val}.
     ; @throws NumberFormatException {@code val} is not a valid representation
     ;         of a BigInteger in the specified radix, or {@code radix} is
     ;         outside the range from {@link Character#MIN_RADIX} to
     ;         {@link Character#MAX_RADIX}, inclusive.
     ;;
    (defn #_"BigInteger" BigInteger'new [#_"String" val, #_"int" radix]
        (§
            (ß #_"int" cursor = 0, numDigits)
            (ß #_"int" len = val.length())

            (§ when (ß radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)
                (ß throw new NumberFormatException("Radix out of range"))
            )
            (§ when (ß len == 0)
                (ß throw new NumberFormatException("Zero length BigInteger"))
            )

            ;; check for at most one leading sign
            (ß #_"int" sign = 1)
            (ß #_"int" index1 = val.lastIndexOf((§ char "-")))
            (ß #_"int" index2 = val.lastIndexOf((§ char "+")))
            (§ cond (ß index1 >= 0)
                (§
                    (§ when (ß index1 != 0 || index2 >= 0)
                        (ß throw new NumberFormatException("Illegal embedded sign character"))
                    )
                    (ß sign = -1)
                    (ß cursor = 1)
                )
                (index2 >= 0)
                (§
                    (§ when (ß index2 != 0)
                        (ß throw new NumberFormatException("Illegal embedded sign character"))
                    )
                    (ß cursor = 1)
                )
            )
            (§ when (ß cursor == len)
                (ß throw new NumberFormatException("Zero length BigInteger"))
            )

            ;; skip leading zeros and compute number of digits in magnitude
            (§ while (ß cursor < len && Character.digit(val.charAt(cursor), radix) == 0)
                (ß cursor++)
            )

            (§ when (ß cursor == len)
                (ß signum = 0)
                (ß mag = BigInteger'ZERO.mag)
                (§ return nil)
            )

            (ß numDigits = len - cursor)
            (ß signum = sign)

            ;; Pre-allocate array of expected size. May be too large but can
            ;; never be too small. Typically exact.
            (ß #_"long" numBits = ((numDigits * BigInteger'bitsPerDigit[radix]) >>> 10) + 1)
            (§ when (ß numBits + 31 >= (1 << 32))
                (ß BigInteger'reportOverflow())
            )
            (ß #_"int" numWords = (int) (numBits + 31) >>> 5)
            (ß #_"int[]" magnitude = new int[numWords])

            ;; process first (potentially short) digit group
            (ß #_"int" firstGroupLen = numDigits % BigInteger'digitsPerInt[radix])
            (§ when (ß firstGroupLen == 0)
                (ß firstGroupLen = BigInteger'digitsPerInt[radix])
            )
            (ß #_"String" group = val.substring(cursor, cursor += firstGroupLen))
            (ß magnitude[numWords - 1] = Integer.parseInt(group, radix))
            (§ when (ß magnitude[numWords - 1] < 0)
                (ß throw new NumberFormatException("Illegal digit"))
            )

            ;; process remaining digit groups
            (ß #_"int" superRadix = BigInteger'intRadix[radix])
            (ß #_"int" groupVal = 0)
            (§ while (ß cursor < len)
                (ß group = val.substring(cursor, cursor += BigInteger'digitsPerInt[radix]))
                (ß groupVal = Integer.parseInt(group, radix))
                (§ when (ß groupVal < 0)
                    (ß throw new NumberFormatException("Illegal digit"))
                )
                (ß BigInteger'destructiveMulAdd(magnitude, superRadix, groupVal))
            )
            ;; required for cases where the array was overallocated
            (ß mag = BigInteger'trustedStripLeadingZeroInts(magnitude))
            (§ when (ß mag.length >= BigInteger'MAX_MAG_LENGTH)
                (ß BigInteger''checkRange(this))
            )
        )
    )

    ;;
     ; Constructs a new BigInteger using a char array with radix=10.
     ; Sign is precalculated outside and not allowed in the val.
     ;;
    (defn #_"BigInteger" BigInteger'new [#_"char[]" val, #_"int" sign, #_"int" len]
        (§
            (ß #_"int" cursor = 0, numDigits)

            ;; skip leading zeros and compute number of digits in magnitude
            (§ while (ß cursor < len && Character.digit(val[cursor], 10) == 0)
                (ß cursor++)
            )
            (§ when (ß cursor == len)
                (ß signum = 0)
                (ß mag = BigInteger'ZERO.mag)
                (§ return nil)
            )

            (ß numDigits = len - cursor)
            (ß signum = sign)
            ;; pre-allocate array of expected size
            (ß #_"int" numWords)
            (§ cond (ß len < 10)
                (§
                    (ß numWords = 1)
                )
                :else
                (§
                    (ß #_"long" numBits = ((numDigits * BigInteger'bitsPerDigit[10]) >>> 10) + 1)
                    (§ when (ß numBits + 31 >= (1 << 32))
                        (ß BigInteger'reportOverflow())
                    )
                    (ß numWords = (int) (numBits + 31) >>> 5)
                )
            )
            (ß #_"int[]" magnitude = new int[numWords])

            ;; process first (potentially short) digit group
            (ß #_"int" firstGroupLen = numDigits % BigInteger'digitsPerInt[10])
            (§ when (ß firstGroupLen == 0)
                (ß firstGroupLen = BigInteger'digitsPerInt[10])
            )
            (ß magnitude[numWords - 1] = BigInteger''parseInt(this, val, cursor, cursor += firstGroupLen))

            ;; process remaining digit groups
            (§ while (ß cursor < len)
                (ß #_"int" groupVal = BigInteger''parseInt(this, val, cursor, cursor += BigInteger'digitsPerInt[10]))
                (ß BigInteger'destructiveMulAdd(magnitude, BigInteger'intRadix[10], groupVal))
            )
            (ß mag = BigInteger'trustedStripLeadingZeroInts(magnitude))
            (§ when (ß mag.length >= BigInteger'MAX_MAG_LENGTH)
                (ß BigInteger''checkRange(this))
            )
        )
    )

    ;; Create an integer with the digits between the two indexes.
    ;; Assumes start < end. The result may be negative, but it
    ;; is to be treated as an unsigned value.
    #_method
    (defn- #_"int" BigInteger''parseInt [#_"BigInteger" this, #_"char[]" source, #_"int" start, #_"int" end]
        (§
            (ß #_"int" result = Character.digit(source[start++], 10))
            (§ when (ß result == -1)
                (ß throw new NumberFormatException(new String(source)))
            )

            (§ for [(ß #_"int" index = start)] (ß index < end) [(ß index++)]
                (ß #_"int" nextVal = Character.digit(source[index], 10))
                (§ when (ß nextVal == -1)
                    (ß throw new NumberFormatException(new String(source)))
                )
                (ß result = 10 * result + nextVal)
            )

            (§ return result)
        )
    )

    ;; bitsPerDigit in the given radix times 1024
    ;; Rounded up to avoid underallocation.
    (def- #_"long[]" BigInteger'bitsPerDigit
        (§
            0, 0,
            1024, 1624, 2048, 2378, 2648, 2875, 3072, 3247, 3402, 3543, 3672,
            3790, 3899, 4001, 4096, 4186, 4271, 4350, 4426, 4498, 4567, 4633,
            4696, 4756, 4814, 4870, 4923, 4975, 5025, 5074, 5120, 5166, 5210,
            5253, 5295
        )
    )

    ;; multiply x array times word y in place, and add word z
    (defn- #_"void" BigInteger'destructiveMulAdd [#_"int[]" x, #_"int" y, #_"int" z]
        (§
            ;; perform the multiplication word by word
            (ß #_"long" ylong = y & BigInteger'LONG_MASK)
            (ß #_"long" zlong = z & BigInteger'LONG_MASK)
            (ß #_"int" len = x.length)

            (ß #_"long" product = 0)
            (ß #_"long" carry = 0)
            (§ for [(ß #_"int" i = len - 1)] (ß i >= 0) [(ß i--)]
                (ß product = ylong * (x[i] & BigInteger'LONG_MASK) + carry)
                (ß x[i] = (int)product)
                (ß carry = product >>> 32)
            )

            ;; perform the addition
            (ß #_"long" sum = (x[len - 1] & BigInteger'LONG_MASK) + zlong)
            (ß x[len - 1] = (int)sum)
            (ß carry = sum >>> 32)
            (§ for [(ß #_"int" i = len - 2)] (ß i >= 0) [(ß i--)]
                (ß sum = (x[i] & BigInteger'LONG_MASK) + carry)
                (ß x[i] = (int)sum)
                (ß carry = sum >>> 32)
            )
        )
        nil
    )

    ;;;
     ; Translates the decimal String representation of a BigInteger into a
     ; BigInteger. The String representation consists of an optional minus
     ; sign followed by a sequence of one or more decimal digits. The
     ; character-to-digit mapping is provided by {@code Character.digit}.
     ; The String may not contain any extraneous characters (whitespace, for
     ; example).
     ;
     ; @param val decimal String representation of BigInteger.
     ; @throws NumberFormatException {@code val} is not a valid representation
     ;         of a BigInteger.
     ;;
    (defn #_"BigInteger" BigInteger'new [#_"String" val]
        (§
            (ß BigInteger'new(val, 10))
        )
    )

    ;;;
     ; Constructs a randomly generated BigInteger, uniformly distributed over
     ; the range 0 to (2<sup>{@code numBits}</sup> - 1), inclusive.
     ; The uniformity of the distribution assumes that a fair source of random
     ; bits is provided in {@code rnd}. Note that this constructor always
     ; constructs a non-negative BigInteger.
     ;
     ; @param  numBits maximum bitLength of the new BigInteger.
     ; @param  rnd source of randomness to be used in computing the new BigInteger.
     ; @throws IllegalArgumentException {@code numBits} is negative.
     ;;
    (defn #_"BigInteger" BigInteger'new [#_"int" numBits, #_"Random" rnd]
        (§
            (ß BigInteger'new(1, BigInteger'randomBits(numBits, rnd)))
        )
    )

    (defn- #_"byte[]" BigInteger'randomBits [#_"int" numBits, #_"Random" rnd]
        (§
            (§ when (ß numBits < 0)
                (ß throw new IllegalArgumentException("numBits must be non-negative"))
            )

            (ß #_"int" numBytes = (int)(((long)numBits + 7) / 8)) ;; avoid overflow
            (ß #_"byte[]" randomBits = new byte[numBytes])

            ;; generate random bytes and mask out any excess bits
            (§ when (ß numBytes > 0)
                (ß rnd.nextBytes(randomBits))
                (ß #_"int" excessBits = 8 * numBytes - numBits)
                (ß randomBits[0] &= (1 << (8 - excessBits)) - 1)
            )
            (§ return randomBits)
        )
    )

    ;; Minimum size in bits that the requested prime number has
    ;; before we use the large prime number generating algorithms.
    ;; The cutoff of 95 was chosen empirically for best performance.
    (def- #_"int" BigInteger'SMALL_PRIME_THRESHOLD 95)

    ;; certainty required to meet the spec of probablePrime
    (def- #_"int" BigInteger'DEFAULT_PRIME_CERTAINTY 100)

    ;;;
     ; Constructs a randomly generated positive BigInteger that is probably
     ; prime, with the specified bitLength.
     ;
     ; It is recommended that the {@link #probablePrime probablePrime}
     ; method be used in preference to this constructor unless there
     ; is a compelling need to specify a certainty.
     ;
     ; @param  bitLength bitLength of the returned BigInteger.
     ; @param  certainty a measure of the uncertainty that the caller is willing to tolerate.
     ;         The probability that the new BigInteger represents a prime number will exceed
     ;         (1 - 1/2<sup>{@code certainty}</sup>). The execution time of
     ;         this constructor is proportional to the value of this parameter.
     ; @param  rnd source of random bits used to select candidates to be tested for primality.
     ; @throws ArithmeticException {@code bitLength < 2} or {@code bitLength} is too large.
     ;;
    (defn #_"BigInteger" BigInteger'new [#_"int" bitLength, #_"int" certainty, #_"Random" rnd]
        (§
            (§ when (ß bitLength < 2)
                (ß throw new ArithmeticException("bitLength < 2"))
            )

            (ß #_"BigInteger" prime = (bitLength < BigInteger'SMALL_PRIME_THRESHOLD) ? BigInteger'smallPrime(bitLength, certainty, rnd) #_":" BigInteger'largePrime(bitLength, certainty, rnd))
            (ß signum = 1)
            (ß mag = prime.mag)
        )
    )

    ;;;
     ; Returns a positive BigInteger that is probably prime, with the
     ; specified bitLength. The probability that a BigInteger returned
     ; by this method is composite does not exceed 2<sup>-100</sup>.
     ;
     ; @param  bitLength bitLength of the returned BigInteger.
     ; @param  rnd source of random bits used to select candidates to be tested for primality.
     ; @return a BigInteger of {@code bitLength} bits that is probably prime.
     ; @throws ArithmeticException {@code bitLength < 2} or {@code bitLength} is too large.
     ;;
    (defn #_"BigInteger" BigInteger'probablePrime [#_"int" bitLength, #_"Random" rnd]
        (§
            (§ when (ß bitLength < 2)
                (ß throw new ArithmeticException("bitLength < 2"))
            )

            (§ return (bitLength < BigInteger'SMALL_PRIME_THRESHOLD) ? BigInteger'smallPrime(bitLength, BigInteger'DEFAULT_PRIME_CERTAINTY, rnd) #_":" BigInteger'largePrime(bitLength, BigInteger'DEFAULT_PRIME_CERTAINTY, rnd))
        )
    )

    (def- #_"BigInteger" BigInteger'SMALL_PRIME_PRODUCT (ß BigInteger'valueOf-l(3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41)))

    ;;;
     ; Find a random number of the specified bitLength that is probably prime.
     ; This method is used for smaller primes, its performance degrades on larger bitlengths.
     ;
     ; This method assumes bitLength > 1.
     ;;
    (defn- #_"BigInteger" BigInteger'smallPrime [#_"int" bitLength, #_"int" certainty, #_"Random" rnd]
        (§
            (ß #_"int" magLen = (bitLength + 31) >>> 5)
            (ß #_"int[]" temp = new int[magLen])
            (ß #_"int" highBit = 1 << ((bitLength + 31) & 0x1f)) ;; high bit of high int
            (ß #_"int" highMask = (highBit << 1) - 1) ;; bits to keep in high int

            (§ while (ß true)
                ;; construct a candidate
                (§ for [(ß #_"int" i = 0)] (ß i < magLen) [(ß i++)]
                    (ß temp[i] = rnd.nextInt())
                )
                (ß temp[0] = (temp[0] & highMask) | highBit) ;; ensure exact length
                (§ when (ß bitLength > 2)
                    (ß temp[magLen - 1] |= 1) ;; make odd if bitlen > 2
                )

                (ß #_"BigInteger" p = BigInteger'new(temp, 1))

                ;; do cheap "pre-test" if applicable
                (§ when (ß bitLength > 6)
                    (ß #_"long" r = BigInteger''remainder(p, BigInteger'SMALL_PRIME_PRODUCT).longValue())
                    (§ when (ß (r % 3 == 0) || (r % 5 == 0) || (r % 7 == 0) || (r % 11 == 0) || (r % 13 == 0) || (r % 17 == 0) || (r % 19 == 0) || (r % 23 == 0) || (r % 29 == 0) || (r % 31 == 0) || (r % 37 == 0) || (r % 41 == 0))
                        (ß continue) ;; candidate is composite; try another
                    )
                )

                ;; all candidates of bitLength 2 and 3 are prime by this point
                (§ when (ß bitLength < 4)
                    (§ return p)
                )

                ;; do expensive test if we survive pre-test (or it's inapplicable)
                (§ when (ß BigInteger''primeToCertainty(p, certainty, rnd))
                    (§ return p)
                )
            )
        )
    )

    ;;;
     ; Find a random number of the specified bitLength that is probably prime.
     ; This method is more appropriate for larger bitlengths since it uses
     ; a sieve to eliminate most composites before using a more expensive test.
     ;;
    (defn- #_"BigInteger" BigInteger'largePrime [#_"int" bitLength, #_"int" certainty, #_"Random" rnd]
        (§
            (ß #_"BigInteger" p)
            (ß p = BigInteger'new(bitLength, rnd).BigInteger''setBit((§ pipe), bitLength - 1))
            (ß p.mag[p.mag.length - 1] &= 0xfffffffe)

            ;; use a sieve length likely to contain the next prime number
            (ß #_"int" searchLen = BigInteger'getPrimeSearchLen(bitLength))
            (ß #_"BitSieve" searchSieve = BitSieve'new(p, searchLen))
            (ß #_"BigInteger" candidate = BitSieve''retrieve(searchSieve, p, certainty, rnd))

            (§ while (ß (candidate == nil) || (BigInteger''bitLength(candidate) != bitLength))
                (ß p = BigInteger''add(p, BigInteger'valueOf-l(2 * searchLen)))
                (§ when (ß BigInteger''bitLength(p) != bitLength)
                    (ß p = BigInteger'new(bitLength, rnd).BigInteger''setBit((§ pipe), bitLength - 1))
                )
                (ß p.mag[p.mag.length - 1] &= 0xfffffffe)
                (ß searchSieve = BitSieve'new(p, searchLen))
                (ß candidate = BitSieve''retrieve(searchSieve, p, certainty, rnd))
            )
            (§ return candidate)
        )
    )

    ;;;
     ; Returns the first integer greater than this {@code BigInteger} that
     ; is probably prime. The probability that the number returned by this
     ; method is composite does not exceed 2<sup>-100</sup>. This method will
     ; never skip over a prime when searching: if it returns {@code p}, there
     ; is no prime {@code q} such that {@code this < q < p}.
     ;
     ; @return the first integer greater than this {@code BigInteger} that is probably prime.
     ; @throws ArithmeticException {@code this < 0} or {@code this} is too large.
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''nextProbablePrime [#_"BigInteger" this]
        (§
            (§ when (ß this.signum < 0)
                (ß throw new ArithmeticException("start < 0: " + this))
            )

            ;; handle trivial cases
            (§ when (ß (this.signum == 0) || this.equals(BigInteger'ONE))
                (§ return BigInteger'TWO)
            )

            (ß #_"BigInteger" result = BigInteger''add(this, BigInteger'ONE))

            ;; fastpath for small numbers
            (§ when (ß BigInteger''bitLength(result) < BigInteger'SMALL_PRIME_THRESHOLD)
                ;; ensure an odd number
                (§ when (ß !BigInteger''testBit(result, 0))
                    (ß result = BigInteger''add(result, BigInteger'ONE))
                )

                (§ while (ß true)
                    ;; do cheap "pre-test" if applicable
                    (§ when (ß BigInteger''bitLength(result) > 6)
                        (ß #_"long" r = BigInteger''remainder(result, BigInteger'SMALL_PRIME_PRODUCT).longValue())
                        (§ when (ß (r % 3 == 0) || (r % 5 == 0) || (r % 7 == 0) || (r%11 == 0) || (r % 13 == 0) || (r % 17 == 0) || (r % 19 == 0) || (r%23 == 0) || (r % 29 == 0) || (r % 31 == 0) || (r % 37 == 0) || (r%41 == 0))
                            (ß result = BigInteger''add(result, BigInteger'TWO))
                            (ß continue) ;; candidate is composite; try another
                        )
                    )

                    ;; all candidates of bitLength 2 and 3 are prime by this point
                    (§ when (ß BigInteger''bitLength(result) < 4)
                        (§ return result)
                    )

                    ;; the expensive test
                    (§ when (ß BigInteger''primeToCertainty(result, BigInteger'DEFAULT_PRIME_CERTAINTY, nil))
                        (§ return result)
                    )

                    (ß result = BigInteger''add(result, BigInteger'TWO))
                )
            )

            ;; start at previous even number
            (§ when (ß BigInteger''testBit(result, 0))
                (ß result = BigInteger''subtract(result, BigInteger'ONE))
            )

            ;; looking for the next large prime
            (ß #_"int" searchLen = BigInteger'getPrimeSearchLen(BigInteger''bitLength(result)))

            (§ while (ß true)
                (ß #_"BitSieve" searchSieve = BitSieve'new(result, searchLen))
                (ß #_"BigInteger" candidate = BitSieve''retrieve(searchSieve, result, BigInteger'DEFAULT_PRIME_CERTAINTY, nil))
                (§ when (ß candidate != nil)
                    (§ return candidate)
                )
                (ß result = BigInteger''add(result, BigInteger'valueOf-l(2 * searchLen)))
            )
        )
    )

    (defn- #_"int" BigInteger'getPrimeSearchLen [#_"int" bitLength]
        (§
            (§ when (ß bitLength > BigInteger'PRIME_SEARCH_BIT_LENGTH_LIMIT + 1)
                (ß throw new ArithmeticException("Prime search implementation restriction on bitLength"))
            )
            (§ return bitLength / 20 * 64)
        )
    )

    ;;;
     ; Returns {@code true} if this BigInteger is probably prime,
     ; {@code false} if it's definitely composite.
     ;
     ; This method assumes bitLength > 2.
     ;
     ; @param  certainty a measure of the uncertainty that the caller is
     ;         willing to tolerate: if the call returns {@code true}
     ;         the probability that this BigInteger is prime exceeds
     ;         {@code (1 - 1/2<sup>certainty</sup>)}. The execution time of
     ;         this method is proportional to the value of this parameter.
     ; @return {@code true} if this BigInteger is probably prime,
     ;         {@code false} if it's definitely composite.
     ;;
    #_method
    (defn #_"boolean" BigInteger''primeToCertainty [#_"BigInteger" this, #_"int" certainty, #_"Random" random]
        (§
            (ß #_"int" rounds = 0)
            (ß #_"int" n = (Math.min(certainty, Integer.MAX_VALUE - 1) + 1) / 2)

            ;; The relationship between the certainty and the number of rounds we perform is given in the draft
            ;; standard ANSI X9.80, "PRIME NUMBER GENERATION, PRIMALITY TESTING, AND PRIMALITY CERTIFICATES".
            (ß #_"int" sizeInBits = BigInteger''bitLength(this))
            (§ when (ß sizeInBits < 100)
                (ß rounds = 50)
                (ß rounds = (n < rounds) ? n #_":" rounds)
                (§ return BigInteger''passesMillerRabin(this, rounds, random))
            )

            (§ cond (ß sizeInBits < 256)
                (§
                    (ß rounds = 27)
                )
                (sizeInBits < 512)
                (§
                    (ß rounds = 15)
                )
                (sizeInBits < 768)
                (§
                    (ß rounds = 8)
                )
                (sizeInBits < 1024)
                (§
                    (ß rounds = 4)
                )
                :else
                (§
                    (ß rounds = 2)
                )
            )
            (ß rounds = (n < rounds) ? n #_":" rounds)

            (§ return BigInteger''passesMillerRabin(this, rounds, random) && BigInteger''passesLucasLehmer(this))
        )
    )

    ;;;
     ; Returns true iff this BigInteger is a Lucas-Lehmer probable prime.
     ;
     ; The following assumptions are made:
     ; This BigInteger is a positive, odd number.
     ;;
    #_method
    (defn- #_"boolean" BigInteger''passesLucasLehmer [#_"BigInteger" this]
        (§
            (ß #_"BigInteger" thisPlusOne = BigInteger''add(this, BigInteger'ONE))

            ;; step 1
            (ß #_"int" d = 5)
            (§ while (ß BigInteger'jacobiSymbol(d, this) != -1)
                ;; 5, -7, 9, -11, ...
                (ß d = (d < 0) ? Math.abs(d) + 2 #_":" -(d + 2))
            )

            ;; step 2
            (ß #_"BigInteger" u = BigInteger'lucasLehmerSequence(d, thisPlusOne, this))

            ;; step 3
            (§ return BigInteger''mod(u, this).equals(BigInteger'ZERO))
        )
    )

    ;;;
     ; Computes Jacobi(p,n).
     ; Assumes n positive, odd, n>=3.
     ;;
    (defn- #_"int" BigInteger'jacobiSymbol [#_"int" p, #_"BigInteger" n]
        (§
            (§ when (ß p == 0)
                (§ return 0)
            )

            ;; Algorithm and comments adapted from Colin Plumb's C library.
            (ß #_"int" j = 1)
            (ß #_"int" u = n.mag[n.mag.length - 1])

            ;; make p positive
            (§ when (ß p < 0)
                (ß p = -p)
                (ß #_"int" n8 = u & 7)
                (§ when (ß (n8 == 3) || (n8 == 7))
                    (ß j = -j) ;; 3 (011) or 7 (111) mod 8
                )
            )

            ;; get rid of factors of 2 in p
            (§ while (ß (p & 3) == 0)
                (ß p >>= 2)
            )
            (§ when (ß (p & 1) == 0)
                (ß p >>= 1)
                (§ when (ß ((u (§ bit-xor) (u >> 1)) & 2) != 0)
                    (ß j = -j) ;; 3 (011) or 5 (101) mod 8
                )
            )
            (§ when (ß p == 1)
                (§ return j)
            )
            ;; then, apply quadratic reciprocity
            (§ when (ß (p & u & 2) != 0) ;; p = u = 3 (mod 4)?
                (ß j = -j)
            )
            ;; and reduce u mod p
            (ß u = BigInteger''mod(n, BigInteger'valueOf-l(p)).intValue())

            ;; now compute Jacobi(u,p), u < p
            (§ while (ß u != 0)
                (§ while (ß (u & 3) == 0)
                    (ß u >>= 2)
                )
                (§ when (ß (u & 1) == 0)
                    (ß u >>= 1)
                    (§ when (ß ((p (§ bit-xor) (p >> 1)) & 2) != 0)
                        (ß j = -j) ;; 3 (011) or 5 (101) mod 8
                    )
                )
                (§ when (ß u == 1)
                    (§ return j)
                )
                ;; now both u and p are odd, so use quadratic reciprocity
                (ß assert (u < p))
                (ß #_"int" t = u)
                (ß u = p)
                (ß p = t)
                (§ when (ß (u & p & 2) != 0) ;; u = p = 3 (mod 4)?
                    (ß j = -j)
                )
                ;; now u >= p, so it can be reduced
                (ß u %= p)
            )
            (§ return 0)
        )
    )

    (defn- #_"BigInteger" BigInteger'lucasLehmerSequence [#_"int" z, #_"BigInteger" k, #_"BigInteger" n]
        (§
            (ß #_"BigInteger" d = BigInteger'valueOf-l(z))
            (ß #_"BigInteger" u = BigInteger'ONE)
            (ß BigInteger u2)
            (ß #_"BigInteger" v = BigInteger'ONE)
            (ß BigInteger v2)

            (§ for [(ß #_"int" i = BigInteger''bitLength(k) - 2)] (ß i >= 0) [(ß i--)]
                (ß u2 = BigInteger''multiply(u, v).BigInteger''mod((§ pipe), n))

                (ß v2 = BigInteger''square(v).BigInteger''add((§ pipe), BigInteger''multiply(d, BigInteger''square(u))).BigInteger''mod((§ pipe), n))
                (§ when (ß BigInteger''testBit(v2, 0))
                    (ß v2 = BigInteger''subtract(v2, n))
                )

                (ß v2 = BigInteger''shiftRight(v2, 1))

                (ß u = u2)
                (ß v = v2)
                (§ when (ß BigInteger''testBit(k, i))
                    (ß u2 = BigInteger''add(u, v).BigInteger''mod((§ pipe), n))
                    (§ when (ß BigInteger''testBit(u2, 0))
                        (ß u2 = BigInteger''subtract(u2, n))
                    )

                    (ß u2 = BigInteger''shiftRight(u2, 1))
                    (ß v2 = BigInteger''add(v, BigInteger''multiply(d, u)).BigInteger''mod((§ pipe), n))
                    (§ when (ß BigInteger''testBit(v2, 0))
                        (ß v2 = BigInteger''subtract(v2, n))
                    )
                    (ß v2 = BigInteger''shiftRight(v2, 1))

                    (ß u = u2)
                    (ß v = v2)
                )
            )
            (§ return u)
        )
    )

    ;;;
     ; Returns true iff this BigInteger passes the specified number of Miller-Rabin tests.
     ; This test is taken from the DSA spec (NIST FIPS 186-2).
     ;
     ; The following assumptions are made:
     ; This BigInteger is a positive, odd number greater than 2.
     ; iterations<=50.
     ;;
    #_method
    (defn- #_"boolean" BigInteger''passesMillerRabin [#_"BigInteger" this, #_"int" iterations, #_"Random" rnd]
        (§
            ;; find a and m such that m is odd and this == 1 + 2**a * m
            (ß #_"BigInteger" thisMinusOne = BigInteger''subtract(this, BigInteger'ONE))
            (ß #_"BigInteger" m = thisMinusOne)
            (ß #_"int" a = BigInteger''getLowestSetBit(m))
            (ß m = BigInteger''shiftRight(m, a))

            ;; do the tests
            (§ when (ß rnd == nil)
                (ß rnd = ThreadLocalRandom.current())
            )
            (§ for [(ß #_"int" i = 0)] (ß i < iterations) [(ß i++)]
                ;; generate a uniform random on (1, this)
                (ß #_"BigInteger" b)
                (§ do
                    (ß b = BigInteger'new(BigInteger''bitLength(this), rnd))
                ) (§ while! (ß b.compareTo(BigInteger'ONE) <= 0 || b.compareTo(this) >= 0))

                (ß #_"int" j = 0)
                (ß #_"BigInteger" z = BigInteger''modPow(b, m, this))
                (§ while (ß !((j == 0 && z.equals(BigInteger'ONE)) || z.equals(thisMinusOne)))
                    (§ when (ß j > 0 && z.equals(BigInteger'ONE) || ++j == a)
                        (§ return false)
                    )
                    (ß z = BigInteger''modPow(z, BigInteger'TWO, this))
                )
            )
            (§ return true)
        )
    )

    ;;;
     ; This internal constructor differs from its public cousin
     ; with the arguments reversed in two ways: it assumes that its
     ; arguments are correct, and it doesn't copy the magnitude array.
     ;;
    (defn #_"BigInteger" BigInteger'new [#_"int[]" magnitude, #_"int" signum]
        (§
            (ß this.signum = (magnitude.length == 0) ? 0 #_":" signum)
            (ß this.mag = magnitude)
            (§ when (ß mag.length >= BigInteger'MAX_MAG_LENGTH)
                (ß BigInteger''checkRange(this))
            )
        )
    )

    ;;;
     ; This private constructor is for internal use and assumes that its
     ; arguments are correct.
     ;;
    (defn- #_"BigInteger" BigInteger'new [#_"byte[]" magnitude, #_"int" signum]
        (§
            (ß this.signum = (magnitude.length == 0) ? 0 #_":" signum)
            (ß this.mag = BigInteger'stripLeadingZeroBytes(magnitude))
            (§ when (ß mag.length >= BigInteger'MAX_MAG_LENGTH)
                (ß BigInteger''checkRange(this))
            )
        )
    )

    ;;;
     ; Throws an {@code ArithmeticException} if the {@code BigInteger} would be
     ; out of the supported range.
     ;
     ; @throws ArithmeticException if {@code this} exceeds the supported range.
     ;;
    #_method
    (defn- #_"void" BigInteger''checkRange [#_"BigInteger" this]
        (§
            (§ when (ß mag.length > BigInteger'MAX_MAG_LENGTH || mag.length == BigInteger'MAX_MAG_LENGTH && mag[0] < 0)
                (ß BigInteger'reportOverflow())
            )
        )
        nil
    )

    (defn- #_"void" BigInteger'reportOverflow []
        (§
            (ß throw new ArithmeticException("BigInteger would overflow supported range"))
        )
        nil
    )

    ;; static factory methods

    ;;;
     ; Returns a BigInteger whose value is equal to that of the specified {@code long}.
     ; This "static factory method" is provided in preference to a ({@code long}) constructor
     ; because it allows for reuse of frequently used BigIntegers.
     ;
     ; @param  val value of the BigInteger to return.
     ; @return a BigInteger with the specified value.
     ;;
    (defn #_"BigInteger" BigInteger'valueOf [#_"long" val]
        (§
            ;; if -MAX_CONSTANT < val < MAX_CONSTANT, return stashed constant
            (§ when (ß val == 0)
                (§ return BigInteger'ZERO)
            )
            (§ cond (ß val > 0 && val <= BigInteger'MAX_CONSTANT)
                (§
                    (§ return BigInteger'posConst[(int) val])
                )
                (val < 0 && val >= -BigInteger'MAX_CONSTANT)
                (§
                    (§ return BigInteger'negConst[(int) -val])
                )
            )

            (§ return BigInteger'new(val))
        )
    )

    ;;;
     ; Constructs a BigInteger with the specified value, which may not be zero.
     ;;
    (defn- #_"BigInteger" BigInteger'new [#_"long" val]
        (§
            (§ cond (ß val < 0)
                (§
                    (ß val = -val)
                    (ß signum = -1)
                )
                :else
                (§
                    (ß signum = 1)
                )
            )

            (ß #_"int" highWord = (int)(val >>> 32))
            (§ cond (ß highWord == 0)
                (§
                    (ß mag = new int[1])
                    (ß mag[0] = (int)val)
                )
                :else
                (§
                    (ß mag = new int[2])
                    (ß mag[0] = highWord)
                    (ß mag[1] = (int)val)
                )
            )
        )
    )

    ;;;
     ; Returns a BigInteger with the given two's complement representation.
     ; Assumes that the input array will not be modified (the returned
     ; BigInteger will reference the input array if feasible).
     ;;
    (defn- #_"BigInteger" BigInteger'valueOf [#_"int[]" val]
        (§
            (§ return (val[0] > 0) ? BigInteger'new(val, 1) #_":" BigInteger'new(val))
        )
    )

    ;; constants

    (def- #_"int" BigInteger'MAX_CONSTANT 16)

    (def- #_"BigInteger[]" BigInteger'posConst (ß new BigInteger[BigInteger'MAX_CONSTANT + 1]))
    (def- #_"BigInteger[]" BigInteger'negConst (ß new BigInteger[BigInteger'MAX_CONSTANT + 1]))

    #_static
    (§
        ;;;
         ; Initialize static constant array when class is loaded.
         ;;
        (§ for [(ß #_"int" i = 1)] (ß i <= BigInteger'MAX_CONSTANT) [(ß i++)]
            (ß #_"int[]" magnitude = new int[1])
            (ß magnitude[0] = i)
            (ß BigInteger'posConst[i] = BigInteger'new(magnitude,  1))
            (ß BigInteger'negConst[i] = BigInteger'new(magnitude, -1))
        )
    )

    ;;;
     ; The cache of powers of each radix. This allows us to not have to
     ; recalculate powers of radix^(2^n) more than once. This speeds
     ; Schoenhage recursive base conversion significantly.
     ;;
    #_volatile
    (def- #_"BigInteger[][]" BigInteger'powerCache (ß new BigInteger[Character.MAX_RADIX + 1][]))

    ;;;
     ; The cache of logarithms of radices for base conversion.
     ;;
    (def- #_"double[]" BigInteger'logCache (ß new double[Character.MAX_RADIX + 1]))

    ;;;
     ; The natural log of 2. This is used in computing cache indices.
     ;;
    (def- #_"double" BigInteger'LOG_TWO (ß Math.log(2.0)))

    #_static
    (§
        ;;
         ; Initialize the cache of radix^(2^x) values used for base conversion with
         ; just the very first value. Additional values will be created on demand.
         ;;
        (§ for [(ß #_"int" i = Character.MIN_RADIX)] (ß i <= Character.MAX_RADIX) [(ß i++)]
            (ß BigInteger'powerCache[i] = new BigInteger[] (§ init BigInteger'valueOf-l(i) ))
            (ß BigInteger'logCache[i] = Math.log(i))
        )
    )

    ;;;
     ; The BigInteger constant zero.
     ;;
    (def #_"BigInteger" BigInteger'ZERO (ß BigInteger'new(new int[0], 0)))

    ;;;
     ; The BigInteger constant one.
     ;;
    (def #_"BigInteger" BigInteger'ONE (ß BigInteger'valueOf-l(1)))

    ;;;
     ; The BigInteger constant two. (Not exported.)
     ;;
    (def- #_"BigInteger" BigInteger'TWO (ß BigInteger'valueOf-l(2)))

    ;;;
     ; The BigInteger constant -1. (Not exported.)
     ;;
    (def- #_"BigInteger" BigInteger'NEGATIVE_ONE (ß BigInteger'valueOf-l(-1)))

    ;;;
     ; The BigInteger constant ten.
     ;;
    (def #_"BigInteger" BigInteger'TEN (ß BigInteger'valueOf-l(10)))

    ;; arithmetic operations

    ;;;
     ; Returns a BigInteger whose value is {@code (this + val)}.
     ;
     ; @param  val value to be added to this BigInteger.
     ; @return {@code this + val}
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''add [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (§ when (ß val.signum == 0)
                (§ return this)
            )
            (§ when (ß signum == 0)
                (§ return val)
            )
            (§ when (ß val.signum == signum)
                (§ return BigInteger'new(BigInteger'add(mag, val.mag), signum))
            )

            (ß #_"int" cmp = BigInteger''compareMagnitude-i(this, val))
            (§ when (ß cmp == 0)
                (§ return BigInteger'ZERO)
            )
            (ß #_"int[]" resultMag = (cmp > 0) ? BigInteger'subtract(mag, val.mag) #_":" BigInteger'subtract(val.mag, mag))
            (ß resultMag = BigInteger'trustedStripLeadingZeroInts(resultMag))

            (§ return BigInteger'new(resultMag, (cmp == signum) ? 1 #_":" -1))
        )
    )

    ;;;
     ; Adds the contents of the int arrays x and y. This method allocates a
     ; new int array to hold the answer and returns a reference to that array.
     ;;
    (defn- #_"int[]" BigInteger'add [#_"int[]" x, #_"int[]" y]
        (§
            ;; if x is shorter, swap the two arrays
            (§ when (ß x.length < y.length)
                (ß #_"int[]" tmp = x)
                (ß x = y)
                (ß y = tmp)
            )

            (ß #_"int" xIndex = x.length)
            (ß #_"int" yIndex = y.length)
            (ß #_"int[]" result = new int[xIndex])
            (ß #_"long" sum = 0)
            (§ cond (ß yIndex == 1)
                (§
                    (ß sum = (x[--xIndex] & BigInteger'LONG_MASK) + (y[0] & BigInteger'LONG_MASK))
                    (ß result[xIndex] = (int)sum)
                )
                :else
                (§
                    ;; add common parts of both numbers
                    (§ while (ß yIndex > 0)
                        (ß sum = (x[--xIndex] & BigInteger'LONG_MASK) + (y[--yIndex] & BigInteger'LONG_MASK) + (sum >>> 32))
                        (ß result[xIndex] = (int)sum)
                    )
                )
            )
            ;; copy remainder of longer number while carry propagation is required
            (ß #_"boolean" carry = (sum >>> 32 != 0))
            (§ while (ß xIndex > 0 && carry)
                (ß carry = ((result[--xIndex] = x[xIndex] + 1) == 0))
            )

            ;; copy remainder of longer number
            (§ while (ß xIndex > 0)
                (ß result[--xIndex] = x[xIndex])
            )

            ;; grow result if necessary
            (§ when (ß carry)
                (ß #_"int[]" bigger = new int[result.length + 1])
                (ß System.arraycopy(result, 0, bigger, 1, result.length))
                (ß bigger[0] = 0x01)
                (§ return bigger)
            )
            (§ return result)
        )
    )

    (defn- #_"int[]" BigInteger'subtract [#_"long" val, #_"int[]" little]
        (§
            (ß #_"int" highWord = (int)(val >>> 32))
            (§ cond (ß highWord == 0)
                (§
                    (ß #_"int[]" result = new int[1])
                    (ß result[0] = (int)(val - (little[0] & BigInteger'LONG_MASK)))
                    (§ return result)
                )
                :else
                (§
                    (ß #_"int[]" result = new int[2])
                    (§ cond (ß little.length == 1)
                        (§
                            (ß #_"long" difference = ((int)val & BigInteger'LONG_MASK) - (little[0] & BigInteger'LONG_MASK))
                            (ß result[1] = (int)difference)
                            ;; subtract remainder of longer number while borrow propagates
                            (ß #_"boolean" borrow = (difference >> 32 != 0))
                            (§ cond (ß borrow)
                                (§
                                    (ß result[0] = highWord - 1)
                                )
                                :else ;; copy remainder of longer number
                                (§
                                    (ß result[0] = highWord)
                                )
                            )
                            (§ return result)
                        )
                        :else ;; little.length == 2
                        (§
                            (ß #_"long" difference = ((int)val & BigInteger'LONG_MASK) - (little[1] & BigInteger'LONG_MASK))
                            (ß result[1] = (int)difference)
                            (ß difference = (highWord & BigInteger'LONG_MASK) - (little[0] & BigInteger'LONG_MASK) + (difference >> 32))
                            (ß result[0] = (int)difference)
                            (§ return result)
                        )
                    )
                )
            )
        )
    )

    ;;;
     ; Subtracts the contents of the second argument (val) from the first (big).
     ; The first int array (big) must represent a larger number than the second.
     ; This method allocates the space necessary to hold the answer.
     ; assumes val >= 0
     ;;
    (defn- #_"int[]" BigInteger'subtract [#_"int[]" big, #_"long" val]
        (§
            (ß #_"int" highWord = (int)(val >>> 32))
            (ß #_"int" bigIndex = big.length)
            (ß #_"int[]" result = new int[bigIndex])
            (ß #_"long" difference = 0)

            (§ cond (ß highWord == 0)
                (§
                    (ß difference = (big[--bigIndex] & BigInteger'LONG_MASK) - val)
                    (ß result[bigIndex] = (int)difference)
                )
                :else
                (§
                    (ß difference = (big[--bigIndex] & BigInteger'LONG_MASK) - (val & BigInteger'LONG_MASK))
                    (ß result[bigIndex] = (int)difference)
                    (ß difference = (big[--bigIndex] & BigInteger'LONG_MASK) - (highWord & BigInteger'LONG_MASK) + (difference >> 32))
                    (ß result[bigIndex] = (int)difference)
                )
            )

            ;; subtract remainder of longer number while borrow propagates
            (ß #_"boolean" borrow = (difference >> 32 != 0))
            (§ while (ß bigIndex > 0 && borrow)
                (ß borrow = ((result[--bigIndex] = big[bigIndex] - 1) == -1))
            )

            ;; copy remainder of longer number
            (§ while (ß bigIndex > 0)
                (ß result[--bigIndex] = big[bigIndex])
            )

            (§ return result)
        )
    )

    ;;;
     ; Returns a BigInteger whose value is {@code (this - val)}.
     ;
     ; @param  val value to be subtracted from this BigInteger.
     ; @return {@code this - val}
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''subtract [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (§ when (ß val.signum == 0)
                (§ return this)
            )
            (§ when (ß signum == 0)
                (§ return BigInteger''negate(val))
            )
            (§ when (ß val.signum != signum)
                (§ return BigInteger'new(BigInteger'add(mag, val.mag), signum))
            )

            (ß #_"int" cmp = BigInteger''compareMagnitude-i(this, val))
            (§ when (ß cmp == 0)
                (§ return BigInteger'ZERO)
            )
            (ß #_"int[]" resultMag = (cmp > 0) ? BigInteger'subtract(mag, val.mag) #_":" BigInteger'subtract(val.mag, mag))
            (ß resultMag = BigInteger'trustedStripLeadingZeroInts(resultMag))
            (§ return BigInteger'new(resultMag, (cmp == signum) ? 1 #_":" -1))
        )
    )

    ;;;
     ; Subtracts the contents of the second int arrays (little) from the first (big).
     ; The first int array (big) must represent a larger number than the second.
     ; This method allocates the space necessary to hold the answer.
     ;;
    (defn- #_"int[]" BigInteger'subtract [#_"int[]" big, #_"int[]" little]
        (§
            (ß #_"int" bigIndex = big.length)
            (ß #_"int[]" result = new int[bigIndex])
            (ß #_"int" littleIndex = little.length)
            (ß #_"long" difference = 0)

            ;; subtract common parts of both numbers
            (§ while (ß littleIndex > 0)
                (ß difference = (big[--bigIndex] & BigInteger'LONG_MASK) - (little[--littleIndex] & BigInteger'LONG_MASK) + (difference >> 32))
                (ß result[bigIndex] = (int)difference)
            )

            ;; subtract remainder of longer number while borrow propagates
            (ß #_"boolean" borrow = (difference >> 32 != 0))
            (§ while (ß bigIndex > 0 && borrow)
                (ß borrow = ((result[--bigIndex] = big[bigIndex] - 1) == -1))
            )

            ;; copy remainder of longer number
            (§ while (ß bigIndex > 0)
                (ß result[--bigIndex] = big[bigIndex])
            )

            (§ return result)
        )
    )

    ;;;
     ; Returns a BigInteger whose value is {@code (this * val)}.
     ;
     ; @param  val value to be multiplied by this BigInteger.
     ; @return {@code this * val}
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''multiply [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (§ when (ß val.signum == 0 || signum == 0)
                (§ return BigInteger'ZERO)
            )

            (ß #_"int" xlen = mag.length)
            (ß #_"int" ylen = val.mag.length)

            (ß #_"int" resultSign = (signum == val.signum) ? 1 #_":" -1)
            (§ when (ß val.mag.length == 1)
                (§ return BigInteger'multiplyByInt(mag, val.mag[0], resultSign))
            )
            (§ when (ß mag.length == 1)
                (§ return BigInteger'multiplyByInt(val.mag, mag[0], resultSign))
            )
            (ß #_"int[]" result = BigInteger''multiplyToLen(this, mag, xlen, val.mag, ylen, nil))
            (ß result = BigInteger'trustedStripLeadingZeroInts(result))
            (§ return BigInteger'new(result, resultSign))
        )
    )

    (defn- #_"BigInteger" BigInteger'multiplyByInt [#_"int[]" x, #_"int" y, #_"int" sign]
        (§
            (§ when (ß Integer.bitCount(y) == 1)
                (§ return BigInteger'new(BigInteger'shiftLeft(x, Integer.numberOfTrailingZeros(y)), sign))
            )
            (ß #_"int" xlen = x.length)
            (ß #_"int[]" rmag = new int[xlen + 1])
            (ß #_"long" carry = 0)
            (ß #_"long" yl = y & BigInteger'LONG_MASK)
            (ß #_"int" rstart = rmag.length - 1)
            (§ for [(ß #_"int" i = xlen - 1)] (ß i >= 0) [(ß i--)]
                (ß #_"long" product = (x[i] & BigInteger'LONG_MASK) * yl + carry)
                (ß rmag[rstart--] = (int)product)
                (ß carry = product >>> 32)
            )
            (§ cond (ß carry == 0)
                (§
                    (ß rmag = Arrays.copyOfRange(rmag, 1, rmag.length))
                )
                :else
                (§
                    (ß rmag[rstart] = (int)carry)
                )
            )
            (§ return BigInteger'new(rmag, sign))
        )
    )

    ;;;
     ; Multiplies int arrays x and y to the specified lengths and places the
     ; result into z. There will be no leading zeros in the resultant array.
     ;;
    #_method
    (defn- #_"int[]" BigInteger''multiplyToLen [#_"BigInteger" this, #_"int[]" x, #_"int" xlen, #_"int[]" y, #_"int" ylen, #_"int[]" z]
        (§
            (ß #_"int" xstart = xlen - 1)
            (ß #_"int" ystart = ylen - 1)

            (§ when (ß z == nil || z.length < (xlen + ylen))
                (ß z = new int[xlen + ylen])
            )

            (ß #_"long" carry = 0)
            (§ for [(ß #_"int" j = ystart, k = ystart + 1 + xstart)] (ß j >= 0) [(ß j--, k--)]
                (ß #_"long" product = (y[j] & BigInteger'LONG_MASK) * (x[xstart] & BigInteger'LONG_MASK) + carry)
                (ß z[k] = (int)product)
                (ß carry = product >>> 32)
            )
            (ß z[xstart] = (int)carry)

            (§ for [(ß #_"int" i = xstart - 1)] (ß i >= 0) [(ß i--)]
                (ß carry = 0)
                (§ for [(ß #_"int" j = ystart, k = ystart + 1 + i)] (ß j >= 0) [(ß j--, k--)]
                    (ß #_"long" product = (y[j] & BigInteger'LONG_MASK) * (x[i] & BigInteger'LONG_MASK) + (z[k] & BigInteger'LONG_MASK) + carry)
                    (ß z[k] = (int)product)
                    (ß carry = product >>> 32)
                )
                (ß z[i] = (int)carry)
            )
            (§ return z)
        )
    )

    ;; squaring

    ;;;
     ; Returns a BigInteger whose value is {@code (this<sup>2</sup>)}.
     ;
     ; @return {@code this<sup>2</sup>}
     ;;
    #_method
    (defn- #_"BigInteger" BigInteger''square [#_"BigInteger" this]
        (§
            (§ when (ß signum == 0)
                (§ return BigInteger'ZERO)
            )

            (ß #_"int[]" z = BigInteger'squareToLen(mag, mag.length, nil))
            (§ return BigInteger'new(BigInteger'trustedStripLeadingZeroInts(z), 1))
        )
    )

    ;;;
     ; Squares the contents of the int array x. The result is placed into the
     ; int array z. The contents of x are not changed.
     ;;
    (defn- #_"int[]" BigInteger'squareToLen [#_"int[]" x, #_"int" len, #_"int[]" z]
        (§
            ;;
             ; The algorithm used here is adapted from Colin Plumb's C library.
             ; Technique: Consider the partial products in the multiplication
             ; of "abcde" by itself:
             ;
             ;               a  b  c  d  e
             ;            *  a  b  c  d  e
             ;          ==================
             ;              ae be ce de ee
             ;           ad bd cd dd de
             ;        ac bc cc cd ce
             ;     ab bb bc bd be
             ;  aa ab ac ad ae
             ;
             ; Note that everything above the main diagonal:
             ;              ae be ce de = (abcd) * e
             ;           ad bd cd       = (abc) * d
             ;        ac bc             = (ab) * c
             ;     ab                   = (a) * b
             ;
             ; is a copy of everything below the main diagonal:
             ;                       de
             ;                 cd ce
             ;           bc bd be
             ;     ab ac ad ae
             ;
             ; Thus, the sum is 2 * (off the diagonal) + diagonal.
             ;
             ; This is accumulated beginning with the diagonal (which
             ; consist of the squares of the digits of the input), which is then
             ; divided by two, the off-diagonal added, and multiplied by two
             ; again. The low bit is simply a copy of the low bit of the
             ; input, so it doesn't need special care.
             ;;
            (ß #_"int" zlen = len << 1)
            (§ when (ß z == nil || z.length < zlen)
                (ß z = new int[zlen])
            )

            ;; store the squares, right shifted one bit (i.e., divided by 2)
            (ß #_"int" lastProductLowWord = 0)
            (§ for [(ß #_"int" j = 0, i = 0)] (ß j < len) [(ß j++)]
                (ß #_"long" piece = (x[j] & BigInteger'LONG_MASK))
                (ß #_"long" product = piece * piece)
                (ß z[i++] = (lastProductLowWord << 31) | (int)(product >>> 33))
                (ß z[i++] = (int)(product >>> 1))
                (ß lastProductLowWord = (int)product)
            )

            ;; add in off-diagonal sums
            (§ for [(ß #_"int" i = len, offset = 1)] (ß i > 0) [(ß i--, offset += 2)]
                (ß #_"int" t = x[i - 1])
                (ß t = BigInteger'mulAdd(z, x, offset, i - 1, t))
                (ß BigInteger'addOne(z, offset - 1, i, t))
            )

            ;; shift back up and set low bit
            (ß BigInteger'primitiveLeftShift(z, zlen, 1))
            (ß z[zlen - 1] |= x[len - 1] & 1)

            (§ return z)
        )
    )

    ;; division

    ;;;
     ; Returns a BigInteger whose value is {@code (this / val)}.
     ;
     ; @param  val value by which this BigInteger is to be divided.
     ; @return {@code this / val}
     ; @throws ArithmeticException if {@code val} is zero.
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''divide [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (§ return BigInteger''divideKnuth(this, val))
        )
    )

    ;;;
     ; Returns a BigInteger whose value is {@code (this / val)} using an O(n^2) algorithm from Knuth.
     ;
     ; @param  val value by which this BigInteger is to be divided.
     ; @return {@code this / val}
     ; @throws ArithmeticException if {@code val} is zero.
     ;;
    #_method
    (defn- #_"BigInteger" BigInteger''divideKnuth [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (ß #_"MutableBigInteger" q = MutableBigInteger'new())
            (ß #_"MutableBigInteger" a = MutableBigInteger'new(this.mag))
            (ß #_"MutableBigInteger" b = MutableBigInteger'new(val.mag))

            (ß MutableBigInteger''divideKnuth-4(a, b, q, false))
            (§ return MutableBigInteger''toBigInteger-2(q, this.signum * val.signum))
        )
    )

    ;;;
     ; Returns an array of two BigIntegers containing {@code (this / val)}
     ; followed by {@code (this % val)}.
     ;
     ; @param  val value by which this BigInteger is to be divided, and the
     ;         remainder computed.
     ; @return an array of two BigIntegers: the quotient {@code (this / val)}
     ;         is the initial element, and the remainder {@code (this % val)}
     ;         is the final element.
     ; @throws ArithmeticException if {@code val} is zero.
     ;;
    #_method
    (defn #_"BigInteger[]" BigInteger''divideAndRemainder [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (§ return BigInteger''divideAndRemainderKnuth(this, val))
        )
    )

    ;;;
     ; Long division.
     ;;
    #_method
    (defn- #_"BigInteger[]" BigInteger''divideAndRemainderKnuth [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (ß #_"BigInteger[]" result = new BigInteger[2])
            (ß #_"MutableBigInteger" q = MutableBigInteger'new())
            (ß #_"MutableBigInteger" a = MutableBigInteger'new(this.mag))
            (ß #_"MutableBigInteger" b = MutableBigInteger'new(val.mag))
            (ß #_"MutableBigInteger" r = MutableBigInteger''divideKnuth-3(a, b, q))
            (ß result[0] = MutableBigInteger''toBigInteger-2(q, (this.signum == val.signum) ? 1 #_":" -1))
            (ß result[1] = MutableBigInteger''toBigInteger-2(r, this.signum))
            (§ return result)
        )
    )

    ;;;
     ; Returns a BigInteger whose value is {@code (this % val)}.
     ;
     ; @param  val value by which this BigInteger is to be divided, and the remainder computed.
     ; @return {@code this % val}
     ; @throws ArithmeticException if {@code val} is zero.
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''remainder [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (§ return BigInteger''remainderKnuth(this, val))
        )
    )

    ;;;
     ; Long division.
     ;;
    #_method
    (defn- #_"BigInteger" BigInteger''remainderKnuth [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (ß #_"MutableBigInteger" q = MutableBigInteger'new())
            (ß #_"MutableBigInteger" a = MutableBigInteger'new(this.mag))
            (ß #_"MutableBigInteger" b = MutableBigInteger'new(val.mag))

            (§ return MutableBigInteger''divideKnuth-3(a, b, q).MutableBigInteger''toBigInteger-2((§ pipe), this.signum))
        )
    )

    ;;;
     ; Returns a BigInteger whose value is <tt>(this<sup>exponent</sup>)</tt>.
     ; Note that {@code exponent} is an integer rather than a BigInteger.
     ;
     ; @param  exponent exponent to which this BigInteger is to be raised.
     ; @return <tt>this<sup>exponent</sup></tt>
     ; @throws ArithmeticException {@code exponent} is negative. (This would
     ;         cause the operation to yield a non-integer value.)
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''pow [#_"BigInteger" this, #_"int" exponent]
        (§
            (§ when (ß exponent < 0)
                (ß throw new ArithmeticException("Negative exponent"))
            )
            (§ when (ß signum == 0)
                (§ return (exponent == 0) ? BigInteger'ONE #_":" this)
            )

            (ß #_"BigInteger" partToSquare = BigInteger''abs(this))

            ;; Factor out powers of two from the base, as the exponentiation of these can be done by left shifts only.
            ;; The remaining part can then be exponentiated faster.
            ;; The powers of two will be multiplied back at the end.
            (ß #_"int" powersOfTwo = BigInteger''getLowestSetBit(partToSquare))
            (ß #_"long" bitsToShift = (long)powersOfTwo * exponent)
            (§ when (ß bitsToShift > Integer.MAX_VALUE)
                (ß BigInteger'reportOverflow())
            )

            (ß #_"int" remainingBits)

            ;; Factor the powers of two out quickly by shifting right, if needed.
            (§ cond (ß powersOfTwo > 0)
                (§
                    (ß partToSquare = BigInteger''shiftRight(partToSquare, powersOfTwo))
                    (ß remainingBits = BigInteger''bitLength(partToSquare))
                    (§ when (ß remainingBits == 1) ;; Nothing left but +/- 1?
                        (§ cond (ß signum < 0 && (exponent & 1) == 1)
                            (§
                                (§ return BigInteger''shiftLeft(BigInteger'NEGATIVE_ONE, powersOfTwo * exponent))
                            )
                            :else
                            (§
                                (§ return BigInteger''shiftLeft(BigInteger'ONE, powersOfTwo * exponent))
                            )
                        )
                    )
                )
                :else
                (§
                    (ß remainingBits = BigInteger''bitLength(partToSquare))
                    (§ when (ß remainingBits == 1) ;; Nothing left but +/- 1?
                        (§ cond (ß signum < 0 && (exponent & 1) == 1)
                            (§
                                (§ return BigInteger'NEGATIVE_ONE)
                            )
                            :else
                            (§
                                (§ return BigInteger'ONE)
                            )
                        )
                    )
                )
            )

            ;; This is a quick way to approximate the size of the result,
            ;; similar to doing log2[n] * exponent. This will give an upper bound
            ;; of how big the result can be, and which algorithm to use.
            (ß #_"long" scaleFactor = (long)remainingBits * exponent)

            ;; Use slightly different algorithms for small and large operands.
            ;; See if the result will safely fit into a long. (Largest 2^63-1)
            (§ cond (ß partToSquare.mag.length == 1 && scaleFactor <= 62)
                (§
                    ;; Small number algorithm. Everything fits into a long.
                    (ß #_"int" newSign = (signum < 0 && ((exponent & 1) == 1) ? -1 #_":" 1))
                    (ß #_"long" result = 1)
                    (ß #_"long" baseToPow2 = partToSquare.mag[0] & BigInteger'LONG_MASK)

                    (ß #_"int" workingExponent = exponent)

                    ;; perform exponentiation using repeated squaring trick
                    (§ while (ß workingExponent != 0)
                        (§ when (ß (workingExponent & 1) == 1)
                            (ß result = result * baseToPow2)
                        )

                        (§ when (ß (workingExponent >>>= 1) != 0)
                            (ß baseToPow2 = baseToPow2 * baseToPow2)
                        )
                    )

                    ;; multiply back the powers of two (quickly, by shifting left)
                    (§ cond (ß powersOfTwo > 0)
                        (§
                            (§ cond (ß bitsToShift + scaleFactor <= 62) ;; Fits in long?
                                (§
                                    (§ return BigInteger'valueOf-l((result << bitsToShift) * newSign))
                                )
                                :else
                                (§
                                    (§ return BigInteger'valueOf-l(result * newSign).BigInteger''shiftLeft((§ pipe), (int)bitsToShift))
                                )
                            )
                        )
                        :else
                        (§
                            (§ return BigInteger'valueOf-l(result * newSign))
                        )
                    )
                )
                :else
                (§
                    ;; Large number algorithm. This is basically identical to
                    ;; the algorithm above, but calls multiply() and square()
                    ;; which may use more efficient algorithms for large numbers.
                    (ß #_"BigInteger" answer = BigInteger'ONE)

                    (ß #_"int" workingExponent = exponent)
                    ;; perform exponentiation using repeated squaring trick
                    (§ while (ß workingExponent != 0)
                        (§ when (ß (workingExponent & 1) == 1)
                            (ß answer = BigInteger''multiply(answer, partToSquare))
                        )

                        (§ when (ß (workingExponent >>>= 1) != 0)
                            (ß partToSquare = BigInteger''square(partToSquare))
                        )
                    )
                    ;; multiply back the (exponentiated) powers of two (quickly, by shifting left)
                    (§ when (ß powersOfTwo > 0)
                        (ß answer = BigInteger''shiftLeft(answer, powersOfTwo * exponent))
                    )

                    (§ cond (ß signum < 0 && (exponent & 1) == 1)
                        (§
                            (§ return BigInteger''negate(answer))
                        )
                        :else
                        (§
                            (§ return answer)
                        )
                    )
                )
            )
        )
    )

    ;;;
     ; Returns a BigInteger whose value is the greatest common divisor
     ; of {@code abs(this)} and {@code abs(val)}.
     ; Returns 0 if {@code this == 0 && val == 0}.
     ;
     ; @param  val value with which the GCD is to be computed.
     ; @return {@code GCD(abs(this), abs(val))}
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''gcd [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (§ cond (ß val.signum == 0)
                (§
                    (§ return BigInteger''abs(this))
                )
                (this.signum == 0)
                (§
                    (§ return BigInteger''abs(val))
                )
            )

            (ß #_"MutableBigInteger" a = MutableBigInteger'new(this))
            (ß #_"MutableBigInteger" b = MutableBigInteger'new(val))

            (ß #_"MutableBigInteger" result = MutableBigInteger''hybridGCD(a, b))

            (§ return MutableBigInteger''toBigInteger-2(result, 1))
        )
    )

    ;;;
     ; Package private method to return bit length for an integer.
     ;;
    (defn #_"int" BigInteger'bitLengthForInt [#_"int" n]
        (§
            (§ return 32 - Integer.numberOfLeadingZeros(n))
        )
    )

    ;;;
     ; Left shift int array a up to len by n bits. Returns the array that
     ; results from the shift since space may have to be reallocated.
     ;;
    (defn- #_"int[]" BigInteger'leftShift [#_"int[]" a, #_"int" len, #_"int" n]
        (§
            (ß #_"int" nInts = n >>> 5)
            (ß #_"int" nBits = n & 0x1f)
            (ß #_"int" bitsInHighWord = BigInteger'bitLengthForInt(a[0]))

            ;; if shift can be done without recopy, do so
            (§ cond (ß n <= (32 - bitsInHighWord))
                (§
                    (ß BigInteger'primitiveLeftShift(a, len, nBits))
                    (§ return a)
                )
                :else ;; array must be resized
                (§
                    (§ cond (ß nBits <= (32 - bitsInHighWord))
                        (§
                            (ß #_"int[]" result = new int[nInts + len])
                            (ß System.arraycopy(a, 0, result, 0, len))
                            (ß BigInteger'primitiveLeftShift(result, result.length, nBits))
                            (§ return result)
                        )
                        :else
                        (§
                            (ß #_"int[]" result = new int[nInts + len + 1])
                            (ß System.arraycopy(a, 0, result, 0, len))
                            (ß BigInteger'primitiveRightShift(result, result.length, 32 - nBits))
                            (§ return result)
                        )
                    )
                )
            )
        )
    )

    ;; shifts a up to len right n bits assumes no leading zeros, 0 < n < 32
    (defn #_"void" BigInteger'primitiveRightShift [#_"int[]" a, #_"int" len, #_"int" n]
        (§
            (ß #_"int" n2 = 32 - n)
            (§ for [(ß #_"int" i = len - 1, c = a[i])] (ß i > 0) [(ß i--)]
                (ß #_"int" b = c)
                (ß c = a[i - 1])
                (ß a[i] = (c << n2) | (b >>> n))
            )
            (ß a[0] >>>= n)
        )
        nil
    )

    ;; shifts a up to len left n bits assumes no leading zeros, 0 <= n < 32
    (defn #_"void" BigInteger'primitiveLeftShift [#_"int[]" a, #_"int" len, #_"int" n]
        (§
            (§ when (ß len == 0 || n == 0)
                (§ return nil)
            )

            (ß #_"int" n2 = 32 - n)
            (§ for [(ß #_"int" i = 0, c = a[i], m = i + len - 1)] (ß i < m) [(ß i++)]
                (ß #_"int" b = c)
                (ß c = a[i + 1])
                (ß a[i] = (b << n) | (c >>> n2))
            )
            (ß a[len - 1] <<= n)
        )
        nil
    )

    ;;;
     ; Calculate bitlength of contents of the first len elements an int array,
     ; assuming there are no leading zero ints.
     ;;
    (defn- #_"int" BigInteger'bitLength [#_"int[]" val, #_"int" len]
        (§
            (§ when (ß len == 0)
                (§ return 0)
            )
            (§ return ((len - 1) << 5) + BigInteger'bitLengthForInt(val[0]))
        )
    )

    ;;;
     ; Returns a BigInteger whose value is the absolute value of this BigInteger.
     ;
     ; @return {@code abs(this)}
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''abs [#_"BigInteger" this]
        (§
            (§ return (signum >= 0) ? this #_":" BigInteger''negate(this))
        )
    )

    ;;;
     ; Returns a BigInteger whose value is {@code (-this)}.
     ;
     ; @return {@code -this}
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''negate [#_"BigInteger" this]
        (§
            (§ return BigInteger'new(this.mag, -this.signum))
        )
    )

    ;;;
     ; Returns the signum function of this BigInteger.
     ;
     ; @return -1, 0 or 1 as the value of this BigInteger is negative, zero or positive.
     ;;
    #_method
    (defn #_"int" BigInteger''signum [#_"BigInteger" this]
        (§
            (§ return this.signum)
        )
    )

    ;; modular arithmetic operations

    ;;;
     ; Returns a BigInteger whose value is {@code (this mod m}).
     ; This method differs from {@code remainder} in that it always returns
     ; a <i>non-negative</i> BigInteger.
     ;
     ; @param  m the modulus.
     ; @return {@code this mod m}
     ; @throws ArithmeticException {@code m} <= 0
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''mod [#_"BigInteger" this, #_"BigInteger" m]
        (§
            (§ when (ß m.signum <= 0)
                (ß throw new ArithmeticException("BigInteger: modulus not positive"))
            )

            (ß #_"BigInteger" result = BigInteger''remainder(this, m))
            (§ return (result.signum >= 0) ? result #_":" BigInteger''add(result, m))
        )
    )

    ;;;
     ; Returns a BigInteger whose value is <tt>(this<sup>exponent</sup> mod m)</tt>.
     ; (Unlike {@code pow}, this method permits negative exponents.)
     ;
     ; @param  exponent the exponent.
     ; @param  m the modulus.
     ; @return <tt>this<sup>exponent</sup> mod m</tt>
     ; @throws ArithmeticException {@code m} <= 0 or the exponent is negative
     ;         and this BigInteger is not <i>relatively prime</i> to {@code m}.
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''modPow [#_"BigInteger" this, #_"BigInteger" exponent, #_"BigInteger" m]
        (§
            (§ when (ß m.signum <= 0)
                (ß throw new ArithmeticException("BigInteger: modulus not positive"))
            )

            ;; trivial cases
            (§ when (ß exponent.signum == 0)
                (§ return m.equals(BigInteger'ONE) ? BigInteger'ZERO #_":" BigInteger'ONE)
            )

            (§ when (ß this.equals(BigInteger'ONE))
                (§ return m.equals(BigInteger'ONE) ? BigInteger'ZERO #_":" BigInteger'ONE)
            )

            (§ when (ß this.equals(BigInteger'ZERO) && exponent.signum >= 0)
                (§ return BigInteger'ZERO)
            )

            (§ when (ß this.equals(BigInteger'negConst[1]) && (!BigInteger''testBit(exponent, 0)))
                (§ return m.equals(BigInteger'ONE) ? BigInteger'ZERO #_":" BigInteger'ONE)
            )

            (ß #_"boolean" invertResult = (exponent.signum < 0))
            (§ when (ß invertResult)
                (ß exponent = BigInteger''negate(exponent))
            )

            (ß #_"BigInteger" base = (this.signum < 0 || this.compareTo(m) >= 0) ? BigInteger''mod(this, m) #_":" this)
            (ß #_"BigInteger" result)
            (§ cond (ß BigInteger''testBit(m, 0)) ;; odd modulus
                (§
                    (ß result = BigInteger''oddModPow(base, exponent, m))
                )
                :else
                (§
                    ;;
                     ; Even modulus. Tear it into an "odd part" (m1) and power of two (m2),
                     ; exponentiate mod m1, manually exponentiate mod m2, and use
                     ; Chinese Remainder Theorem to combine results.
                     ;;

                    ;; tear m apart into odd part (m1) and power of 2 (m2)
                    (ß #_"int" p = BigInteger''getLowestSetBit(m)) ;; max pow of 2 that divides m

                    (ß #_"BigInteger" m1 = BigInteger''shiftRight(m, p)) ;; m/2**p
                    (ß #_"BigInteger" m2 = BigInteger''shiftLeft(BigInteger'ONE, p)) ;; 2**p

                    ;; calculate new base from m1
                    (ß #_"BigInteger" base2 = (this.signum < 0 || this.compareTo(m1) >= 0) ? BigInteger''mod(this, m1) #_":" this)

                    ;; caculate (base ** exponent) mod m1
                    (ß #_"BigInteger" a1 = m1.equals(BigInteger'ONE) ? BigInteger'ZERO #_":" BigInteger''oddModPow(base2, exponent, m1))

                    ;; calculate (this ** exponent) mod m2
                    (ß #_"BigInteger" a2 = BigInteger''modPow2(base, exponent, p))

                    ;; combine results using Chinese Remainder Theorem
                    (ß #_"BigInteger" y1 = BigInteger''modInverse(m2, m1))
                    (ß #_"BigInteger" y2 = BigInteger''modInverse(m1, m2))

                    (§ cond (ß m.mag.length < BigInteger'MAX_MAG_LENGTH / 2)
                        (§
                            (ß result = BigInteger''multiply(a1, m2).BigInteger''multiply((§ pipe), y1).BigInteger''add((§ pipe), BigInteger''multiply(a2, m1).BigInteger''multiply((§ pipe), y2)).BigInteger''mod((§ pipe), m))
                        )
                        :else
                        (§
                            (ß #_"MutableBigInteger" t1 = MutableBigInteger'new())
                            (ß MutableBigInteger'new(BigInteger''multiply(a1, m2)).MutableBigInteger''multiply((§ pipe), MutableBigInteger'new(y1), t1))
                            (ß #_"MutableBigInteger" t2 = MutableBigInteger'new())
                            (ß MutableBigInteger'new(BigInteger''multiply(a2, m1)).MutableBigInteger''multiply((§ pipe), MutableBigInteger'new(y2), t2))
                            (ß MutableBigInteger''add(t1, t2))
                            (ß #_"MutableBigInteger" q = MutableBigInteger'new())
                            (ß result = MutableBigInteger''divide-3(t1, MutableBigInteger'new(m), q).MutableBigInteger''toBigInteger-1((§ pipe), ))
                        )
                    )
                )
            )

            (§ return invertResult ? BigInteger''modInverse(result, m) #_":" result)
        )
    )

    (def #_"int[]" BigInteger'bnExpModThreshTable (§ init 7, 25, 81, 241, 673, 1793, Integer.MAX_VALUE )) ;; sentinel

    ;;;
     ; Returns a BigInteger whose value is x to the power of y mod z.
     ; Assumes: z is odd && x < z.
     ;;
    #_method
    (defn- #_"BigInteger" BigInteger''oddModPow [#_"BigInteger" this, #_"BigInteger" y, #_"BigInteger" z]
        (§
            ;;
             ; The algorithm is adapted from Colin Plumb's C library.
             ;
             ; The window algorithm:
             ; The idea is to keep a running product of b1 = n^(high-order bits of exp)
             ; and then keep appending exponent bits to it. The following patterns
             ; apply to a 3-bit window (k = 3):
             ; To append   0: square
             ; To append   1: square, multiply by n^1
             ; To append  10: square, multiply by n^1, square
             ; To append  11: square, square, multiply by n^3
             ; To append 100: square, multiply by n^1, square, square
             ; To append 101: square, square, square, multiply by n^5
             ; To append 110: square, square, multiply by n^3, square
             ; To append 111: square, square, square, multiply by n^7
             ;
             ; Since each pattern involves only one multiply, the longer the pattern
             ; the better, except that a 0 (no multiplies) can be appended directly.
             ; We precompute a table of odd powers of n, up to 2^k, and can then
             ; multiply k bits of exponent at a time. Actually, assuming random
             ; exponents, there is on average one zero bit between needs to
             ; multiply (1/2 of the time there's none, 1/4 of the time there's 1,
             ; 1/8 of the time, there's 2, 1/32 of the time, there's 3, etc.), so
             ; you have to do one multiply per k+1 bits of exponent.
             ;
             ; The loop walks down the exponent, squaring the result buffer as
             ; it goes. There is a wbits+1 bit lookahead buffer, buf, that is
             ; filled with the upcoming exponent bits. (What is read after the
             ; end of the exponent is unimportant, but it is filled with zero here.)
             ; When the most-significant bit of this buffer becomes set, i.e.
             ; (buf & tblmask) != 0, we have to decide what pattern to multiply
             ; by, and when to do it. We decide, remember to do it in future
             ; after a suitable number of squarings have passed (e.g. a pattern
             ; of "100" in the buffer requires that we multiply by n^1 immediately;
             ; a pattern of "110" calls for multiplying by n^3 after one more
             ; squaring), clear the buffer, and continue.
             ;
             ; When we start, there is one more optimization: the result buffer
             ; is implcitly one, so squaring it or multiplying by it can be
             ; optimized away. Further, if we start with a pattern like "100"
             ; in the lookahead window, rather than placing n into the buffer
             ; and then starting to square it, we have already computed n^2
             ; to compute the odd-powers table, so we can place that into
             ; the buffer and save a squaring.
             ;
             ; This means that if you have a k-bit window, to compute n^z,
             ; where z is the high k bits of the exponent, 1/2 of the time
             ; it requires no squarings. 1/4 of the time, it requires 1
             ; squaring, ... 1/2^(k-1) of the time, it reqires k-2 squarings.
             ; And the remaining 1/2^(k-1) of the time, the top k bits are a
             ; 1 followed by k-1 0 bits, so it again only requires k-2
             ; squarings, not k-1. The average of these is 1. Add that
             ; to the one squaring we have to do to compute the table,
             ; and you'll see that a k-bit window saves k-2 squarings
             ; as well as reducing the multiplies. (It actually doesn't
             ; hurt in the case k = 1, either.)
             ;;

            ;; special case for exponent of one
            (§ when (ß y.equals(BigInteger'ONE))
                (§ return this)
            )

            ;; special case for base of zero
            (§ when (ß signum == 0)
                (§ return BigInteger'ZERO)
            )

            (ß #_"int[]" base = mag.clone())
            (ß #_"int[]" exp = y.mag)
            (ß #_"int[]" mod = z.mag)
            (ß #_"int" modLen = mod.length)

            ;; select an appropriate window size
            (ß #_"int" wbits = 0)
            (ß #_"int" ebits = BigInteger'bitLength(exp, exp.length))
            ;; if exponent is 65537 (0x10001), use minimum window size
            (§ when (ß (ebits != 17) || (exp[0] != 65537))
                (§ while (ß ebits > BigInteger'bnExpModThreshTable[wbits])
                    (ß wbits++)
                )
            )

            ;; calculate appropriate table size
            (ß #_"int" tblmask = 1 << wbits)

            ;; allocate table for precomputed odd powers of base in Montgomery form
            (ß #_"int[][]" table = new int[tblmask][])
            (§ for [(ß #_"int" i = 0)] (ß i < tblmask) [(ß i++)]
                (ß table[i] = new int[modLen])
            )

            ;; compute the modular inverse
            (ß #_"int" inv = -MutableBigInteger'inverseMod32(mod[modLen - 1]))

            ;; convert base to Montgomery form
            (ß #_"int[]" a = BigInteger'leftShift(base, base.length, modLen << 5))

            (ß #_"MutableBigInteger" q = MutableBigInteger'new())
            (ß #_"MutableBigInteger" a2 = MutableBigInteger'new(a))
            (ß #_"MutableBigInteger" b2 = MutableBigInteger'new(mod))

            (ß #_"MutableBigInteger" r = MutableBigInteger''divide-3(a2, b2, q))
            (ß table[0] = MutableBigInteger''toIntArray(r))

            ;; pad table[0] with leading zeros so its length is at least modLen
            (§ when (ß table[0].length < modLen)
                (ß #_"int" offset = modLen - table[0].length)
                (ß #_"int[]" t2 = new int[modLen])
                (§ for [(ß #_"int" i = 0)] (ß i < table[0].length) [(ß i++)]
                    (ß t2[i + offset] = table[0][i])
                )
                (ß table[0] = t2)
            )

            ;; set b to the square of the base
            (ß #_"int[]" b = BigInteger'squareToLen(table[0], modLen, nil))
            (ß b = BigInteger'montReduce(b, mod, modLen, inv))

            ;; set t to high half of b
            (ß #_"int[]" t = Arrays.copyOf(b, modLen))

            ;; fill in the table with odd powers of the base
            (§ for [(ß #_"int" i = 1)] (ß i < tblmask) [(ß i++)]
                (ß #_"int[]" prod = BigInteger''multiplyToLen(this, t, modLen, table[i - 1], modLen, nil))
                (ß table[i] = BigInteger'montReduce(prod, mod, modLen, inv))
            )

            ;; pre load the window that slides over the exponent
            (ß #_"int" bitpos = 1 << ((ebits - 1) & (32 - 1)))

            (ß #_"int" buf = 0)
            (ß #_"int" elen = exp.length)
            (ß #_"int" eIndex = 0)
            (§ for [(ß #_"int" i = 0)] (ß i <= wbits) [(ß i++)]
                (ß buf = (buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 #_":" 0))
                (ß bitpos >>>= 1)
                (§ when (ß bitpos == 0)
                    (ß eIndex++)
                    (ß bitpos = 1 << (32 - 1))
                    (ß elen--)
                )
            )

            (ß #_"int" multpos = ebits)

            ;; the first iteration, which is hoisted out of the main loop
            (ß ebits--)
            (ß #_"boolean" isone = true)

            (ß multpos = ebits - wbits)
            (§ while (ß (buf & 1) == 0)
                (ß buf >>>= 1)
                (ß multpos++)
            )

            (ß #_"int[]" mult = table[buf >>> 1])

            (ß buf = 0)
            (§ when (ß multpos == ebits)
                (ß isone = false)
            )

            ;; the main loop
            (§ while (ß true)
                (ß ebits--)
                ;; advance the window
                (ß buf <<= 1)

                (§ when (ß elen != 0)
                    (ß buf |= ((exp[eIndex] & bitpos) != 0) ? 1 #_":" 0)
                    (ß bitpos >>>= 1)
                    (§ when (ß bitpos == 0)
                        (ß eIndex++)
                        (ß bitpos = 1 << (32 - 1))
                        (ß elen--)
                    )
                )

                ;; examine the window for pending multiplies
                (§ when (ß (buf & tblmask) != 0)
                    (ß multpos = ebits - wbits)
                    (§ while (ß (buf & 1) == 0)
                        (ß buf >>>= 1)
                        (ß multpos++)
                    )
                    (ß mult = table[buf >>> 1])
                    (ß buf = 0)
                )

                ;; perform multiply
                (§ when (ß ebits == multpos)
                    (§ cond (ß isone)
                        (§
                            (ß b = mult.clone())
                            (ß isone = false)
                        )
                        :else
                        (§
                            (ß t = b)
                            (ß a = BigInteger''multiplyToLen(this, t, modLen, mult, modLen, a))
                            (ß a = BigInteger'montReduce(a, mod, modLen, inv))
                            (ß t = a)
                            (ß a = b)
                            (ß b = t)
                        )
                    )
                )

                ;; check if done
                (§ when (ß ebits == 0)
                    (ß break)
                )

                ;; square the input
                (§ when (ß !isone)
                    (ß t = b)
                    (ß a = BigInteger'squareToLen(t, modLen, a))
                    (ß a = BigInteger'montReduce(a, mod, modLen, inv))
                    (ß t = a)
                    (ß a = b)
                    (ß b = t)
                )
            )

            ;; convert result out of Montgomery form and return
            (ß #_"int[]" t2 = new int[2 * modLen])
            (ß System.arraycopy(b, 0, t2, modLen, modLen))

            (ß b = BigInteger'montReduce(t2, mod, modLen, inv))

            (ß t2 = Arrays.copyOf(b, modLen))

            (§ return BigInteger'new(1, t2))
        )
    )

    ;;;
     ; Montgomery reduce n, modulo mod. This reduces modulo mod and divides
     ; by 2^(32*mlen). Adapted from Colin Plumb's C library.
     ;;
    (defn- #_"int[]" BigInteger'montReduce [#_"int[]" n, #_"int[]" mod, #_"int" mlen, #_"int" inv]
        (§
            (ß #_"int" c = 0)
            (ß #_"int" len = mlen)
            (ß #_"int" offset = 0)

            (§ do
                (ß #_"int" nEnd = n[n.length - 1 - offset])
                (ß #_"int" carry = BigInteger'mulAdd(n, mod, offset, mlen, inv * nEnd))
                (ß c += BigInteger'addOne(n, offset, mlen, carry))
                (ß offset++)
            ) (§ while! (ß --len > 0))

            (§ while (ß c > 0)
                (ß c += BigInteger'subN(n, mod, mlen))
            )

            (§ while (ß BigInteger'intArrayCmpToLen(n, mod, mlen) >= 0)
                (ß BigInteger'subN(n, mod, mlen))
            )

            (§ return n)
        )
    )

    ;;
     ; Returns -1, 0 or +1 as big-endian unsigned int array arg1 is less than,
     ; equal to, or greater than arg2 up to length len.
     ;;
    (defn- #_"int" BigInteger'intArrayCmpToLen [#_"int[]" arg1, #_"int[]" arg2, #_"int" len]
        (§
            (§ for [(ß #_"int" i = 0)] (ß i < len) [(ß i++)]
                (ß #_"long" b1 = arg1[i] & BigInteger'LONG_MASK)
                (ß #_"long" b2 = arg2[i] & BigInteger'LONG_MASK)
                (§ when (ß b1 < b2)
                    (§ return -1)
                )
                (§ when (ß b1 > b2)
                    (§ return 1)
                )
            )
            (§ return 0)
        )
    )

    ;;;
     ; Subtracts two numbers of same length, returning borrow.
     ;;
    (defn- #_"int" BigInteger'subN [#_"int[]" a, #_"int[]" b, #_"int" len]
        (§
            (ß #_"long" sum = 0)

            (§ while (ß --len >= 0)
                (ß sum = (a[len] & BigInteger'LONG_MASK) - (b[len] & BigInteger'LONG_MASK) + (sum >> 32))
                (ß a[len] = (int)sum)
            )

            (§ return (int)(sum >> 32))
        )
    )

    ;;;
     ; Multiply an array by one word k and add to result, return the carry.
     ;;
    (defn #_"int" BigInteger'mulAdd [#_"int[]" out, #_"int[]" in, #_"int" offset, #_"int" len, #_"int" k]
        (§
            (ß #_"long" kLong = k & BigInteger'LONG_MASK)
            (ß #_"long" carry = 0)

            (ß offset = out.length - offset - 1)
            (§ for [(ß #_"int" j = len - 1)] (ß j >= 0) [(ß j--)]
                (ß #_"long" product = (in[j] & BigInteger'LONG_MASK) * kLong + (out[offset] & BigInteger'LONG_MASK) + carry)
                (ß out[offset--] = (int)product)
                (ß carry = product >>> 32)
            )
            (§ return (int)carry)
        )
    )

    ;;;
     ; Add one word to the number a mlen words into a.
     ; Return the resulting carry.
     ;;
    (defn #_"int" BigInteger'addOne [#_"int[]" a, #_"int" offset, #_"int" mlen, #_"int" carry]
        (§
            (ß offset = a.length - 1 - mlen - offset)
            (ß #_"long" t = (a[offset] & BigInteger'LONG_MASK) + (carry & BigInteger'LONG_MASK))

            (ß a[offset] = (int)t)
            (§ when (ß (t >>> 32) == 0)
                (§ return 0)
            )
            (§ while (ß --mlen >= 0)
                (§ cond (ß --offset < 0) ;; carry out of number
                    (§
                        (§ return 1)
                    )
                    :else
                    (§
                        (ß a[offset]++)
                        (§ when (ß a[offset] != 0)
                            (§ return 0)
                        )
                    )
                )
            )
            (§ return 1)
        )
    )

    ;;;
     ; Returns a BigInteger whose value is (this ** exponent) mod (2**p)
     ;;
    #_method
    (defn- #_"BigInteger" BigInteger''modPow2 [#_"BigInteger" this, #_"BigInteger" exponent, #_"int" p]
        (§
            ;;
             ; Perform exponentiation using repeated squaring trick, chopping off
             ; high order bits as indicated by modulus.
             ;;
            (ß #_"BigInteger" result = BigInteger'ONE)
            (ß #_"BigInteger" baseToPow2 = BigInteger''mod2(this, p))
            (ß #_"int" expOffset = 0)

            (ß #_"int" limit = BigInteger''bitLength(exponent))

            (§ when (ß BigInteger''testBit(this, 0))
                (ß limit = ((p - 1) < limit) ? (p - 1) #_":" limit)
            )

            (§ while (ß expOffset < limit)
                (§ when (ß BigInteger''testBit(exponent, expOffset))
                    (ß result = BigInteger''multiply(result, baseToPow2).BigInteger''mod2((§ pipe), p))
                )
                (ß expOffset++)
                (§ when (ß expOffset < limit)
                    (ß baseToPow2 = BigInteger''square(baseToPow2).BigInteger''mod2((§ pipe), p))
                )
            )

            (§ return result)
        )
    )

    ;;;
     ; Returns a BigInteger whose value is this mod(2**p).
     ; Assumes that this {@code BigInteger >= 0} and {@code p > 0}.
     ;;
    #_method
    (defn- #_"BigInteger" BigInteger''mod2 [#_"BigInteger" this, #_"int" p]
        (§
            (§ when (ß BigInteger''bitLength(this) <= p)
                (§ return this)
            )

            ;; copy remaining ints of mag
            (ß #_"int" numInts = (p + 31) >>> 5)
            (ß #_"int[]" mag = new int[numInts])
            (ß System.arraycopy(this.mag, this.mag.length - numInts, mag, 0, numInts))

            ;; mask out any excess bits
            (ß #_"int" excessBits = (numInts << 5) - p)
            (ß mag[0] &= (1 << (32 - excessBits)) - 1)

            (§ return (mag[0] == 0) ? BigInteger'new(1, mag) #_":" BigInteger'new(mag, 1))
        )
    )

    ;;;
     ; Returns a BigInteger whose value is {@code (this}<sup>-1</sup> {@code mod m)}.
     ;
     ; @param  m the modulus.
     ; @return {@code this}<sup>-1</sup> {@code mod m}.
     ; @throws ArithmeticException {@code m} <= 0, or this BigInteger
     ;         has no multiplicative inverse mod m (that is, this BigInteger
     ;         is not <i>relatively prime</i> to m).
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''modInverse [#_"BigInteger" this, #_"BigInteger" m]
        (§
            (§ when (ß m.signum != 1)
                (ß throw new ArithmeticException("BigInteger: modulus not positive"))
            )

            (§ when (ß m.equals(BigInteger'ONE))
                (§ return BigInteger'ZERO)
            )

            ;; calculate (this mod m)
            (ß #_"BigInteger" modVal = this)
            (§ when (ß signum < 0 || (BigInteger''compareMagnitude-i(this, m) >= 0))
                (ß modVal = BigInteger''mod(this, m))
            )

            (§ when (ß modVal.equals(BigInteger'ONE))
                (§ return BigInteger'ONE)
            )

            (ß #_"MutableBigInteger" a = MutableBigInteger'new(modVal))
            (ß #_"MutableBigInteger" b = MutableBigInteger'new(m))

            (ß #_"MutableBigInteger" result = MutableBigInteger''mutableModInverse(a, b))
            (§ return MutableBigInteger''toBigInteger-2(result, 1))
        )
    )

    ;; shift operations

    ;;;
     ; Returns a BigInteger whose value is {@code (this << n)}.
     ; The shift distance, {@code n}, may be negative, in which case
     ; this method performs a right shift.
     ; (Computes <tt>floor(this * 2<sup>n</sup>)</tt>.)
     ;
     ; @param  n shift distance, in bits.
     ; @return {@code this << n}
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''shiftLeft [#_"BigInteger" this, #_"int" n]
        (§
            (§ when (ß signum == 0)
                (§ return BigInteger'ZERO)
            )
            (§ cond (ß n > 0)
                (§
                    (§ return BigInteger'new(BigInteger'shiftLeft(mag, n), signum))
                )
                (n == 0)
                (§
                    (§ return this)
                )
                :else
                (§
                    ;; Possible int overflow in (-n) is not a trouble,
                    ;; because shiftRightImpl considers its argument unsigned.
                    (§ return BigInteger''shiftRightImpl(this, -n))
                )
            )
        )
    )

    ;;;
     ; Returns a magnitude array whose value is {@code (mag << n)}.
     ; The shift distance, {@code n}, is considered unnsigned.
     ; (Computes <tt>this * 2<sup>n</sup></tt>.)
     ;
     ; @param mag magnitude, the most-significant int ({@code mag[0]}) must be non-zero.
     ; @param  n unsigned shift distance, in bits.
     ; @return {@code mag << n}
     ;;
    (defn- #_"int[]" BigInteger'shiftLeft [#_"int[]" mag, #_"int" n]
        (§
            (ß #_"int" nInts = n >>> 5)
            (ß #_"int" nBits = n & 0x1f)
            (ß #_"int" magLen = mag.length)
            (ß #_"int[]" newMag = nil)

            (§ cond (ß nBits == 0)
                (§
                    (ß newMag = new int[magLen + nInts])
                    (ß System.arraycopy(mag, 0, newMag, 0, magLen))
                )
                :else
                (§
                    (ß #_"int" i = 0)
                    (ß #_"int" nBits2 = 32 - nBits)
                    (ß #_"int" highBits = mag[0] >>> nBits2)
                    (§ cond (ß highBits != 0)
                        (§
                            (ß newMag = new int[magLen + nInts + 1])
                            (ß newMag[i++] = highBits)
                        )
                        :else
                        (§
                            (ß newMag = new int[magLen + nInts])
                        )
                    )
                    (ß #_"int" j = 0)
                    (§ while (ß j < magLen - 1)
                        (ß newMag[i++] = mag[j++] << nBits | mag[j] >>> nBits2)
                    )
                    (ß newMag[i] = mag[j] << nBits)
                )
            )
            (§ return newMag)
        )
    )

    ;;;
     ; Returns a BigInteger whose value is {@code (this >> n)}. Sign
     ; extension is performed. The shift distance, {@code n}, may be
     ; negative, in which case this method performs a left shift.
     ; (Computes <tt>floor(this / 2<sup>n</sup>)</tt>.)
     ;
     ; @param  n shift distance, in bits.
     ; @return {@code this >> n}
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''shiftRight [#_"BigInteger" this, #_"int" n]
        (§
            (§ when (ß signum == 0)
                (§ return BigInteger'ZERO)
            )
            (§ cond (ß n > 0)
                (§
                    (§ return BigInteger''shiftRightImpl(this, n))
                )
                (n == 0)
                (§
                    (§ return this)
                )
                :else
                (§
                    ;; Possible int overflow in {@code -n} is not a trouble,
                    ;; because shiftLeft considers its argument unsigned.
                    (§ return BigInteger'new(BigInteger'shiftLeft(mag, -n), signum))
                )
            )
        )
    )

    ;;;
     ; Returns a BigInteger whose value is {@code (this >> n)}.
     ; The shift distance, {@code n}, is considered unsigned.
     ; (Computes <tt>floor(this * 2<sup>-n</sup>)</tt>.)
     ;
     ; @param  n unsigned shift distance, in bits.
     ; @return {@code this >> n}
     ;;
    #_method
    (defn- #_"BigInteger" BigInteger''shiftRightImpl [#_"BigInteger" this, #_"int" n]
        (§
            (ß #_"int" nInts = n >>> 5)
            (ß #_"int" nBits = n & 0x1f)
            (ß #_"int" magLen = mag.length)
            (ß #_"int[]" newMag = nil)

            ;; special case: entire contents shifted off the end
            (§ when (ß nInts >= magLen)
                (§ return (signum >= 0) ? BigInteger'ZERO #_":" BigInteger'negConst[1])
            )

            (§ cond (ß nBits == 0)
                (§
                    (ß #_"int" newMagLen = magLen - nInts)
                    (ß newMag = Arrays.copyOf(mag, newMagLen))
                )
                :else
                (§
                    (ß #_"int" i = 0)
                    (ß #_"int" highBits = mag[0] >>> nBits)
                    (§ cond (ß highBits != 0)
                        (§
                            (ß newMag = new int[magLen - nInts])
                            (ß newMag[i++] = highBits)
                        )
                        :else
                        (§
                            (ß newMag = new int[magLen - nInts -1])
                        )
                    )

                    (ß #_"int" nBits2 = 32 - nBits)
                    (ß #_"int" j = 0)
                    (§ while (ß j < magLen - nInts - 1)
                        (ß newMag[i++] = (mag[j++] << nBits2) | (mag[j] >>> nBits))
                    )
                )
            )

            (§ when (ß signum < 0)
                ;; Find out whether any one-bits were shifted off the end.
                (ß #_"boolean" onesLost = false)
                (§ for [(ß #_"int" i = magLen - 1, j = magLen - nInts)] (ß i >= j && !onesLost) [(ß i--)]
                    (ß onesLost = (mag[i] != 0))
                )
                (§ when (ß !onesLost && nBits != 0)
                    (ß onesLost = (mag[magLen - nInts - 1] << (32 - nBits) != 0))
                )

                (§ when (ß onesLost)
                    (ß newMag = BigInteger''javaIncrement(this, newMag))
                )
            )

            (§ return BigInteger'new(newMag, signum))
        )
    )

    #_method
    (defn #_"int[]" BigInteger''javaIncrement [#_"BigInteger" this, #_"int[]" val]
        (§
            (ß #_"int" lastSum = 0)
            (§ for [(ß #_"int" i = val.length - 1)] (ß i >= 0 && lastSum == 0) [(ß i--)]
                (ß lastSum = (val[i] += 1))
            )
            (§ when (ß lastSum == 0)
                (ß val = new int[val.length + 1])
                (ß val[0] = 1)
            )
            (§ return val)
        )
    )

    ;; bitwise operations

    ;;;
     ; Returns a BigInteger whose value is {@code (this & val)}.
     ; (This method returns a negative BigInteger if and only if this and val are both negative.)
     ;
     ; @param val value to be AND'ed with this BigInteger.
     ; @return {@code this & val}
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''and [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (ß #_"int[]" result = new int[Math.max(BigInteger''intLength(this), BigInteger''intLength(val))])
            (§ for [(ß #_"int" i = 0)] (ß i < result.length) [(ß i++)]
                (ß result[i] = (BigInteger''getInt(this, result.length - i - 1) & BigInteger''getInt(val, result.length - i - 1)))
            )

            (§ return BigInteger'valueOf-i(result))
        )
    )

    ;;;
     ; Returns a BigInteger whose value is {@code (this | val)}.
     ; (This method returns a negative BigInteger if and only if either this or val is negative.)
     ;
     ; @param val value to be OR'ed with this BigInteger.
     ; @return {@code this | val}
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''or [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (ß #_"int[]" result = new int[Math.max(BigInteger''intLength(this), BigInteger''intLength(val))])
            (§ for [(ß #_"int" i = 0)] (ß i < result.length) [(ß i++)]
                (ß result[i] = (BigInteger''getInt(this, result.length - i - 1) | BigInteger''getInt(val, result.length - i - 1)))
            )

            (§ return BigInteger'valueOf-i(result))
        )
    )

    ;;;
     ; Returns a BigInteger whose value is {@code (this ^ val)}.
     ; (This method returns a negative BigInteger if and only if exactly one of this and val are negative.)
     ;
     ; @param val value to be XOR'ed with this BigInteger.
     ; @return {@code this ^ val}
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''xor [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (ß #_"int[]" result = new int[Math.max(BigInteger''intLength(this), BigInteger''intLength(val))])
            (§ for [(ß #_"int" i = 0)] (ß i < result.length) [(ß i++)]
                (ß result[i] = (BigInteger''getInt(this, result.length - i - 1) (§ bit-xor) BigInteger''getInt(val, result.length - i - 1)))
            )

            (§ return BigInteger'valueOf-i(result))
        )
    )

    ;;;
     ; Returns a BigInteger whose value is {@code (~this)}.
     ; (This method returns a negative value if and only if this BigInteger is non-negative.)
     ;
     ; @return {@code ~this}
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''not [#_"BigInteger" this]
        (§
            (ß #_"int[]" result = new int[this.BigInteger''intLength((§ pipe))])
            (§ for [(ß #_"int" i = 0)] (ß i < result.length) [(ß i++)]
                (ß result[i] = (§ bit-not)this.BigInteger''getInt((§ pipe), result.length - i - 1))
            )

            (§ return BigInteger'valueOf-i(result))
        )
    )

    ;;;
     ; Returns a BigInteger whose value is {@code (this & ~val)}.
     ; This method, which is equivalent to {@code and(val.not())}, is provided as a
     ; convenience for masking operations. (This method returns a negative BigInteger
     ; if and only if {@code this} is negative and {@code val} is positive.)
     ;
     ; @param val value to be complemented and AND'ed with this BigInteger.
     ; @return {@code this & ~val}
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''andNot [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (ß #_"int[]" result = new int[Math.max(BigInteger''intLength(this), BigInteger''intLength(val))])
            (§ for [(ß #_"int" i = 0)] (ß i < result.length) [(ß i++)]
                (ß result[i] = (BigInteger''getInt(this, result.length - i - 1) & (§ bit-not)val.BigInteger''getInt((§ pipe), result.length - i - 1)))
            )

            (§ return BigInteger'valueOf-i(result))
        )
    )

    ;; single bit operations

    ;;;
     ; Returns {@code true} if and only if the designated bit is set.
     ; (Computes {@code ((this & (1<<n)) != 0)}.)
     ;
     ; @param  n index of bit to test.
     ; @return {@code true} if and only if the designated bit is set.
     ; @throws ArithmeticException {@code n} is negative.
     ;;
    #_method
    (defn #_"boolean" BigInteger''testBit [#_"BigInteger" this, #_"int" n]
        (§
            (§ when (ß n < 0)
                (ß throw new ArithmeticException("Negative bit address"))
            )

            (§ return (BigInteger''getInt(this, n >>> 5) & (1 << (n & 31))) != 0)
        )
    )

    ;;;
     ; Returns a BigInteger whose value is equivalent to this BigInteger
     ; with the designated bit set. (Computes {@code (this | (1<<n))}.)
     ;
     ; @param  n index of bit to set.
     ; @return {@code this | (1<<n)}
     ; @throws ArithmeticException {@code n} is negative.
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''setBit [#_"BigInteger" this, #_"int" n]
        (§
            (§ when (ß n < 0)
                (ß throw new ArithmeticException("Negative bit address"))
            )

            (ß #_"int" intNum = n >>> 5)
            (ß #_"int[]" result = new int[Math.max(BigInteger''intLength(this), intNum + 2)])

            (§ for [(ß #_"int" i = 0)] (ß i < result.length) [(ß i++)]
                (ß result[result.length - i - 1] = BigInteger''getInt(this, i))
            )

            (ß result[result.length - intNum - 1] |= (1 << (n & 31)))

            (§ return BigInteger'valueOf-i(result))
        )
    )

    ;;;
     ; Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit cleared.
     ; (Computes {@code (this & ~(1<<n))}.)
     ;
     ; @param  n index of bit to clear.
     ; @return {@code this & ~(1<<n)}
     ; @throws ArithmeticException {@code n} is negative.
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''clearBit [#_"BigInteger" this, #_"int" n]
        (§
            (§ when (ß n < 0)
                (ß throw new ArithmeticException("Negative bit address"))
            )

            (ß #_"int" intNum = n >>> 5)
            (ß #_"int[]" result = new int[Math.max(BigInteger''intLength(this), ((n + 1) >>> 5) + 1)])

            (§ for [(ß #_"int" i = 0)] (ß i < result.length) [(ß i++)]
                (ß result[result.length - i - 1] = BigInteger''getInt(this, i))
            )

            (ß result[result.length - intNum - 1] &= (§ bit-not)(1 << (n & 31)))

            (§ return BigInteger'valueOf-i(result))
        )
    )

    ;;;
     ; Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit flipped.
     ; (Computes {@code (this ^ (1<<n))}.)
     ;
     ; @param  n index of bit to flip.
     ; @return {@code this ^ (1<<n)}
     ; @throws ArithmeticException {@code n} is negative.
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''flipBit [#_"BigInteger" this, #_"int" n]
        (§
            (§ when (ß n < 0)
                (ß throw new ArithmeticException("Negative bit address"))
            )

            (ß #_"int" intNum = n >>> 5)
            (ß #_"int[]" result = new int[Math.max(BigInteger''intLength(this), intNum + 2)])

            (§ for [(ß #_"int" i = 0)] (ß i < result.length) [(ß i++)]
                (ß result[result.length - i - 1] = BigInteger''getInt(this, i))
            )

            (ß result[result.length - intNum - 1] (§ bit-xor)= (1 << (n & 31)))

            (§ return BigInteger'valueOf-i(result))
        )
    )

    ;;;
     ; Returns the index of the rightmost (lowest-order) one bit in this
     ; BigInteger (the number of zero bits to the right of the rightmost
     ; one bit). Returns -1 if this BigInteger contains no one bits.
     ; (Computes {@code (this == 0? -1 : log2(this & -this))}.)
     ;
     ; @return index of the rightmost one bit in this BigInteger.
     ;;
    #_method
    (defn #_"int" BigInteger''getLowestSetBit [#_"BigInteger" this]
        (§
            (ß #_"int" lsb = lowestSetBit - 2)
            (§ when (ß lsb == -2) ;; lowestSetBit not initialized yet
                (ß lsb = 0)
                (§ cond (ß signum == 0)
                    (§
                        (ß lsb -= 1)
                    )
                    :else
                    (§
                        ;; search for lowest order nonzero int
                        (ß #_"int" i, b)
                        (§ for [(ß i = 0)] (ß (b = BigInteger''getInt(this, i)) == 0) [(ß i++)]
                        )
                        (ß lsb += (i << 5) + Integer.numberOfTrailingZeros(b))
                    )
                )
                (ß lowestSetBit = lsb + 2)
            )
            (§ return lsb)
        )
    )

    ;; miscellaneous bit operations

    ;;;
     ; Returns the number of bits in the minimal two's-complement
     ; representation of this BigInteger, <i>excluding</i> a sign bit.
     ; For positive BigIntegers, this is equivalent to the number of bits
     ; in the ordinary binary representation.
     ; (Computes {@code (ceil(log2(this < 0 ? -this : this + 1)))}.)
     ;
     ; @return number of bits in the minimal two's-complement representation
     ;         of this BigInteger, <i>excluding</i> a sign bit.
     ;;
    #_method
    (defn #_"int" BigInteger''bitLength [#_"BigInteger" this]
        (§
            (ß #_"int" n = bitLength - 1)
            (§ when (ß n == -1) ;; bitLength not initialized yet
                (ß #_"int[]" m = mag)
                (ß #_"int" len = m.length)
                (§ cond (ß len == 0)
                    (§
                        (ß n = 0) ;; offset by one to initialize
                    )
                    :else
                    (§
                        ;; calculate the bit length of the magnitude
                        (ß #_"int" magBitLength = ((len - 1) << 5) + BigInteger'bitLengthForInt(mag[0]))
                        (§ cond (ß signum < 0)
                            (§
                                ;; check if magnitude is a power of two
                                (ß #_"boolean" pow2 = (Integer.bitCount(mag[0]) == 1))
                                (§ for [(ß #_"int" i = 1)] (ß i < len && pow2) [(ß i++)]
                                    (ß pow2 = (mag[i] == 0))
                                )

                                (ß n = pow2 ? magBitLength - 1 #_":" magBitLength)
                            )
                            :else
                            (§
                                (ß n = magBitLength)
                            )
                        )
                    )
                )
                (ß bitLength = n + 1)
            )
            (§ return n)
        )
    )

    ;;;
     ; Returns the number of bits in the two's complement representation
     ; of this BigInteger that differ from its sign bit. This method is
     ; useful when implementing bit-vector style sets atop BigIntegers.
     ;
     ; @return number of bits in the two's complement representation
     ;         of this BigInteger that differ from its sign bit.
     ;;
    #_method
    (defn #_"int" BigInteger''bitCount [#_"BigInteger" this]
        (§
            (ß #_"int" bc = bitCount - 1)
            (§ when (ß bc == -1) ;; bitCount not initialized yet
                (ß bc = 0) ;; offset by one to initialize
                ;; count the bits in the magnitude
                (§ for [(ß #_"int" i = 0)] (ß i < mag.length) [(ß i++)]
                    (ß bc += Integer.bitCount(mag[i]))
                )
                (§ when (ß signum < 0)
                    ;; count the trailing zeros in the magnitude
                    (ß #_"int" magTrailingZeroCount = 0, j)
                    (§ for [(ß j = mag.length - 1)] (ß mag[j] == 0) [(ß j--)]
                        (ß magTrailingZeroCount += 32)
                    )
                    (ß magTrailingZeroCount += Integer.numberOfTrailingZeros(mag[j]))
                    (ß bc += magTrailingZeroCount - 1)
                )
                (ß bitCount = bc + 1)
            )
            (§ return bc)
        )
    )

    ;; primality testing

    ;;;
     ; Returns {@code true} if this BigInteger is probably prime,
     ; {@code false} if it's definitely composite.
     ; If {@code certainty} is <= 0, {@code true} is returned.
     ;
     ; @param  certainty a measure of the uncertainty that the caller is
     ;         willing to tolerate: if the call returns {@code true}
     ;         the probability that this BigInteger is prime exceeds
     ;         (1 - 1/2<sup>{@code certainty}</sup>). The execution time of
     ;         this method is proportional to the value of this parameter.
     ; @return {@code true} if this BigInteger is probably prime,
     ;         {@code false} if it's definitely composite.
     ;;
    #_method
    (defn #_"boolean" BigInteger''isProbablePrime [#_"BigInteger" this, #_"int" certainty]
        (§
            (§ when (ß certainty <= 0)
                (§ return true)
            )
            (ß #_"BigInteger" w = BigInteger''abs(this))
            (§ when (ß w.equals(BigInteger'TWO))
                (§ return true)
            )
            (§ when (ß !BigInteger''testBit(w, 0) || w.equals(BigInteger'ONE))
                (§ return false)
            )

            (§ return BigInteger''primeToCertainty(w, certainty, nil))
        )
    )

    ;; comparison operations

    ;;;
     ; Compares this BigInteger with the specified BigInteger.
     ; This method is provided in preference to individual methods for
     ; each of the six boolean comparison operators ({@literal <}, ==,
     ; {@literal >}, {@literal >=}, !=, {@literal <=}). The suggested
     ; idiom for performing these comparisons is: {@code
     ; (x.compareTo(y)} &lt;<i>op</i>&gt; {@code 0)}, where
     ; &lt;<i>op</i>&gt; is one of the six comparison operators.
     ;
     ; @param  val BigInteger to which this BigInteger is to be compared.
     ; @return -1, 0 or 1 as this BigInteger is numerically less than, equal
     ;         to, or greater than {@code val}.
     ;;
    #_foreign
    (defn #_"int" compareTo---BigInteger [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (§ when (ß signum == val.signum)
                (§ switch (ß signum)
                    (§ case (ß 1)
                        (§ return BigInteger''compareMagnitude-i(this, val))
                    )
                    (§ case (ß -1)
                        (§ return BigInteger''compareMagnitude-i(val, this))
                    )
                    (§ default
                        (§ return 0)
                    )
                )
            )
            (§ return (signum > val.signum) ? 1 #_":" -1)
        )
    )

    ;;;
     ; Compares the magnitude array of this BigInteger with the specified
     ; BigInteger's. This is the version of compareTo ignoring sign.
     ;
     ; @param val BigInteger whose magnitude array to be compared.
     ; @return -1, 0 or 1 as this magnitude array is less than, equal to or
     ;         greater than the magnitude aray for the specified BigInteger's.
     ;;
    #_method
    (defn #_"int" BigInteger''compareMagnitude-i [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (ß #_"int[]" m1 = mag)
            (ß #_"int" len1 = m1.length)
            (ß #_"int[]" m2 = val.mag)
            (ß #_"int" len2 = m2.length)
            (§ when (ß len1 < len2)
                (§ return -1)
            )
            (§ when (ß len1 > len2)
                (§ return 1)
            )
            (§ for [(ß #_"int" i = 0)] (ß i < len1) [(ß i++)]
                (ß #_"int" a = m1[i])
                (ß #_"int" b = m2[i])
                (§ when (ß a != b)
                    (§ return ((a & BigInteger'LONG_MASK) < (b & BigInteger'LONG_MASK)) ? -1 #_":" 1)
                )
            )
            (§ return 0)
        )
    )

    ;;;
     ; Version of compareMagnitude that compares magnitude with long value.
     ; val can't be Long.MIN_VALUE.
     ;;
    #_method
    (defn #_"int" BigInteger''compareMagnitude-l [#_"BigInteger" this, #_"long" val]
        (§
            (ß assert val != Long.MIN_VALUE)
            (ß #_"int[]" m1 = mag)
            (ß #_"int" len = m1.length)
            (§ when (ß len > 2)
                (§ return 1)
            )
            (§ when (ß val < 0)
                (ß val = -val)
            )
            (ß #_"int" highWord = (int)(val >>> 32))
            (§ cond (ß highWord == 0)
                (§
                    (§ when (ß len < 1)
                        (§ return -1)
                    )
                    (§ when (ß len > 1)
                        (§ return 1)
                    )
                    (ß #_"int" a = m1[0])
                    (ß #_"int" b = (int)val)
                    (§ when (ß a != b)
                        (§ return ((a & BigInteger'LONG_MASK) < (b & BigInteger'LONG_MASK)) ? -1 #_":" 1)
                    )
                    (§ return 0)
                )
                :else
                (§
                    (§ when (ß len < 2)
                        (§ return -1)
                    )
                    (ß #_"int" a = m1[0])
                    (ß #_"int" b = highWord)
                    (§ when (ß a != b)
                        (§ return ((a & BigInteger'LONG_MASK) < (b & BigInteger'LONG_MASK)) ? -1 #_":" 1)
                    )
                    (ß a = m1[1])
                    (ß b = (int)val)
                    (§ when (ß a != b)
                        (§ return ((a & BigInteger'LONG_MASK) < (b & BigInteger'LONG_MASK)) ? -1 #_":" 1)
                    )
                    (§ return 0)
                )
            )
        )
    )

    ;;;
     ; Compares this BigInteger with the specified Object for equality.
     ;
     ; @param  x Object to which this BigInteger is to be compared.
     ; @return {@code true} if and only if the specified Object is a
     ;         BigInteger whose value is numerically equal to this BigInteger.
     ;;
    #_foreign
    (defn #_"boolean" equals---BigInteger [#_"BigInteger" this, #_"Object" x]
        (§
            ;; this test is just an optimization, which may or may not help
            (§ when (ß x == this)
                (§ return true)
            )

            (§ when (ß !(x instanceof BigInteger))
                (§ return false)
            )

            (ß #_"BigInteger" xInt = (BigInteger) x)
            (§ when (ß xInt.signum != signum)
                (§ return false)
            )

            (ß #_"int[]" m = mag)
            (ß #_"int" len = m.length)
            (ß #_"int[]" xm = xInt.mag)
            (§ when (ß len != xm.length)
                (§ return false)
            )

            (§ for [(ß #_"int" i = 0)] (ß i < len) [(ß i++)]
                (§ when (ß xm[i] != m[i])
                    (§ return false)
                )
            )

            (§ return true)
        )
    )

    ;;;
     ; Returns the minimum of this BigInteger and {@code val}.
     ;
     ; @param  val value with which the minimum is to be computed.
     ; @return the BigInteger whose value is the lesser of this BigInteger and
     ;         {@code val}. If they are equal, either may be returned.
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''min [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (§ return (compareTo(val) < 0) ? this #_":" val)
        )
    )

    ;;;
     ; Returns the maximum of this BigInteger and {@code val}.
     ;
     ; @param  val value with which the maximum is to be computed.
     ; @return the BigInteger whose value is the greater of this and
     ;         {@code val}. If they are equal, either may be returned.
     ;;
    #_method
    (defn #_"BigInteger" BigInteger''max [#_"BigInteger" this, #_"BigInteger" val]
        (§
            (§ return (compareTo(val) > 0) ? this #_":" val)
        )
    )

    ;; hash function

    ;;;
     ; Returns the hash code for this BigInteger.
     ;
     ; @return hash code for this BigInteger.
     ;;
    #_foreign
    (defn #_"int" hashCode---BigInteger [#_"BigInteger" this]
        (§
            (ß #_"int" hashCode = 0)

            (§ for [(ß #_"int" i = 0)] (ß i < mag.length) [(ß i++)]
                (ß hashCode = (int)(31 * hashCode + (mag[i] & BigInteger'LONG_MASK)))
            )

            (§ return hashCode * signum)
        )
    )

    ;;;
     ; Returns the String representation of this BigInteger in the given radix.
     ; If the radix is outside the range from {@link Character#MIN_RADIX}
     ; to {@link Character#MAX_RADIX} inclusive, it will default to 10 (as is
     ; the case for {@code Integer.toString}). The digit-to-character mapping
     ; provided by {@code Character.forDigit} is used, and a minus
     ; sign is prepended if appropriate. (This representation is compatible with
     ; the {@link #BigInteger(String, int) (String, int)} constructor.)
     ;
     ; @param  radix  radix of the String representation.
     ; @return String representation of this BigInteger in the given radix.
     ;;
    #_method
    (defn #_"String" BigInteger''toString [#_"BigInteger" this, #_"int" radix]
        (§
            (§ when (ß signum == 0)
                (§ return "0")
            )
            (§ when (ß radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)
                (ß radix = 10)
            )

            ;; If it's small enough, use smallToString.
            (§ when (ß mag.length <= BigInteger'SCHOENHAGE_BASE_CONVERSION_THRESHOLD)
                (§ return BigInteger''smallToString(this, radix))
            )

            ;; Otherwise use recursive toString, which requires positive arguments.
            ;; The results will be concatenated into this StringBuilder.
            (ß #_"StringBuilder" sb = new StringBuilder())
            (§ cond (ß signum < 0)
                (§
                    (ß BigInteger'toString(BigInteger''negate(this), sb, radix, 0))
                    (ß sb.insert(0, (§ char "-")))
                )
                :else
                (§
                    (ß BigInteger'toString(this, sb, radix, 0))
                )
            )

            (§ return sb.toString())
        )
    )

    ;;;
     ; This method is used to perform toString when arguments are small.
     ;;
    #_method
    (defn- #_"String" BigInteger''smallToString [#_"BigInteger" this, #_"int" radix]
        (§
            (§ when (ß signum == 0)
                (§ return "0")
            )

            ;; compute upper bound on number of digit groups and allocate space
            (ß #_"int" maxNumDigitGroups = (4 * mag.length + 6) / 7)
            (ß #_"String[]" digitGroup = new String[maxNumDigitGroups])

            ;; translate number to string, a digit group at a time
            (ß #_"BigInteger" tmp = BigInteger''abs(this))
            (ß #_"int" numGroups = 0)
            (§ while (ß tmp.signum != 0)
                (ß #_"BigInteger" d = BigInteger'longRadix[radix])

                (ß #_"MutableBigInteger" q = MutableBigInteger'new())
                (ß #_"MutableBigInteger" a = MutableBigInteger'new(tmp.mag))
                (ß #_"MutableBigInteger" b = MutableBigInteger'new(d.mag))
                (ß #_"MutableBigInteger" r = MutableBigInteger''divide-3(a, b, q))
                (ß #_"BigInteger" q2 = MutableBigInteger''toBigInteger-2(q, tmp.signum * d.signum))
                (ß #_"BigInteger" r2 = MutableBigInteger''toBigInteger-2(r, tmp.signum * d.signum))

                (ß digitGroup[numGroups++] = Long.toString(r2.longValue(), radix))
                (ß tmp = q2)
            )

            ;; put sign (if any) and first digit group into result buffer
            (ß #_"StringBuilder" buf = new StringBuilder(numGroups * BigInteger'digitsPerLong[radix] + 1))
            (§ when (ß signum < 0)
                (ß buf.append((§ char "-")))
            )
            (ß buf.append(digitGroup[numGroups - 1]))

            ;; append remaining digit groups padded with leading zeros
            (§ for [(ß #_"int" i = numGroups - 2)] (ß i >= 0) [(ß i--)]
                ;; prepend (any) leading zeros for this digit group
                (ß #_"int" numLeadingZeros = BigInteger'digitsPerLong[radix] - digitGroup[i].length())
                (§ when (ß numLeadingZeros != 0)
                    (ß buf.append(BigInteger'zeros[numLeadingZeros]))
                )
                (ß buf.append(digitGroup[i]))
            )
            (§ return buf.toString())
        )
    )

    ;;;
     ; Converts the specified BigInteger to a string and appends to {@code sb}.
     ; This implements the recursive Schoenhage algorithm for base conversions.
     ;
     ; See Knuth, Donald, _The Art of Computer Programming_, Vol. 2,
     ; Answers to Exercises (4.4) Question 14.
     ;
     ; @param u      The number to convert to a string.
     ; @param sb     The StringBuilder that will be appended to in place.
     ; @param radix  The base to convert to.
     ; @param digits The minimum number of digits to pad to.
     ;;
    (defn- #_"void" BigInteger'toString [#_"BigInteger" u, #_"StringBuilder" sb, #_"int" radix, #_"int" digits]
        (§
            ;; If we're smaller than a certain threshold, use the smallToString method,
            ;; padding with leading zeroes when necessary.
            (§ when (ß u.mag.length <= BigInteger'SCHOENHAGE_BASE_CONVERSION_THRESHOLD)
                (ß #_"String" s = BigInteger''smallToString(u, radix))

                ;; Pad with internal zeros if necessary.
                ;; Don't pad if we're at the beginning of the string.
                (§ when (ß (s.length() < digits) && (sb.length() > 0))
                    (§ for [(ß #_"int" i = s.length())] (ß i < digits) [(ß i++)] ;; May be a faster way to do this?
                        (ß sb.append((§ char "0")))
                    )
                )

                (ß sb.append(s))
                (§ return nil)
            )

            (ß #_"int" b, n)
            (ß b = BigInteger''bitLength(u))

            ;; Calculate a value for n in the equation radix^(2^n) = u
            ;; and subtract 1 from that value. This is used to find the
            ;; cache index that contains the best value to divide u.
            (ß n = (int) Math.round(Math.log(b * BigInteger'LOG_TWO / BigInteger'logCache[radix]) / BigInteger'LOG_TWO - 1.0))
            (ß #_"BigInteger" v = BigInteger'getRadixConversionCache(radix, n))
            (ß #_"BigInteger[]" results)
            (ß results = BigInteger''divideAndRemainder(u, v))

            (ß #_"int" expectedDigits = 1 << n)

            ;; Now recursively build the two halves of each number.
            (ß BigInteger'toString(results[0], sb, radix, digits - expectedDigits))
            (ß BigInteger'toString(results[1], sb, radix, expectedDigits))
        )
        nil
    )

    ;;;
     ; Returns the value radix^(2^exponent) from the cache.
     ; If this value doesn't already exist in the cache, it is added.
     ;
     ; This could be changed to a more complicated caching method using {@code Future}.
     ;;
    (defn- #_"BigInteger" BigInteger'getRadixConversionCache [#_"int" radix, #_"int" exponent]
        (§
            (ß #_"BigInteger[]" cacheLine = BigInteger'powerCache[radix]) ;; volatile read
            (§ when (ß exponent < cacheLine.length)
                (§ return cacheLine[exponent])
            )

            (ß #_"int" oldLength = cacheLine.length)
            (ß cacheLine = Arrays.copyOf(cacheLine, exponent + 1))
            (§ for [(ß #_"int" i = oldLength)] (ß i <= exponent) [(ß i++)]
                (ß cacheLine[i] = BigInteger''pow(cacheLine[i - 1], 2))
            )

            (ß #_"BigInteger[][]" pc = BigInteger'powerCache) ;; volatile read again
            (§ when (ß exponent >= pc[radix].length)
                (ß pc = pc.clone())
                (ß pc[radix] = cacheLine)
                (ß BigInteger'powerCache = pc) ;; volatile write, publish
            )
            (§ return cacheLine[exponent])
        )
    )

    ;; zero[i] is a string of i consecutive zeros
    (def- #_"String[]" BigInteger'zeros (ß new String[64]))

    #_static
    (§
        (ß BigInteger'zeros[63] = "000000000000000000000000000000000000000000000000000000000000000")
        (§ for [(ß #_"int" i = 0)] (ß i < 63) [(ß i++)]
            (ß BigInteger'zeros[i] = BigInteger'zeros[63].substring(0, i))
        )
    )

    ;;;
     ; Returns the decimal String representation of this BigInteger.
     ; The digit-to-character mapping provided by {@code Character.forDigit}
     ; is used, and a minus sign is prepended if appropriate.
     ; (This representation is compatible with the {@link #BigInteger(String) (String)}
     ; constructor, and allows for String concatenation with Java's + operator.)
     ;
     ; @return decimal String representation of this BigInteger.
     ;;
    #_foreign
    (defn #_"String" toString---BigInteger [#_"BigInteger" this]
        (§
            (§ return BigInteger''toString(this, 10))
        )
    )

    ;;;
     ; Returns a byte array containing the two's-complement representation of this BigInteger.
     ; The byte array will be in <i>big-endian</i> byte-order: the most significant byte is in the
     ; zeroth element. The array will contain the minimum number of bytes required to represent this
     ; BigInteger, including at least one sign bit, which is {@code (ceil((this.bitLength() + 1)/8))}.
     ; (This representation is compatible with the {@link #BigInteger(byte[]) (byte[])} constructor.)
     ;
     ; @return a byte array containing the two's-complement representation of this BigInteger.
     ;;
    #_method
    (defn #_"byte[]" BigInteger''toByteArray [#_"BigInteger" this]
        (§
            (ß #_"int" byteLen = BigInteger''bitLength(this) / 8 + 1)
            (ß #_"byte[]" byteArray = new byte[byteLen])

            (§ for [(ß #_"int" i = byteLen - 1, bytesCopied = 4, nextInt = 0, intIndex = 0)] (ß i >= 0) [(ß i--)]
                (§ cond (ß bytesCopied == 4)
                    (§
                        (ß nextInt = BigInteger''getInt(this, intIndex++))
                        (ß bytesCopied = 1)
                    )
                    :else
                    (§
                        (ß nextInt >>>= 8)
                        (ß bytesCopied++)
                    )
                )
                (ß byteArray[i] = (byte)nextInt)
            )
            (§ return byteArray)
        )
    )

    ;;;
     ; Converts this BigInteger to an {@code int}.
     ; This conversion is analogous to a <i>narrowing primitive conversion</i>
     ; from {@code long} to {@code int} as defined in section 5.1.3 of
     ; <cite>The Java Language Specification</cite>: if this BigInteger
     ; is too big to fit in an {@code int}, only the low-order 32 bits are returned.
     ; Note that this conversion can lose information about the overall magnitude
     ; of the BigInteger value as well as return a result with the opposite sign.
     ;
     ; @return this BigInteger converted to an {@code int}.
     ;;
    #_foreign
    (defn #_"int" intValue---BigInteger [#_"BigInteger" this]
        (§
            (§ return BigInteger''getInt(this, 0))
        )
    )

    ;;;
     ; Converts this BigInteger to a {@code long}.
     ; This conversion is analogous to a <i>narrowing primitive conversion</i>
     ; from {@code long} to {@code int} as defined in section 5.1.3 of
     ; <cite>The Java Language Specification</cite>: if this BigInteger
     ; is too big to fit in a {@code long}, only the low-order 64 bits are returned.
     ; Note that this conversion can lose information about the overall magnitude
     ; of the BigInteger value as well as return a result with the opposite sign.
     ;
     ; @return this BigInteger converted to a {@code long}.
     ;;
    #_foreign
    (defn #_"long" longValue---BigInteger [#_"BigInteger" this]
        (§
            (ß #_"long" result = 0)

            (§ for [(ß #_"int" i = 1)] (ß i >= 0) [(ß i--)]
                (ß result = (result << 32) + (BigInteger''getInt(this, i) & BigInteger'LONG_MASK))
            )
            (§ return result)
        )
    )

    ;;;
     ; Returns a copy of the input array stripped of any leading zero bytes.
     ;;
    (defn- #_"int[]" BigInteger'stripLeadingZeroInts [#_"int[]" val]
        (§
            (ß #_"int" vlen = val.length)
            (ß #_"int" keep)

            ;; find first nonzero byte
            (§ for [(ß keep = 0)] (ß keep < vlen && val[keep] == 0) [(ß keep++)]
            )
            (§ return Arrays.copyOfRange(val, keep, vlen))
        )
    )

    ;;;
     ; Returns the input array stripped of any leading zero bytes.
     ; Since the source is trusted the copying may be skipped.
     ;;
    (defn- #_"int[]" BigInteger'trustedStripLeadingZeroInts [#_"int[]" val]
        (§
            (ß #_"int" vlen = val.length)
            (ß #_"int" keep)

            ;; find first nonzero byte
            (§ for [(ß keep = 0)] (ß keep < vlen && val[keep] == 0) [(ß keep++)]
            )
            (§ return (keep == 0) ? val #_":" Arrays.copyOfRange(val, keep, vlen))
        )
    )

    ;;;
     ; Returns a copy of the input array stripped of any leading zero bytes.
     ;;
    (defn- #_"int[]" BigInteger'stripLeadingZeroBytes [#_"byte[]" a]
        (§
            (ß #_"int" byteLength = a.length)
            (ß #_"int" keep)

            ;; find first nonzero byte
            (§ for [(ß keep = 0)] (ß keep < byteLength && a[keep] == 0) [(ß keep++)]
            )

            ;; allocate new array and copy relevant part of input array
            (ß #_"int" intLength = ((byteLength - keep) + 3) >>> 2)
            (ß #_"int[]" result = new int[intLength])
            (ß #_"int" b = byteLength - 1)
            (§ for [(ß #_"int" i = intLength - 1)] (ß i >= 0) [(ß i--)]
                (ß result[i] = a[b--] & 0xff)
                (ß #_"int" bytesRemaining = b - keep + 1)
                (ß #_"int" bytesToTransfer = Math.min(3, bytesRemaining))
                (§ for [(ß #_"int" j = 8)] (ß j <= (bytesToTransfer << 3)) [(ß j += 8)]
                    (ß result[i] |= ((a[b--] & 0xff) << j))
                )
            )
            (§ return result)
        )
    )

    ;;;
     ; Takes an array a representing a negative 2's-complement number and
     ; returns the minimal (no leading zero bytes) unsigned whose value is -a.
     ;;
    (defn- #_"int[]" BigInteger'makePositive-b [#_"byte[]" a]
        (§
            (ß #_"int" keep, k)
            (ß #_"int" byteLength = a.length)

            ;; find first non-sign (0xff) byte of input
            (§ for [(ß keep = 0)] (ß keep < byteLength && a[keep] == -1) [(ß keep++)]
            )

            ;; Allocate output array. If all non-sign bytes are 0x00,
            ;; we must allocate space for one extra output byte.
            (§ for [(ß k = keep)] (ß k < byteLength && a[k] == 0) [(ß k++)]
            )

            (ß #_"int" extraByte = (k == byteLength) ? 1 #_":" 0)
            (ß #_"int" intLength = ((byteLength - keep + extraByte) + 3) >>> 2)
            (ß #_"int[]" result = new int[intLength])

            ;; copy one's complement of input into output,
            ;; leaving extra byte (if it exists) == 0x00
            (ß #_"int" b = byteLength - 1)
            (§ for [(ß #_"int" i = intLength - 1)] (ß i >= 0) [(ß i--)]
                (ß result[i] = a[b--] & 0xff)
                (ß #_"int" numBytesToTransfer = Math.min(3, b - keep + 1))
                (§ when (ß numBytesToTransfer < 0)
                    (ß numBytesToTransfer = 0)
                )
                (§ for [(ß #_"int" j = 8)] (ß j <= 8 * numBytesToTransfer) [(ß j += 8)]
                    (ß result[i] |= ((a[b--] & 0xff) << j))
                )

                ;; mask indicates which bits must be complemented
                (ß #_"int" mask = -1 >>> (8 * (3 - numBytesToTransfer)))
                (ß result[i] = (§ bit-not)result[i] & mask)
            )

            ;; add one to one's complement to generate two's complement
            (§ for [(ß #_"int" i = result.length - 1)] (ß i >= 0) [(ß i--)]
                (ß result[i] = (int)((result[i] & BigInteger'LONG_MASK) + 1))
                (§ when (ß result[i] != 0)
                    (ß break)
                )
            )

            (§ return result)
        )
    )

    ;;;
     ; Takes an array a representing a negative 2's-complement number and
     ; returns the minimal (no leading zero ints) unsigned whose value is -a.
     ;;
    (defn- #_"int[]" BigInteger'makePositive-i [#_"int[]" a]
        (§
            (ß #_"int" keep, j)

            ;; find first non-sign (0xffffffff) int of input
            (§ for [(ß keep = 0)] (ß keep < a.length && a[keep] == -1) [(ß keep++)]
            )

            ;; Allocate output array. If all non-sign ints are 0x00,
            ;; we must allocate space for one extra output int.
            (§ for [(ß j = keep)] (ß j < a.length && a[j] == 0) [(ß j++)]
            )
            (ß #_"int" extraInt = (j == a.length) ? 1 #_":" 0)
            (ß #_"int[]" result = new int[a.length - keep + extraInt])

            ;; copy one's complement of input into output,
            ;; leaving extra int (if it exists) == 0x00
            (§ for [(ß #_"int" i = keep)] (ß i < a.length) [(ß i++)]
                (ß result[i - keep + extraInt] = (§ bit-not)a[i])
            )

            ;; add one to one's complement to generate two's complement
            (§ for [(ß #_"int" i = result.length - 1)] (ß ++result[i] == 0) [(ß i--)]
            )

            (§ return result)
        )
    )

    ;;
     ; The following two arrays are used for fast String conversions. Both
     ; are indexed by radix. The first is the number of digits of the given
     ; radix that can fit in a Java long without "going negative", i.e., the
     ; highest integer n such that radix**n < 2**63. The second is the
     ; "long radix" that tears each number into "long digits", each of which
     ; consists of the number of digits in the corresponding element in
     ; digitsPerLong (longRadix[i] = i**digitPerLong[i]). Both arrays have
     ; nonsense values in their 0 and 1 elements, as radixes 0 and 1 are not
     ; used.
     ;;
    (def- #_"int[]" BigInteger'digitsPerLong
        (§
            0, 0,
            62, 39, 31, 27, 24, 22, 20, 19, 18, 18, 17, 17, 16, 16, 15, 15, 15, 14,
            14, 14, 14, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12
        )
    )

    (def- #_"BigInteger[]" BigInteger'longRadix
        (§
            nil, nil,
            BigInteger'valueOf-l(0x4000000000000000), BigInteger'valueOf-l(0x383d9170b85ff80b),
            BigInteger'valueOf-l(0x4000000000000000), BigInteger'valueOf-l(0x6765c793fa10079d),
            BigInteger'valueOf-l(0x41c21cb8e1000000), BigInteger'valueOf-l(0x3642798750226111),
            BigInteger'valueOf-l(0x1000000000000000), BigInteger'valueOf-l(0x12bf307ae81ffd59),
            BigInteger'valueOf-l(0x0de0b6b3a7640000), BigInteger'valueOf-l(0x4d28cb56c33fa539),
            BigInteger'valueOf-l(0x1eca170c00000000), BigInteger'valueOf-l(0x780c7372621bd74d),
            BigInteger'valueOf-l(0x1e39a5057d810000), BigInteger'valueOf-l(0x5b27ac993df97701),
            BigInteger'valueOf-l(0x1000000000000000), BigInteger'valueOf-l(0x27b95e997e21d9f1),
            BigInteger'valueOf-l(0x5da0e1e53c5c8000), BigInteger'valueOf-l(0x0b16a458ef403f19),
            BigInteger'valueOf-l(0x16bcc41e90000000), BigInteger'valueOf-l(0x2d04b7fdd9c0ef49),
            BigInteger'valueOf-l(0x5658597bcaa24000), BigInteger'valueOf-l(0x06feb266931a75b7),
            BigInteger'valueOf-l(0x0c29e98000000000), BigInteger'valueOf-l(0x14adf4b7320334b9),
            BigInteger'valueOf-l(0x226ed36478bfa000), BigInteger'valueOf-l(0x383d9170b85ff80b),
            BigInteger'valueOf-l(0x5a3c23e39c000000), BigInteger'valueOf-l(0x04e900abb53e6b71),
            BigInteger'valueOf-l(0x07600ec618141000), BigInteger'valueOf-l(0x0aee5720ee830681),
            BigInteger'valueOf-l(0x1000000000000000), BigInteger'valueOf-l(0x172588ad4f5f0981),
            BigInteger'valueOf-l(0x211e44f7d02c1000), BigInteger'valueOf-l(0x2ee56725f06e5c71),
            BigInteger'valueOf-l(0x41c21cb8e1000000)
        )
    )

    ;;
     ; These two arrays are the integer analogue of above.
     ;;
    (def- #_"int[]" BigInteger'digitsPerInt
        (§
            0, 0, 30, 19, 15, 13, 11, 11, 10, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5
        )
    )

    (def- #_"int[]" BigInteger'intRadix
        (§
            0, 0,
            0x40000000, 0x4546b3db, 0x40000000, 0x48c27395, 0x159fd800,
            0x75db9c97, 0x40000000, 0x17179149, 0x3b9aca00, 0x0cc6db61,
            0x19a10000, 0x309f1021, 0x57f6c100, 0x0a2f1b6f, 0x10000000,
            0x18754571, 0x247dbc80, 0x3547667b, 0x4c4b4000, 0x6b5a6e1d,
            0x06c20a40, 0x08d2d931, 0x0b640000, 0x0e8d4a51, 0x1269ae40,
            0x17179149, 0x1cb91000, 0x23744899, 0x2b73a840, 0x34e63b41,
            0x40000000, 0x4cfa3cc1, 0x5c13d840, 0x6d91b519, 0x039aa400
        )
    )

    ;;;
     ; These routines provide access to the two's complement representation of BigIntegers.
     ;;

    ;;;
     ; Returns the length of the two's complement representation in ints,
     ; including space for at least one sign bit.
     ;;
    #_method
    (defn- #_"int" BigInteger''intLength [#_"BigInteger" this]
        (§
            (§ return (BigInteger''bitLength(this) >>> 5) + 1)
        )
    )

    ;;; Returns sign bit.
    #_method
    (defn- #_"int" BigInteger''signBit [#_"BigInteger" this]
        (§
            (§ return (signum < 0) ? 1 #_":" 0)
        )
    )

    ;;; Returns an int of sign bits.
    #_method
    (defn- #_"int" BigInteger''signInt [#_"BigInteger" this]
        (§
            (§ return (signum < 0) ? -1 #_":" 0)
        )
    )

    ;;;
     ; Returns the specified int of the little-endian two's complement representation
     ; (int 0 is the least significant). The int number can be arbitrarily high
     ; (values are logically preceded by infinitely many sign ints).
     ;;
    #_method
    (defn- #_"int" BigInteger''getInt [#_"BigInteger" this, #_"int" n]
        (§
            (§ when (ß n < 0)
                (§ return 0)
            )
            (§ when (ß n >= mag.length)
                (§ return BigInteger''signInt(this))
            )

            (ß #_"int" magInt = mag[mag.length - n - 1])

            (§ return (signum >= 0) ? magInt #_":" (n <= BigInteger''firstNonzeroIntNum(this)) ? -magInt #_":" (§ bit-not)magInt)
        )
    )

    ;;;
     ; Returns the index of the int that contains the first nonzero int in the
     ; little-endian binary representation of the magnitude (int 0 is the
     ; least significant). If the magnitude is zero, return value is undefined.
     ;;
    #_method
    (defn- #_"int" BigInteger''firstNonzeroIntNum [#_"BigInteger" this]
        (§
            (ß #_"int" fn = firstNonzeroIntNum - 2)
            (§ when (ß fn == -2) ;; firstNonzeroIntNum not initialized yet
                (ß fn = 0)

                ;; search for the first nonzero int
                (ß #_"int" i)
                (ß #_"int" mlen = mag.length)
                (§ for [(ß i = mlen - 1)] (ß i >= 0 && mag[i] == 0) [(ß i--)]
                )
                (ß fn = mlen - i - 1)
                (ß firstNonzeroIntNum = fn + 2) ;; offset by two to initialize
            )
            (§ return fn)
        )
    )

    #_foreign
    (defn #_"float" floatValue---BigInteger [#_"BigInteger" this]
        (§
            (ß throw new UnsupportedOperationException("sorry, no floating loathing for now"))
        )
    )

    #_foreign
    (defn #_"double" doubleValue---BigInteger [#_"BigInteger" this]
        (§
            (ß throw new UnsupportedOperationException("sorry, no double bubble for now"))
        )
    )
)
)
